CREATE OR REPLACE PACKAGE user_ipesp.PAC_FOLHA_CALCULADA_NOVO_HCAL is
  -- Author      : FGV- ATLANTIC (JTS)
  -- Created     : 1/01/2009 - ACT: 31-11-2011
  -- Atualizac?o : 15/08/2014
  -- Purpose     : Processamento da folha calculada
  -- Versão de Homologação 18-10-2018
  ------------------------------------------------------------
  -- Alteracao : 15/08/2014 -  JTS - Controle de CIP
  ------------------------------------------------------------
  -- Alterac?o : 02/jun/2009 - ROD2 - Processamento por grupos
  ------------------------------------------------------------
  -- Alterac?o : 05/06/2009 - ROD3 - Correc?o de calculo proporcional
  ----------------------------------------------------------------------
  -- Alteracao : 05/06/2009 - MRS0 - Inclusao do cargo para verif o excesso qdo poder = 3 executar idem ao poder 1
  -------------------------------------------------------------------------------------------------------------------
  -- Alteracao : 09/06/2009 - MRS1 - Altera o armaz da rubrica no array de round para trunc conforme definicao da area de negocios
  ----------------------------------------------------------------------------------------------------------------------------------
  -- Alteracao : 09/06/2009 - ROD4 - Alterado IF para retirar cod 02 a pedido de Paulo pois estava causando erro no calculo militar
  ----------------------------------------------------------------------------------------------------------------------------------
  -- Alteracao : 11/06/2009 - MVL1 - Alterado para calcular excesso individual pela data da lei EC41
  ----------------------------------------------------------------------------------------------------------------------------------
  -- Alterac?o : 12/06/2009 = ROD6 - Alterac?es para novo processamento por grupos e grupos de pagamento
  ----------------------------------------------------------------------------------------------------------------------------------
  -- Alterac?o : 26/06/2009 = MVL2 - Alterac?es para tratar excesso desconto do teto
  ----------------------------------------------------------------------------------------------------------------
  -- Alterac?o : 01/07/2009 = MVL3 - Alterac?es obter a sequencia da tabela formula de calculo no cursor
  --                               - corrigir o contador da sequencia do detalhe na gerac?o do index da rubrica agrupada
  ----------------------------------------------------------------------------------------------------------------
  -- Alterac?o : 06/07/2009 = MVL4 - Ajuste no calculo do Teto no caso de dois beneficios com tetos diferentes
  --                               - utilizar o teto maior.
  ----------------------------------------------------------------------------------------------------------------
  -- Alterac?o : 07/07/2009 = ROD8 - Correc?o do calculo de teto para que verifique o teto para cada beneficio
  --                                 e utilize o teto maior
  --                                 Foi inclida variavel : PAR_NUM_SEQ_PROC em gravac?es de tb_processamento e tb_controle_processamento
  ----------------------------------------------------------------------------------------------------------------
  -- Alterac?o : 13/07/2009 = MVL5 - Ajuste no calculo do correc?o para funcionalidade de gravac?o da rubrica.
  ----------------------------------------------------------------------------------------------------------------
  -- Alterac?o : 14/07/2009 = MVL6 - Inclus?o da Funcionalidade para Isenc?o do Redutor
  ----------------------------------------------------------------------------------------------------------------
  -- Alterac?o : 21/07/2009 = MVL7 - Inclusao da data de referencia na composicao individual
  ----------------------------------------------------------------------------------------------------------------
  -- Alterac?o : 24/07/2009 = MVL8 - Correc?o Tratamento Pens?o alimenticia
  ----------------------------------------------------------------------------------------------------------------
  -- Alterac?o : 28/07/2009 = MVL9 - Inclus?o da funcionalidade do teto para antecipacao
  ----------------------------------------------------------------------------------------------------------------
  -- Alterac?o : 02/08/2009 = ROD11 - Alterac?o para corrigir erro de divis?o por zero pois VI_PERCENTUAL_RATEIO estava zero
  ----------------------------------------------------------------------------------------------------------------
  -- Alterac?o : 05/08/2009 = ROD12 - Alterac?o para calculo proporcional de adiantamento de 13o para novos benefs
  --                                  Calcula Proporcionalidade inicial do adiantamento de 13o
  ----------------------------------------------------------------------------------------------------------------
  -- Correc?o : 18/08/2009 = ROD16 - Corrige o valor cheio que n?o estava truncado e ultrapassava no caso de tetos aplicados
  ----------------------------------------------------------------------------------------------------------------
  -- Alterac?o : 09/09/2009 = ROD18 - Cria campo na tb_folha e calcula com a margem de consignac?o - MARGEN_CONSIG
  ----------------------------------------------------------------------------------------------------------------
  -- Alterac?o : 29/09/2009 = ROD19 - Alterac?o para calcular previdencia diferenciada para casos que possuam rubrica 7060600
  ----------------------------------------------------------------------------------------------------------------
  -- Alterac?o : 28/12/2009 = ROD20 - Alterac?es para rodar Aposentados
  ----------------------------------------------------------------------------------------------------------------
  -- Alterac?o : 16/03/2010 = ROD21 - Alterac?es para fazer processamento Suplementar pegar retroativos gerados
  ----------------------------------------------------------------------------------------------------------------
  ----------------------------------------------------------------------------------------------------------------
  -- Alterac?o : 12/04/2010 = ROD24 - Alterac?es para fazer processamento
  ----------------------------------------------------------------------------------------------------------------
 ----------------------------------------------------------------------------------------------------------------
  -- Alterac?o : 16/04/2010 = ROD25 - Alterac?es para fazer processamento
  ----------------------------------------------------------------------------------------------------------------
 ----------------------------------------------------------------------------------------------------------------
  -- Alterac?o : 05/09/2011 = JTS - Alterac?es para incluir data de referencia ce consignac?es
  ----------------------------------------------------------------------------------------------------------------
 ----------------------------------------------------------------------------------------------------------------
  -- Alterac?o : 11/08/2015 = JTS - Nova Func?es 534-535-536
  ----------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------
  -- Alteracao : 11/09/2015 = JTS - Incluir Base calculo do Redutor TASK 3359
  ----------------------------------------------------------------------------------------------------------------




  -- VARIAVEIS DE ENTRADA
  PAR_COD_INS                number(8);
  PAR_COD_GRP                number(8); --ROD2
  PAR_PER_PRO                date;
  PAR_COD_USU                varchar2(20);
  PAR_TIP_TRA                char;
  PAR_TIP_PRO                char;
  PAR_NUM_CPF                TB_PESSOA_FISICA.NUM_CPF%TYPE;
  PAR_ERR                    number(8);
  PAR_MEN                    varchar2(200);
  PAR_PER_NUM                number(3);
  PAR_COD_PAR                varchar2(25);
  PAR_PARTIR_DE              varchar2(1);
  PAR_PER_REAL               date;
  PAR_DATA_PRIMEIRO          date;
  PAR_COD_TIPO_BEN           varchar2(6);
  PAR_GRP_PAG                number;
  PAR_IDE_CLI                TB_PESSOA_FISICA.COD_IDE_CLI%TYPE;
  PAR_COD_CATEGORIA          number(8);
  PAR_COD_CARGO              number(8);
  PAR_COD_ENTIDADE           number(8);
  PAR_NOM_BENEF              TB_TIPOS_BENEFICIOS.NOM_TIPO_BENEF_CC%TYPE;
  PAR_PERCENT_CORRECAO       NUMBER(14, 5);
  PAR_IND_PROC_ENQUADRAMENTO NUMBER;
  PAR_NUM_PROCESSO           TB_CONTROLE_PROCESSAMENTO.NUM_PROCESSO%TYPE; --ROD6
  PAR_NUM_GRP_PAG            TB_CONTROLE_PROCESSAMENTO.NUM_GRP_PAG%TYPE; --ROD7
  PAR_NUM_SEQ_PROC           TB_CONTROLE_PROCESSAMENTO.SEQ_PROCESSAMENTO%TYPE; --ROD10
  PAR_SEQ_PAGAMENTO          NUMBER(1);
  -- VARIAVEIS PARA O BENEFICIADO
  BEN_IDE_CLI               VARCHAR2(20);
  BEN_IDE_CLI_SERV          VARCHAR2(20);
  BEN_IDE_REL_FUNC          tb_concessao_beneficio.cod_ide_rel_func%type;
  BEN_NUM_CPF               VARCHAR2(11);
  BEN_NOME                  VARCHAR2(80);
  BEN_SEQ_BENEF             tb_beneficiario.num_seq_benef%type;
  BEN_DTA_NASC              DATE;
  BEN_TIPO_PESSOA           CHAR(1);
  BEN_DAT_INICIO            DATE;
  BEN_DAT_FIM               DATE;
  BEN_COD_REFERENCIA        NUMBER(8);
  BEN_FLG_STATUS            CHAR(1); ----> FFRANCO 03/2007
  BEN_COD_TIPO_CALCULO      VARCHAR2(1);
  BEN_FLG_OPCAO_13          VARCHAR2(1);
  BEN_FLG_OPCAO_IAMSP       VARCHAR2(1);
  BEN_DISSOCIACAO           NUMBER;
  COD_BEN_DISSOCIACAO       NUMBER;
  BEN_ENVIO_CORREIO         CHAR(1);
  ---------------------------------
  --  ALT JTS 24

   COM_REFERENCIA_2 NUMBER(8);
   COM_REFERENCIA_3 NUMBER(8);
   COM_JORNADA_2    VARCHAR2(10);
   COM_JORNADA_3    VARCHAR2(10);
   COM_QTD_MES_2    VARCHAR2(10);
   COM_QTD_MES_3    NUMBER(8);
   COM_QTD_MES      NUMBER(8);


  ---- ALT JTS-25

    LCOMPOE_DET       TB_COMPOE_DET%ROWTYPE;           --- Linha de Tipo Compoe DET
    type COMPOE_DET is table of TB_COMPOE_DET%ROWTYPE; --- TABELA EM MEMRIA DE TIPO TB_COMPOE_DET
    vCOMPOE_DET        COMPOE_DET :=COMPOE_DET();
    idx_COMPOE_DET     number(3);

 ---------------------------------------

  -- VARIAVEIS PARA AS COMPOSIC?ES
  COM_COD_BENEFICIO        NUMBER(8) := 0;
  COM_TIP_BENEFICIO        VARCHAR2(20);
  COM_COD_RUBRICA          NUMBER(8);
  COM_COD_FCRUBRICA        NUMBER(8);
  COM_SEQ_VIG_FC           NUMBER(8);
  COM_NAT_COMP             CHAR(1);
  COM_NUM_ORD_JUD          NUMBER(8);
  COM_IDE_CLI_INSTITUIDOR  VARCHAR2(20);
  COM_VAL_FIXO_IND         NUMBER(18, 4);
  COM_VAL_PORC_IND         NUMBER(18, 5);
  COM_VAL_PORC2            NUMBER(18, 5);
  COM_QTY_UNID_IND         NUMBER(18, 4);
  COM_VAL_UNID             NUMBER(8);
  COM_TIPO_VALOR           CHAR(1);
  COM_IND_QTAS             CHAR(1);
  COM_NUM_QTAS_PAG         NUMBER(8);
  COM_TOT_QTAS_PAG         NUMBER(8);
  COM_IND_COMP_RUB         CHAR(1);
  COM_NAT_RUB              CHAR(1);
  COM_INI_REF              DATE;
  COM_FIM_REF              DATE;
  COM_PRIORIDADE           NUMBER(8);
  COM_DED_IR               CHAR(1);
  COM_NUM_FUNCAO           NUMBER;
  COM_FLG_PROCESSA         CHAR(1);
  COM_NAT_VAL              CHAR(1);
  COM_TIPO_APLICACAO       CHAR(1);
  COM_PERCENT_BEN          NUMBER(18, 5);
  COM_TIPO_EVENTO_ESPECIAL VARCHAR2(2);
  COM_VAL_STR1             VARCHAR2(30);
  COM_VAL_STR2             VARCHAR2(30);
  COM_MATRICULA            VARCHAR2(20);
  COM_ENTIDADE             NUMBER(8);
  COM_CARGO                tb_cargo.cod_cargo%type;
  COM_CARGO_LEIDO          tb_cargo.cod_cargo%type;
  COM_CARGO_APOS           NUMBER(8);
  COM_PCCS                 NUMBER(8);
  COM_QUADRO               tb_evolucao_funcional_ben.cod_quadro%type;
  COM_OPCAO                tb_evolucao_funcional_ben.ind_opcao%type;
  COM_COD_JORNADA          VARCHAR2(10);
  COM_DAT_INI_VIG          DATE;
  COM_DAT_FIM_VIG          DATE;
  COM_COD_VINCULO          NUMBER(8);
  COM_COD_REGIME_JUR       NUMBER(8);
  COM_TIP_PROVIMENTO       VARCHAR2(5);
  COM_COD_JORNADA_REL      VARCHAR2(10);
  COM_COD_ENTIDADE         NUMBER(8);
  COM_NUM_MATRICULA        VARCHAR2(20);
  COM_COD_IDE_CLI_BEN      VARCHAR2(20);
  COM_MSC_INFORMACAO       VARCHAR2(10);
  COM_COL_INFORMACAO       VARCHAR2(25);
  COM_PORC_VIG             NUMBER(18, 5);
  COM_DAT_VIG_RUBRICA      tb_rubricas.dat_fim_vig%TYPE;
  COM_APLICA_RATEIO        CHAR(1);
  COM_SEQ_VIG              NUMBER(8);
  COM_VAL_RUBRICA_CHEIO    NUMBER(18, 4);
  COM_COD_SIT_PREV         VARCHAR2(5);
  COM_IND_CALCULO          VARCHAR2(1); -- Indicador para correc?o indice ordem judicial
  COM_DAT_CONTRATO         DATE;
  COM_COD_PODER            VARCHAR2(1); -- CODIGO PARA CALCULO DO REDUTOR
  COM_COD_CONVENIO         NUMBER(8);

  COM_NUM_CARGA              NUMBER;
  COM_NUM_SEQ_CONTROLE_CARGA NUMBER;
  COM_NUM_GRUPO_PAG          CHAR(2);
  COM_RUBRICA_TIPO           CHAR(1);
 --- Variaveis para dissociac?o de calculo
  COM_DISSOCIACAO             NUMBER;
  COM_TIPO_DISSOCIACAO        NUMBER;
  COM_COD_ENVIO_CORREIO       CHAR(1);
  -- parametro para data de suspensao
  NUM_DIAS_PRAZO   NUMBER;
  DAT_PRZ_SUSPENSO DATE  ;
  COM_FLG_STATUS   CHAR(1);
  -- PARAMETRO NOVO
    COM_COD_CONCEITO           NUMBER;
    COM_COD_FUNCAO             NUMBER ;
  -- Categoria e SubCategoria - funcoes 3 e 4

  NOM_CATEGORIA    VARCHAR2(50);
  NOM_SUBCATEGORIA VARCHAR2(50);

  -- Tipo provimento, Regime Ju, Vinculo, funcoes 8, 1 e 2

  NOM_TIPO_PROVIMENTO VARCHAR2(50);
  NOM_REGIME_JUR      VARCHAR2(50);
  NOM_VINCULO         VARCHAR2(50);

  ANT_IDE_CLI         VARCHAR2(20);
  ANT_FLG_STATUS      CHAR(1);
  PREV_IDE_CLI        VARCHAR2(20);
  ANT_COD_BENEFICIO   NUMBER(8) := 0;
  ANT_DTA_NASC        DATE := null;
  ANT_COD_IDE_CLI_BEN VARCHAR2(20);
  ANT_MATRICULA       NUMBER;
  ANT_ENTIDADE        NUMBER;
  ANT_CARGO           NUMBER;
  ANT_DAT_INI_BEN     DATE := null;
  ANT_TIP_BENEFICIO   VARCHAR2(20);
  ANT_NUM_GRUPO_PAG   CHAR(2);
  ANT_BEN_DISSOCIACAO NUMBER;
  -- TT48091 -- DISSOCIAR TAMBEM QUANDO HA MAIS DE UM BENEFÍCIO DE PENSAO PARA O MESMO IDE_CLI_BEN
  -- LJUNIOR EM 18/07/2018
  ANT_COD_BEN_DISSOCIACAO NUMBER;
  ANT_NUM_CPF VARCHAR2(11);
  ANT_NOME    VARCHAR2(80);

  ---- VARIAVEL DE CORREIO ---
  ANT_BEN_ENVIO_CORREIO CHAR(1);

  -- Militar
  NUM_DEP_IR_MIL NUMBER := 0;
  vs_militar     char(1) := null;

  desc_prev number(18, 4) := 0;
  --Desconto de Excesso de teto
  desc_teto     number(18, 4) := 0;
  v_val_externo number(18, 4) := 0;

  -- Variaveis para o processamento  -----------------
  ---- Variavel para Controle de IR Recidente Exterior

   VI_IR_EXTERIOR          BOOLEAN;

  -----------------------------------------------
  -- Variavel para controle de consignataria CIP
  ----------------------------------------------
  V_ISMAX_2                NUMBER(8, 4) := 0;
  COM_FLG_MODALIDADE       VARCHAR(1);
  COM_FLG_DESC_PARCIAL     VARCHAR(1);

  -----------------------------------------------------
  ------ Complemento TASK 29904 -----------------------
  V_ISMAX_3                NUMBER(8, 4) := 0;
  DAT_CONSIG               DATE         :=NULL;
  -----------------------------------------------------
  ------ Complemento TASK 30993  -----------------------
  V_ISMAX_5                NUMBER(8, 4) := 0;
 --------------------------------------------------------

  V_INST_PREV              NUMBER := 0;
  v_ide_cli                varchar2(20) := null;
  VI_SUPLEMENTAR           BOOLEAN;
  V_DED_IR_65              NUMBER(18, 4);
  V_DED_IR_DEP             NUMBER(18, 4);
  APLICAR_PROP_BEN         BOOLEAN;
  APLICAR_PROP_SAIDA       BOOLEAN;
  APLICAR_ENTRADA          BOOLEAN;
  APLICAR_RATEIO_BENEFICIO BOOLEAN;
  APLICAR_DEC_TERCEIRO     BOOLEAN;
  HOUVE_RATEIO             BOOLEAN;
  VI_DOENCA                BOOLEAN;
  VI_ORD_JUD               BOOLEAN;
  VI_PAGAR                 BOOLEAN;
  VI_PROP_SAIDA            NUMBER(18, 6);
  VI_PROP_BEN              NUMBER(18, 4);
  VI_PERC_PECUNIA          NUMBER(18, 5);
  VI_PROP_COMPOSICAO       NUMBER(18, 4);
  VI_FATOR_DIAS            NUMBER(18, 4);
  VI_FATOR_MES             NUMBER(18, 4); --efv para retroativo
  VI_FATOR_REAL            NUMBER(18, 4); --MVL
  VI_FATOR_DIAS_RET        NUMBER(18, 4);
  VI_FATOR_DIAS_SAIDA      NUMBER(18, 4) := 0;
  QTD_MESES_13             NUMBER;
  MON_CALCULO              NUMBER(18, 4);
  V_VAL_SAL_MIN            NUMBER(18, 4);
  V_VAL_SAL_MIN_2          NUMBER(18, 4);
  FAIXA1_SF                NUMBER(18, 4);
  VAL1SF                   NUMBER(18, 4);
  FAIXA2_SF                NUMBER(18, 4);
  VAL2SF                   NUMBER(18, 4);
  VI_NUM_DEP_ECO           NUMBER;
  VI_TEM_SAIDA             BOOLEAN;
  V_VAL_IR                 NUMBER(18, 4);
  VI_BASE_IR               NUMBER(18, 4);
  VI_BASE_PREV             NUMBER(18, 4); -- FFRANCO 03/2007
  VI_BASE_BRUTA            NUMBER(18, 4);
  VI_BASE_BRUTA_13         NUMBER(18, 4);
  VI_VAL_BASE_13           NUMBER(18, 4);
  V_VAL_13                 NUMBER(18, 4);
  V_VAL_IR_13              NUMBER(18, 4);
  VI_PROP_13               NUMBER(18, 4);
  VI_BASE_IR_13            NUMBER(18, 4);
  VI_SAL_BASE_TOTAL        NUMBER(18, 4) := 0;
  V_CONT_BENEF             NUMBER := 0;
  cont_benef               number := 0; -- para suplementar, proporc?o do desconto
  V_QTD_MESES              NUMBER := 0;
  V_NUM_AVOS_13            NUMBER := 0; --- FFRANCO 02/2007
  V_NUM_AVOS_13_ADI        NUMBER := 0; --- FFRANCO 02/2007
  V_NUM_AVOS_13_AD         NUMBER := 0; --- FFRANCO 02/2007
  V_FATOR_13_SAIDA         NUMBER(15, 8) := 0; -- MVL - proporcionalidade 13 saida
  V_DAT_OBITO              DATE; --- FFRANCO 02/2007
  V_DAT_EVENTO             DATE;
  V_DIAS_MES               NUMBER := 0;
  V_QTD_DIAS               NUMBER := 0;
  VI_PERCENTUAL_RATEIO     NUMBER(18, 6) := 0;
  VI_PERCENTUAL_RATEIO_ANT NUMBER(18, 6) := 0;
  V_DED_IR_PA              NUMBER(18, 4) := 0;
  V_DED_IR_DOENCA          NUMBER(18, 4) := 0;
  V_ISMAX                  NUMBER(8, 4) := 0;
  V_BASE_ISENCAO           NUMBER(18, 4) := 0;
  VI_IDADE                 NUMBER := 0;
  V_COD_GRUPO_45           NUMBER(8) := 0;
  V_CALCULO_IR             CHAR(1) := 'N';
  VI_VAL_RUBRICA_PREV      NUMBER(18, 4) := 0;
  VI_REDUC                 NUMBER(18, 4) := 0;
  valor_prev_calc          NUMBER(18, 4) := 0;
  SUPL_OK                  CHAR(1) := 'N';
  v_val_percentual         number(18, 5) := 0;
  ---- Aumento da variavel v_qtd_horas  9.4 -> 18.4
  v_qtd_horas              number(18, 4) := 0;
  vi_seq_pagamento         number;
  vi_cod_ref_pad_venc      tb_referencia.cod_ref_pad_venc%type;
  VI_META_GLOBAL           tb_det_param_estrutura.val_elemento%type;
  VI_VAL_APIPREM           tb_det_param_estrutura.val_elemento%type;
  VI_QTD_ERROS             NUMBER := 0;
  vlr_margem_consig        NUMBER(8, 4) := 0; --Rod18
  v_per                    NUMBER :=0;
  VI_DATA_ENQUADRAMENTO DATE;

  -- Variaveis para Pensao por Morte
  v_percent_rateio      number(7, 4) := 0; -- MVL   percentual de rateio
  v_val_teto_pensao     NUMBER(18, 4) := 0; --efv
  v_porc_teto_pensao    NUMBER(18, 4) := 0; --efv
  v_valor_total_pa      number(18, 4) := 0; -- MVL Calculo de IR PA
  v_cod_ref_oj          NUMBER(8) := 0; --padrao referencia OJ  --> ffranco 03/2007
  v_cod_beneficio_oj    NUMBER(8) := 0; --cod_beneficio OJ  --> ffranco 03/2007
  RAT_COD_BENEFICIO_ANT NUMBER(8) := 0;
  RAT_IDE_CLI_ANT       VARCHAR2(20) := '';
  RAT_PERCENTUAL_RATEIO NUMBER(18, 5) := 1;
  v_date_obito_char     VARCHAR2(8) := '';

  W_COD_PARAM_GERAL_CORRECAO varchaR2(10) := '';

  -- Variavel totalizac?o processados
  cont_proc  number(8) := 0;
  wcont_proc number(8) := 0;

  -- Variaveis para tratamento de erro

  P_MSGERRO       VARCHAR2(1500) := null;
  P_CODERRO       VARCHAR2(15);
  P_SUB_PROC_ERRO VARCHAR2(40);

  -- Cursores
  type curform is ref cursor;
  type curesp is ref cursor;
  type curparc is ref cursor;

  -- Tipos especiais
  type typcaln is table of TB_DET_CALCULADO_ESTRUC%rowtype;
  type typcalt is table of TB_DET_CALCULADO_ESTRUC%rowtype;
  type typcalv is table of TB_VALOR_NPAGO_RET%rowtype;
  type valstr20 is table of varchar2(30);
  type valstr10 is table of varchar2(10);
  type valnum18 is table of number(18, 4);
  type ValTra is table of number;

  type conceito is table of number;
  type rubricas    is table of number;
  type rubricas_seg is table of number;
  ----- Agrega estrutira de Tipo Rubrica JTS 25-01-2011
  type rubricas_tipo  is table of varchar2(5);
  type entidade is table of number;
  type flg_ded is table of varchar2(5);
  type flg_base is table of varchar2(5);
  type flg_rateio is table of varchar2(5);
  type flg_evento is table of varchar2(5);
  type flg_evento_especial is table of varchar2(5);
  type flg_grava_detalhe is table of varchar2(1);
  type sal_base is table of number(18, 4) index by binary_integer;
  type t_sal_base is table of sal_base index by binary_integer;
  type PARAM is table of TB_DET_PARAM_ESTRUTURA%ROWTYPE;
  type beneficio is table of number;
  type totvar is table of TB_VARIAVEIS%ROWTYPE;
  type rubricas_exc is table of tb_rubricas_exc_serv_ben%rowtype;

  -- MVL1
  type cargo is table of number index by binary_integer;
  type t_cargo is table of cargo index by binary_integer;

  v_cargo t_cargo;
  --
  --    type rubricas_excesso is table of tb_rubricas_excesso_ben%rowtype;

  type folha    is table of TB_FOLHA%ROWTYPE;
  type folha_pa is table of TB_FOLHA_PA%ROWTYPE;

  v_sal_base        t_sal_base;
  vi_base_ir_arr    t_sal_base;
  vi_base_ir_arr_13 t_sal_base;
  v_base_prev       t_sal_base;
  v_base_teto       t_sal_base;
  v_base_teto_cheio t_sal_base;
  VI_PERC_IR        t_sal_base;
  VI_PERC_IR13       t_sal_base;
  VI_MARGEM_CONSIG  t_sal_base;
----- Agregado Controle de Base de Ir Deducida
----- 12-06-2011
   vi_base_ir_arr_ded    t_sal_base;


  --    v_val_ir       t_sal_base;
  fdcd    TB_DET_CALCULADO_ESTRUC%rowtype;-- TESTE JTS 14042010

  rfol    TB_FOLHA%ROWTYPE; -- Armazena Totais
  rdcn    TB_DET_CALCULADO_ESTRUC%rowtype; -- Armazena detalhe calculado normal
  rdct    TB_DET_CALCULADO_ESTRUC%rowtype; -- Armazena detalhe calculado para Terceiros
  irdcn   TB_DET_CALCULADO_ESTRUC%rowtype; -- Armazena detalhe para IR
  rdcd    TB_DET_CALCULADO_ESTRUC%rowtype; -- Armazena detalhe para Desconto
  rpval   TB_DET_PARAM_ESTRUTURA%ROWTYPE; --Amazena o valor do parametro
  rvar    TB_VARIAVEIS%ROWTYPE; --Armazena a variavel para o calculo de total
  parcela TB_DET_CALCULADO_ESTRUC%rowtype; -- Armazena detalhe calculado normal
  rfol_pa TB_FOLHA_PA%ROWTYPE; -- Armazena Totais somente para PA
  rdcn_pa TB_DET_CALCULADO_PA%rowtype; -- Armazena detalhe calculado para PA
  rub_exc TB_RUBRICAS_EXC_SERV_BEN%rowtype;
  --    rub_excesso  TB_RUBRICAS_EXCESSO_BEN%rowtype;
  -- para o retroativo

  ret_rdcn        TB_DET_CALCULADO_ESTRUC%rowtype; -- Armazena detalhe calculado para o retroativo
  ret_rdcn_ref    TB_DET_CALCULADO_ESTRUC%rowtype; -- Armazena detalhe calculado para o retroativo data de referencia
  ret_vnpago_rdcn TB_VALOR_NPAGO_RET%rowtype; -- Armazena detalhe calculado para o retroativo valor n pago
  --

  -- Indices para Arrais
  idx_caln        number(8);
  idx_calt        number(8);
  idx_folha       number(3);
  idx_cald        number(8);
  idx_param       number(3);
  idx_totvar      number(3);
  idx_parcela     number(4);
  idx_ret13       number(4);
  idx_seq_detalhe number(4);
  idx_elemento    number(4);
  idx_rubexc      number(4);
  idx_rubexcesso  number(4);
  p               number(3);
  d               number(3);

  idx_ret     number(8);
  idx_ret_ref number(8);

  idx_folha_pa number(4);
  idx_caln_pa  number(8);

  -- Vectores

  -- Agregado para Controle de 13 06-2010
  type typbene is table of TB_BENEFICIARIO%rowtype;
  R_beneficiario           TB_BENEFICIARIO%rowtype; -- Armazena detalhe calculado normal
  T_beneficiario           typbene  := typbene ();
  ----



  tdcn            typcaln := typcaln(); -- Vetor para armazenar dados por Rubrica
  tdcn_pa         typcaln := typcaln(); -- Vetor para armazenar dados por Rubrica PA
  tdct            typcalt := typcalt();
  tdcd            typcalt := typcalt(); -- Vetor para armazenar dados Desconto
  pdcn            typcalt := typcalt(); -- Vetor para armazenar dados calculo Pensao
  tdca            typcalt := typcalt(); -- Vetor para armazenar Retroativo 13?
  vfolha          folha := folha(); --  Vetor para armazenar dados por beneficio
  vfolha_pa       folha_pa := folha_pa(); --  Vetor para armazenar dados PA
  parc            typcalt := typcalt(); -- Vetor para armazenar dados do parcelamento
  val_taxa_prev   valnum18 := valnum18();
  lim_taxa_prev   valnum18 := valnum18();
  dsc_taxa_prev   valnum18 := valnum18();
  vi_ir_ret       valnum18 := valnum18();
  v_cod_beneficio beneficio := beneficio();
  vparam          param := param(); -- Vetor para armazenar valores de parametros no periodo
  vrubexc         rubricas_exc := rubricas_exc();
  --    vrubexcesso     rubricas_excesso := rubricas_excesso();
  vtotvar totvar := totvar();

  ret_tdcn       typcaln := typcaln(); -- Vetor para armazenar dados por Rubrica no retroativo
  ret_tdcn_ref   typcaln := typcaln(); -- Vetor para armazenar dados por Rubrica no retroativo por data de referencia
  ret_tval_npago typcalv := typcalv(); -- Vatoer pra armazenar dados por Rubrica no retroativo valor n pago

  /*
  -- Bi dimensional
      type btdcn  is table of typcaln index by binary_integer;
       tpdcn  btdcn;
    */

  --  Vetores IR
  cod_con             conceito := conceito();
  cod_rub             rubricas := rubricas();
  flag_ded            flg_ded := flg_ded();
  flag_base           flg_base := flg_base();
  flag_rateio         flg_rateio := flg_rateio();
  tip_evento          flg_evento := flg_evento();
  tip_evento_especial flg_evento_especial := flg_evento_especial();
  cod_entidade        entidade := entidade();
  ind_grava_detalhe   flg_grava_detalhe := flg_grava_detalhe();

 --- Controle de Ir
  cod_con2             conceito := conceito();
  cod_rub2             rubricas := rubricas();
  flag_base2           flg_base := flg_base();
  flag_ded2            flg_ded := flg_ded();
  tip_evento2           flg_evento := flg_evento();
  tip_evento_especial2  flg_evento_especial := flg_evento_especial();

  ------------------ Calculo de Ir Externo -------------------
  flag_ded2_ext         flg_base := flg_base();
  flag_base2_ext        flg_ded  := flg_ded();





  type IRPARAM is table of TB_DET_PARAM_ESTRUTURA%ROWTYPE index by binary_integer;
  type typir is table of IRPARAM index by binary_integer;
  --  type ttypir is table of typir index by binary_integer;

  reg_ttypir typir;
 -------- Variavel de Apio --------
  reg_ttypir_ext typir; 
  
  -- Variaveis para formatacao do campo info contra-cheque
  QTD_HORAS_JORNADA NUMBER(5, 2) := 0;

  NOM_VARIAVEL valstr20 := valstr20();
  VAL_VARIAVEL valnum18 := valnum18();

  -- Para formula
  rubricas_tipos           rubricas_tipo:=rubricas_tipo();
  ------------------------------------------------
  cod_elemento             valstr20 := valstr20();
  tip_elemento             valstr10 := valstr10();
  val_elemento             valnum18 := valnum18();
  vas_elemento             valstr20 := valstr20();
  vas_informacao           valstr20 := valstr20();
  cod_fcrubrica            rubricas := rubricas();
  --- CONTROLE DE PA
  cod_fcrubrica_seg        rubricas_seg := rubricas_seg();
  cod_beneficiario         valstr20 := valstr20();
  a_beneficio              beneficio := beneficio();
  cod_beneficiario_redutor valstr20 := valstr20();
  cod_fcrubrica_redutor    rubricas := rubricas();
  a_beneficio_redutor      beneficio := beneficio();
  num_funcao               valtra := valtra();
  lim_funcao               NUMBER := 0;
  vi_condicao              BOOLEAN;
  vi_sem_condicao          BOOLEAN;
  VI_TOT_DED               NUMBER(18, 4) := 0;
  VI_TOT_DED_RUB           NUMBER(18, 4) := 0;
  VI_TOT_DED_ANT           NUMBER(18, 4) := 0;

 --- VARIAVEIS UTILIZADAS PARA IR ACUMULADO.

  Global_num_funcao   number :=0;
  tdcn_IRRF          typcaln := typcaln(); -- Armazena detalhe calculado normal Perioo Atual
  tdcn_IRRF_RETRO    typcaln := typcaln(); -- Armazena detalhe calculado normal Periodo Anterior
  tdcn_ACUMULADO     typcaln := typcaln(); -- Armazena detalhe calculado normal da competencia
  tdcn_ACUMULADO_13  typcaln := typcaln(); -- Armazena detalhe de 13 Calculado  da competencia

-- Implementa IR diferenciado para 13
  tdcn_IRRF_RETRO13   typcaln := typcaln(); -- Armazena detalhe calculado normal Periodo Anterior
  IDX_IRRF_RETRO13     number:=0;


  ---- Variavies para o novo Calculo de Ir

  IDX_IRRF                number:=0;
  IDX_IRRF_RETRO          number:=0;
  IDX_IRRF_HISTO          number:=0;
  QTA_MESES               number:=0;
  QTA_MESES13             number:=0;
  --- Variaveis de Calculo
  V_BASE_BRUTA_IRRF       number:=0;
  V_BASE_BRUTA_13_IRRF    number:=0;
  V_BASE_IR_IRRF          number:=0;
    ---- Data ----
  DAT_INI_IRRF_RETRO      date;
  DAT_FIM_IRRF_RETRO      date;
  DAT_INI_IRRF_HIST       date;
  DAT_FIM_IRRF_HIST       date;

  ---------------------
  VI_IR_ACUMULADA         number;
  VI_DAT_INI_IR           date;
  VI_DAT_TER_IR           date;
 ----------------------

  PER_ANTERIOR            date;
  PER_HANTERIOR           date;

  V_VAL_IR_RETRO          number(18, 4);
  V_VAL_IR_HISTO          number(18, 4);
-----------------------
  ---  Definic?o de Vetor de Meses
  TYPE VETOR_MES IS VARRAY (13) OF NUMBER (1);
  MESES_IRRF  VETOR_MES;


  -- Para Reprocesso
  num_cpf valstr20 := valstr20();
  ide_cli valstr20 := valstr20();
  -- Para controle IR de Pagamento.

  type typdatpag is table of TB_GRUPO_PAGAMENTO_ESTRUC%rowtype;
  tgrup          typdatpag :=typdatpag();

  PAG_NUM_GRP_PAG         number;
  PAG_DAT_PAGAMENTO       date;



  ----- Variaveis 133
  COM_COD_BENE_DIF_VENC       NUMBER;
  COM_CARGO_DIF_VENC          NUMBER;
  COM_COD_RUBRICA_DIF         NUMBER(8);
  COM_FLG_MUDA_BASE           CHAR  (1);
  mon_dif_venc_calculo        number(18, 4);
  COM_COD_REFERENCIA_DIF      NUMBER(8);

  COM_CONCEITO_DIF_VENC       NUMBER;
  COM_ENTIDADE_DIF_VENC       NUMBER;

  ----- Data de Incorporac?o -----
  COM_DAT_INCORP_RUB         DATE;
  COM_COD_CARGO_RUB          NUMBER;
  COM_COD_REFERENCIA_RUB     NUMBER;
  COM_COD_TABELA             VARCHAR2(3);
------ VARIAVEIS ART 133  -- Despues de Definic?o de cursores...
  vi_sem_condicao_rec      BOOLEAN;
  cod_elemento_rec         valstr20 := valstr20();
  tip_elemento_rec         valstr10 := valstr10();
  val_elemento_rec         valnum18 := valnum18();
  vas_elemento_rec         valstr20 := valstr20();
  num_funcao_rec           valtra := valtra();
  lim_funcao_rec           NUMBER := 0;
  vi_condicao_rec          BOOLEAN;
  idx_elemento_rec         number(4);
  COM_TIPO_BASE            VARCHAR2(1);
  COM_VAL_PORC_IND_133    NUMBER(18, 5):=0;
------  Art 133
  tdvenc            typcaln := typcaln(); -- Vetor para armazenar dados por Rubrica
  tdvenc_nor        typcaln := typcaln(); -- Vetor para armazenar dados por Rubrica

  ------------------------------------------------
  -- Variavel para controle de Base de Calculo 13
  -- 11/08/2015
  ------------------------------------------------
  COM_VAL_PORC_13         NUMBER(18,4);
  COM_VAL_FIXO_13         NUMBER(18,4);
  COM_VAL_UNIDADE_13      NUMBER(18,4);

 --------------- Desenvolvimento Task 3689  --------------
  COM_APLICA_PROP_PENSAO  VARCHAR(1);
  VI_PERC_PENSAO          NUMBER(18,6);
 --------------- Desenvolvimento Task 3689  --------------

-- Variaveis usadas no Parcelamento de Debitos -- LJUNIOR -- 22/07/2015
  type TParcelamento is record
  (
     cod_beneficio        number,
     cod_ide_cli          varchar2(20),
     num_prioridade       number,
     tip_beneficio        varchar2(20),
     val_total_saldo      number(18,4)
  );

  type TIdxParc   is table of TParcelamento
                  index by binary_integer;

  vfolha_parc     TIdxParc; -- vetor contendo os dados do header do parcelamento
  tdcn_parc       typcaln := typcaln(); -- Vetor para armazenar as Rubricas do parcelamento de debitos
  rdcn_parc_ret   TB_DET_CALCULADO_ESTRUC%rowtype; -- Armazena detalhe calculado normal
  vDatRef_Ret     typcaln := typcaln(); -- Armazena detalhe calculado normal

  -- Variaveis usadas no parcelamento de debitos
  PARC_COD_BENEFICIO       NUMBER;
  PARC_COD_IDE_CLI         VARCHAR2(20);
  PARC_COD_RUBRICA         NUMBER;
  PARC_VAL_APURADO         NUMBER(18,4);
  PARC_DAT_REFERENCIA      DATE;
  PARC_DAT_INI_VIG         DATE;
  PARC_COD_IDE_CLI_BEN     VARCHAR2(20);
  PARC_TIPO_EVENTO_ESPECIAL VARCHAR2(5);
  PARC_FLG_STATUS          VARCHAR2(1);
  PARC_SALDO_RUBRICA       NUMBER(18,4);
  PARC_DAT_FIM_REFERENCIA  DATE;
  PARC_FLG_CORRECAO        VARCHAR2(1);
  PARC_ID_LANCAMENTO       NUMBER;
  PARC_NUM_PRIORIDADE      VARCHAR2(20);
  PARC_TIP_BENEFICIO       VARCHAR2(20);
  PARC_COD_ENTIDADE        NUMBER;
  PARC_FLG_NATUREZA        VARCHAR2(1);
  PARC_TOT_SALDO_PRIOR     NUMBER(18,4);

  ANT_PARC_COD_BENEFICIO   NUMBER;
  V_QTD_MESES_PARC         NUMBER;
  V_TOT_BRUTO_PARC_CRED    NUMBER(18,4);
  V_TOT_BRUTO_PARC_DEB     NUMBER(18,4);
  V_TOT_BRUTO_PARC_ICRED   NUMBER(18,4);
  V_TOT_BRUTO_PARC_IDEB    NUMBER(18,4);
  V_TOT_BRUTO_PARC_RET     NUMBER(18,4);
  V_TOT_BRUTO_PARC_RET_A   NUMBER(18,4);
  V_ICONT                  NUMBER(4);
  V_RCONT                  NUMBER;
  V_VAL_MARGEM             NUMBER(18,4);
  V_VAL_MARGEM_RET         NUMBER(18,4);
  V_VAL_RESTO_MARGEM       NUMBER(18,4);
  V_VAL_SALDO_ATU          NUMBER(18,4);
  V_SALDO_PARCELAMENTO     NUMBER(18,4);
  V_PERC_PARCELAMENTO      NUMBER;
  V_MES_PARC_REF           VARCHAR2(2);
  V_ANO_PARC_REF           VARCHAR2(4);
  V_FATOR                  NUMBER;
  V_VAL_CORRECAO_PARC      NUMBER;
  V_DAT_MINIMA_CORRECAO    DATE;
  V_DAT_MAXIMA_CORRECAO    DATE;
------- Bloque de Variaveis de Controle
 ws_cnt_pagamamentos_tot      NUMBER; ---- 16/10/2018

  -- Cursor contendo os beneficio que possuem parcelamento agrupados por prioridade
  CURSOR CUR_BENPARC IS
    SELECT PDET.COD_BENEFICIO,
           PDET.COD_IDE_CLI,
           P.NUM_PRIORIDADE_PARCELAMENTO,
           DECODE(CB.COD_TIPO_BENEFICIO,'M','PENSIONISTA','APOSENTADO') AS TIP_BENEFICIO,
           SUM(PDET.SALDO_ATUAL) AS SUM_SALDO_ATUAL
      FROM USER_IPESP.TB_LANC_PARCELADOS P,
           TB_LANC_PARCELADOS_STATUS PDET,
           TB_CONCESSAO_BENEFICIO CB
     WHERE P.COD_INS = PAR_COD_INS
       AND P.COD_IDE_CLI = ANT_IDE_CLI
       AND P.FLG_STATUS = 'V'
       AND TO_CHAR(PAR_PER_PRO, 'YYYYMM') >= to_char(P.DAT_INI_VIG, 'YYYYMM')
       AND PDET.COD_INS = P.COD_INS
       AND PDET.COD_IDE_CLI = P.COD_IDE_CLI
       AND PDET.COD_BENEFICIO = P.COD_BENEFICIO
       AND PDET.COD_RUBRICA = P.COD_RUBRICA
       AND PDET.FLG_STATUS = P.FLG_STATUS
       AND NVL(PDET.COD_IDE_CLI_BEN,' ') = NVL(P.COD_IDE_CLI_BEN,' ')
       AND PDET.DAT_INI_VIG = P.DAT_INI_VIG
       AND PDET.ID_LANCAMENTO = P.ID_LANCAMENTO
       AND PDET.SALDO_ATUAL > 0
       AND CB.COD_INS = PDET.COD_INS
       AND CB.COD_BENEFICIO = PDET.COD_BENEFICIO
       -- TASK 1298 -- ALTERAC?O DE ESCOPO
       -- EXCLUIR TODOS OS CONCEITOS DAS RUBRICA QUE EST?O COM BLOQUEIOS VIGENTES COM A MESMA REFERENCIA
       -- IMPLEMENTADO EM 03/11/2015
       AND NOT EXISTS
       (
          select 1 
            from user_ipesp.tb_bloqueio_debito aa
           where aa.cod_beneficio = p.cod_beneficio
             and aa.cod_ide_cli = p.cod_ide_cli
             and aa.flg_status = 'V' 
             and trunc(aa.cod_fcrubrica/100) = trunc(p.cod_rubrica/100)  
             and (aa.num_ordem_estorno = p.num_ordem_estorno
                 or aa.dat_ini_ref = p.dat_referencia )
       )
     GROUP by PDET.COD_BENEFICIO,
              PDET.COD_IDE_CLI,
              P.NUM_PRIORIDADE_PARCELAMENTO,
              DECODE(CB.COD_TIPO_BENEFICIO,'M','PENSIONISTA','APOSENTADO')
     ORDER BY PDET.COD_BENEFICIO,
              PDET.COD_IDE_CLI,
              TO_NUMBER(P.NUM_PRIORIDADE_PARCELAMENTO);


  -- Cursor contento a composicao do parcelamento
  CURSOR CUR_COMPPARC IS
    --- COMPOSICAO DO PARCELAMENTO
    SELECT PDET.COD_RUBRICA,
           PDET.DAT_REFERENCIA,
           PDET.COD_IDE_CLI_BEN,
           PDET.SALDO_ATUAL,
           PDET.DAT_FIM_REFERENCIA,
           P.FLG_CORRECAO,
           PDET.ID_LANCAMENTO,
           R.FLG_NATUREZA,
           CB.COD_ENTIDADE,
           R.TIP_EVENTO_ESPECIAL
      FROM TB_LANC_PARCELADOS P,
           TB_LANC_PARCELADOS_STATUS PDET,
           TB_CONCESSAO_BENEFICIO CB,
           TB_RUBRICAS R
     WHERE P.COD_INS = PAR_COD_INS
       AND P.COD_IDE_CLI = PARC_COD_IDE_CLI
       AND P.COD_BENEFICIO = PARC_COD_BENEFICIO
       AND P.NUM_PRIORIDADE_PARCELAMENTO = PARC_NUM_PRIORIDADE
       AND P.FLG_STATUS = 'V'
       AND TO_CHAR(PAR_PER_PRO, 'YYYYMM') >= to_char(P.DAT_INI_VIG, 'YYYYMM')
       AND PDET.COD_INS = P.COD_INS
       AND PDET.COD_IDE_CLI = P.COD_IDE_CLI
       AND PDET.COD_BENEFICIO = P.COD_BENEFICIO
       AND PDET.COD_RUBRICA = P.COD_RUBRICA
       AND PDET.FLG_STATUS = P.FLG_STATUS
       AND NVL(PDET.COD_IDE_CLI_BEN,' ') = NVL(P.COD_IDE_CLI_BEN,' ')
       AND PDET.DAT_INI_VIG = P.DAT_INI_VIG
       AND PDET.ID_LANCAMENTO = P.ID_LANCAMENTO
       AND PDET.SALDO_ATUAL > 0
       AND CB.COD_INS = PDET.COD_INS
       AND CB.COD_BENEFICIO = PDET.COD_BENEFICIO
       AND R.COD_INS = PDET.COD_INS
       AND R.COD_RUBRICA = PDET.COD_RUBRICA
       AND R.COD_ENTIDADE = CB.COD_ENTIDADE
       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
           to_char(R.DAT_INI_VIG, 'YYYYMM') AND
           to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(R.DAT_FIM_VIG, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))
       -- TASK 1298 -- ALTERAC?O DE ESCOPO
       -- EXCLUIR TODOS OS CONCEITOS DAS RUBRICA QUE EST?O COM BLOQUEIOS VIGENTES COM A MESMA REFERENCIA
       -- IMPLEMENTADO EM 03/11/2015
       AND NOT EXISTS
       (
          select 1 
            from user_ipesp.tb_bloqueio_debito aa
           where aa.cod_beneficio = p.cod_beneficio
             and aa.cod_ide_cli = p.cod_ide_cli
             and aa.flg_status = 'V' 
             and trunc(aa.cod_fcrubrica/100) = trunc(p.cod_rubrica/100)  
             and (aa.num_ordem_estorno = p.num_ordem_estorno
                 or aa.dat_ini_ref = p.dat_referencia )
       )
     ORDER BY
              P.COD_BENEFICIO,
              TO_NUMBER(P.NUM_PRIORIDADE_PARCELAMENTO),
              P.DAT_REFERENCIA,
              P.COD_RUBRICA;

  -- Cursor sobre Beneficios
  CURSOR CURBEN IS
  -- POR BENEFICIO PREVIDENCIARIO
    SELECT DISTINCT /*+ RULE */ B.COD_IDE_CLI_BEN AS BEN_IDE_CLI,
                    P.NUM_CPF           AS BEN_NUM_CPF,
                    P.NOM_PESSOA_FISICA AS BEN_NOME,
                    P.DAT_NASC          AS BEN_DAT_NASC,
                    'B'                 AS BEN_TIPO_PESSOA,
                    -- B.FLG_STATUS
                     'A'                AS BEN_FLG_STATUS ,
                     
              -- TT48091 -- DISSOCIAR TAMBEM QUANDO HA MAIS DE UM BENEFÍCIO DE PENSAO PARA O MESMO IDE_CLI_BEN
              -- 18/07/2018
                   CASE 
                     (SELECT  nvl(MAX(DF.COD_BEN_DISSOCIACAO),0) 
                     FROM USER_IPESP.TB_DISSOCIACAO_FOLHA DF
                        WHERE DF.COD_INS=PAR_COD_INS                AND
                              DF.COD_IDE_CLI=B.COD_IDE_CLI_BEN      AND
                              DF.DAT_INI_VIG<=PAR_PER_PRO           AND  
                              --ALTERADO 19-03-2014 PAR_PER_PRO-- SOLICATADO TASK 2429 PAR_PER_REAL
                               NVL(DF.DAT_FIM_VIG,to_date('01/09/3099','dd/mm/yyyy')) >PAR_PER_PRO
                           )
                        WHEN   1  THEN 
                                  DECODE( CB.COD_TIPO_BENEFICIO, 'M', 2, 1) 
                        WHEN   2  THEN 
                               3
                        ELSE  0 
                     END AS COM_TIPO_DISSOCIACAO ,       
               P.FLG_ENVIO_CORREIO COM_COD_ENVIO_CORREIO,
             -- TT48091 -- DISSOCIAR TAMBEM QUANDO HA MAIS DE UM BENEFÍCIO DE PENSAO PARA O MESMO IDE_CLI_BEN
              -- 18/07/2018
              
                   CASE 
                     (SELECT  nvl(MAX(DF.COD_BEN_DISSOCIACAO),0) 
                     FROM USER_IPESP.TB_DISSOCIACAO_FOLHA DF
                        WHERE DF.COD_INS=PAR_COD_INS                AND
                              DF.COD_IDE_CLI=B.COD_IDE_CLI_BEN      AND
                              DF.DAT_INI_VIG<=PAR_PER_PRO           AND  
                           NVL(DF.DAT_FIM_VIG,to_date('01/09/3099','dd/mm/yyyy')) >PAR_PER_PRO
                           )
                        WHEN   2  THEN 
                                  CB.COD_BENEFICIO
                       ELSE  0
              END AS COM_BEN_DISSOCIACAO

      FROM TB_BENEFICIARIO           B,
           TB_PESSOA_FISICA          P,
           TB_GRUPO_PAGAMENTO        GP,
           TB_CONCESSAO_BENEFICIO    CB,
        --   TB_TIPOS_BENEFICIOS       TB,
        --   TB_CARGO                  CA,
           TB_CONTROLE_PROCESSAMENTO CP/*,
           TB_DISSOCIACAO_FOLHA      DF*/
     WHERE B.COD_INS = PAR_COD_INS
       AND CB.COD_ENTIDADE = nvl(PAR_COD_ENTIDADE, CB.COD_ENTIDADE)
       AND B.COD_IDE_CLI_BEN >= 0
       AND P.COD_INS = B.COD_INS
       AND P.COD_IDE_CLI = B.COD_IDE_CLI_BEN
       AND to_char(B.DAT_INI_BEN, 'YYYYMM') <=
           to_char(PAR_PER_PRO, 'YYYYMM')
       AND (to_char(B.DAT_FIM_BEN, 'YYYYMM') >=
           to_char(PAR_PER_PRO, 'YYYYMM') or B.DAT_FIM_BEN IS NULL)
       AND (DECODE(B.FLG_STATUS,
                   'S',
                   B.DAT_SUSPENSO,
                   to_date('01/12/2100', 'dd/mm/yyyy')) > DAT_PRZ_SUSPENSO OR
           b.mot_suspensao in ('15', '19'))
       AND B.FLG_STATUS in ('A', 'H', /*'S' ,*/ 'X' )
       AND B.FLG_REG_ATIV = 'S'
       AND B.FLG_CONT_BEN = 'N'
       AND B.COD_IDE_CLI_BEN is not null
       AND (P.NUM_CPF >= PAR_NUM_CPF and PAR_PARTIR_DE = 'S')
       AND CB.COD_BENEFICIO = B.COD_BENEFICIO
       AND CB.COD_INS = B.COD_INS
       and GP.NUM_GRP_PAG > 0
       AND GP.NUM_GRP_PAG = PAR_NUM_GRP_PAG --ROD7
       AND b.cod_proc_grp_pag = gp.cod_proc_grp_pago --ROD7
       AND CP.COD_INS = B.COD_INS --ROD6
       AND CP.NUM_PROCESSO = PAR_NUM_PROCESSO --ROD6
       AND CP.SEQ_PROCESSAMENTO = PAR_NUM_SEQ_PROC
       AND P.NUM_CPF >= CP.NUM_CPF_INICIAL --ROD6
       AND P.NUM_CPF < CP.NUM_CPF_FINAL --ROD6
 
    Union All
    SELECT DISTINCT /*+ RULE */ B.COD_IDE_CLI_BEN AS BEN_IDE_CLI,
                    P.NUM_CPF AS BEN_NUM_CPF,
                    P.NOM_PESSOA_FISICA AS BEN_NOME,
                    P.DAT_NASC AS BEN_DAT_NASC,
                    'B' AS BEN_TIPO_PESSOA,
                   --  B.FLG_STATUS
                    'A' AS BEN_FLG_STATUS,

 
              -- TT48091 -- DISSOCIAR TAMBEM QUANDO HA MAIS DE UM BENEFÍCIO DE PENSAO PARA O MESMO IDE_CLI_BEN
              -- 18/07/2018
                   CASE 
                     (SELECT  nvl(MAX(DF.COD_BEN_DISSOCIACAO),0) 
                     FROM USER_IPESP.TB_DISSOCIACAO_FOLHA DF
                        WHERE DF.COD_INS=PAR_COD_INS                AND
                              DF.COD_IDE_CLI=B.COD_IDE_CLI_BEN      AND
                              DF.DAT_INI_VIG<=PAR_PER_PRO           AND  
                              --ALTERADO 19-03-2014 PAR_PER_PRO-- SOLICATADO TASK 2429 PAR_PER_REAL
                               NVL(DF.DAT_FIM_VIG,to_date('01/09/3099','dd/mm/yyyy')) >PAR_PER_PRO
                           )
                        WHEN   1  THEN 
                                  DECODE( CB.COD_TIPO_BENEFICIO, 'M', 2, 1) 
                        WHEN   2  THEN 
                               3
                        ELSE  0 
                     END AS COM_TIPO_DISSOCIACAO , 
                     
              P.FLG_ENVIO_CORREIO COM_COD_ENVIO_CORREIO,
             -- TT48091 -- DISSOCIAR TAMBEM QUANDO HA MAIS DE UM BENEFÍCIO DE PENSAO PARA O MESMO IDE_CLI_BEN
              -- 18/07/2018
              
                   CASE 
                     (SELECT  nvl(MAX(DF.COD_BEN_DISSOCIACAO),0) 
                     FROM USER_IPESP.TB_DISSOCIACAO_FOLHA DF
                        WHERE DF.COD_INS=PAR_COD_INS                AND
                              DF.COD_IDE_CLI=B.COD_IDE_CLI_BEN      AND
                              DF.DAT_INI_VIG<=PAR_PER_PRO           AND  
                           NVL(DF.DAT_FIM_VIG,to_date('01/09/3099','dd/mm/yyyy')) >PAR_PER_PRO
                           )
                        WHEN   2  THEN 
                                  CB.COD_BENEFICIO
                       ELSE  0
              END AS COM_BEN_DISSOCIACAO
      FROM TB_BENEFICIARIO           B,
           TB_PESSOA_FISICA          P,
           TB_GRUPO_PAGAMENTO        GP,
           TB_CONCESSAO_BENEFICIO    CB,
           TB_CONTROLE_PROCESSAMENTO CP/*,
           TB_DISSOCIACAO_FOLHA      DF*/
     WHERE B.COD_INS = PAR_COD_INS
       AND CB.COD_ENTIDADE = nvl(PAR_COD_ENTIDADE, CB.COD_ENTIDADE)
       AND P.COD_INS = B.COD_INS
       AND B.COD_IDE_CLI_BEN >= 0
       AND P.COD_IDE_CLI = B.COD_IDE_CLI_BEN
       AND to_char(B.DAT_INI_BEN, 'YYYYMM') <=
           to_char(PAR_PER_PRO, 'YYYYMM')
       AND (to_char(B.DAT_FIM_BEN, 'YYYYMM') >=
           to_char(PAR_PER_PRO, 'YYYYMM') or B.DAT_FIM_BEN IS NULL)
       AND (DECODE(B.FLG_STATUS,
                   'S',
                   B.DAT_SUSPENSO,
                   to_date('01/12/2100', 'dd/mm/yyyy')) > DAT_PRZ_SUSPENSO OR
           b.mot_suspensao in ('15', '19'))
       AND B.FLG_STATUS in ('A', 'H', /*'S' ,*/ 'X' )
       AND B.FLG_REG_ATIV = 'S'
       AND B.FLG_CONT_BEN = 'N'
       AND B.COD_IDE_CLI_BEN is not null
       AND (P.NUM_CPF = nvl(PAR_NUM_CPF, P.NUM_CPF) and PAR_PARTIR_DE = 'N')


    --   AND TB.COD_TIPO_BENEFICIO = CB.COD_TIPO_BENEFICIO
       AND CB.COD_BENEFICIO = B.COD_BENEFICIO
       AND CB.COD_INS = B.COD_INS



       and GP.NUM_GRP_PAG > 0
       -- ALTERADO JTS 25-10-2011
     --  AND  GP.NUM_GRP_PAG = PAR_NUM_GRP_PAG --ROD7
       AND (      (PAR_NUM_CPF IS NULL AND GP.NUM_GRP_PAG = PAR_NUM_GRP_PAG) --ROD7
              OR  (PAR_NUM_CPF IS NOT NULL )
            )
       AND b.cod_proc_grp_pag = gp.cod_proc_grp_pago --ROD7
       AND CP.COD_INS = B.COD_INS --ROD6
       AND CP.NUM_PROCESSO = PAR_NUM_PROCESSO --ROD6
       AND CP.SEQ_PROCESSAMENTO = PAR_NUM_SEQ_PROC
       AND P.NUM_CPF >= CP.NUM_CPF_INICIAL --ROD6
       AND P.NUM_CPF < CP.NUM_CPF_FINAL --ROD6

  ORDER BY BEN_TIPO_PESSOA, BEN_NUM_CPF;

  -- Cursor sobre composic?o DO BENEFICIO
  CURSOR CUR_COMPBEN IS


    SELECT BB.COD_BENEFICIO     AS COM_COD_BENEFICIO,
           DECODE(trim(BC.COD_TIPO_BENEFICIO),
                  'M',
                  'PENSIONISTA',
                  'APOSENTADO') AS COM_TIP_BENEFICIO,
           FC.COD_RUBRICA       AS COM_COD_RUBRICA,
           FC.COD_FCRUBRICA     AS COM_COD_FCRUBRICA,
           FC.SEQ_VIG           AS COM_SEQ_VIG_FC, -- MVL03
           'B'                  AS COM_NAT_COMP,
           null                 AS COM_NUM_ORD_JUD,
           null                 AS COM_IDE_CLI_INSTITUIDOR,
           CE.VAL_FIXO          AS COM_VAL_FIXO_IND,
           CE.VAL_PORC          AS COM_VAL_PORC_IND,
           CE.VAL_PORC2         AS COM_VAL_PORC2,
           CE.VAL_INIDADE       AS COM_QTY_UNID_IND,
           FC.VAL_UNIDADE       AS COM_VAL_UNID,
           FC.TIP_VALOR         AS COM_TIPO_VALOR,
           'N'                  AS COM_IND_QTAS,
           0                    AS COM_NUM_QTAS_PAG,
           0                    AS COM_TOT_QTAS_PAG,
           FC.FLG_COMP          AS COM_IND_COMP_RUB,
           RR.FLG_NATUREZA      AS COM_NAT_RUB,
           null                 AS COM_INI_REF,
           null                 AS COM_FIM_REF,
           FC.NUM_PRIORIDADE    AS COM_PRIORIDADE,
           CP.FLG_DED_IR        AS COM_DED_IR,
           RP.FLG_PROCESSA      AS COM_FLG_PROCESSA,
           CP.NAT_VAL           AS COM_NAT_VAL,
           FC.TIP_APLICACAO     AS COM_TIPO_APLICACAO,
      --      BC.VAL_PERCENT_BEN AS COM_PERCENT_BEN,
           CASE
              WHEN ( BB.COD_BENEFICIO>40000001 AND
                     BB.COD_BENEFICIO<41000000 and
                     BC.COD_ENTIDADE IN ( 7,6)       AND
                       NVL(BC.NAO_PROPORCIONA_FOLHA,'N')!='S') THEN
                     BC.VAL_PERCENT_BEN
               ELSE
                 BC.VAL_PERCENT_BEN  END   AS COM_PERCENT_BEN,



           nvl(RR.TIP_EVENTO_ESPECIAL, 'N') AS COM_TIPO_EVENTO_ESPECIAL,
           CE.VAL_STR1          AS COM_VAL_STR1,
           CE.VAL_STR2          AS COM_VAL_STR2,
           BC.NUM_MATRICULA     AS COM_MATRICULA,
           BC.COD_ENTIDADE      AS COM_ENTIDADE,
           EC.COD_CARGO         AS COM_CARGO,
           EC.COD_CARGO_APOS    AS COM_CARGO_APOS,
           BB.DAT_INI_BEN       AS BEN_DAT_INICIO,
           BB.DAT_FIM_BEN       AS BEN_DAT_FIM,
           CE.DAT_INI_VIG       AS COM_DAT_INI_VIG,
           CE.DAT_FIM_VIG       AS COM_DAT_FIM_VIG,
           null AS COM_COD_IDE_CLI_BEN,
           FC.MSC_INFORMACAO    AS COM_MSC_INFORMACAO,
           FC.COL_INFORMACAO    AS COM_COL_INFORMACAO,
           1                    AS COM_PORC_VIG, --RAO 20060321
           RR.DAT_FIM_VIG       AS COM_DAT_VIG_RUBRICA, -- MVL
           FC.FLG_APLICA_RATEIO AS COM_APLICA_RATEIO, -- efv
           CE.SEQ_VIG           AS COM_SEQ_VIG          ,
           BC.cod_entidade      as com_cod_entidade,
           0 COM_NUM_CARGA                    ,
           0 COM_NUM_SEQ_CONTROLE_CARGA       ,
           BB.COD_PROC_GRP_PAG COM_NUM_GRUPO_PAG,
           'N'  COM_RUBRICA_TIPO,
           BB.FLG_STATUS COM_FLG_STATUS,
           to_date('01/01/1901','dd/mm/yyyy') COM_DAT_CONTRATO,
           0 COM_COD_CONVENIO  ,

           DECODE(BC.COD_TIPO_BENEFICIO, 'M', 2, 1) AS COM_ASSOCIACAO
           ,RR.COD_CONCEITO   AS  COM_COD_CONCEITO
           ,CE.COD_FUNCAO     AS  COM_COD_FUNCAO
           ,CE.COD_CARGO      AS  COM_COD_CARGO_RUB      -- CODIGO DE RUBRICA ASSOCIADO AO CARGO
           ,CE.COD_REFERENCIA AS  COM_COD_REFERENCIA_RUB -- CODIGO DE REFERENCIA ASSOCIADO AO CARGO
           ,CE.DAT_INCORP     AS  COM_DAT_INCORP_RUB
           ,CE.COD_TABELA     AS  COM_COD_TABELA
          ---------------------------------------------------------
          ---- Campos Novos para Controle de Consignatarias. -----
          ---------------------------------------------------------
          ,NULL                    AS  COM_FLG_MODALIDADE
          ,NULL                    AS  COM_FLG_DESC_PARCIAL

          -----------------------------------------------
          -- Variavel para controle de Base de Calculo 13
          -- 06/05/2015
          ----------------------------------------------
          ,NULL                   AS   COM_VAL_PORC_13
          ,NULL                   AS   COM_VAL_FIXO_13
          ,NULL                   AS   COM_VAL_UNIDADE_13

       --------------- Desenvolvimento Task 3689  --------------
          ,RR.FLG_APLICA_PROP_PENSAO AS COM_APLICA_PROP_PENSAO


     FROM TB_COMPOSICAO_BEN      CE,
           TB_BENEFICIARIO        BB,
           TB_RUBRICAS            RR,
           TB_FORMULA_CALCULO     FC,
           TB_RUBRICAS_PROCESSO   RP,
           TB_CONCESSAO_BENEFICIO BC,
           TB_CONCEITOS_PAG       CP,
           TB_BENEFICIO_CARGO     EC
     WHERE BB.COD_INS = PAR_COD_INS
       AND BB.COD_IDE_CLI_BEN = ben_ide_cli
       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
           to_char(BB.DAT_INI_BEN, 'YYYYMM') AND
           to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(BB.DAT_FIM_BEN, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))
       AND BB.FLG_STATUS in ('A', 'H',/* 'S',*/ 'X')
       AND BB.FLG_REG_ATIV = 'S'
       AND BB.FLG_CONT_BEN = 'N'
       AND BC.COD_INS = BB.COD_INS
       AND BC.COD_BENEFICIO = BB.COD_BENEFICIO
       AND BC.COD_ENTIDADE = RR.COD_ENTIDADE
       AND RR.COD_ENTIDADE = RP.COD_ENTIDADE
       AND RR.COD_ENTIDADE = CP.COD_ENTIDADE
       AND FC.COD_ENTIDADE = RR.COD_ENTIDADE
          --AND trim(BC.COD_TIPO_BENEFICIO) = 'M'     --ROD8
       AND CE.COD_INS = BB.COD_INS
       AND CE.COD_BENEFICIO = BB.COD_BENEFICIO
       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
           to_char(CE.DAT_INI_VIG, 'YYYYMM') AND
           to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(CE.DAT_FIM_VIG, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))
       AND FC.COD_INS = BB.COD_INS
       AND FC.COD_FCRUBRICA = CE.COD_FCRUBRICA
       AND FC.TIP_APLICACAO = 'I'
       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
           to_char(FC.DAT_INI_VIG, 'YYYYMM') AND
           to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(FC.DAT_FIM_VIG, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))
       AND RR.COD_INS = BB.COD_INS
       AND RR.COD_RUBRICA = FC.COD_RUBRICA
       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
           to_char(RR.DAT_INI_VIG, 'YYYYMM') AND
           to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(RR.DAT_FIM_VIG, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))
       AND CP.COD_INS = RR.COD_INS
       AND CP.COD_CONCEITO = RR.COD_CONCEITO
       AND RP.COD_INS = RR.COD_INS
       AND RP.COD_RUBRICA = RR.COD_RUBRICA
       AND RP.TIP_PROCESSO = PAR_TIP_PRO
       AND RP.SEQ_VIG >= 0
       AND RP.FLG_PROCESSA = 'S' ---RAO 20060410
       AND RR.SEQ_VIG = RP.SEQ_VIG_RUBRICA
       AND RR.SEQ_VIG = FC.SEQ_VIG_RUBRICA
       AND CE.FLG_STATUS = 'V'
       AND EC.COD_INS = BC.COD_INS
       AND EC.COD_BENEFICIO = BC.COD_BENEFICIO
       AND EC.COD_IDE_CLI_SERV = BC.COD_IDE_CLI_SERV
       AND EC.COD_IDE_CLI_BEN = BB.COD_IDE_CLI_BEN
       AND EC.COD_ENTIDADE = BC.COD_ENTIDADE
       AND EC.NUM_MATRICULA = BC.NUM_MATRICULA
       AND EC.COD_IDE_REL_FUNC = BC.COD_IDE_REL_FUNC
       AND EC.FLG_STATUS = 'V'
       AND CE.IND_OPCAO = EC.IND_OPCAO
       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
           to_char(EC.DAT_INI_VIG, 'YYYYMM') AND
           to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(EC.DAT_FIM_VIG, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))

       AND  not  EXISTS (
        SELECT 1 FROM  user_ipesp.tb_isensao_tot   ii
        WHERE  ii.cod_ide_cli=bb.cod_ide_cli_ben
       )
       AND NOT ( (  BB.COD_BENEFICIO>=40000000 AND
                    BB.COD_BENEFICIO<=41000000) AND
                   (   (BC.COD_ENTIDADE !=31 AND to_char(PAR_PER_PRO, 'YYYYMM') <'201105' )
                    OR ( BC.COD_ENTIDADE =31 AND to_char(PAR_PER_PRO, 'YYYYMM') <'201111' )
                     OR --- Solicitado por Paulo Miranda 25-05-2015
                      (BC.COD_ENTIDADE !=31 AND to_char(PAR_PER_PRO, 'YYYYMM') <'201105'
                        AND BB.COD_BENEFICIO!=40277080)
                   )
           )
         /*      AND  ( BEN_DISSOCIACAO=0 OR
           (BEN_DISSOCIACAO!=0 AND DECODE(BC.COD_TIPO_BENEFICIO, 'M', 2, 1) =BEN_DISSOCIACAO)
                      )
          */

  -- TT48091 -- DISSOCIAÇÃO DE MAIS DE UM BENEFICIO DE PENSAO
      --   18/07/2018   
      AND  (
            BEN_DISSOCIACAO=0           OR
           (BEN_DISSOCIACAO  !=0 AND DECODE(BC.COD_TIPO_BENEFICIO, 'M', 2, 1) =BEN_DISSOCIACAO ) OR
           (BEN_DISSOCIACAO =3 AND BC.COD_BENEFICIO=COD_BEN_DISSOCIACAO) 
         )
         
      AND NOT (
               BB.COD_BENEFICIO >40000000 AND BB.COD_BENEFICIO<41000000 AND
               BC.COD_ENTIDADE =5         AND BC.COD_TIPO_BENEFICIO !='M'
            )
    UNION ALL
    --- COMPOSICAO INDIVIDUAL
    SELECT BB.COD_BENEFICIO AS COM_COD_BENEFICIO,
           DECODE(trim(BC.COD_TIPO_BENEFICIO),
                  'M',
                  'PENSIONISTA',
                  'APOSENTADO') AS COM_TIP_BENEFICIO,
           FC.COD_RUBRICA AS COM_COD_RUBRICA,
           FC.COD_FCRUBRICA AS COM_COD_FCRUBRICA,
           CI.SEQ_VIG_FC AS COM_SEQ_VIG_FC,
           'I' AS COM_NAT_COMP,
           CI.NUM_ORD_JUD AS COM_NUM_ORD_JUD,
           BC.COD_IDE_CLI_SERV AS COM_IDE_CLI_INSTITUIDOR, --efv
           CI.VAL_FIXO AS COM_VAL_FIXO_IND,
           CI.VAL_PORC AS COM_VAL_PORC_IND,
           0 AS COM_VAL_PORC2,
           CI.VAL_UNIDADE AS COM_QTY_UNID_IND,
           FC.VAL_UNIDADE AS COM_VAL_UNID,
           FC.TIP_VALOR AS COM_TIPO_VALOR,
           RR.FLG_QUOTA AS COM_IND_QTAS,
           CI.NUM_QTAS_PAGAS AS COM_NUM_QTAS_PAG,
           CI.NUM_QTAS_PAGAS AS COM_TOT_QTAS_PAG,
           FC.FLG_COMP AS COM_IND_COMP_RUB,
           RR.FLG_NATUREZA AS COM_NAT_RUB,
           ci.dat_ini_refer AS COM_INI_REF, -- mvl7
           ci.dat_fim_refer AS COM_FIM_REF, -- mvl7
           FC.NUM_PRIORIDADE AS COM_PRIORIDADE,
           CP.FLG_DED_IR AS COM_DED_IR,
           RP.FLG_PROCESSA AS COM_FLG_PROCESSA,
           CP.NAT_VAL AS COM_NAT_VAL,
           FC.TIP_APLICACAO AS COM_TIPO_APLICACAO,
   --      BC.VAL_PERCENT_BEN AS COM_PERCENT_BEN,

                      CASE
              WHEN ( BB.COD_BENEFICIO>40000001 AND
                     BB.COD_BENEFICIO<41000000 AND
                     BC.COD_ENTIDADE IN ( 7,6)        AND
                     NVL(BC.NAO_PROPORCIONA_FOLHA,'N')!='S' ) THEN
                     BC.VAL_PERCENT_BEN
               ELSE
                 BC.VAL_PERCENT_BEN  END   AS COM_PERCENT_BEN,


           nvl(RR.TIP_EVENTO_ESPECIAL, 'N') AS COM_TIPO_EVENTO_ESPECIAL,
           null AS COM_VAL_STR1,
           null AS COM_VAL_STR2,
           BC.NUM_MATRICULA AS COM_MATRICULA,
           BC.COD_ENTIDADE AS COM_ENTIDADE,
           EC.COD_CARGO AS COM_CARGO,
           EC.COD_CARGO_APOS AS COM_CARGO_APOS,
           BB.DAT_INI_BEN AS BEN_DAT_INICIO,
           BB.DAT_FIM_BEN AS BEN_DAT_FIM,
           CI.DAT_INI_VIG AS COM_DAT_INI_VIG, --ROD3
           CI.DAT_FIM_VIG AS COM_DAT_FIM_VIG, --ROD3
           CI.COD_IDE_CLI_BEN AS COM_COD_IDE_CLI_BEN,
           FC.MSC_INFORMACAO AS COM_MSC_INFORMACAO,
           FC.COL_INFORMACAO AS COM_COL_INFORMACAO,
           1 AS COM_PORC_VIG, --RAO 20060321
           RR.DAT_FIM_VIG AS COM_DAT_VIG_RUBRICA, -- MVL
           FC.FLG_APLICA_RATEIO AS COM_APLICA_RATEIO, -- efv
           CI.SEQ_VIG AS COM_SEQ_VIG,
           bc.cod_entidade as com_cod_entidade,
           0 COM_NUM_CARGA                    ,
           0 COM_NUM_SEQ_CONTROLE_CARGA       ,
           BB.COD_PROC_GRP_PAG COM_NUM_GRUPO_PAG,
            'N'  COM_RUBRICA_TIPO,
           BB.FLG_STATUS COM_FLG_STATUS       ,
           to_date('01/01/1901','dd/mm/yyyy') COM_DAT_CONTRATO,
           0 COM_COD_CONVENIO,
           DECODE(BC.COD_TIPO_BENEFICIO, 'M', 2, 1) AS COM_ASSOCIACAO
           ,RR.COD_CONCEITO   AS  COM_COD_CONCEITO
           ,NULL     AS  COM_COD_FUNCAO
           ,NULL  AS  COM_COD_CARGO_RUB      -- CODIGO DE RUBRICA ASSOCIADO AO CARGO
           ,NULL  AS  COM_COD_REFERENCIA_RUB -- CODIGO DE REFERENCIA ASSOCIADO AO CARGO
           ,NULL  AS  COM_DAT_INCORP_RUB
           ------ Campo Novo Cod_tabela
           ,NULL  AS  COM_COD_TABELA
          ---------------------------------------------------------
          ---- Campos Novos para Controle de Consignatarias. -----
          ---------------------------------------------------------
          ,NULL                    AS  COM_FLG_MODALIDADE
          ,NULL                    AS  COM_FLG_DESC_PARCIAL
          -----------------------------------------------
          -- Variavel para controle de Base de Calculo 13
          -- 06/05/2015
          ----------------------------------------------
          ,CI.VAL_PORC_13         AS   COM_VAL_PORC_13
          ,CI.VAL_FIXO_13         AS   COM_VAL_FIXO_13
          ,CI.VAL_UNIDADE_13      AS   COM_VAL_UNIDADE_13

        --------------- Desenvolvimento Task 3689  --------------
          ,RR.FLG_APLICA_PROP_PENSAO AS COM_APLICA_PROP_PENSAO
      FROM USER_IPESP.TB_COMPOSICAO_INDIV    CI,
           TB_BENEFICIARIO        BB,
           TB_RUBRICAS            RR,
           TB_FORMULA_CALCULO     FC,
           TB_RUBRICAS_PROCESSO   RP,
           TB_CONCESSAO_BENEFICIO BC,
           TB_CONCEITOS_PAG       CP,
           TB_BENEFICIO_CARGO     EC
     WHERE BB.COD_INS = PAR_COD_INS
       AND BB.COD_IDE_CLI_BEN = ben_ide_cli
       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
           to_char(BB.DAT_INI_BEN, 'YYYYMM') and
           to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(BB.DAT_FIM_BEN, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))
       AND BB.FLG_STATUS in ('A', 'H', /*'S',*/ 'X')
       AND CI.FLG_STATUS = 'V'
       AND BB.FLG_REG_ATIV = 'S'
       AND BB.FLG_CONT_BEN = 'N'
       AND BC.COD_INS = BB.COD_INS
       AND BC.COD_BENEFICIO = BB.COD_BENEFICIO
       AND CI.COD_INS = BB.COD_INS
       AND CI.COD_IDE_CLI = BB.COD_IDE_CLI_BEN --efv 20060823
       AND BC.COD_ENTIDADE = RR.COD_ENTIDADE
       AND RR.COD_ENTIDADE = RP.COD_ENTIDADE
       AND RR.COD_ENTIDADE = CP.COD_ENTIDADE
       AND RR.COD_ENTIDADE = FC.COD_ENTIDADE
       AND CI.COD_BEN = BB.COD_BENEFICIO
          --AND trim(BC.COD_TIPO_BENEFICIO) = 'M'
       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
           to_char(CI.DAT_INI_VIG, 'YYYYMM') and
           to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(CI.DAT_FIM_VIG, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))
       AND FC.COD_INS = BB.COD_INS
       AND FC.COD_FCRUBRICA = CI.COD_FCRUBRICA
       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
           to_char(FC.DAT_INI_VIG, 'YYYYMM') and
           to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(FC.DAT_FIM_VIG, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))
       AND FC.TIP_APLICACAO = 'I'
       AND RR.COD_INS = BB.COD_INS
       AND RR.COD_RUBRICA = FC.COD_RUBRICA
       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
           to_char(RR.DAT_INI_VIG, 'YYYYMM') and
           to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(RR.DAT_FIM_VIG, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))
       AND CP.COD_INS = RR.COD_INS
       AND CP.COD_CONCEITO = RR.COD_CONCEITO
       AND RP.COD_INS = RR.COD_INS
       AND RP.COD_RUBRICA = RR.COD_RUBRICA
       AND RP.TIP_PROCESSO = PAR_TIP_PRO
       AND RP.SEQ_VIG >= 0
       AND RP.FLG_PROCESSA = 'S' ---RAO 20060410
       AND RR.SEQ_VIG = RP.SEQ_VIG_RUBRICA
       AND RR.SEQ_VIG = FC.SEQ_VIG_RUBRICA
       AND EC.COD_INS = BC.COD_INS
       AND EC.COD_BENEFICIO = BC.COD_BENEFICIO
       AND EC.COD_IDE_CLI_SERV = BC.COD_IDE_CLI_SERV
       AND EC.COD_IDE_CLI_BEN = bb.cod_ide_cli_ben
       AND EC.COD_ENTIDADE = BC.COD_ENTIDADE
       AND EC.NUM_MATRICULA = BC.NUM_MATRICULA
       AND EC.FLG_STATUS = 'V'
       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
           to_char(EC.DAT_INI_VIG, 'YYYYMM') AND
           to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(EC.DAT_FIM_VIG, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))
       AND  not  EXISTS (
        SELECT 1 FROM  user_ipesp.tb_isensao_tot   ii
        WHERE  ii.cod_ide_cli=bb.cod_ide_cli_ben
       )
      AND NOT ( (  BB.COD_BENEFICIO>=40000000   AND
                    BB.COD_BENEFICIO<=41000000) AND
                    --- Solicitado por Paulo Miranda 25-05-2015
                    BB.COD_BENEFICIO!=40277080 AND
                   (   (BC.COD_ENTIDADE !=31 AND to_char(PAR_PER_PRO, 'YYYYMM') <'201105' )
                    OR ( BC.COD_ENTIDADE =31 AND to_char(PAR_PER_PRO, 'YYYYMM') <'201111' )

                  )
           )
         /*      AND  ( BEN_DISSOCIACAO=0 OR
           (BEN_DISSOCIACAO!=0 AND DECODE(BC.COD_TIPO_BENEFICIO, 'M', 2, 1) =BEN_DISSOCIACAO)
                      )
          */

       -- TT48091 -- DISSOCIAÇÃO DE MAIS DE UM BENEFICIO DE PENSAO
      --   18/07/2018   
      AND  (
            BEN_DISSOCIACAO=0           OR
           (BEN_DISSOCIACAO  !=0 AND DECODE(BC.COD_TIPO_BENEFICIO, 'M', 2, 1) =BEN_DISSOCIACAO ) OR
           (BEN_DISSOCIACAO =3 AND BC.COD_BENEFICIO=COD_BEN_DISSOCIACAO) 
         )
      AND NOT (
               BB.COD_BENEFICIO >40000000 AND BB.COD_BENEFICIO<41000000 AND
               BC.COD_ENTIDADE =5         AND BC.COD_TIPO_BENEFICIO !='M'
            )
    UNION ALL
    --- COMPOSICAO CONSIGNACOES
    SELECT BB.COD_BENEFICIO AS COM_COD_BENEFICIO,
           DECODE(trim(BC.COD_TIPO_BENEFICIO),
                  'M',
                  'PENSIONISTA',
                  'APOSENTADO') AS COM_TIP_BENEFICIO,
           FC.COD_RUBRICA AS COM_COD_RUBRICA,
           FC.COD_FCRUBRICA AS COM_COD_FCRUBRICA,
           FC.SEQ_VIG AS COM_SEQ_VIG_FC,
           'C' AS COM_NAT_COMP,
           null AS COM_NUM_ORD_JUD,
           BC.COD_IDE_CLI_SERV AS COM_IDE_CLI_INSTITUIDOR, --efv
           CC.VAL_CONSIG_QTA AS COM_VAL_FIXO_IND,
           CC.VAL_CONSIG_QTA AS COM_VAL_PORC_IND,
           0 AS COM_VAL_PORC2,
           0 AS COM_QTY_UNID_IND,
           0 AS COM_VAL_UNID,
           'F' AS COM_TIPO_VALOR,
           RR.FLG_QUOTA AS COM_IND_QTAS,
           CC.NUM_QTAS_PAGAS AS COM_NUM_QTAS_PAG,
           CC.NUM_QTAS AS COM_TOT_QTAS_PAG,
           FC.FLG_COMP AS COM_IND_COMP_RUB,
           RR.FLG_NATUREZA AS COM_NAT_RUB,
           cc.dat_ini_refer AS COM_INI_REF,
           cc.dat_fim_refer AS COM_FIM_REF,
           CC.NUM_PRIORIDADE  AS COM_PRIORIDADE,
           CP.FLG_DED_IR AS COM_DED_IR,
           RP.FLG_PROCESSA AS COM_FLG_PROCESSA,
           CP.NAT_VAL AS COM_NAT_VAL,
           FC.TIP_APLICACAO AS COM_TIPO_APLICACAO,
          -- BC.VAL_PERCENT_BEN AS COM_PERCENT_BEN,
           CASE
              WHEN ( BB.COD_BENEFICIO>40000001 AND
                     BB.COD_BENEFICIO<41000000 AND
                     BC.COD_ENTIDADE IN ( 7,6)        AND
                     NVL(BC.NAO_PROPORCIONA_FOLHA,'N')!='S' ) THEN
                     BC.VAL_PERCENT_BEN
               ELSE
                 BC.VAL_PERCENT_BEN  END   AS COM_PERCENT_BEN,


           nvl(RR.TIP_EVENTO_ESPECIAL, 'N') AS COM_TIPO_EVENTO_ESPECIAL,
           null AS COM_VAL_STR1,
           null AS COM_VAL_STR2,
           BC.NUM_MATRICULA AS COM_MATRICULA,
           BC.COD_ENTIDADE AS COM_ENTIDADE,
           EC.COD_CARGO AS COM_CARGO,
           EC.COD_CARGO_APOS AS COM_CARGO_APOS,
           BB.DAT_INI_BEN AS BEN_DAT_INICIO,
           BB.DAT_FIM_BEN AS BEN_DAT_FIM,
           CC.DAT_INI_VIG AS COM_DAT_INI_VIG,
           CC.DAT_FIM_VIG AS COM_DAT_FIM_VIG,
           null AS COM_COD_IDE_CLI_BEN,
           FC.MSC_INFORMACAO AS COM_MSC_INFORMACAO,
           FC.COL_INFORMACAO AS COM_COL_INFORMACAO,
           1 AS COM_PORC_VIG, --RAO 20060321
           RR.DAT_FIM_VIG AS COM_DAT_VIG_RUBRICA, -- MVL
           FC.FLG_APLICA_RATEIO AS COM_APLICA_RATEIO, -- efv
           CC.NUM_SEQ_BENEF AS COM_SEQ_VIG,
           bc.cod_entidade as com_cod_entidade,
           CC.NUM_CARGA              COM_NUM_CARGA                    ,
           CC.NUM_SEQ_CONTROLE_CARGA COM_NUM_SEQ_CONTROLE_CARGA       ,
           BB.COD_PROC_GRP_PAG COM_NUM_GRUPO_PAG,
            'N'  COM_RUBRICA_TIPO,
            BB.FLG_STATUS COM_FLG_STATUS,
           NVL(CC.DAT_CONTRATO,to_date('01/01/1901','dd/mm/yyyy')  ) COM_DAT_CONTRATO,
           CC.COD_CONVENIO    AS COM_COD_CONVENIO,
           DECODE(BC.COD_TIPO_BENEFICIO, 'M', 2, 1) AS COM_ASSOCIACAO
           ,RR.COD_CONCEITO   AS  COM_COD_CONCEITO
           ,NULL     AS  COM_COD_FUNCAO

           ,NULL  AS  COM_COD_CARGO_RUB      -- CODIGO DE RUBRICA ASSOCIADO AO CARGO
           ,NULL  AS  COM_COD_REFERENCIA_RUB -- CODIGO DE REFERENCIA ASSOCIADO AO CARGO
           ,NULL  AS  COM_DAT_INCORP_RUB
           ------ Campo Novo Cod_tabela
           ,NULL  AS  COM_COD_TABELA

          ---------------------------------------------------------
          ---- Campos Novos para Controle de Consignatarias. -----
          ---------------------------------------------------------
          ,CC.FLG_MODALIDADE                  AS  COM_FLG_MODALIDADE
          ,CC.FLG_DESC_PARCIAL                AS  COM_FLG_DESC_PARCIAL
          -----------------------------------------------
          -- Variavel para controle de Base de Calculo 13
          -- 11/08/2015
          ----------------------------------------------
          ,NULL                   AS   COM_VAL_PORC_13
          ,NULL                   AS   COM_VAL_FIXO_13
          ,NULL                   AS   COM_VAL_UNIDADE_13

       --------------- Desenvolvimento Task 3689  --------------
          ,RR.FLG_APLICA_PROP_PENSAO AS COM_APLICA_PROP_PENSAO

      FROM TB_COMPOSICAO_CONSIG   CC,
           TB_BENEFICIARIO        BB,
           TB_RUBRICAS            RR,
           TB_FORMULA_CALCULO     FC,
           TB_RUBRICAS_PROCESSO   RP,
           TB_CONCESSAO_BENEFICIO BC,
           TB_CONCEITOS_PAG       CP,
           TB_BENEFICIO_CARGO     EC
     WHERE BB.COD_INS = PAR_COD_INS
       AND BB.COD_IDE_CLI_BEN = ben_ide_cli
       AND to_char(BB.DAT_INI_BEN, 'YYYYMM') <=
           to_char(PAR_PER_PRO, 'YYYYMM')
       AND (to_char(BB.DAT_FIM_BEN, 'YYYYMM') >=
           to_char(PAR_PER_PRO, 'YYYYMM') or BB.DAT_FIM_BEN is null)
       AND BB.FLG_STATUS in ('A', 'H', /*'S',*/ 'X')
       AND BB.FLG_REG_ATIV = 'S'
       AND BB.FLG_CONT_BEN = 'N'
       AND BC.COD_INS = BB.COD_INS
       AND BC.COD_BENEFICIO = BB.COD_BENEFICIO
       AND BC.COD_ENTIDADE = RR.COD_ENTIDADE
       AND RR.COD_ENTIDADE = RP.COD_ENTIDADE
       AND RR.COD_ENTIDADE = CP.COD_ENTIDADE
       AND RR.COD_ENTIDADE = FC.COD_ENTIDADE
       AND CC.COD_INS = BB.COD_INS
       AND CC.COD_BENEFICIO = BB.COD_BENEFICIO
       AND CC.COD_IDE_CLI_BEN = BB.COD_IDE_CLI_BEN
          --AND trim(BC.COD_TIPO_BENEFICIO) = 'M'
       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
           to_char(CC.DAT_INI_VIG, 'YYYYMM') and
           to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(CC.DAT_FIM_VIG, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))
       AND FC.COD_INS = BB.COD_INS
       AND FC.COD_FCRUBRICA = CC.COD_FCRUBRICA
       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
           to_char(FC.DAT_INI_VIG, 'YYYYMM') and
           to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(FC.DAT_FIM_VIG, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))
       AND FC.TIP_APLICACAO = 'I'
       AND RR.COD_INS = BB.COD_INS
       AND RR.COD_RUBRICA = FC.COD_RUBRICA
       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
           to_char(RR.DAT_INI_VIG, 'YYYYMM') and
           to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(RR.DAT_FIM_VIG, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))
       AND CP.COD_INS = RR.COD_INS
       AND CP.COD_CONCEITO = RR.COD_CONCEITO
       AND RP.COD_INS = RR.COD_INS
       AND RP.COD_RUBRICA = RR.COD_RUBRICA
       AND RP.TIP_PROCESSO = PAR_TIP_PRO
       AND RP.SEQ_VIG >= 0
       AND RP.FLG_PROCESSA = 'S' ---RAO 20060410
       AND RR.SEQ_VIG = RP.SEQ_VIG_RUBRICA
       AND RR.SEQ_VIG = FC.SEQ_VIG_RUBRICA
       AND EC.COD_INS = BC.COD_INS
       AND EC.COD_BENEFICIO = BC.COD_BENEFICIO
       AND EC.COD_IDE_CLI_SERV = BC.COD_IDE_CLI_SERV
       AND EC.COD_ENTIDADE = BC.COD_ENTIDADE
       AND EC.COD_IDE_CLI_BEN = bb.cod_ide_cli_ben
       AND EC.NUM_MATRICULA = BC.NUM_MATRICULA
       AND EC.FLG_STATUS = 'V'
       AND CC.FLG_STATUS = 'V'
       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
           to_char(EC.DAT_INI_VIG, 'YYYYMM') AND
           to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(EC.DAT_FIM_VIG, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))
       AND  not  EXISTS (
        SELECT 1 FROM  user_ipesp.tb_isensao_tot   ii
        WHERE  ii.cod_ide_cli=bb.cod_ide_cli_ben
       )
      AND NOT ( (  BB.COD_BENEFICIO>=40000000   AND
                    BB.COD_BENEFICIO<=41000000) AND
                    --- Solicitado por Paulo Miranda 25-05-2015
                    BB.COD_BENEFICIO!=40277080 AND
                   (   (BC.COD_ENTIDADE !=31 AND to_char(PAR_PER_PRO, 'YYYYMM') <'201105' )
                    OR ( BC.COD_ENTIDADE =31 AND to_char(PAR_PER_PRO, 'YYYYMM') <'201111' )

                  )
           )
         /*      AND  ( BEN_DISSOCIACAO=0 OR
           (BEN_DISSOCIACAO!=0 AND DECODE(BC.COD_TIPO_BENEFICIO, 'M', 2, 1) =BEN_DISSOCIACAO)
                      )
          */

       -- TT48091 -- DISSOCIAÇÃO DE MAIS DE UM BENEFICIO DE PENSAO
      --   18/07/2018   
      AND  (
            BEN_DISSOCIACAO=0           OR
           (BEN_DISSOCIACAO  !=0 AND DECODE(BC.COD_TIPO_BENEFICIO, 'M', 2, 1) =BEN_DISSOCIACAO ) OR
           (BEN_DISSOCIACAO =3 AND BC.COD_BENEFICIO=COD_BEN_DISSOCIACAO) 
         )
      AND NOT (
               BB.COD_BENEFICIO >40000000 AND BB.COD_BENEFICIO<41000000 AND
               BC.COD_ENTIDADE =5         AND BC.COD_TIPO_BENEFICIO !='M'
            )
    ----RUBRICAS DE TIPO GERAL
    UNION ALL
    SELECT BB.COD_BENEFICIO AS COM_COD_BENEFICIO,
           DECODE(trim(BC.COD_TIPO_BENEFICIO),
                  'M',
                  'PENSIONISTA',
                  'APOSENTADO') AS COM_TIP_BENEFICIO,
           FC.COD_RUBRICA AS COM_COD_RUBRICA,
           FC.COD_FCRUBRICA AS COM_COD_FCRUBRICA,
           FC.SEQ_VIG AS COM_SEQ_VIG_FC, -- MVL03
           'G' AS COM_NAT_COMP,
           null AS COM_NUM_ORD_JUD,
           BC.COD_IDE_CLI_SERV AS COM_IDE_CLI_INSTITUIDOR,
           null AS COM_VAL_FIXO_IND,
           null AS COM_VAL_PORC_IND,
           0 AS COM_VAL_PORC2,
           null AS COM_QTY_UNID_IND,
           FC.VAL_UNIDADE AS COM_VAL_UNID,
           FC.TIP_VALOR AS COM_TIPO_VALOR,
           'N' AS COM_IND_QTAS,
           0 AS COM_NUM_QTAS_PAG,
           0 AS COM_TOT_QTAS_PAG,
           FC.FLG_COMP AS COM_IND_COMP_RUB,
           RR.FLG_NATUREZA AS COM_NAT_RUB,
           null AS COM_INI_REF,
           null AS COM_FIM_REF,
           FC.NUM_PRIORIDADE AS COM_PRIORIDADE,
           CP.FLG_DED_IR AS COM_DED_IR,
           RP.FLG_PROCESSA AS COM_FLG_PROCESSA,
           CP.NAT_VAL AS COM_NAT_VAL,
           FC.TIP_APLICACAO AS COM_TIPO_APLICACAO,
         --  BC.VAL_PERCENT_BEN AS COM_PERCENT_BEN,
           CASE
              WHEN ( BB.COD_BENEFICIO>40000001 AND
                     BB.COD_BENEFICIO<41000000 and
                     BC.COD_ENTIDADE IN ( 7,6)         AND
                     NVL(BC.NAO_PROPORCIONA_FOLHA,'N')!='S' ) THEN
                     BC.VAL_PERCENT_BEN
               ELSE
                 BC.VAL_PERCENT_BEN  END   AS COM_PERCENT_BEN,

           nvl(RR.TIP_EVENTO_ESPECIAL, 'N') AS COM_TIPO_EVENTO_ESPECIAL,
           null AS COM_VAL_STR1,
           null AS COM_VAL_STR2,
           BC.NUM_MATRICULA AS COM_MATRICULA,
           BC.COD_ENTIDADE AS COM_ENTIDADE,
           EC.COD_CARGO AS COM_CARGO,
           EC.COD_CARGO_APOS AS COM_CARGO_APOS,
           BB.DAT_INI_BEN AS BEN_DAT_INICIO,
           BB.DAT_FIM_BEN AS BEN_DAT_FIM,
           FC.DAT_INI_VIG AS COM_DAT_INI_VIG,
           FC.DAT_FIM_VIG AS COM_DAT_FIM_VIG,
           null AS COM_COD_IDE_CLI_BEN, --efv 20060823
           FC.MSC_INFORMACAO AS COM_MSC_INFORMACAO,
           FC.COL_INFORMACAO AS COM_COL_INFORMACAO,
           (to_char(decode(rr.dat_fim_vig,
                           null,
                           add_months(PAR_PER_PRO, 1) - 1,
                           rr.dat_fim_vig),
                    'dd') / to_char(decode(rr.dat_fim_vig,
                                            null,
                                            add_months(PAR_PER_PRO, 1) - 1,
                                            last_day(rr.dat_fim_vig)),
                                     'dd')) AS COM_PORC_VIG, --RAO 20060321
           RR.DAT_FIM_VIG AS COM_DAT_VIG_RUBRICA, -- MVL
           FC.FLG_APLICA_RATEIO AS COM_APLICA_RATEIO, -- efv
           RR.SEQ_VIG AS COM_SEQ_VIG,
           bc.cod_entidade as com_cod_entidade,
           0 COM_NUM_CARGA                    ,
           0 COM_NUM_SEQ_CONTROLE_CARGA       ,
           BB.COD_PROC_GRP_PAG COM_NUM_GRUPO_PAG,
            'N'  COM_RUBRICA_TIPO,
           BB.FLG_STATUS COM_FLG_STATUS,
            to_date('01/01/1901','dd/mm/yyyy') COM_DAT_CONTRATO,
           0 COM_COD_CONVENIO,
            DECODE(BC.COD_TIPO_BENEFICIO, 'M', 2, 1) AS COM_ASSOCIACAO
           ,RR.COD_CONCEITO   AS  COM_COD_CONCEITO
           ,NULL     AS  COM_COD_FUNCAO
           ,NULL  AS  COM_COD_CARGO_RUB      -- CODIGO DE RUBRICA ASSOCIADO AO CARGO
           ,NULL  AS  COM_COD_REFERENCIA_RUB -- CODIGO DE REFERENCIA ASSOCIADO AO CARGO
           ,NULL  AS  COM_DAT_INCORP_RUB
           ------ Campo Novo Cod_tabela
           ,NULL  AS  COM_COD_TABELA
          ---------------------------------------------------------
          ---- Campos Novos para Controle de Consignatarias. -----
          ---------------------------------------------------------
          ,NULL                    AS  COM_FLG_MODALIDADE
          ,NULL                    AS  COM_FLG_DESC_PARCIAL
          -----------------------------------------------
          -- Variavel para controle de Base de Calculo 13
          -- 11/08/2015
          ----------------------------------------------
          ,NULL                   AS   COM_VAL_PORC_13
          ,NULL                   AS   COM_VAL_FIXO_13
          ,NULL                   AS   COM_VAL_UNIDADE_13

       --------------- Desenvolvimento Task 3689  --------------
          ,RR.FLG_APLICA_PROP_PENSAO AS COM_APLICA_PROP_PENSAO

      FROM TB_BENEFICIARIO        BB,
           TB_RUBRICAS            RR,
           TB_FORMULA_CALCULO     FC,
           TB_RUBRICAS_PROCESSO   RP,
           TB_CONCESSAO_BENEFICIO BC,
           TB_CONCEITOS_PAG       CP,
           TB_BENEFICIO_CARGO     EC
     WHERE BB.COD_INS = PAR_COD_INS
       AND BB.COD_IDE_CLI_BEN = ben_ide_cli
       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
           to_char(BB.DAT_INI_BEN, 'YYYYMM') and
           to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(BB.DAT_FIM_BEN, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))
       AND BB.FLG_STATUS in ('A', 'H',/* 'S',*/ 'X')
       AND BB.FLG_REG_ATIV = 'S'
       AND BB.FLG_CONT_BEN = 'N'
       AND BC.COD_INS = BB.COD_INS
       AND BC.COD_BENEFICIO = BB.COD_BENEFICIO
       AND BC.COD_ENTIDADE = RR.COD_ENTIDADE
       AND RR.COD_ENTIDADE = RP.COD_ENTIDADE
       AND RR.COD_ENTIDADE = CP.COD_ENTIDADE
       AND RR.COD_ENTIDADE = FC.COD_ENTIDADE
       AND FC.COD_INS = BB.COD_INS
       AND FC.TIP_APLICACAO = 'G'
          --AND trim(BC.COD_TIPO_BENEFICIO) = 'M'
       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
           to_char(FC.DAT_INI_VIG, 'YYYYMM') and
           to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(FC.DAT_FIM_VIG, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))
       AND RR.COD_INS = BB.COD_INS
       AND RR.COD_RUBRICA = FC.COD_RUBRICA
       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
           to_char(RR.DAT_INI_VIG, 'YYYYMM') and
           to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(RR.DAT_FIM_VIG, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))
       AND CP.COD_INS = RR.COD_INS
       AND CP.COD_CONCEITO = RR.COD_CONCEITO
       AND RP.COD_INS = RR.COD_INS
       AND RP.COD_RUBRICA = RR.COD_RUBRICA
       AND RP.TIP_PROCESSO = PAR_TIP_PRO
       AND RP.SEQ_VIG >= 0
       AND RP.FLG_PROCESSA = 'S' ---RAO 20060410
       AND nvl(RR.TIP_EVENTO_ESPECIAL, 'N') <> 'I'
       AND nvl(RR.TIP_EVENTO_ESPECIAL, 'N') <> 'J'
       AND RR.SEQ_VIG = RP.SEQ_VIG_RUBRICA
       AND RR.SEQ_VIG = FC.SEQ_VIG_RUBRICA
       AND EC.COD_INS = BC.COD_INS
       AND EC.COD_BENEFICIO = BC.COD_BENEFICIO
       AND EC.COD_IDE_CLI_SERV = BC.COD_IDE_CLI_SERV
       AND EC.COD_ENTIDADE = BC.COD_ENTIDADE
       AND EC.COD_IDE_CLI_BEN = bb.cod_ide_cli_ben
       AND EC.NUM_MATRICULA = BC.NUM_MATRICULA
       AND EC.FLG_STATUS = 'V'
       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
           to_char(EC.DAT_INI_VIG, 'YYYYMM') AND
           to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(EC.DAT_FIM_VIG, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))

       AND NOT ( (  BB.COD_BENEFICIO>=40000000   AND
                    BB.COD_BENEFICIO<=41000000) AND
                    --- Solicitado por Paulo Miranda 25-05-2015
                    BB.COD_BENEFICIO!=40277080 AND
                   (   (BC.COD_ENTIDADE !=31 AND to_char(PAR_PER_PRO, 'YYYYMM') <'201105' )
                    OR ( BC.COD_ENTIDADE =31 AND to_char(PAR_PER_PRO, 'YYYYMM') <'201111' )

                  )
           )
       AND  not  EXISTS (
        SELECT 1 FROM  user_ipesp.tb_isensao_tot   ii
        WHERE  ii.cod_ide_cli=bb.cod_ide_cli_ben
       )
         /*      AND  ( BEN_DISSOCIACAO=0 OR
           (BEN_DISSOCIACAO!=0 AND DECODE(BC.COD_TIPO_BENEFICIO, 'M', 2, 1) =BEN_DISSOCIACAO)
                      )
          */

       -- TT48091 -- DISSOCIAÇÃO DE MAIS DE UM BENEFICIO DE PENSAO
      --   18/07/2018   
      AND  (
            BEN_DISSOCIACAO=0           OR
           (BEN_DISSOCIACAO  !=0 AND DECODE(BC.COD_TIPO_BENEFICIO, 'M', 2, 1) =BEN_DISSOCIACAO ) OR
           (BEN_DISSOCIACAO =3 AND BC.COD_BENEFICIO=COD_BEN_DISSOCIACAO) 
         )
    AND NOT (
               BB.COD_BENEFICIO >40000000 AND BB.COD_BENEFICIO<41000000 AND
               BC.COD_ENTIDADE =5         AND BC.COD_TIPO_BENEFICIO !='M'
            )

 UNION ALL
    -- A rubrica do IR e processada, apos tudo o calculo
 SELECT BB.COD_BENEFICIO AS COM_COD_BENEFICIO,
           DECODE(trim(BC.COD_TIPO_BENEFICIO),
                  'M',
                  'PENSIONISTA',
                  'APOSENTADO') AS COM_TIP_BENEFICIO,
           RA.COD_RUBRICA   AS COM_COD_RUBRICA,
           RA.COD_FCRUBRICA AS COM_COD_FCRUBRICA,
           CI.SEQ_VIG_FC AS COM_SEQ_VIG_FC,
           'I' AS COM_NAT_COMP,
           CI.NUM_ORD_JUD AS COM_NUM_ORD_JUD,
           BC.COD_IDE_CLI_SERV AS COM_IDE_CLI_INSTITUIDOR, --efv
           CI.VAL_FIXO AS COM_VAL_FIXO_IND,
           CI.VAL_PORC AS COM_VAL_PORC_IND,
           0 AS COM_VAL_PORC2,
           CI.VAL_UNIDADE AS COM_QTY_UNID_IND,
           FC.VAL_UNIDADE AS COM_VAL_UNID,
           FC.TIP_VALOR AS COM_TIPO_VALOR,
           RR.FLG_QUOTA AS COM_IND_QTAS,
           CI.NUM_QTAS_PAGAS AS COM_NUM_QTAS_PAG,
           CI.NUM_QTAS_PAGAS AS COM_TOT_QTAS_PAG,
           FC.FLG_COMP AS COM_IND_COMP_RUB,
           RR.FLG_NATUREZA AS COM_NAT_RUB,
           ci.dat_ini_refer AS COM_INI_REF, -- mvl7
           ci.dat_fim_refer AS COM_FIM_REF, -- mvl7
           FC.NUM_PRIORIDADE AS COM_PRIORIDADE,
           CP.FLG_DED_IR AS COM_DED_IR,
           RP.FLG_PROCESSA AS COM_FLG_PROCESSA,
           CP.NAT_VAL AS COM_NAT_VAL,
           FC.TIP_APLICACAO AS COM_TIPO_APLICACAO,
           BC.VAL_PERCENT_BEN AS COM_PERCENT_BEN,
           nvl(RR.TIP_EVENTO_ESPECIAL, 'N') AS COM_TIPO_EVENTO_ESPECIAL,
           null AS COM_VAL_STR1,
           null AS COM_VAL_STR2,
           BC.NUM_MATRICULA AS COM_MATRICULA,
           BC.COD_ENTIDADE AS COM_ENTIDADE,
           EC.COD_CARGO AS COM_CARGO,
           EC.COD_CARGO_APOS AS COM_CARGO_APOS,
           BB.DAT_INI_BEN AS BEN_DAT_INICIO,
           BB.DAT_FIM_BEN AS BEN_DAT_FIM,
           CI.DAT_INI_VIG AS COM_DAT_INI_VIG, --ROD3
           CI.DAT_FIM_VIG AS COM_DAT_FIM_VIG, --ROD3
           CI.COD_IDE_CLI_BEN AS COM_COD_IDE_CLI_BEN,
             -----------------------------------------------
              -- Variavel para controle de Base de Calculo 13
              -- 11/08/2015
             ----------------------------------------------
             RA.MSC_INFORMACAO AS COM_MSC_INFORMACAO,
             RA.COL_INFORMACAO AS COM_COL_INFORMACAO,
           ----------------------------------------------


           1 AS COM_PORC_VIG, --RAO 20060321
           RR.DAT_FIM_VIG AS COM_DAT_VIG_RUBRICA, -- MVL
           FC.FLG_APLICA_RATEIO AS COM_APLICA_RATEIO, -- efv
           CI.SEQ_VIG AS COM_SEQ_VIG,
           bc.cod_entidade as com_cod_entidade,
           0 COM_NUM_CARGA                    ,
           0 COM_NUM_SEQ_CONTROLE_CARGA       ,
           BB.COD_PROC_GRP_PAG COM_NUM_GRUPO_PAG,
            'A'  COM_RUBRICA_TIPO               ,
           BB.FLG_STATUS COM_FLG_STATUS         ,
          to_date('01/01/1901','dd/mm/yyyy') COM_DAT_CONTRATO,
          0 AS COM_COD_CONVENIO,
           DECODE(BC.COD_TIPO_BENEFICIO, 'M', 2, 1) AS COM_ASSOCIACAO
           ,RR.COD_CONCEITO   AS  COM_COD_CONCEITO
           ,NULL     AS  COM_COD_FUNCAO

          ,NULL  AS  COM_COD_CARGO_RUB      -- CODIGO DE RUBRICA ASSOCIADO AO CARGO
          ,NULL  AS  COM_COD_REFERENCIA_RUB -- CODIGO DE REFERENCIA ASSOCIADO AO CARGO
          ,NULL  AS  COM_DAT_INCORP_RUB
           ------ Campo Novo Cod_tabela
           ,NULL  AS  COM_COD_TABELA
          ---------------------------------------------------------
          ---- Campos Novos para Controle de Consignatarias. -----
          ---------------------------------------------------------
          ,NULL                    AS  COM_FLG_MODALIDADE
          ,NULL                    AS  COM_FLG_DESC_PARCIAL
          -----------------------------------------------
          -- Variavel para controle de Base de Calculo 13
          -- 11/08/2015
          ----------------------------------------------
          ,CI.VAL_PORC_13         AS   COM_VAL_PORC_13
          ,CI.VAL_FIXO_13         AS   COM_VAL_FIXO_13
          ,CI.VAL_UNIDADE_13      AS   COM_VAL_UNIDADE_13
        --------------- Desenvolvimento Task 3689  --------------
          ,RR.FLG_APLICA_PROP_PENSAO AS COM_APLICA_PROP_PENSAO

      FROM TB_COMPOSICAO_INDIV    CI,
           TB_BENEFICIARIO        BB,
           TB_RUBRICAS            RR,
           TB_FORMULA_CALCULO     FC,
           TB_RUBRICAS_PROCESSO   RP,
           TB_CONCESSAO_BENEFICIO BC,
           TB_CONCEITOS_PAG       CP,
           TB_BENEFICIO_CARGO     EC ,
           TB_RUBRICAS_AUTOMATICAS RA

     WHERE BB.COD_INS = 1
       AND BB.COD_IDE_CLI_BEN =  ben_ide_cli
       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
          to_char(BB.DAT_INI_BEN, 'YYYYMM') and
         to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(BB.DAT_FIM_BEN, to_date('01/01/2045', 'dd/mm/yyyy')),
                   'YYYYMM'))
       AND BB.FLG_STATUS in ('A', 'H', /*'S',*/ 'X')
       AND CI.FLG_STATUS = 'V'
       AND BB.FLG_REG_ATIV = 'S'
       AND BB.FLG_CONT_BEN = 'N'
       AND BC.COD_INS = BB.COD_INS
       AND BC.COD_BENEFICIO = BB.COD_BENEFICIO
       AND CI.COD_INS = BB.COD_INS
       AND CI.COD_IDE_CLI = BB.COD_IDE_CLI_BEN --efv 20060823
       AND BC.COD_ENTIDADE = RR.COD_ENTIDADE
       AND RR.COD_ENTIDADE = RP.COD_ENTIDADE
       AND RR.COD_ENTIDADE = CP.COD_ENTIDADE
       AND RR.COD_ENTIDADE = FC.COD_ENTIDADE
       AND CI.COD_BEN = BB.COD_BENEFICIO
          --AND trim(BC.COD_TIPO_BENEFICIO) = 'M'
       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
           to_char(CI.DAT_INI_VIG, 'YYYYMM') and
           to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(CI.DAT_FIM_VIG, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))
       AND FC.COD_INS = BB.COD_INS
       AND FC.COD_FCRUBRICA = CI.COD_FCRUBRICA
      AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
         to_char(FC.DAT_INI_VIG, 'YYYYMM') and
          to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(FC.DAT_FIM_VIG, to_date('01/01/2045', 'dd/mm/yyyy')),
                   'YYYYMM'))
       AND FC.TIP_APLICACAO = 'I'
       AND RR.COD_INS = BB.COD_INS
       AND RR.COD_RUBRICA = FC.COD_RUBRICA
      AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
         to_char(RR.DAT_INI_VIG, 'YYYYMM') and
        to_char(PAR_PER_PRO, 'YYYYMM') <=
          to_char(nvl(RR.DAT_FIM_VIG, to_date('01/01/2045', 'dd/mm/yyyy')),
                  'YYYYMM'))
       AND CP.COD_INS = RR.COD_INS
       AND CP.COD_CONCEITO = RR.COD_CONCEITO
       AND RP.COD_INS = RR.COD_INS
       AND RP.COD_RUBRICA = RA.COD_RUBRICA
       AND RP.TIP_PROCESSO = 'N'
       AND RP.SEQ_VIG >= 0
       AND RP.FLG_PROCESSA = 'S' ---RAO 20060410
       AND RR.SEQ_VIG = RP.SEQ_VIG_RUBRICA
       AND RR.SEQ_VIG = FC.SEQ_VIG_RUBRICA
       AND EC.COD_INS = BC.COD_INS
       AND EC.COD_BENEFICIO = BC.COD_BENEFICIO
       AND EC.COD_IDE_CLI_SERV = BC.COD_IDE_CLI_SERV
       AND EC.COD_IDE_CLI_BEN = bb.cod_ide_cli_ben
       AND EC.COD_ENTIDADE = BC.COD_ENTIDADE
       AND EC.NUM_MATRICULA = BC.NUM_MATRICULA
       AND EC.FLG_STATUS = 'V'
      AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
          to_char(EC.DAT_INI_VIG, 'YYYYMM')
     AND  to_char(PAR_PER_PRO, 'YYYYMM') <=
          to_char(nvl(EC.DAT_FIM_VIG, to_date('01/01/2045', 'dd/mm/yyyy')),
                     'YYYYMM'))
 --      AND NOT (BB.COD_BENEFICIO>=40000000 AND BB.COD_BENEFICIO<=41000000)
       AND RA.COD_INS=FC.COD_INS
       AND RA.COD_FCRUBRICA_ASSOC =FC.COD_FCRUBRICA
       AND RA.COD_ENTIDADE        =FC.COD_ENTIDADE
       AND   (to_char(PAR_PER_PRO, 'YYYYMM') >=
           to_char(RA.DAT_INI_VIG, 'YYYYMM') AND
           to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(RA.DAT_FIM_VIG, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))
       AND  not  EXISTS (
        SELECT 1 FROM  user_ipesp.tb_isensao_tot   ii
        WHERE  ii.cod_ide_cli=bb.cod_ide_cli_ben
       )

       AND NOT ( (  BB.COD_BENEFICIO>=40000000   AND
                    BB.COD_BENEFICIO<=41000000) AND
                    --- Solicitado por Paulo Miranda 25-05-2015
                    BB.COD_BENEFICIO!=40277080 AND
                   (   (BC.COD_ENTIDADE !=31 AND to_char(PAR_PER_PRO, 'YYYYMM') <'201105' )
                    OR ( BC.COD_ENTIDADE =31 AND to_char(PAR_PER_PRO, 'YYYYMM') <'201111' )

                  )
           )

         /*      AND  ( BEN_DISSOCIACAO=0 OR
           (BEN_DISSOCIACAO!=0 AND DECODE(BC.COD_TIPO_BENEFICIO, 'M', 2, 1) =BEN_DISSOCIACAO)
                      )
          */

       -- TT48091 -- DISSOCIAÇÃO DE MAIS DE UM BENEFICIO DE PENSAO
      --   18/07/2018   
      AND  (
            BEN_DISSOCIACAO=0           OR
           (BEN_DISSOCIACAO  !=0 AND DECODE(BC.COD_TIPO_BENEFICIO, 'M', 2, 1) =BEN_DISSOCIACAO ) OR
           (BEN_DISSOCIACAO =3 AND BC.COD_BENEFICIO=COD_BEN_DISSOCIACAO) 
         )
        ---------------- CONTROLE PARA NAO PROCESSAR  FOLHA------
        AND NOT  EXISTS (
         SELECT 1 FROM TB_NAO_PROCESSA_PA_13  NPA
         WHERE NPA.COD_INS=1                           AND
               NPA.COD_BENEFICIO=CI.COD_BEN            AND
               NPA.COD_IDE_CLI =CI.COD_IDE_CLI         AND
               NPA.COD_IDE_CLI_BEN=CI.COD_IDE_CLI_BEN  AND
               (to_char(PAR_PER_PRO, 'YYYYMM') >=
                to_char(NPA.DAT_INI_VIG, 'YYYYMM')     AND
                to_char(PAR_PER_PRO, 'YYYYMM') <=
                to_char(nvl(NPA.DAT_FIM_VIG, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))
           AND  NVL(NPA.FLG_STATUS,'V')='V'
           AND  NPA.COD_RUBRICA=CI.COD_FCRUBRICA

        )


        ----------------------------------------------------------
      AND NOT (
               BB.COD_BENEFICIO >40000000 AND BB.COD_BENEFICIO<41000000 AND
               BC.COD_ENTIDADE =5         AND BC.COD_TIPO_BENEFICIO !='M'
            )
   ------------------------------------------------------------------

       -------------------- PROCESO DE BLOQUEIO DE DEBITOS ----------------
      UNION ALL
       --- COMPOSICAO BLOQUEIO PAGAMENTO
    SELECT BB.COD_BENEFICIO AS COM_COD_BENEFICIO,
           DECODE(trim(BC.COD_TIPO_BENEFICIO),
                  'M',
                  'PENSIONISTA',
                  'APOSENTADO') AS COM_TIP_BENEFICIO,
           FC.COD_RUBRICA AS COM_COD_RUBRICA,
           FC.COD_FCRUBRICA AS COM_COD_FCRUBRICA,
           /*CI.SEQ_VIG*/ FC.SEQ_VIG   AS COM_SEQ_VIG_FC,
           'I'   AS COM_NAT_COMP,
           NULL  AS COM_NUM_ORD_JUD,
           BC.COD_IDE_CLI_SERV AS COM_IDE_CLI_INSTITUIDOR, --efv
           CI.VAL_FIXO AS COM_VAL_FIXO_IND,
           0  AS COM_VAL_PORC_IND,
           0 AS COM_VAL_PORC2,
           0 AS COM_QTY_UNID_IND,
           FC.VAL_UNIDADE AS COM_VAL_UNID,
           FC.TIP_VALOR AS COM_TIPO_VALOR,
           RR.FLG_QUOTA AS COM_IND_QTAS,
           0 AS COM_NUM_QTAS_PAG,
           0 AS COM_TOT_QTAS_PAG,
           FC.FLG_COMP AS COM_IND_COMP_RUB,
           RR.FLG_NATUREZA AS COM_NAT_RUB,
           ci.dat_ini_ref  AS COM_INI_REF,
           NULL AS COM_FIM_REF,
           FC.NUM_PRIORIDADE AS COM_PRIORIDADE,
           CP.FLG_DED_IR AS COM_DED_IR,
           RP.FLG_PROCESSA AS COM_FLG_PROCESSA,
           CP.NAT_VAL AS COM_NAT_VAL,
           FC.TIP_APLICACAO AS COM_TIPO_APLICACAO,
   --      BC.VAL_PERCENT_BEN AS COM_PERCENT_BEN,

                      CASE
              WHEN ( BB.COD_BENEFICIO>40000001 AND
                     BB.COD_BENEFICIO<41000000 AND
                     BC.COD_ENTIDADE IN ( 7,6)        AND
                     NVL(BC.NAO_PROPORCIONA_FOLHA,'N')!='S' ) THEN
                     BC.VAL_PERCENT_BEN
               ELSE
                 BC.VAL_PERCENT_BEN  END   AS COM_PERCENT_BEN,


           nvl(RR.TIP_EVENTO_ESPECIAL, 'N') AS COM_TIPO_EVENTO_ESPECIAL,
           null AS COM_VAL_STR1,
           null AS COM_VAL_STR2,
           BC.NUM_MATRICULA AS COM_MATRICULA,
           BC.COD_ENTIDADE AS COM_ENTIDADE,
           EC.COD_CARGO AS COM_CARGO,
           EC.COD_CARGO_APOS AS COM_CARGO_APOS,
           BB.DAT_INI_BEN AS BEN_DAT_INICIO,
           BB.DAT_FIM_BEN AS BEN_DAT_FIM,
           CI.DAT_INI_REF AS COM_DAT_INI_VIG,
           NULL               AS COM_DAT_FIM_VIG,
           NULL               AS COM_COD_IDE_CLI_BEN,
           FC.MSC_INFORMACAO  AS COM_MSC_INFORMACAO,
           FC.COL_INFORMACAO  AS COM_COL_INFORMACAO,
           1 AS COM_PORC_VIG, --RAO 20060321
           RR.DAT_FIM_VIG       AS COM_DAT_VIG_RUBRICA, -- MVL
           FC.FLG_APLICA_RATEIO AS COM_APLICA_RATEIO, -- efv
           CI.SEQ_VIG AS COM_SEQ_VIG,
           bc.cod_entidade as com_cod_entidade,
           0 COM_NUM_CARGA                    ,
           0 COM_NUM_SEQ_CONTROLE_CARGA       ,
           BB.COD_PROC_GRP_PAG COM_NUM_GRUPO_PAG,
            'N'  COM_RUBRICA_TIPO,
           BB.FLG_STATUS COM_FLG_STATUS       ,
           to_date('01/01/1901','dd/mm/yyyy') COM_DAT_CONTRATO,
           0 COM_COD_CONVENIO,
           DECODE(BC.COD_TIPO_BENEFICIO, 'M', 2, 1) AS COM_ASSOCIACAO
           ,RR.COD_CONCEITO   AS  COM_COD_CONCEITO
           ,NULL     AS  COM_COD_FUNCAO
           ,NULL  AS  COM_COD_CARGO_RUB      -- CODIGO DE RUBRICA ASSOCIADO AO CARGO
           ,NULL  AS  COM_COD_REFERENCIA_RUB -- CODIGO DE REFERENCIA ASSOCIADO AO CARGO
           ,NULL  AS  COM_DAT_INCORP_RUB
           ------ Campo Novo Cod_tabela
           ,NULL  AS  COM_COD_TABELA
          ---------------------------------------------------------
          ---- Campos Novos para Controle de Consignatarias. -----
          ---------------------------------------------------------
          ,NULL                    AS  COM_FLG_MODALIDADE
          ,NULL                    AS  COM_FLG_DESC_PARCIAL
          -----------------------------------------------
          -- Variavel para controle de Base de Calculo 13
          -- 11/08/2015
          ----------------------------------------------
          ,NULL          AS   COM_VAL_PORC_13
          ,NULL          AS   COM_VAL_FIXO_13
          ,NULL          AS   COM_VAL_UNIDADE_13

       --------------- Desenvolvimento Task 3689  --------------
          ,RR.FLG_APLICA_PROP_PENSAO AS COM_APLICA_PROP_PENSAO

      FROM tb_bloqueio_debito      CI,
           TB_BENEFICIARIO        BB,
           TB_RUBRICAS            RR,
           TB_FORMULA_CALCULO     FC,
           TB_RUBRICAS_PROCESSO   RP,
           TB_CONCESSAO_BENEFICIO BC,
           TB_CONCEITOS_PAG       CP,
           TB_BENEFICIO_CARGO     EC
     WHERE BB.COD_INS = PAR_COD_INS
       AND BB.COD_IDE_CLI_BEN = ben_ide_cli
       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
           to_char(BB.DAT_INI_BEN, 'YYYYMM') and
           to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(BB.DAT_FIM_BEN, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))
       AND BB.FLG_STATUS in ('A', 'H', /*'S',*/ 'X')
       AND CI.FLG_STATUS = 'V'
       AND BB.FLG_REG_ATIV = 'S'
       AND BB.FLG_CONT_BEN = 'N'
       AND BC.COD_INS = BB.COD_INS
       AND BC.COD_BENEFICIO = BB.COD_BENEFICIO
       AND CI.COD_INS = BB.COD_INS
       AND CI.COD_IDE_CLI = BB.COD_IDE_CLI_BEN
       AND BC.COD_ENTIDADE = RR.COD_ENTIDADE
       AND RR.COD_ENTIDADE = RP.COD_ENTIDADE
       AND RR.COD_ENTIDADE = CP.COD_ENTIDADE
       AND RR.COD_ENTIDADE = FC.COD_ENTIDADE
       AND CI.COD_BENEFICIO= BB.COD_BENEFICIO
       AND CI.DAT_INI_REF   = PAR_PER_PRO
       AND PAR_TIP_PRO      ='R'

       AND FC.COD_INS = BB.COD_INS
       AND FC.COD_FCRUBRICA = CI.COD_FCRUBRICA

        AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
           to_char(FC.DAT_INI_VIG, 'YYYYMM') and
           to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(FC.DAT_FIM_VIG, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))
       AND FC.TIP_APLICACAO = 'I'
       AND RR.COD_INS       = BB.COD_INS
       AND RR.COD_RUBRICA   = FC.COD_RUBRICA
        AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
           to_char(RR.DAT_INI_VIG, 'YYYYMM') and
           to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(RR.DAT_FIM_VIG, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))
       AND CP.COD_INS      = RR.COD_INS
       AND CP.COD_CONCEITO = RR.COD_CONCEITO
       AND RP.COD_INS      = RR.COD_INS
       AND RP.COD_RUBRICA  = RR.COD_RUBRICA
       AND RP.TIP_PROCESSO = PAR_TIP_PRO
       AND RP.SEQ_VIG      >= 0
       AND RP.FLG_PROCESSA = 'S'
       AND RR.SEQ_VIG = RP.SEQ_VIG_RUBRICA
       AND RR.SEQ_VIG = FC.SEQ_VIG_RUBRICA
       AND EC.COD_INS = BC.COD_INS
       AND EC.COD_BENEFICIO = BC.COD_BENEFICIO
       AND EC.COD_IDE_CLI_SERV = BC.COD_IDE_CLI_SERV
       AND EC.COD_IDE_CLI_BEN = bb.cod_ide_cli_ben
       AND EC.COD_ENTIDADE = BC.COD_ENTIDADE
       AND EC.NUM_MATRICULA = BC.NUM_MATRICULA
       AND EC.FLG_STATUS = 'V'
       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
           to_char(EC.DAT_INI_VIG, 'YYYYMM') AND
           to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(EC.DAT_FIM_VIG, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))
       AND  not  EXISTS (
        SELECT 1 FROM   tb_isensao_tot   ii
        WHERE  ii.cod_ide_cli=bb.cod_ide_cli_ben
       )
      AND NOT ( (  BB.COD_BENEFICIO>=40000000   AND
                    BB.COD_BENEFICIO<=41000000) AND
                    --- Solicitado por Paulo Miranda 25-05-2015
                    BB.COD_BENEFICIO!=40277080 AND
                   (   (BC.COD_ENTIDADE !=31 AND to_char(PAR_PER_PRO, 'YYYYMM') <'201105' )
                    OR ( BC.COD_ENTIDADE =31 AND to_char(PAR_PER_PRO, 'YYYYMM') <'201111' )

                  )
           )
         /*      AND  ( BEN_DISSOCIACAO=0 OR
           (BEN_DISSOCIACAO!=0 AND DECODE(BC.COD_TIPO_BENEFICIO, 'M', 2, 1) =BEN_DISSOCIACAO)
                      )
          */

       -- TT48091 -- DISSOCIAÇÃO DE MAIS DE UM BENEFICIO DE PENSAO
      --   18/07/2018   
      AND  (
            BEN_DISSOCIACAO=0           OR
           (BEN_DISSOCIACAO  !=0 AND DECODE(BC.COD_TIPO_BENEFICIO, 'M', 2, 1) =BEN_DISSOCIACAO ) OR
           (BEN_DISSOCIACAO =3 AND BC.COD_BENEFICIO=COD_BEN_DISSOCIACAO) 
         )

     -------------------- FIM DE BLOQUEIO DE DEBITOS ---------------------



   ------------------------------------------------------------------
     ORDER BY
              COM_COD_BENEFICIO,
              COM_PRIORIDADE,
              COM_DAT_CONTRATO,
              COM_COD_RUBRICA,
              COM_DAT_INI_VIG;
              
    -----------------Cursores Artigo 133 ----------
       ---- CURSOS DE DIFERENCA DE VENCIMENTOS ----
    -----------------------------------------------

   CURSOR CUR_COMPBEN_DIFVEN IS
    SELECT 
           BB.COD_BENEFICIO AS COM_COD_BENEFICIO,
           DECODE(trim(BC.COD_TIPO_BENEFICIO),
                  'M',
                  'PENSIONISTA',
                  'APOSENTADO') AS COM_TIP_BENEFICIO,
           FC.COD_RUBRICA AS COM_COD_RUBRICA,
           FC.COD_FCRUBRICA AS COM_COD_FCRUBRICA,
           FC.SEQ_VIG AS COM_SEQ_VIG_FC, -- MVL03
           'B' AS COM_NAT_COMP,
           null AS COM_NUM_ORD_JUD,
           bc.cod_ide_cli_serv  AS COM_IDE_CLI_INSTITUIDOR,
           CE.VAL_FIXO AS COM_VAL_FIXO_IND,
           CE.VAL_PORC AS COM_VAL_PORC_IND,
           CE.VAL_PORC2 AS COM_VAL_PORC2,
           CE.VAL_INIDADE AS COM_QTY_UNID_IND,
           FC.VAL_UNIDADE AS COM_VAL_UNID,
           FC.TIP_VALOR AS COM_TIPO_VALOR,
           'N' AS COM_IND_QTAS,
           0 AS COM_NUM_QTAS_PAG,
           0 AS COM_TOT_QTAS_PAG,
           FC.FLG_COMP AS COM_IND_COMP_RUB,
           RR.FLG_NATUREZA AS COM_NAT_RUB,
           null AS COM_INI_REF,
           null AS COM_FIM_REF,
           FC.NUM_PRIORIDADE AS COM_PRIORIDADE,
           CP.FLG_DED_IR AS COM_DED_IR,
           RP.FLG_PROCESSA AS COM_FLG_PROCESSA,
           CP.NAT_VAL AS COM_NAT_VAL,
           FC.TIP_APLICACAO AS COM_TIPO_APLICACAO,
           --      BC.VAL_PERCENT_BEN AS COM_PERCENT_BEN,
           CASE
             WHEN (BB.COD_BENEFICIO > 40000001 AND
                  BB.COD_BENEFICIO < 41000000 and BC.COD_ENTIDADE IN (7, 6) AND
                  NVL(BC.NAO_PROPORCIONA_FOLHA, 'N') != 'S') THEN
              BC.VAL_PERCENT_BEN
             ELSE
              BC.VAL_PERCENT_BEN
           END AS COM_PERCENT_BEN,

           nvl(RR.TIP_EVENTO_ESPECIAL, 'N') AS COM_TIPO_EVENTO_ESPECIAL,
           CE.VAL_STR1 AS COM_VAL_STR1,
           CE.VAL_STR2 AS COM_VAL_STR2,
           BC.NUM_MATRICULA AS COM_MATRICULA,
           BC.COD_ENTIDADE AS COM_ENTIDADE,
           EC.COD_CARGO AS COM_CARGO,
           EC.COD_CARGO_APOS AS COM_CARGO_APOS,
           BB.DAT_INI_BEN AS BEN_DAT_INICIO,
           BB.DAT_FIM_BEN AS BEN_DAT_FIM,
           CE.DAT_INI_VIG AS COM_DAT_INI_VIG,
           CE.DAT_FIM_VIG AS COM_DAT_FIM_VIG,
           null AS COM_COD_IDE_CLI_BEN,
           FC.MSC_INFORMACAO AS COM_MSC_INFORMACAO,
           FC.COL_INFORMACAO AS COM_COL_INFORMACAO,
           1 AS COM_PORC_VIG, --RAO 20060321
           RR.DAT_FIM_VIG AS COM_DAT_VIG_RUBRICA, -- MVL
           FC.FLG_APLICA_RATEIO AS COM_APLICA_RATEIO, -- efv
           CE.SEQ_VIG AS COM_SEQ_VIG,
           BC.cod_entidade as com_cod_entidade,
           0 COM_NUM_CARGA,
           0 COM_NUM_SEQ_CONTROLE_CARGA,
           BB.COD_PROC_GRP_PAG COM_NUM_GRUPO_PAG,
           'N' COM_RUBRICA_TIPO,
           BB.FLG_STATUS COM_FLG_STATUS,
           to_date('01/01/1901', 'dd/mm/yyyy') COM_DAT_CONTRATO,
           0 COM_COD_CONVENIO,

           DECODE(BC.COD_TIPO_BENEFICIO, 'M', 2, 1) AS COM_ASSOCIACAO,
           RR.FLG_MUDA_BASE                         AS COM_FLG_MUDA_BASE
           /*           ,
           1 COM_TIPO_COMPOSICAO_DIFV*/
           ,CE.COD_TABELA                           AS  COM_COD_TABELA
       --------------- Desenvolvimento Task 3689  --------------
          ,RR.FLG_APLICA_PROP_PENSAO AS COM_APLICA_PROP_PENSAO
      FROM TB_COMPOSICAO_BEN      CE,
           TB_BENEFICIARIO        BB,
           TB_RUBRICAS            RR,
           TB_FORMULA_CALCULO     FC,
           TB_RUBRICAS_PROCESSO   RP,
           TB_CONCESSAO_BENEFICIO BC,
           TB_CONCEITOS_PAG       CP,
           TB_BENEFICIO_CARGO     EC 
     WHERE BB.COD_INS         = PAR_COD_INS
       AND BB.COD_IDE_CLI_BEN = ben_ide_cli
       AND BB.COD_BENEFICIO   = COM_COD_BENE_DIF_VENC
       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
           to_char(BB.DAT_INI_BEN, 'YYYYMM') AND
           to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(BB.DAT_FIM_BEN, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))
       AND BB.FLG_STATUS in ('A', 'H', 'X')
       AND BB.FLG_REG_ATIV = 'S'
       AND BB.FLG_CONT_BEN = 'N'
       AND BC.COD_INS = BB.COD_INS
       AND BC.COD_BENEFICIO = BB.COD_BENEFICIO
       AND BC.COD_ENTIDADE = RR.COD_ENTIDADE
       AND RR.COD_ENTIDADE = RP.COD_ENTIDADE
       AND RR.COD_ENTIDADE = CP.COD_ENTIDADE
       AND FC.COD_ENTIDADE = RR.COD_ENTIDADE

       AND CE.COD_INS = BB.COD_INS
       AND CE.COD_BENEFICIO = BB.COD_BENEFICIO
       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
           to_char(CE.DAT_INI_VIG, 'YYYYMM') AND
           to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(CE.DAT_FIM_VIG, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))
       AND FC.COD_INS = BB.COD_INS
       AND FC.COD_FCRUBRICA = CE.COD_FCRUBRICA
       AND FC.TIP_APLICACAO = 'I'
       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
           to_char(FC.DAT_INI_VIG, 'YYYYMM') AND
           to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(FC.DAT_FIM_VIG, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))
       AND RR.COD_INS = BB.COD_INS
       AND RR.COD_RUBRICA = FC.COD_RUBRICA
       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
           to_char(RR.DAT_INI_VIG, 'YYYYMM') AND
           to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(RR.DAT_FIM_VIG, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))
       AND CP.COD_INS = RR.COD_INS
       AND CP.COD_CONCEITO = RR.COD_CONCEITO
       AND RP.COD_INS = RR.COD_INS
       AND RP.COD_RUBRICA = RR.COD_RUBRICA
       AND RP.TIP_PROCESSO = 'N' ---PAR_TIP_PRO
       AND RP.SEQ_VIG >= 0
       AND RP.FLG_PROCESSA = 'S'
       AND RR.SEQ_VIG = RP.SEQ_VIG_RUBRICA
       AND RR.SEQ_VIG = FC.SEQ_VIG_RUBRICA
       AND CE.FLG_STATUS = 'V'
       AND EC.COD_INS = BC.COD_INS
       AND EC.COD_BENEFICIO = BC.COD_BENEFICIO
       AND EC.COD_IDE_CLI_SERV = BC.COD_IDE_CLI_SERV
       AND EC.COD_IDE_CLI_BEN = BB.COD_IDE_CLI_BEN
       AND EC.COD_ENTIDADE = BC.COD_ENTIDADE
       AND EC.NUM_MATRICULA = BC.NUM_MATRICULA
       AND EC.COD_IDE_REL_FUNC = BC.COD_IDE_REL_FUNC
       AND EC.FLG_STATUS = 'V'
       AND CE.IND_OPCAO = EC.IND_OPCAO
       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
           to_char(EC.DAT_INI_VIG, 'YYYYMM') AND
           to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(EC.DAT_FIM_VIG, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))
       AND NOT
            ((BB.COD_BENEFICIO >= 40000000 AND BB.COD_BENEFICIO <= 41000000) AND
            ((BC.COD_ENTIDADE != 31 AND
            to_char(PAR_PER_PRO, 'YYYYMM') < '201105') OR
            (BC.COD_ENTIDADE = 31 AND
            to_char(PAR_PER_PRO, 'YYYYMM') < '201111')

            ))
         AND EXISTS
       ---- Modificado 16-09-2013----------
      (
              (SELECT 1
                      FROM TB_rub_dif_vencimento PP,
                           Tb_Rubrica_Correspondente CRR
                     WHERE PP.COD_INS      = BB.COD_INS
                       AND PP.COD_ENTIDADE = COM_ENTIDADE_DIF_VENC
                       AND PP.COD_CONCEITO = COM_CONCEITO_DIF_VENC
                       AND PP.COD_CARGO    = COM_CARGO_DIF_VENC
                       AND CRR.COD_INS     = BB.COD_INS
                       AND CRR.COD_ENTIDADE= COM_ENTIDADE_DIF_VENC
                       AND CRR.COD_RUBRICA_CORRESP =PP.COD_FCRUBRICA
                       AND CRR.FLG_STATUS          ='V'
                       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
                           to_char(CRR.DAT_INI_VIG, 'YYYYMM') AND
                           to_char(PAR_PER_PRO, 'YYYYMM') <=
                           to_char(nvl(CRR.DAT_FIM_VIG,
                                        to_date('01/01/2045', 'dd/mm/yyyy')),
                                    'YYYYMM'))
                       
                       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
                           to_char(PP.DAT_INI_VIG, 'YYYYMM') AND
                           to_char(PAR_PER_PRO, 'YYYYMM') <=
                           to_char(nvl(PP.DAT_FIM_VIG,
                                        to_date('01/01/2045', 'dd/mm/yyyy')),
                                    'YYYYMM'))
                       AND FC.COD_INS       = BB.COD_INS
                       AND RR.COD_CONCEITO  = TRUNC(PP.COD_FCRUBRICA / 100)
                       AND PP.FLG_COND_CALC = 'S'
             ) 
             
       )
  -------------------------------------------------------------
  ------------------------- TASK 2805 -------------------------
  -------------------------------------------------------------
  UNION ALL
      SELECT
           BB.COD_BENEFICIO AS COM_COD_BENEFICIO,
           DECODE(trim(BC.COD_TIPO_BENEFICIO),
                  'M',
                  'PENSIONISTA',
                  'APOSENTADO') AS COM_TIP_BENEFICIO,
           CRR1.COD_RUBRICA AS COM_COD_RUBRICA      , ---- Transforma Rubrica associada
           CRR1.COD_RUBRICA AS COM_COD_FCRUBRICA    , ---- Transforma Rubrica associada
           FC.SEQ_VIG AS COM_SEQ_VIG_FC, -- MVL03
           'B' AS COM_NAT_COMP,
           null AS COM_NUM_ORD_JUD,
           bc.cod_ide_cli_serv  AS COM_IDE_CLI_INSTITUIDOR,
           CE.VAL_FIXO AS COM_VAL_FIXO_IND,
           CE.VAL_PORC AS COM_VAL_PORC_IND,
           CE.VAL_PORC2 AS COM_VAL_PORC2,
           CE.VAL_INIDADE AS COM_QTY_UNID_IND,
           FC.VAL_UNIDADE AS COM_VAL_UNID,
           FC.TIP_VALOR AS COM_TIPO_VALOR,
           'N' AS COM_IND_QTAS,
           0 AS COM_NUM_QTAS_PAG,
           0 AS COM_TOT_QTAS_PAG,
           FC.FLG_COMP AS COM_IND_COMP_RUB,
           RR.FLG_NATUREZA AS COM_NAT_RUB,
           null AS COM_INI_REF,
           null AS COM_FIM_REF,
           FC.NUM_PRIORIDADE AS COM_PRIORIDADE,
           CP.FLG_DED_IR AS COM_DED_IR,
           RP.FLG_PROCESSA AS COM_FLG_PROCESSA,
           CP.NAT_VAL AS COM_NAT_VAL,
           FC.TIP_APLICACAO AS COM_TIPO_APLICACAO,
           --      BC.VAL_PERCENT_BEN AS COM_PERCENT_BEN,
           CASE
             WHEN (BB.COD_BENEFICIO > 40000001 AND
                  BB.COD_BENEFICIO < 41000000 and BC.COD_ENTIDADE IN (7, 6) AND
                  NVL(BC.NAO_PROPORCIONA_FOLHA, 'N') != 'S') THEN
              BC.VAL_PERCENT_BEN
             ELSE
              BC.VAL_PERCENT_BEN
           END AS COM_PERCENT_BEN,

           nvl(RR.TIP_EVENTO_ESPECIAL, 'N') AS COM_TIPO_EVENTO_ESPECIAL,
           CE.VAL_STR1 AS COM_VAL_STR1,
           CE.VAL_STR2 AS COM_VAL_STR2,
           BC.NUM_MATRICULA AS COM_MATRICULA,
           BC.COD_ENTIDADE AS COM_ENTIDADE,
           EC.COD_CARGO AS COM_CARGO,
           EC.COD_CARGO_APOS AS COM_CARGO_APOS,
           BB.DAT_INI_BEN AS BEN_DAT_INICIO,
           BB.DAT_FIM_BEN AS BEN_DAT_FIM,
           CE.DAT_INI_VIG AS COM_DAT_INI_VIG,
           CE.DAT_FIM_VIG AS COM_DAT_FIM_VIG,
           null AS COM_COD_IDE_CLI_BEN,
           FC.MSC_INFORMACAO AS COM_MSC_INFORMACAO,
           FC.COL_INFORMACAO AS COM_COL_INFORMACAO,
           1 AS COM_PORC_VIG, --RAO 20060321
           RR.DAT_FIM_VIG AS COM_DAT_VIG_RUBRICA, -- MVL
           FC.FLG_APLICA_RATEIO AS COM_APLICA_RATEIO, -- efv
           CE.SEQ_VIG AS COM_SEQ_VIG,
           BC.cod_entidade as com_cod_entidade,
           0 COM_NUM_CARGA,
           0 COM_NUM_SEQ_CONTROLE_CARGA,
           BB.COD_PROC_GRP_PAG COM_NUM_GRUPO_PAG,
           'N' COM_RUBRICA_TIPO,
           BB.FLG_STATUS COM_FLG_STATUS,
           to_date('01/01/1901', 'dd/mm/yyyy') COM_DAT_CONTRATO,
           0 COM_COD_CONVENIO,

           DECODE(BC.COD_TIPO_BENEFICIO, 'M', 2, 1) AS COM_ASSOCIACAO,
           RR.FLG_MUDA_BASE                         AS COM_FLG_MUDA_BASE
           /*           ,
           1 COM_TIPO_COMPOSICAO_DIFV*/
           ,CE.COD_TABELA                           AS  COM_COD_TABELA
       --------------- Desenvolvimento Task 3689  --------------
          ,RR.FLG_APLICA_PROP_PENSAO AS COM_APLICA_PROP_PENSAO
      FROM TB_COMPOSICAO_BEN      CE,
           TB_BENEFICIARIO        BB,
           TB_RUBRICAS            RR,
           TB_FORMULA_CALCULO     FC,
           TB_RUBRICAS_PROCESSO   RP,
           TB_CONCESSAO_BENEFICIO BC,
           TB_CONCEITOS_PAG       CP,
           TB_BENEFICIO_CARGO     EC,
           TB_RUBRICA_CORRESPONDENTE CRR1
     WHERE BB.COD_INS         = PAR_COD_INS
       AND BB.COD_IDE_CLI_BEN = ben_ide_cli
       AND BB.COD_BENEFICIO   = COM_COD_BENE_DIF_VENC
       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
           to_char(BB.DAT_INI_BEN, 'YYYYMM') AND
           to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(BB.DAT_FIM_BEN, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))
       AND BB.FLG_STATUS in ('A', 'H', 'X')
       AND BB.FLG_REG_ATIV = 'S'
       AND BB.FLG_CONT_BEN = 'N'
       AND BC.COD_INS = BB.COD_INS
       AND BC.COD_BENEFICIO = BB.COD_BENEFICIO
       AND BC.COD_ENTIDADE = RR.COD_ENTIDADE
       AND RR.COD_ENTIDADE = RP.COD_ENTIDADE
       AND RR.COD_ENTIDADE = CP.COD_ENTIDADE
       AND FC.COD_ENTIDADE = RR.COD_ENTIDADE

       AND CE.COD_INS = BB.COD_INS
       AND CE.COD_BENEFICIO = BB.COD_BENEFICIO
       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
           to_char(CE.DAT_INI_VIG, 'YYYYMM') AND
           to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(CE.DAT_FIM_VIG, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))
       AND FC.COD_INS = BB.COD_INS
       AND FC.COD_FCRUBRICA = CE.COD_FCRUBRICA
       AND FC.TIP_APLICACAO = 'I'
       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
           to_char(FC.DAT_INI_VIG, 'YYYYMM') AND
           to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(FC.DAT_FIM_VIG, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))
       AND RR.COD_INS = BB.COD_INS
       AND RR.COD_RUBRICA = FC.COD_RUBRICA
       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
           to_char(RR.DAT_INI_VIG, 'YYYYMM') AND
           to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(RR.DAT_FIM_VIG, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))
       AND CP.COD_INS = RR.COD_INS
       AND CP.COD_CONCEITO = RR.COD_CONCEITO
       AND RP.COD_INS = RR.COD_INS
       AND RP.COD_RUBRICA = RR.COD_RUBRICA
       AND RP.TIP_PROCESSO = 'N' ---PAR_TIP_PRO
       AND RP.SEQ_VIG >= 0
       AND RP.FLG_PROCESSA = 'S'
       AND RR.SEQ_VIG = RP.SEQ_VIG_RUBRICA
       AND RR.SEQ_VIG = FC.SEQ_VIG_RUBRICA
       AND CE.FLG_STATUS = 'V'
       AND EC.COD_INS = BC.COD_INS
       AND EC.COD_BENEFICIO = BC.COD_BENEFICIO
       AND EC.COD_IDE_CLI_SERV = BC.COD_IDE_CLI_SERV
       AND EC.COD_IDE_CLI_BEN = BB.COD_IDE_CLI_BEN
       AND EC.COD_ENTIDADE = BC.COD_ENTIDADE
       AND EC.NUM_MATRICULA = BC.NUM_MATRICULA
       AND EC.COD_IDE_REL_FUNC = BC.COD_IDE_REL_FUNC
       AND EC.FLG_STATUS = 'V'
       AND CE.IND_OPCAO = EC.IND_OPCAO
       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
           to_char(EC.DAT_INI_VIG, 'YYYYMM') AND
           to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(EC.DAT_FIM_VIG, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))
       AND NOT
            ((BB.COD_BENEFICIO >= 40000000 AND BB.COD_BENEFICIO <= 41000000) AND
            ((BC.COD_ENTIDADE != 31 AND
            to_char(PAR_PER_PRO, 'YYYYMM') < '201105') OR
            (BC.COD_ENTIDADE = 31 AND
            to_char(PAR_PER_PRO, 'YYYYMM') < '201111')

            ))
            
        AND CRR1.COD_INS             = BB.COD_INS
        AND CRR1.COD_RUBRICA_CORRESP = CE.COD_FCRUBRICA
        AND CRR1.FLG_STATUS          ='V'
        AND CRR1.COD_ENTIDADE        = COM_ENTIDADE_DIF_VENC
        AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
                           to_char(CRR1.DAT_INI_VIG, 'YYYYMM') AND
                           to_char(PAR_PER_PRO, 'YYYYMM') <=
                           to_char(nvl(CRR1.DAT_FIM_VIG,
                                        to_date('01/01/2045', 'dd/mm/yyyy')),
                                    'YYYYMM'))            
       AND EXISTS
       ---- Modificado 16-09-2013----------
      (
              (SELECT 1
                      FROM TB_rub_dif_vencimento PP
                     WHERE PP.COD_INS      = BB.COD_INS
                       AND PP.COD_ENTIDADE = COM_ENTIDADE_DIF_VENC
                       AND PP.COD_CONCEITO = COM_CONCEITO_DIF_VENC
                       AND PP.COD_CARGO    = COM_CARGO_DIF_VENC
                       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
                           to_char(PP.DAT_INI_VIG, 'YYYYMM') AND
                           to_char(PAR_PER_PRO, 'YYYYMM') <=
                           to_char(nvl(PP.DAT_FIM_VIG,
                                        to_date('01/01/2045', 'dd/mm/yyyy')),
                                    'YYYYMM'))
                       AND FC.COD_INS       = BB.COD_INS
                       AND RR.COD_CONCEITO  = TRUNC(PP.COD_FCRUBRICA / 100)
                       AND PP.FLG_COND_CALC = 'S'
             ) 
             
       )
  -------------------------------------------------------------
    ------ RUBRICAS ASSOCIADAS AO CARGO ----
    UNION ALL

    SELECT
           BB.COD_BENEFICIO AS COM_COD_BENEFICIO,
           DECODE(trim(BC.COD_TIPO_BENEFICIO),
                  'M',
                  'PENSIONISTA',
                  'APOSENTADO') AS COM_TIP_BENEFICIO,
           FC.COD_RUBRICA AS COM_COD_RUBRICA,
           FC.COD_FCRUBRICA AS COM_COD_FCRUBRICA,
           FC.SEQ_VIG AS COM_SEQ_VIG_FC, -- MVL03
           'B' AS COM_NAT_COMP,
           null AS COM_NUM_ORD_JUD,
           bc.cod_ide_cli_serv AS COM_IDE_CLI_INSTITUIDOR,
           CE.VAL_FIXO AS COM_VAL_FIXO_IND,
           CE.VAL_PORC AS COM_VAL_PORC_IND,
           0 AS COM_VAL_PORC2,
           CE.VAL_INIDADE AS COM_QTY_UNID_IND,
           FC.VAL_UNIDADE AS COM_VAL_UNID,
           FC.TIP_VALOR AS COM_TIPO_VALOR,
           'N' AS COM_IND_QTAS,
           0 AS COM_NUM_QTAS_PAG,
           0 AS COM_TOT_QTAS_PAG,
           FC.FLG_COMP AS COM_IND_COMP_RUB,
           RR.FLG_NATUREZA AS COM_NAT_RUB,
           null AS COM_INI_REF,
           null AS COM_FIM_REF,
           FC.NUM_PRIORIDADE AS COM_PRIORIDADE,
           CP.FLG_DED_IR AS COM_DED_IR,
           RP.FLG_PROCESSA AS COM_FLG_PROCESSA,
           CP.NAT_VAL AS COM_NAT_VAL,
           FC.TIP_APLICACAO AS COM_TIPO_APLICACAO,
           --      BC.VAL_PERCENT_BEN AS COM_PERCENT_BEN,
           CASE
             WHEN (BB.COD_BENEFICIO > 40000001 AND
                  BB.COD_BENEFICIO < 41000000 and BC.COD_ENTIDADE IN (7, 6) AND
                  NVL(BC.NAO_PROPORCIONA_FOLHA, 'N') != 'S') THEN
              BC.VAL_PERCENT_BEN
             ELSE
              BC.VAL_PERCENT_BEN
           END AS COM_PERCENT_BEN,

           nvl(RR.TIP_EVENTO_ESPECIAL, 'N') AS COM_TIPO_EVENTO_ESPECIAL,
           ' ' AS COM_VAL_STR1,
           ' ' AS COM_VAL_STR2,
           BC.NUM_MATRICULA AS COM_MATRICULA,
           BC.COD_ENTIDADE AS COM_ENTIDADE,
           EC.COD_CARGO AS COM_CARGO,
           EC.COD_CARGO_APOS AS COM_CARGO_APOS,
           BB.DAT_INI_BEN AS BEN_DAT_INICIO,
           BB.DAT_FIM_BEN AS BEN_DAT_FIM,
           CE.DAT_INI_VIG AS COM_DAT_INI_VIG,
           CE.DAT_FIM_VIG AS COM_DAT_FIM_VIG,
           null AS COM_COD_IDE_CLI_BEN,
           FC.MSC_INFORMACAO AS COM_MSC_INFORMACAO,
           FC.COL_INFORMACAO AS COM_COL_INFORMACAO,
           1 AS COM_PORC_VIG, --RAO 20060321
           RR.DAT_FIM_VIG AS COM_DAT_VIG_RUBRICA, -- MVL
           FC.FLG_APLICA_RATEIO AS COM_APLICA_RATEIO, -- efv
           CE.SEQ_VIG AS COM_SEQ_VIG,
           BC.cod_entidade as com_cod_entidade,
           0 COM_NUM_CARGA,
           0 COM_NUM_SEQ_CONTROLE_CARGA,
           BB.COD_PROC_GRP_PAG COM_NUM_GRUPO_PAG,
           'N' COM_RUBRICA_TIPO,
           BB.FLG_STATUS COM_FLG_STATUS,
           to_date('01/01/1901', 'dd/mm/yyyy') COM_DAT_CONTRATO,
           0 COM_COD_CONVENIO,

           DECODE(BC.COD_TIPO_BENEFICIO, 'M', 2, 1) AS COM_ASSOCIACAO,
           RR.FLG_MUDA_BASE                         AS COM_FLG_MUDA_BASE
           ,NULL                           AS  COM_COD_TABELA
       --------------- Desenvolvimento Task 3689  --------------
          ,RR.FLG_APLICA_PROP_PENSAO AS COM_APLICA_PROP_PENSAO

     FROM TB_rub_dif_vencimento   CE,
           TB_BENEFICIARIO        BB,
           TB_RUBRICAS            RR,
           TB_FORMULA_CALCULO     FC,
           TB_RUBRICAS_PROCESSO   RP,
           TB_CONCESSAO_BENEFICIO BC,
           TB_CONCEITOS_PAG       CP,
           TB_BENEFICIO_CARGO     EC
     WHERE BB.COD_INS          =  PAR_COD_INS
       AND BB.COD_IDE_CLI_BEN  = ben_ide_cli
       AND BB.COD_BENEFICIO    = COM_COD_BENE_DIF_VENC
       AND CE.FLG_COND_CALC    = 'N'
       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
           to_char(BB.DAT_INI_BEN, 'YYYYMM') AND
           to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(BB.DAT_FIM_BEN, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))
       AND BB.FLG_STATUS in ('A', 'H', 'X')
       AND BB.FLG_REG_ATIV = 'S'
       AND BB.FLG_CONT_BEN = 'N'
       AND BC.COD_INS = BB.COD_INS
       AND BC.COD_BENEFICIO = BB.COD_BENEFICIO
       AND BC.COD_ENTIDADE = RR.COD_ENTIDADE
       AND RR.COD_ENTIDADE = RP.COD_ENTIDADE
       AND RR.COD_ENTIDADE = CP.COD_ENTIDADE
       AND FC.COD_ENTIDADE = RR.COD_ENTIDADE

       AND CE.COD_INS = BB.COD_INS
       ---- Modificado 16-09-2013
       AND CE.COD_CARGO    = COM_CARGO_DIF_VENC
       AND CE.COD_ENTIDADE = COM_ENTIDADE_DIF_VENC
       AND CE.COD_CONCEITO = COM_CONCEITO_DIF_VENC

       AND CE.FLG_COND_CALC = 'N'
       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
           to_char(CE.DAT_INI_VIG, 'YYYYMM') AND
           to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(CE.DAT_FIM_VIG, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))
       AND FC.COD_INS = BB.COD_INS
       AND FC.COD_FCRUBRICA = CE.COD_FCRUBRICA
          -- AND FC.TIP_APLICACAO = 'I'
       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
           to_char(FC.DAT_INI_VIG, 'YYYYMM') AND
           to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(FC.DAT_FIM_VIG, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))
       AND RR.COD_INS = BB.COD_INS
       AND RR.COD_RUBRICA = FC.COD_RUBRICA
       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
           to_char(RR.DAT_INI_VIG, 'YYYYMM') AND
           to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(RR.DAT_FIM_VIG, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))
       AND CP.COD_INS = RR.COD_INS
       AND CP.COD_CONCEITO = RR.COD_CONCEITO
       AND RP.COD_INS = RR.COD_INS
       AND RP.COD_RUBRICA = RR.COD_RUBRICA
       AND RP.TIP_PROCESSO  = 'N' ---PAR_TIP_PRO
       AND RP.SEQ_VIG >= 0
       AND RP.FLG_PROCESSA  = 'S'
       AND RR.SEQ_VIG       = RP.SEQ_VIG_RUBRICA
       AND RR.SEQ_VIG       = FC.SEQ_VIG_RUBRICA
       AND CE.FLG_STATUS    = 'V'
       AND EC.COD_INS       = BC.COD_INS
       AND EC.COD_BENEFICIO = BC.COD_BENEFICIO
       AND EC.COD_IDE_CLI_SERV = BC.COD_IDE_CLI_SERV
       AND EC.COD_IDE_CLI_BEN  = BB.COD_IDE_CLI_BEN
       AND EC.COD_ENTIDADE     = BC.COD_ENTIDADE
       AND EC.NUM_MATRICULA    = BC.NUM_MATRICULA
       AND EC.COD_IDE_REL_FUNC = BC.COD_IDE_REL_FUNC
       AND EC.FLG_STATUS       = 'V'
       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
           to_char(EC.DAT_INI_VIG, 'YYYYMM') AND
           to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(EC.DAT_FIM_VIG, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))
       AND NOT
            ((BB.COD_BENEFICIO >= 40000000 AND BB.COD_BENEFICIO <= 41000000) AND
            ((BC.COD_ENTIDADE != 31 AND
            to_char(PAR_PER_PRO, 'YYYYMM') < '201105') OR
            (BC.COD_ENTIDADE = 31 AND
            to_char(PAR_PER_PRO, 'YYYYMM') < '201111')

            ))

     ORDER BY COM_COD_BENEFICIO,
              COM_PRIORIDADE,
              COM_DAT_CONTRATO,
              COM_COD_RUBRICA,
              COM_DAT_INI_VIG;

     -------- CURSOS BASE DE SERVIDOR ARTICULO 133
   CURSOR CUR_COMPBEN_BADIFVEN IS
    SELECT  * FROM (

    SELECT
           BB.COD_BENEFICIO AS COM_COD_BENEFICIO      ,
           DECODE(trim(BC.COD_TIPO_BENEFICIO)         ,
                  'M'          ,
                  'PENSIONISTA',
                  'APOSENTADO') AS COM_TIP_BENEFICIO   ,
           FC.COD_RUBRICA AS COM_COD_RUBRICA           ,
           FC.COD_FCRUBRICA AS COM_COD_FCRUBRICA       ,
           FC.SEQ_VIG AS COM_SEQ_VIG_FC                ,
           'B' AS COM_NAT_COMP                         ,
           null AS COM_NUM_ORD_JUD                       ,
           bc.cod_ide_cli_serv AS COM_IDE_CLI_INSTITUIDOR,
           CE.VAL_FIXO AS COM_VAL_FIXO_IND               ,
           CE.VAL_PORC AS COM_VAL_PORC_IND               ,
           CE.VAL_PORC2 AS COM_VAL_PORC2                 ,
           CE.VAL_INIDADE AS COM_QTY_UNID_IND            ,
           FC.VAL_UNIDADE AS COM_VAL_UNID                ,
           FC.TIP_VALOR AS COM_TIPO_VALOR                ,
           'N' AS COM_IND_QTAS                           ,
           0 AS COM_NUM_QTAS_PAG                         ,
           0 AS COM_TOT_QTAS_PAG                         ,
           FC.FLG_COMP AS COM_IND_COMP_RUB               ,
           RR.FLG_NATUREZA AS COM_NAT_RUB                ,
           null AS COM_INI_REF                           ,
           null AS COM_FIM_REF                           ,
           -- Agregado em 16012013
           FC.NUM_PRIORIDADE_133 AS COM_PRIORIDADE           ,
           CP.FLG_DED_IR AS COM_DED_IR                   ,
           RP.FLG_PROCESSA AS COM_FLG_PROCESSA           ,
           CP.NAT_VAL AS COM_NAT_VAL                     ,
           FC.TIP_APLICACAO AS COM_TIPO_APLICACAO        ,
           --      BC.VAL_PERCENT_BEN AS COM_PERCENT_BEN,
           CASE
             WHEN (BB.COD_BENEFICIO > 40000001 AND
                  BB.COD_BENEFICIO < 41000000 and BC.COD_ENTIDADE IN (7, 6) AND
                  NVL(BC.NAO_PROPORCIONA_FOLHA, 'N') != 'S') THEN
              BC.VAL_PERCENT_BEN
             ELSE
              BC.VAL_PERCENT_BEN
           END AS COM_PERCENT_BEN,

           nvl(RR.TIP_EVENTO_ESPECIAL, 'N') AS COM_TIPO_EVENTO_ESPECIAL,
           CE.VAL_STR1 AS COM_VAL_STR1               ,
           CE.VAL_STR2 AS COM_VAL_STR2               ,
           BC.NUM_MATRICULA AS COM_MATRICULA         ,
           BC.COD_ENTIDADE AS COM_ENTIDADE           ,
           EC.COD_CARGO AS COM_CARGO                 ,
           EC.COD_CARGO_APOS AS COM_CARGO_APOS       ,
           BB.DAT_INI_BEN AS BEN_DAT_INICIO          ,
           BB.DAT_FIM_BEN AS BEN_DAT_FIM             ,
           CE.DAT_INI_VIG AS COM_DAT_INI_VIG         ,
           CE.DAT_FIM_VIG AS COM_DAT_FIM_VIG         ,
           null AS COM_COD_IDE_CLI_BEN               ,
           FC.MSC_INFORMACAO AS COM_MSC_INFORMACAO   ,
           FC.COL_INFORMACAO AS COM_COL_INFORMACAO   ,
           1 AS COM_PORC_VIG                         ,
           RR.DAT_FIM_VIG AS COM_DAT_VIG_RUBRICA     ,
           FC.FLG_APLICA_RATEIO AS COM_APLICA_RATEIO ,
           CE.SEQ_VIG AS COM_SEQ_VIG                 ,
           BC.cod_entidade as com_cod_entidade       ,
           0 COM_NUM_CARGA                           ,
           0 COM_NUM_SEQ_CONTROLE_CARGA              ,
           BB.COD_PROC_GRP_PAG COM_NUM_GRUPO_PAG     ,
           'N' COM_RUBRICA_TIPO                      ,
           BB.FLG_STATUS COM_FLG_STATUS              ,
           to_date('01/01/1901', 'dd/mm/yyyy') COM_DAT_CONTRATO,
           0 COM_COD_CONVENIO                        ,

           DECODE(BC.COD_TIPO_BENEFICIO, 'M', 2, 1) AS COM_ASSOCIACAO  ,
           RR.FLG_MUDA_BASE                         AS COM_FLG_MUDA_BASE
          ,CE.COD_TABELA                           AS  COM_COD_TABELA
       --------------- Desenvolvimento Task 3689  --------------
          ,RR.FLG_APLICA_PROP_PENSAO AS COM_APLICA_PROP_PENSAO

     FROM TB_COMPOSICAO_BEN      CE,
           TB_BENEFICIARIO        BB,
           TB_RUBRICAS            RR,
           TB_FORMULA_CALCULO     FC,
           TB_RUBRICAS_PROCESSO   RP,
           TB_CONCESSAO_BENEFICIO BC,
           TB_CONCEITOS_PAG       CP,
           TB_BENEFICIO_CARGO     EC
     WHERE BB.COD_INS = PAR_COD_INS
       AND BB.COD_IDE_CLI_BEN = ben_ide_cli
       AND BB.COD_BENEFICIO   = COM_COD_BENE_DIF_VENC
       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
           to_char(BB.DAT_INI_BEN, 'YYYYMM') AND
           to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(BB.DAT_FIM_BEN, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))
       AND BB.FLG_STATUS in ('A', 'H', 'X')
       AND BB.FLG_REG_ATIV = 'S'
       AND BB.FLG_CONT_BEN = 'N'
       AND BC.COD_INS = BB.COD_INS
       AND BC.COD_BENEFICIO = BB.COD_BENEFICIO
       AND BC.COD_ENTIDADE = RR.COD_ENTIDADE
       AND RR.COD_ENTIDADE = RP.COD_ENTIDADE
       AND RR.COD_ENTIDADE = CP.COD_ENTIDADE
       AND FC.COD_ENTIDADE = RR.COD_ENTIDADE

       AND CE.COD_INS = BB.COD_INS
       AND CE.COD_BENEFICIO = BB.COD_BENEFICIO
       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
           to_char(CE.DAT_INI_VIG, 'YYYYMM') AND
           to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(CE.DAT_FIM_VIG, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))
       AND FC.COD_INS = BB.COD_INS
       AND FC.COD_FCRUBRICA = CE.COD_FCRUBRICA
       AND FC.TIP_APLICACAO = 'I'
       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
           to_char(FC.DAT_INI_VIG, 'YYYYMM') AND
           to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(FC.DAT_FIM_VIG, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))
       AND RR.COD_INS = BB.COD_INS
       AND RR.COD_RUBRICA = FC.COD_RUBRICA
       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
           to_char(RR.DAT_INI_VIG, 'YYYYMM') AND
           to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(RR.DAT_FIM_VIG, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))
       AND CP.COD_INS = RR.COD_INS
       AND CP.COD_CONCEITO = RR.COD_CONCEITO
       AND RP.COD_INS = RR.COD_INS
       AND RP.COD_RUBRICA = RR.COD_RUBRICA
       AND RP.TIP_PROCESSO = 'N' ---PAR_TIP_PRO
       AND RP.SEQ_VIG >= 0
       AND RP.FLG_PROCESSA = 'S'
       AND RR.SEQ_VIG = RP.SEQ_VIG_RUBRICA
       AND RR.SEQ_VIG = FC.SEQ_VIG_RUBRICA
       AND CE.FLG_STATUS = 'V'
       AND EC.COD_INS = BC.COD_INS
       AND EC.COD_BENEFICIO = BC.COD_BENEFICIO
       AND EC.COD_IDE_CLI_SERV = BC.COD_IDE_CLI_SERV
       AND EC.COD_IDE_CLI_BEN = BB.COD_IDE_CLI_BEN
       AND EC.COD_ENTIDADE = BC.COD_ENTIDADE
       AND EC.NUM_MATRICULA = BC.NUM_MATRICULA
       AND EC.COD_IDE_REL_FUNC = BC.COD_IDE_REL_FUNC
       AND EC.FLG_STATUS = 'V'
       AND CE.IND_OPCAO = EC.IND_OPCAO
       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
           to_char(EC.DAT_INI_VIG, 'YYYYMM') AND
           to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(EC.DAT_FIM_VIG, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))
       AND NOT
            ((BB.COD_BENEFICIO >= 40000000 AND BB.COD_BENEFICIO <= 41000000) AND
            ((BC.COD_ENTIDADE != 31 AND
            to_char(PAR_PER_PRO, 'YYYYMM') < '201105') OR
            (BC.COD_ENTIDADE = 31 AND
            to_char(PAR_PER_PRO, 'YYYYMM') < '201111')

            ))
   UNION ALL
    SELECT BB.COD_BENEFICIO AS COM_COD_BENEFICIO         ,
           DECODE(trim(BC.COD_TIPO_BENEFICIO)            ,
                  'M',
                  'PENSIONISTA',
                  'APOSENTADO') AS COM_TIP_BENEFICIO     ,
           FC.COD_RUBRICA       AS COM_COD_RUBRICA       ,
           FC.COD_FCRUBRICA     AS COM_COD_FCRUBRICA     ,
           FC.SEQ_VIG           AS COM_SEQ_VIG_FC        ,
           'G'                  AS COM_NAT_COMP          ,
           null                 AS COM_NUM_ORD_JUD       ,
           BC.COD_IDE_CLI_SERV  AS COM_IDE_CLI_INSTITUIDOR,
           null                 AS COM_VAL_FIXO_IND      ,
           null                 AS COM_VAL_PORC_IND      ,
           0                    AS COM_VAL_PORC2         ,
           null                 AS COM_QTY_UNID_IND      ,
           FC.VAL_UNIDADE       AS COM_VAL_UNID          ,
           FC.TIP_VALOR         AS COM_TIPO_VALOR        ,
           'N'                  AS COM_IND_QTAS          ,
           0                    AS COM_NUM_QTAS_PAG      ,
           0                    AS COM_TOT_QTAS_PAG      ,
           FC.FLG_COMP          AS COM_IND_COMP_RUB      ,
           RR.FLG_NATUREZA      AS COM_NAT_RUB           ,
           null                 AS COM_INI_REF           ,
           null                 AS COM_FIM_REF           ,
           -- Agregado em 16012013
           FC.NUM_PRIORIDADE_133 AS COM_PRIORIDADE           ,
           CP.FLG_DED_IR        AS COM_DED_IR            ,
           RP.FLG_PROCESSA      AS COM_FLG_PROCESSA      ,
           CP.NAT_VAL           AS COM_NAT_VAL           ,
           FC.TIP_APLICACAO     AS COM_TIPO_APLICACAO    ,
           CASE
              WHEN ( BB.COD_BENEFICIO>40000001 AND
                     BB.COD_BENEFICIO<41000000 and
                     BC.COD_ENTIDADE IN ( 7,6)         AND
                     NVL(BC.NAO_PROPORCIONA_FOLHA,'N')!='S' ) THEN
                     BC.VAL_PERCENT_BEN
               ELSE
                 BC.VAL_PERCENT_BEN  END   AS COM_PERCENT_BEN,

           nvl(RR.TIP_EVENTO_ESPECIAL, 'N') AS COM_TIPO_EVENTO_ESPECIAL,
           null              AS COM_VAL_STR1,
           null              AS COM_VAL_STR2,
           BC.NUM_MATRICULA  AS COM_MATRICULA,
           BC.COD_ENTIDADE   AS COM_ENTIDADE,
           EC.COD_CARGO      AS COM_CARGO,
           EC.COD_CARGO_APOS AS COM_CARGO_APOS,
           BB.DAT_INI_BEN    AS BEN_DAT_INICIO,
           BB.DAT_FIM_BEN    AS BEN_DAT_FIM,
           FC.DAT_INI_VIG    AS COM_DAT_INI_VIG,
           FC.DAT_FIM_VIG    AS COM_DAT_FIM_VIG,
           null              AS COM_COD_IDE_CLI_BEN, --efv 20060823
           FC.MSC_INFORMACAO AS COM_MSC_INFORMACAO,
           FC.COL_INFORMACAO AS COM_COL_INFORMACAO,
           (to_char(decode(rr.dat_fim_vig,
                           null,
                           add_months(PAR_PER_PRO, 1) - 1,
                           rr.dat_fim_vig),
                    'dd') / to_char(decode(rr.dat_fim_vig,
                                            null,
                                            add_months(PAR_PER_PRO, 1) - 1,
                                            last_day(rr.dat_fim_vig)),
                                     'dd')) AS COM_PORC_VIG, --RAO 20060321
           RR.DAT_FIM_VIG       AS COM_DAT_VIG_RUBRICA, -- MVL
           FC.FLG_APLICA_RATEIO AS COM_APLICA_RATEIO, -- efv
           RR.SEQ_VIG           AS COM_SEQ_VIG,
           bc.cod_entidade      AS com_cod_entidade,
           0                    AS COM_NUM_CARGA                    ,
           0                    AS COM_NUM_SEQ_CONTROLE_CARGA       ,
           BB.COD_PROC_GRP_PAG COM_NUM_GRUPO_PAG,
            'N'                 AS COM_RUBRICA_TIPO,
           BB.FLG_STATUS        AS COM_FLG_STATUS,
            to_date('01/01/1901','dd/mm/yyyy') COM_DAT_CONTRATO,
           0                    AS COM_COD_CONVENIO,
            DECODE(BC.COD_TIPO_BENEFICIO, 'M', 2, 1) AS COM_ASSOCIACAO ,
            RR.FLG_MUDA_BASE                         AS COM_FLG_MUDA_BASE
           ------ Campo Novo Codigo
          ,NULL                           AS  COM_COD_TABELA
       --------------- Desenvolvimento Task 3689  --------------
          ,RR.FLG_APLICA_PROP_PENSAO AS COM_APLICA_PROP_PENSAO

     FROM TB_BENEFICIARIO        BB,
           TB_RUBRICAS            RR,
           TB_FORMULA_CALCULO     FC,
           TB_RUBRICAS_PROCESSO   RP,
           TB_CONCESSAO_BENEFICIO BC,
           TB_CONCEITOS_PAG       CP,
           TB_BENEFICIO_CARGO     EC
     WHERE BB.COD_INS = PAR_COD_INS
       AND BB.COD_IDE_CLI_BEN = ben_ide_cli
      AND BB.COD_BENEFICIO   = COM_COD_BENE_DIF_VENC
       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
           to_char(BB.DAT_INI_BEN, 'YYYYMM') and
           to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(BB.DAT_FIM_BEN, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))
       AND BB.FLG_STATUS in ('A', 'H',/* 'S',*/ 'X')
       AND BB.FLG_REG_ATIV = 'S'
       AND BB.FLG_CONT_BEN = 'N'
       AND BC.COD_INS = BB.COD_INS
       AND BC.COD_BENEFICIO = BB.COD_BENEFICIO
       AND BC.COD_ENTIDADE = RR.COD_ENTIDADE
       AND RR.COD_ENTIDADE = RP.COD_ENTIDADE
       AND RR.COD_ENTIDADE = CP.COD_ENTIDADE
       AND RR.COD_ENTIDADE = FC.COD_ENTIDADE
       AND FC.COD_INS = BB.COD_INS
       AND FC.TIP_APLICACAO = 'G'
          --AND trim(BC.COD_TIPO_BENEFICIO) = 'M'
       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
           to_char(FC.DAT_INI_VIG, 'YYYYMM') and
           to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(FC.DAT_FIM_VIG, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))
       AND RR.COD_INS = BB.COD_INS
       AND RR.COD_RUBRICA = FC.COD_RUBRICA
       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
           to_char(RR.DAT_INI_VIG, 'YYYYMM') and
           to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(RR.DAT_FIM_VIG, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))
       AND CP.COD_INS = RR.COD_INS
       AND CP.COD_CONCEITO = RR.COD_CONCEITO
       AND RP.COD_INS = RR.COD_INS
       AND RP.COD_RUBRICA = RR.COD_RUBRICA
       AND RP.TIP_PROCESSO = PAR_TIP_PRO
       AND RP.SEQ_VIG >= 0
       AND RP.FLG_PROCESSA = 'S' ---RAO 20060410
       AND nvl(RR.TIP_EVENTO_ESPECIAL, 'N') <> 'I'
       AND nvl(RR.TIP_EVENTO_ESPECIAL, 'N') <> 'J'
       AND RR.SEQ_VIG = RP.SEQ_VIG_RUBRICA
       AND RR.SEQ_VIG = FC.SEQ_VIG_RUBRICA
       AND EC.COD_INS = BC.COD_INS
       AND EC.COD_BENEFICIO = BC.COD_BENEFICIO
       AND EC.COD_IDE_CLI_SERV = BC.COD_IDE_CLI_SERV
       AND EC.COD_ENTIDADE = BC.COD_ENTIDADE
       AND EC.COD_IDE_CLI_BEN = bb.cod_ide_cli_ben
       AND EC.NUM_MATRICULA = BC.NUM_MATRICULA
       AND EC.FLG_STATUS = 'V'
       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
           to_char(EC.DAT_INI_VIG, 'YYYYMM') AND
           to_char(PAR_PER_PRO, 'YYYYMM') <=
           to_char(nvl(EC.DAT_FIM_VIG, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))

       AND NOT ( (  BB.COD_BENEFICIO>=40000000 AND
                    BB.COD_BENEFICIO<=41000000) AND
                   (   (BC.COD_ENTIDADE !=31 AND to_char(PAR_PER_PRO, 'YYYYMM') <'201105' )
                    OR ( BC.COD_ENTIDADE =31 AND to_char(PAR_PER_PRO, 'YYYYMM') <'201111' )
                   )
           )
       AND  not  EXISTS (
        SELECT 1 FROM  user_ipesp.tb_isensao_tot   ii
        WHERE  ii.cod_ide_cli=bb.cod_ide_cli_ben
       )
    /*AND  ( BEN_DISSOCIACAO=0 OR
           (BEN_DISSOCIACAO!=0 AND DECODE(BC.COD_TIPO_BENEFICIO, 'M', 2, 1) =BEN_DISSOCIACAO)
         )*/
         
        -- TT48091 -- DISSOCIAÇÃO DE MAIS DE UM BENEFICIO DE PENSAO
        -- LJUNIOR EM 18/07/2018   
        AND ( COD_BEN_DISSOCIACAO=0 OR
             (COD_BEN_DISSOCIACAO!=0 AND BC.COD_BENEFICIO = COD_BEN_DISSOCIACAO)
            )   


        ) CUR_BASE_SER WHERE EXISTS (
         SELECT 1 FROM tb_compoe_det RUBP
         WHERE RUBP.COD_INS=PAR_COD_INS AND
               RUBP.COD_FCRUBRICA_COMPOSTA= COM_COD_RUBRICA_DIF  AND
               RUBP.COD_FCRUBRICA_COMPOE=CUR_BASE_SER.COM_COD_FCRUBRICA AND
               NVL(RUBP.DAT_FIM_VIG, TO_DATE('01/01/2099','DD/MM/YYYY'))>=PAR_PER_PRO AND
               RUBP.DAT_INI_VIG<=PAR_PER_PRO
        )
     ORDER BY COM_COD_BENEFICIO,
              COM_PRIORIDADE,
              COM_DAT_CONTRATO,
              COM_COD_RUBRICA,
              COM_DAT_INI_VIG;




  ERRO EXCEPTION;

  ----------------------------------------------------------------------------
  PROCEDURE SP_FOLHA_CALCULADA3(i_cod_ins                in number,
                                i_per_pro                in date,
                                i_cod_usu                in varchar2,
                                i_tip_tra                in varchar2,
                                i_tip_pro                in varchar2,
                                i_num_cpf                in varchar2,
                                i_partir_de              in varchar2,
                                i_par_per_real           in date,
                                i_data_primeiro          in date,
                                i_des_tipos_benef        in varchar2,
                                i_cod_tipo_ben           in varchar2,
                                i_cod_categoria          in number,
                                i_cod_cargo              in number, --  MVL
                                i_cod_entidade           in number, -- FCPF
                                i_percent_correcao       in number, -- MVL
                                i_ind_proc_enquadramento in number, -- MVL
                                i_num_processo           in number, -- MVL
                                i_num_grp                in number,
                                i_num_seq_proc           in number,
                                i_seq_pagamento          in number); --ROD7

  ----------------------------------------------------------------------------
  PROCEDURE SP_INICIO_PROCESSO;
  ----------------------------------------------------------------------------
  PROCEDURE SP_CARREGA_VARIAVEIS_PARAMETRO;
  ----------------------------------------------------------------------------
  PROCEDURE SP_VERIFICA_REPROCESSAMENTO;
  ----------------------------------------------------------------------------
  PROCEDURE SP_CARREGA_FORMULA;
  --------------------------------------------------------------------------
  FUNCTION SP_VALIDA_CONDICAO RETURN BOOLEAN;
  --------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_COD_IDE_CLI_SERV;
  --------------------------------------------------------------------------
  FUNCTION SP_OBTEM_VALOR_VAR(I_NUM_FUNCAO   IN NUMBER,
                              I_COD_VARIAVEL IN VARCHAR2,
                              I_ORDEM        IN NUMBER) RETURN VARCHAR2;
  ---------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_VALOR_FORMULA;
  ---------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_EVOLU_REL_FUNCIONAL;
  ---------------------------------------------------------------------------
  PROCEDURE SP_VERIFICA_VAR_RUBRICA;
  ---------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_SOMA_PENSAO(o_valor out number);
  ---------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_SOMA_SALFA(o_valor out number);
  ---------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_SOMA_VENCIMENTO(i_cod_beneficio in number,
                                     i_cod_entidade  in number,
                                     i_ind_val_cheio in varchar2,
                                     o_valor         out number);
  ---------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_QTD_DEPENDENTES(P_COD_IDE_CLI IN VARCHAR2,
                                     O_VALOR       OUT NUMBER);
  ---------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_QTD_DEPENDENTES_MIL(P_COD_IDE_CLI IN VARCHAR2,
                                         O_VALOR       OUT NUMBER);
  ---------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_RELACAO_FUNCIONAL(I_NUM_FUNCAO IN NUMBER,
                                       O_STR        OUT VARCHAR2,
                                       O_NUM        OUT NUMBER);
  ---------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_CATEGORIA(O_VALOR OUT VARCHAR2);
  ---------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_SUBCATEGORIA(O_VALOR OUT VARCHAR2);
  ---------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_CATEGORIA_OPCAO(O_STR OUT VARCHAR2);
  ---------------------------------------------------------------------------
  FUNCTION SP_OBTEM_PADRAO_VENCIMENTO RETURN VARCHAR2;
  ---------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_PERCENTUAL_CARGO(O_VALOR OUT NUMBER);
  ---------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_PROPORCAO_JORNADA(I_NUM_FUNCAO IN NUMBER,
                                       O_VALOR      OUT NUMBER);
  ---------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_QTD_HORAS(i_num_funcao in number, O_VALOR OUT NUMBER);
  ---------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_TIPOS_ATRIBUTOS(num_funcao      in number,
                                     i_num_matricula number,
                                     i_entidade      in number,
                                     i_cargo         in number,
                                     O_STR           OUT VARCHAR2);
  ---------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_TIPOS_ATRIBUTOS_prev(num_funcao      in number,
                                          i_num_matricula number,
                                          i_entidade      in number,
                                          i_cargo         in number,
                                          O_STR           OUT VARCHAR2);
  ---------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_VENC_CCOMI_GRATIF_REP(i_num_funcao in number,
                                           o_valor      out number);
  ---------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_VENC_BASE_CCOMIG(i_num_funcao in number,
                                      o_valor      out number);
  ---------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_VENC_CCOMI_GRATIF(i_num_funcao in number,
                                       o_valor      out number);
  ---------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_VENC_CCOMI_GRATIF_RF(i_num_funcao in number,
                                          o_valor      out number);
  ---------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_RELGRUPO(o_valor out number);
  ---------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_NOME_CARGO(o_str out varchar2);
  ---------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_CODGRUPO_ABONO(o_valor out number);
  ---------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_TIPO_ABONO(o_str out varchar2);
  ---------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_VALOR_ABONO(o_valor out number);
  ---------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_VENCIMENTO(cod_refer in number, o_valor out number);
  ---------------------------------------------------------------------------
  PROCEDURE SP_COMPOSICAO(I_COD_RUBRICA   in NUMBER,
                          I_VARIAVEL      VARCHAR2,
                          I_COD_BENEFICIO IN NUMBER,
                          I_COD_ENTIDADE  IN NUMBER,
                          i_ind_val_cheio in varchar2,
                          I_VALOR         OUT NUMBER);
  ---------------------------------------------------------------------------
  PROCEDURE SP_COMPOSICAO_TETO(I_COD_RUBRICA in number,
                               I_VARIAVEL    in varchar2,
                               I_VALOR       OUT NUMBER);
  ---------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_IRRF(IDE_CLI    IN VARCHAR2,
                          IDX_VAL    IN NUMBER,
                          FLG_PA     IN VARCHAR2,
                          O_VALOR    OUT NUMBER,
                          O_VALOR_13 OUT NUMBER);
  ---------------------------------------------------------------------------
  FUNCTION SP_OBTEM_DED_PAGOS RETURN NUMBER;
  --------------------------------------------
  FUNCTION SP_OBTEM_DED_PAGOS_SEMPA RETURN NUMBER;
  ---------------------------------------------------------------------------
  PROCEDURE SP_CONTRIB(I_VARIAVEL IN VARCHAR,
                       I_VALBASE  NUMBER,
                       O_VALOR    OUT NUMBER);
  ----------------------------------------------------------------------------
  FUNCTION SP_VALOR_SUPLEMENTAR(I_COD_IDE_CLI   VARCHAR2,
                                I_COD_BENEFICIO VARCHAR2,
                                I_COD_FCRUBRICA NUMBER,
                                I_FLG_NATUREZA  VARCHAR2,
                                I_VAL_RUBRICA   NUMBER,
                                I_DAT_INI_REF   DATE,
                                I_IDE_CLI_BEN   VARCHAR2) return NUMBER;
  ----------------------------------------------------------------------------
  FUNCTION SP_VALOR_SUPLEMENTAR_DECIMO(I_COD_IDE_CLI   VARCHAR2,
                                       I_COD_BENEFICIO VARCHAR2,
                                       I_COD_FCRUBRICA NUMBER,
                                       I_FLG_NATUREZA  VARCHAR2,
                                       I_VAL_RUBRICA   NUMBER) return NUMBER;

  -------------------------------------------------------------------------
  FUNCTION SP_OBTEM_RUBRICA_SUPL(I_FCRUBRICA NUMBER) RETURN NUMBER;
  --------------------------------------------------------------------------
  FUNCTION SP_ISENTA_IRRF(ide_cli in varchar2) return boolean;
  --------------------------------------------------------------------------
  FUNCTION SP_DED_IR(I_NUM_FCRUBRICA NUMBER) RETURN BOOLEAN;
  --------------------------------------------------------------------------
  FUNCTION SP_DED_IR_PA(I_NUM_FCRUBRICA NUMBER, I_NUM_ORD_JUD NUMBER)
    RETURN BOOLEAN;
  --------------------------------------------------------------------------
  FUNCTION SP_OBTEM_DEP_DED_IR(IDE_CLI IN VARCHAR2, I_TIPO_BEN CHAR)
    RETURN NUMBER;
  ---------------------------------------------------------------------------
  PROCEDURE SP_INS_DETCAL_NORMAL(i_valor in number);
  ---------------------------------------------------------------------------
  PROCEDURE SP_INS_DETCAL_PA(ide_cli in varchar2, i_valor in number);
  ---------------------------------------------------------------------------
  PROCEDURE SP_INS_DETCALCULADO(i_valor in number);
  --------------------------------------------------------------------------
  PROCEDURE SP_INS_ARRAY_DESCONTO(i_valor in number);
  --------------------------------------------------------------------------
  FUNCTION SP_OBTEM_VALOR_OJ RETURN NUMBER;
  ---------------------------------------------------------------------------
  FUNCTION SP_OBTEM_PROP_BEN RETURN NUMBER;
  ---------------------------------------------------------------------------
  FUNCTION SP_OBTEM_PROP_COMPOSICAO RETURN NUMBER;
  ---------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_PROP_SAIDA(I_VALOR OUT NUMBER, I_VALOR_13 OUT NUMBER);
  ---------------------------------------------------------------------------
  FUNCTION SP_OBTEM_SALARIO_BASE_CARGO(o_cod_referencia in number)
    RETURN NUMBER;
  ---------------------------------------------------------------------------
  FUNCTION SP_OBTEM_SALARIO_BASE_CARGO_OJ RETURN NUMBER;
  ----------------------------------------------------
  FUNCTION SP_OBTEM_SALARIO_PADRAO_INI RETURN NUMBER;
  ----------------------------------------------------
  FUNCTION SP_OBTEM_SALARIO_PADRAO_INI_A RETURN NUMBER;
  ----------------------------------------------------
  FUNCTION SP_OBTEM_SALARIO_REFERENCIA RETURN NUMBER;
  ---------------------------------------------------------------------------
  FUNCTION SP_OBTEM_SALARIO_REFER_REP RETURN NUMBER;
  ---------------------------------------------------------------------------
  PROCEDURE SP_RATEIO_BENEFICIO(P_COD_BENEFICIO IN NUMBER,
                                COD_CLI         IN VARCHAR2,
                                MON_VALOR       IN NUMBER,
                                I_VALOR         OUT NUMBER,
                                I_PERC_RATEIO   OUT NUMBER);
  ---------------------------------------------------------------------------
  PROCEDURE SP_GRAVA_MASTER_PAG;
  ---------------------------------------------------------------------------
  PROCEDURE SP_GRAVA_DETALHE_PAG;
  ---------------------------------------------------------------------------
  PROCEDURE SP_GRAVA_MASTER_FOLHA_PA(IDE_CLI IN VARCHAR2,
                                     COD_BEN IN NUMBER,
                                     VAL_PA IN NUMBER);
  ---------------------------------------------------------------------------
  PROCEDURE SP_GRAVA_DET_PAG_PA (IDE_CLI IN VARCHAR2, COD_BEN IN NUMBER);
  ---------------------------------------------------------------------------
  --PROCEDURE SP_GRAVA_DETALHE_PA;
  ---------------------------------------------------------------------------
  PROCEDURE SP_VALOR_CALCULADO(I_RUBRICA       IN NUMBER,
                               I_COD_BENEFICIO IN NUMBER,
                               I_COD_VARIAVEL  IN VARCHAR2,
                               I_COD_ENTIDADE  IN NUMBER,
                               I_IND_VAL_CHEIO IN VARCHAR2,
                               O_VALOR         OUT NUMBER);
  ---------------------------------------------------------------------------
  PROCEDURE SP_PROCESSA_RUBRICA(CALC_RUB OUT BOOLEAN);
  ---------------------------------------------------------------------------
  PROCEDURE SP_CALCULA_VALOR_RUBRICA;
  ---------------------------------------------------------------------------
  PROCEDURE SP_INICIA_VAR;
  ---------------------------------------------------------------------------
  PROCEDURE SP_INICIALIZA_ARRAY;
  -----------------------------------------------------------------------------
  PROCEDURE SP_VERIFICA_EXISTE_RATEIO;
  -----------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_DADOS_PF(IDE_CLI IN VARCHAR2,
                              I_TIPO  IN CHAR,
                              I_CPF   OUT VARCHAR2,
                              I_NOME  OUT VARCHAR2);
  ----------------------------------------------------------------------------
  PROCEDURE SP_CALCULA_PORC(I_VALOR out number);
  ----------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_IND_DJ(o_str out varchar2);
  ----------------------------------------------------------------------------
  PROCEDURE SP_CALCULA_PORC_GRADUACAO(I_VALOR out number);
  ----------------------------------------------------------------------------
  PROCEDURE SP_CALC_PORC_GRADUACAO_EVOLU(I_VALOR out number);
  ----------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_ORIG_TAB_VENC(o_str out varchar2);
  ----------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_COD_REFERENCIA(o_str out varchar2);
  ----------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_ORIG_TAB_VENC_CCOMI(o_str out varchar2);
  ----------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_VALORES_TOTAIS(I_COD_VARIAVEL  in VARCHAR2,
                                    I_COD_BENEFICIO IN NUMBER,
                                    I_COD_RUBRICA   NUMBER,
                                    i_ind_val_cheio in varchar2,
                                    I_VALOR         OUT NUMBER);
  ----------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_BASE_IR(idx        in number,
                             tipo_irr   in varchar,
                             vi_base_ir out number,
                             base_ir_13 out number
                              );
  ----------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_DETALHE_PAG(IDE_CLI            IN VARCHAR2,
                                 FLG_PA             IN VARCHAR2,
                                 TP_EVENTO_ESPECIAL IN VARCHAR2,
                                 TP_EVENTO          IN VARCHAR2);
  ----------------------------------------------------------------------------
  PROCEDURE SP_INCLUI_DETALHE_PAG(TP_COD_BENEFICIO IN NUMBER,
                                  TP_RUBRICA       IN NUMBER,
                                  TP_VAL_RUBRICA   IN NUMBER,
                                  TP_SEQ_VIG       IN NUMBER,
                                  TP_FLG_NATUREZA  IN VARCHAR2);
  ----------------------------------------------------------------------------
  PROCEDURE SP_INCLUI_DETALHE_PAG_PA(IDE_CLI          IN VARCHAR2,
                                     TP_COD_BENEFICIO IN NUMBER,
                                     TP_RUBRICA       IN NUMBER,
                                     TP_VAL_RUBRICA   IN NUMBER,
                                     TP_SEQ_VIG       IN NUMBER,
                                     TP_FLG_NATUREZA  IN VARCHAR2);
  ----------------------------------------------------------------------------
  PROCEDURE SP_INCLUI_BENEFICIO_ARRAY;
  ---------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_ANTECIPACAO(v_COD_BENEF           IN NUMBER,
                                 V_TIP_EVENTO_ESPECIAL IN VARCHAR2,
                                 V_COD_RUBRICA         OUT NUMBER,
                                 V_VAL_RUBRICA         OUT NUMBER,
                                 V_SEQ_VIG             OUT NUMBER);
  ----------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_13_SAIDA(V_COD_BENEFICIO IN NUMBER,
                              V_COD_RUBRICA   OUT NUMBER,
                              V_VAL_RUBRICA   OUT NUMBER,
                              V_SEQ_VIG       OUT NUMBER);
  ----------------------------------------------------------------------------
  PROCEDURE SP_INCLUI_DET_SUSPENSO;
  ----------------------------------------------------------------------------
  PROCEDURE SP_INC_DET_RETROATIVO_INICIAL;
  ----------------------------------------------------------------------------
  PROCEDURE SP_CALC_DATAS_PROPORCIONAL;
  ----------------------------------------------------------------------------
  PROCEDURE SP_CALCULA_PREV_DETALHE;
  ----------------------------------------------------------------------------
  PROCEDURE SP_INS_DETCAL_RET;
  ----------------------------------------------------------------------------
  PROCEDURE SP_INS_DETCAL_PARC;
  ----------------------------------------------------------------------------
  PROCEDURE SP_INS_NPAGO_RET;
  ----------------------------------------------------------------------------
  PROCEDURE SP_INS_DETCAL_ACIMA;
  ----------------------------------------------------------------------------
  PROCEDURE SP_GRAVA_MASTER_RET;
  ----------------------------------------------------------------------------
  PROCEDURE SP_GRAVA_DETALHE_RET;
  ----------------------------------------------------------------------------
  PROCEDURE SP_OBTER_DIF_RET(P_COD_BENEFICIO   IN NUMBER,
                             P_COD_RUBRICA     IN NUMBER,
                             VAL_RET           IN NUMBER,
                             P_IDE_CLI         IN VARCHAR2,
                             P_COD_IDE_CLI_BEN IN VARCHAR2,
                             P_FLG_NATUREZA    IN VARCHAR2,
                             P_INI_REF         IN DATE,
                             VALOR             OUT NUMBER,
                             EVENTO_ESPECIAL   OUT VARCHAR2);
  --FUNCTION SP_OBTER_DIF_RET (P_COD_BENEFICIO IN NUMBER, P_COD_RUBRICA IN NUMBER, VAL_RET IN NUMBER,P_IDE_CLI IN NUMBER, P_COD_IDE_CLI_BEN IN VARCHAR2) return  number;
  ----------------------------------------------------------------------------
  PROCEDURE SP_MONTAR_ARRAY_RET(P_COD_BENEFICIO IN NUMBER);
  ----------------------------------------------------------------------------
  PROCEDURE SP_CARREGA_PARVAL_FOLHA(p_per_pro in date);
  ----------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_PARVAL_FOLHA2(P_COD_PARAM     in varchar,
                                   P_COD_ESTRUTURA in varchar,
                                   P_COD_ELEMENTO  in varchar,
                                   P_VADI01        out number);
  ----------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_PARVAL_FOLHA3(P_COD_PARAM     in varchar,
                                   P_COD_ESTRUTURA in varchar,
                                   P_COD_ELEMENTO  in varchar,
                                   P_DADI01        out date);
  ----------------------------------------------------------------------------
  PROCEDURE SP_OBT_FAIXA_IRRF_SALFA_TASCO(P_COD_PARAM     in varchar2,
                                          P_COD_ESTRUTURA in varchar2,
                                          P_VADI01        out number,
                                          P_VADI02        out number,
                                          P_VADI03        out number,
                                          P_VADI04        out number,
                                          P_VADI05        out number,
                                          P_VADI06        out number,
                                          P_VADI07        out number,
                                          P_VADI08        out number,
                                          P_VADI09        out number,
                                          P_MSGERRO       out varchar2);
  ----------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_PERCEN_CALC_IR(ide_cli  in varchar2,
                                    TotBru   in number,
                                    PERC_IR  out number,
                                    REDUT_IR out number);
  ----------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_DEDUCOES(ide_cli in varchar2, deducao_ir out number);
  ----------------------------------------------------------------------------
  PROCEDURE SP_CALCULA_IMPOSTO2(TotBru in number, MonImp out number);
  ----------------------------------------------------------------------------
  PROCEDURE SP_CARREGA_VAR_TOTAIS_FOLHA;
  ----------------------------------------------------------------------------
  PROCEDURE SP_VERIF_RUBRICA_NPAGA_MES_SUP;
  ----------------------------------------------------------------------------
  PROCEDURE SP_GRAVA_TOTAIS_FOLHA(P_COD_BENEFICIO IN NUMBER,
                                  P_COD_CLI       IN VARCHAR2,
                                  P_COD_VARIAVEL  IN VARCHAR2,
                                  P_VALOR1        IN NUMBER,
                                  P_VALOR2        IN NUMBER,
                                  P_VALOR3        IN NUMBER,
                                  P_VALOR4        IN NUMBER);
  ----------------------------------------------------------------------------
  PROCEDURE SP_CALCULA_PENSAO;
  ----------------------------------------------------------------------------

  -- DECLARAC?ES DE PROCEDIMENTOS USADOS NO PARCELAMENTO DE DEBITOS
  -- LJUNIOR EM 28/07/2015
  PROCEDURE SP_CALCULA_PARCELAMENTO;
  PROCEDURE SP_CARREGA_PARCELAMENTO(P_COD_IDE_CLI IN VARCHAR2);
  PROCEDURE SP_OBTEM_MARGEM_PARC (P_VAL_BRUTO IN NUMBER,
                                  P_VAL_EVENTUAL NUMBER,
                                  P_PERC_PARCELAMENTO NUMBER,
                                  P_VAL_MARGEM OUT NUMBER
                                  );
  PROCEDURE SP_OBTEM_MARGEM_PARC_RET (P_VAL_MARGEM_RET OUT NUMBER);

  PROCEDURE SP_OBTEM_VALORES_TOTAIS_RET(I_COD_VARIAVEL  in VARCHAR2,
                                        I_COD_BENEFICIO IN NUMBER,
                                        I_COD_RUBRICA   NUMBER,
                                        i_ind_val_cheio in varchar2,
                                        I_VALOR         OUT NUMBER);

  PROCEDURE SP_VALOR_CALCULADO_RET  (I_RUBRICA       IN NUMBER,
                                     I_COD_BENEFICIO IN NUMBER,
                                     I_COD_IDE_CLI   IN VARCHAR2,
                                     I_IND_VAL_CHEIO IN VARCHAR2,
                                     O_VALOR         OUT NUMBER);
  ----------------------------------------------------------------------------

  PROCEDURE SP_CALCULA_REDUTOR;
  ----------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_RUBRICA(i_cod_fcrubrica in number,
                             i_flg_natureza  in varchar2,
                             o_cod_rubrica   out number);
  ----------------------------------------------------------------------------
  --PROCEDURE SP_OBTEM_PROV_CC_FG(O_STR OUT VARCHAR);
  ----------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_FATOR_CORRECAO(I_COD_IDE_CLI    IN VARCHAR2,
                                    i_data_param     in date,
                                    O_FATOR_CORRECAO OUT NUMBER); --efv fator correcao
  ---------------------------------------------------------------------------
  FUNCTION SP_OBTEM_ADIANTAMENTO_13 RETURN NUMBER; --efv ADIANTAMENTO 13
  ---------------------------------------------------------------------------
  FUNCTION SP_OBTEM_TETO_PENSAO RETURN NUMBER; --efv Teto Pensao
  ---------------------------------------------------------------------------
  FUNCTION SP_OBTEM_DESC_NIVEL RETURN VARCHAR2;
  ---------------------------------------------------------------------------
  FUNCTION SP_OBTEM_DESC_PISO RETURN VARCHAR2;
  ---------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_VAL_JORN_PISO(o_valor out number);
  ---------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_DATA_OBITO(I_BENEFICIO  IN NUMBER,
                                O_DATA_OBITO OUT date); --efv Data de Obito
  ---------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_DATA_OBITO_INV(I_BENEFICIO  IN NUMBER,
                                    O_DATA_OBITO OUT varchar2); --efv Data de Obito
  ---------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_PAGAMENTO_ESPECIAL(o_pagto_especial out number); -- MVL 26/08/2008
  ---------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_ENQUADRAMENTO(o_tipo_efeito      in number,
                                   o_cod_ref_oj       out number,
                                   o_cod_beneficio_oj out number,
                                   o_val_porc_efe     out number); -- MVL 26/08/2008
  ---------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_LIMITE_REGIME_GERAL(o_dat_obito out date); -- MVL 26/08/2008
  ---------------------------------------------------------------------------
  FUNCTION SP_OBTEM_DIAS_BENEFICIO RETURN NUMBER;
  ---------------------------------------------------------------------------
  PROCEDURE SP_CALCULA_TETO;
  ---------------------------------------------------------------------------
  PROCEDURE SP_GERA_RUBRICA_AGRUPADA;
  ---------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_REFERENCIA(o_var_padrao in varchar2,
                                o_referencia out number);
  ---------------------------------------------------------------------------
  PROCEDURE SP_VERIFICA_ORDEM_JUDICIAL(i_num_funcao  in number,
                                       o_val_percent out number);
  ---------------------------------------------------------------------------
  PROCEDURE SP_RUBRICAS_EXCESSO;
  ---------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_RUBRICA_EVENTO_ESPEC(itip_evento_especial in varchar2,
                                          i_cod_entidade       in number,
                                          i_flg_natureza       in varchar2,
                                          o_cod_rubrica        out number,
                                          o_seq_vig            out number);
  ---------------------------------------------------------------------------
  FUNCTION SP_OBTEM_PODER(o_cod_entidade in number) RETURN VARCHAR2;
  ---------------------------------------------------------------------------
  PROCEDURE SP_INCLUI_RESULTADO_CALC_RET(i_rdcn in tb_det_calculado_ESTRUC%rowtype);
  ---------------------------------------------------------------------------
  PROCEDURE SP_INCLUI_TB_DET_RET(i_rdcn in tb_det_calculado_estruc%rowtype);
  ---------------------------------------------------------------------------
  PROCEDURE SP_INCLUI_VALOR_NPAGO_RET(i_rdcn in tb_det_calculado_estruc%rowtype);
  ---------------------------------------------------------------------------
  PROCEDURE SP_VERIFICA_VALOR_EXTERNO(i_cod_benef   in number,
                                      i_ide_cli     in VARCHAR2,
                                      o_val_externo out number);
  ---------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_TIPO_BENEFICIO(cod_benef in number);
  ---------------------------------------------------------------------------
  PROCEDURE SP_VERIFICA_TETO_FIXO(i_cod_benef in NUMBER,
                                  o_teto_fixo out NUMBER);
  ---------------------------------------------------------------------------
  PROCEDURE SP_INCLUI_REDUTOR_2100600(i_ide_cli           in VARCHAR2,
                                      valor_teto_aplicado in number);
  ---------------------------------------------------------------------------
  FUNCTION CALCULA_MARGEM_CONSIG RETURN NUMBER;
  ---------------------------------------------------------------------------
  PROCEDURE SP_VERIFICA_CORRECAO_MONETARIA(I_COD_IDE_CLI  IN VARCHAR2,
                                           O_ANO_INICIO   OUT NUMBER ,
                                           O_FLG_CORRECAO OUT BOOLEAN) ;
  ---------------------------------------------------------------------------
  PROCEDURE SP_ATUALIZA_DECIMOTERC(i_cod_ins         in number,
                                   i_per_pro         in date,
                                   i_cod_usu         in varchar2,
                                   i_tip_pro         in varchar2,
                                   i_par_per_real    in date,
                                   i_des_tipos_benef in varchar2,
                                   i_cod_tipo_ben    in varchar2,
                                   i_num_processo    in number,
                                   i_num_grp         in number,
                                   i_seq_pag         in number,
                                   i_num_cpf         in varchar2,
                                   i_num_seq_proc    in number,
                                   i_flg_retorno     out varchar2);
  ---------------------------------------------------------------------------
  PROCEDURE SP_ATUALIZA_PENSAOALIMENTICIA(i_cod_ins         in number,
                                          i_per_pro         in date,
                                          i_cod_usu         in varchar2,
                                          i_tip_pro         in varchar2,
                                          i_par_per_real    in date,
                                          i_des_tipos_benef in varchar2,
                                          i_cod_tipo_ben    in varchar2,
                                          i_num_processo    in number,
                                          i_num_grp         in number,
                                          i_seq_pag         in number,
                                          i_num_cpf         in varchar2,
                                          i_num_seq_proc    in number,
                                          i_flg_retorno     out varchar2);
  ---------------------------------------------------------------------------

  FUNCTION SP_VALOR_PORCENTUAL13(
                                I_COD_BENEFICIO VARCHAR2
                                ) return NUMBER;

  PROCEDURE SP_ATUALIZA_TOTAIS_FOLHA(i_cod_ins         in number,
                                     i_per_pro         in date,
                                     i_cod_usu         in varchar2,
                                     i_tip_pro         in varchar2,
                                     i_par_per_real    in date,
                                     i_des_tipos_benef in varchar2,
                                     i_cod_tipo_ben    in varchar2,
                                     i_num_processo    in number,
                                     i_num_grp         in number,
                                     i_seq_pag         in number,
                                     i_num_cpf         in varchar2,
                                     i_num_seq_proc    in number,
                                     i_flg_retorno     out varchar2);
  ---------------------------------------------------------------------------
  PROCEDURE SP_GRAVA_FOLHA_PARAM(ind in number);
  ---------------------------------------------------------------------------
  PROCEDURE SP_GERA_PA_LIQ;
  ---------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_DEDUCOES_BASICAS(ide_cli in varchar2, deducao_ir out number);
  --------------------------------------------------------------------------------

   -- ALT JTS25
  PROCEDURE SP_VERIFICA_TOTAIS;

  PROCEDURE SP_OBTEM_ESENCAOEC40 ( VI_COD_IDE_CLI IN  VARCHAR2 ,
                                   vi_ind_atb out CHAR         );

  PROCEDURE SP_OBTEM_FATOR_MES_PRO (VI_BEN_DAT_INICIO  IN   DATE  ,
                                    VI_DIA_MES         OUT  CHAR    );
  PROCEDURE SP_GRAVA_DETALHE_PA;
  ----- ROTINAS IMPLEMENTADAS PARA CACULO DE IR ACUMULADO

  PROCEDURE SP_SEPARA_IRRF (    IDX_IRRF2       OUT NUMBER,
                                IDX_IRRF2_RETRO OUT NUMBER,
                                IDX_IRRF2_HISTO OUT NUMBER
                            );

  PROCEDURE SP_SEPARA_IRRF_SUP (IDX_IRRF2       OUT NUMBER,
                                IDX_IRRF2_RETRO OUT NUMBER,
                                IDX_IRRF2_HISTO OUT NUMBER
                            );

  PROCEDURE SP_OBTEM_IRRF_RETRO(ide_cli         IN  varchar2,
                          idx_val               IN  number,
                          FLG_PA                IN  varchar2,
                          O_VALOR               OUT number,
                          O_VALOR_13            OUT number,
                          O_BASE_BRUTA_IRRF     OUT number,
                          O_BASE_BRUTA_13_IRRF  OUT number,
                          O_QTA_MES             OUT number
                               );
 PROCEDURE SP_OBTEM_DETALHE_PAG_IRRF(IDE_CLI         IN VARCHAR2,
 FLG_PA               IN VARCHAR2,
 TP_EVENTO_ESPECIAL   IN VARCHAR2,
 TP_EVENTO            IN VARCHAR2,
 TP_IRRF              IN VARCHAR,
 V_BASE_BRUTA_IRRF    IN NUMBER ,
 V_BASE_BRUTA_13_IRRF IN NUMBER);

 FUNCTION SP_OBTEM_DED_PAGOS_IRRF(tipo_irr IN VARCHAR) RETURN NUMBER ;

 PROCEDURE SP_OBTEM_BASE_IR_ACUM (tipo_irr IN VARCHAR , V_BASE_IR_ACUMULADA OUT NUMBER);


  PROCEDURE SP_OBTEM_IR_ACUM (tipo_irr      IN VARCHAR,
                             V_IR_ACUMULADA OUT NUMBER,
                             V_DAT_INI_IR   OUT DATE  ,
                             V_DAT_TER_IR   OUT DATE) ;

 FUNCTION  SP_OBTEM_MESES_PAG_IRRF (TP_IRRF    IN VARCHAR
                                     ) RETURN NUMBER;
 PROCEDURE SP_CALCULA_IMPOSTO2_RETRO(TotBru in number,qta_meses in number , MonImp out number);

 PROCEDURE SP_INCLUI_DETALHE_PAG_IRRF(TP_COD_BENEFICIO IN NUMBER,
                                  TP_RUBRICA       IN NUMBER,
                                  TP_VAL_RUBRICA   IN NUMBER,
                                  TP_SEQ_VIG       IN NUMBER,
                                  TP_FLG_NATUREZA  IN VARCHAR2,
                                  TP_IRRF          IN VARCHAR);
 PROCEDURE   SP_CARREGA_DAT_PAGAMENTO;
 ---------------------------------------------------------
 PROCEDURE SP_INCLUI_DETALHE_PAG_CONSIG(TP_COD_BENEFICIO IN NUMBER,
                                  TP_RUBRICA       IN NUMBER,
                                  TP_VAL_RUBRICA   IN NUMBER,
                                  TP_SEQ_VIG       IN NUMBER,
                                  TP_FLG_NATUREZA  IN VARCHAR2,
                                  TP_INI_REF       IN DATE,
                                  TP_FIM_REF       IN DATE,
                                  TP_DES_COMPLEMENTO in VARCHAR,
                                  TP_DES_INFORMACAO IN VARCHAR);

 ----------------- CORRECAO MONETARIA -----------------
 PROCEDURE SP_CALCULA_CORRECAO_UFESP;
 PROCEDURE SP_OBTEM_FATOR_CORRECAO_UFESP(
                                    ANO_ATUAL in NUMBER,
                                    ANO_RETRO in NUMBER,
                                    O_FATOR_CORRECAO OUT NUMBER);

 FUNCTION SP_OBTEM_PERC_FEQ  RETURN NUMBER;
 PROCEDURE SP_OBTEM_SIM_CNT(COM_COD_BENEFICIO IN NUMBER ,   O_VALOR OUT NUMBER);
 ---- Artigo 133 Novos Procedimentos --
  ---- Modificado 16-09-2013
  PROCEDURE SP_OBTEM_BASE_133(
                              VAL_CONCEITO_DIF_VENC IN NUMBER ,
                              VAL_ENTIDADE_DIF_VENC IN NUMBER ,
                              VAL_CARGO_DIF_VENC IN NUMBER ,
                              o_valor out number);


  PROCEDURE SP_OBTEM_BASE_NORMAL133(VAL_CARGO_DIF_VENC IN NUMBER ,o_valor out number);
  PROCEDURE SP_CALCULA_RDIFF_VENC;
  PROCEDURE SP_LER_RDIFF_VENC (TIPO_CURSOR IN NUMBER);
  PROCEDURE SP_OBTEM_VALOR_FORMULA_RECUR ;
  PROCEDURE SP_CARREGA_FORMULA_RECUR ;

  FUNCTION  SP_OBTEM_VALOR_VAR_DIFVENC(i_num_funcao   in number,
                              i_cod_variavel          in varchar2,
                              i_ordem                 in number) return varchar2;


  PROCEDURE SP_VALOR_CALCULADO_DIFVENC (I_RUBRICA       IN NUMBER,
                               I_COD_BENEFICIO IN NUMBER,
                               I_COD_VARIAVEL  IN VARCHAR2,
                               I_COD_ENTIDADE  IN NUMBER,
                               I_IND_VAL_CHEIO IN VARCHAR2,
                               I_TIPO          IN NUMBER,
                               O_VALOR         OUT NUMBER);

  PROCEDURE SP_COMPOSICAO_DIFVECN(I_COD_RUBRICA   in number,
                          I_VARIAVEL      in varchar2,
                          I_COD_BENEFICIO IN NUMBER,
                          I_COD_ENTIDADE  IN NUMBER,
                          i_ind_val_cheio in varchar2,
                          I_VALOR         OUT NUMBER);



  PROCEDURE SP_COMPOSICAO_DIFV_MB(I_COD_RUBRICA   in number,
                          I_VARIAVEL      in varchar2,
                          I_COD_BENEFICIO IN NUMBER,
                          I_COD_ENTIDADE  IN NUMBER,
                          I_tipo_base     in VARCHAR2,
                          I_ind_val_cheio in varchar2,
                          I_VALOR         OUT NUMBER);

 FUNCTION SP_OBTEM_PADRAO_VENCIMENTO_DIF RETURN VARCHAR2;
 FUNCTION SP_VALIDA_CONDICAO_RECUR RETURN BOOLEAN;
 --- Para Pagamento de 13
 PROCEDURE SP_OBTEM_DETALHE_PAG13(IDE_CLI            IN VARCHAR2,
                                   FLG_PA             IN VARCHAR2,
                                   TP_EVENTO_ESPECIAL IN VARCHAR2,
                                   TP_EVENTO          IN VARCHAR2);
 PROCEDURE SP_CALCULA_SALMIN_ANTER(i_valor out number);
 FUNCTION SP_IRRF_EXT(ide_cli in varchar2) return boolean;
 PROCEDURE SP_OBTEM_TETO (ide_cli         in varchar2,
                         i_cod_entidade  in number  ,
                         i_cargo         in number  ,
                         o_valor         out number );
 PROCEDURE SP_VERIFICA_TIP_JUDICIAL ( I_DE_CLI         IN VARCHAR2  ,
                                      I_NUM_ORD_JUD    IN NUMBER,
                                      O_TIP_ORDEM_JUD OUT VARCHAR);
 PROCEDURE SP_COMPOSICAO_BENEFICIO(I_COD_RUBRICA   IN NUMBER,
                          I_VARIAVEL      IN VARCHAR2,
                          I_COD_BENEFICIO IN NUMBER,
                          I_COD_ENTIDADE  IN NUMBER,
                          I_IND_VAL_CHEIO IN VARCHAR2,
                          I_VALOR         OUT NUMBER);
 PROCEDURE SP_CALCULA_PREV_DETALHE_AD ;
 FUNCTION SP_OBTEM_PERC_CARGO  RETURN NUMBER;

 FUNCTION  SP_CALC_PORCENTUAL13(
                        I_COD_BENEFICIO VARCHAR2
                       ) Return number;
 FUNCTION SP_OBTEM_DIAS_CONTRIB(P_COD_BENEFICIO IN VARCHAR2) RETURN NUMBER;

 FUNCTION SP_OBTEM_ANTECIP_DECIMO(P_COD_BENEFICIO IN NUMBER) RETURN NUMBER ;

 --------------- Desenvolvimento Task 3689  --------------

  PROCEDURE SP_PROCESSA_RUBRICA_TETO(CALC_RUB OUT BOOLEAN);
  FUNCTION  SP_OBTEM_HIST_PERC_BENEFICIO (P_COD_BENEFICIO IN NUMBER ) RETURN NUMBER;

  ------------------ Calculo de Ir Externo -------------------
-- Novo procedimento para calcular a base
-------------------------------------------------------------
PROCEDURE SP_OBTEM_BASE_IR_EXT(idx        in number,
                             tipo_irr   in varchar,
                             vi_base_ir out number,
                             base_ir_13 out number
                              );

  ------- Task 37101 Contribuição previdencia ...........
FUNCTION SP_VERIFICA_PAG_PERIODOS
                     (
                       WS_PER_PRO         IN DATE    ,
                       WS_TIP_PRO         IN CHAR    ,
                       WS_SEQ_PAGAMENTO   IN NUMBER  ,
                       WS_COD_BENEFICIO   IN NUMBER  ,
                       WS_COD_IDE_CLI     IN NUMBER
                      ) RETURN NUMBER ;
--- Calculo de Ir Externo 
 PROCEDURE SP_CALCULA_IMPOSTO_EXT(TotBru in number, MonImp out number);
 
 ------- Task 47697  Imposto da Renda Cumulativo ...
 PROCEDURE  SP_ATUALIZA_BASE_IR_ACUM_MES ( 
                     I_COD_INS       IN NUMBER,
                     I_TIP_PROCESSO  IN VARCHAR,
                     I_PER_PROCESSO  IN DATE,
                     I_SEQ_PAGAMENTO IN NUMBER,
                     I_COD_IDE_CLI   IN VARCHAR, 
                     I_COD_BENEFICIO IN NUMBER ,
                     I_BASE_IR_ACUM_MES IN NUMBER  );
  
 ------- Task 37101 Contribuição previdencia .... .... 
 PROCEDURE  SP_ATUALIZA_TOTAIS_FOLHA_ACUM  ( 
                     I_COD_INS       IN NUMBER,
                     I_TIP_PROCESSO  IN VARCHAR,
                     I_PER_PROCESSO  IN DATE,
                     I_SEQ_PAGAMENTO IN NUMBER,
                     I_COD_IDE_CLI   IN VARCHAR, 
                     I_COD_BENEFICIO IN NUMBER     
  
  );

 -- TICKET 46395: Criar função de código 551.
 --  12/09/2018
 FUNCTION SP_OBTEM_PERC_FEQ_CARGO  RETURN NUMBER;
-----------------------------------------------------------------------------
----TASK48653: Automatização cálculo da rubrica de gratificação executiva: 4074
-------------------------------------------------------------------------------
FUNCTION SP_OBTEM_PERC_CARGO_JOR  RETURN NUMBER;
FUNCTION SP_OBTEM_PERC_CARGO_REF (COD_REFERENCIA_CARGO IN  CHAR  ) RETURN NUMBER; 
PROCEDURE SP_OBTEM_CATEGORIA_CARGO(O_VALOR OUT VARCHAR2);
 ------------------------------Fim-------------------------------------------
----TASK48653: Automatização cálculo da rubrica de gratificação executiva: 4074
-------------------------------------------------------------------------------
 END     PAC_FOLHA_CALCULADA_NOVO_HCAL;
/
CREATE OR REPLACE PACKAGE BODY user_ipesp.PAC_FOLHA_CALCULADA_NOVO_HCAL  is
  -------------------------------------------------------------------------------------
  PROCEDURE SP_FOLHA_CALCULADA3(i_cod_ins                in number,
                                i_per_pro                in date, -- Periodo a processar
                                i_cod_usu                in varchar2,
                                i_tip_tra                in varchar2,
                                i_tip_pro                in varchar2, -- TIPO DE PROCESSO: N (normal), S (Suplementar), T (13 Salario)
                                i_num_cpf                in varchar2,
                                i_partir_de              in varchar2,
                                i_par_per_real           in date,
                                i_data_primeiro          in date,
                                i_des_tipos_benef        in varchar2,
                                i_cod_tipo_ben           in varchar2,
                                i_cod_categoria          in number,
                                i_cod_cargo              in number, -- MVL
                                i_cod_entidade           in number,
                                i_percent_correcao       in number, -- MVL
                                i_ind_proc_enquadramento in number, --FCPF
                                i_num_processo           in number, --ROD6 :: Indica o grupo a ser processado
                                i_num_grp                in number, --ROD7 :: numero do grupo de pagamento a processar
                                i_num_seq_proc           in number,
                                i_seq_pagamento           in number)
   AS
    j            number;
    p            number;
    valor2       number;
    val_base_13  number(16, 4) := 0;
    c_concei     curform;
    processa_rub boolean := TRUE;
    ver_benef    number := 0;
    xcont number :=0;
    i_flg_retorno number :=0;
    cont_com      number := 0;
    p_flg_retorno varchar2(2) := '';

    o_v_pgto               number := 0;
    v_status_processamento varchar2(2) := null;
    cont_proc              number(8) := 0;
    nao_tem_prev           char(1) := null;

  BEGIN
    BEGIN
      -- Atribuindo parametros de entrada a variaveis globais
      PAR_COD_INS := i_cod_ins;
      --PAR_COD_GRP:=i_cod_grp; --ROD2
      PAR_PER_PRO       := i_per_pro;
      PAR_COD_USU       := i_cod_usu;
      PAR_TIP_TRA       := i_tip_tra;
      PAR_TIP_PRO       := i_tip_pro;
      PAR_NUM_CPF       := i_num_cpf;
      PAR_PARTIR_DE     := i_partir_de;
      PAR_PER_REAL      := i_par_per_real;
      PAR_DATA_PRIMEIRO := i_data_primeiro;
      PAR_NOM_BENEF     := i_des_tipos_benef;
      PAR_COD_TIPO_BEN  := i_cod_tipo_ben;
      PAR_IDE_CLI       := NULL;
      PAR_COD_CATEGORIA := i_cod_categoria;
      PAR_COD_CARGO     := i_cod_cargo;
      PAR_COD_ENTIDADE  := i_cod_entidade;
      PAR_NUM_PROCESSO  := i_num_processo; --ROD6
      PAR_NUM_GRP_PAG   := i_num_grp;      --ROD7
      PAR_NUM_SEQ_PROC  := i_num_seq_proc;
      PAR_SEQ_PAGAMENTO := i_seq_pagamento;
      --
      PAR_PERCENT_CORRECAO       := i_percent_correcao;
      PAR_IND_PROC_ENQUADRAMENTO := i_ind_proc_enquadramento;


      SP_INICIO_PROCESSO;

      --
      ----
      --

      SP_CARREGA_VARIAVEIS_PARAMETRO;

      --
      ----
      --

      SP_VERIFICA_REPROCESSAMENTO;

      --
      ---

      FOR J IN 1 .. num_cpf.count LOOP

        IF J = 1 then
          par_num_cpf := null;
        END IF;

        IF num_cpf(j) is not null and nvl(par_num_cpf, '0') <> num_cpf(j) then
          par_num_cpf := num_cpf(j);
        END IF;

        -- TT48091 -- DISSOCIAR TAMBEM QUANDO HA MAIS DE UM BENEFÍCIO DE PENSAO PARA O MESMO IDE_CLI_BEN
        -- LJUNIOR EM 18/07/2018
        OPEN CURBEN;
        FETCH CURBEN
          INTO BEN_IDE_CLI, BEN_NUM_CPF, BEN_NOME, BEN_DTA_NASC, BEN_TIPO_PESSOA, BEN_FLG_STATUS,
               BEN_DISSOCIACAO,BEN_ENVIO_CORREIO, COD_BEN_DISSOCIACAO;

        ANT_IDE_CLI         := BEN_IDE_CLI;
        ANT_NUM_CPF         := BEN_NUM_CPF;
        ANT_NOME            := BEN_NOME;
        ANT_FLG_STATUS      := BEN_FLG_STATUS;
        ANT_DTA_NASC        := BEN_DTA_NASC;
        ANT_BEN_DISSOCIACAO := BEN_DISSOCIACAO;
        -- TT48091 -- DISSOCIAR TAMBEM QUANDO HA MAIS DE UM BENEFÍCIO DE PENSAO PARA O MESMO IDE_CLI_BEN
        -- 18/07/2018
        ANT_COD_BEN_DISSOCIACAO := COD_BEN_DISSOCIACAO;
        ANT_BEN_ENVIO_CORREIO   := BEN_ENVIO_CORREIO;

        begin
          update tb_controle_processamento cp
             set cp.num_cpf_atual_proc = BEN_NUM_CPF,
                 cp.num_cpf_anter_proc = null
           where cp.cod_ins = PAR_COD_INS
             and cp.num_processo = PAR_NUM_PROCESSO
             and cp.num_grp_pag = PAR_NUM_GRP_PAG
             and cp.seq_processamento = PAR_NUM_SEQ_PROC;
        exception
          when others then
            null;
        end;
        COMMIT;

        SP_INICIA_VAR;


        xcont := CURBEN%rowcount;

        WHILE CURBEN%FOUND LOOP
          VI_SAL_BASE_TOTAL := 0;
          VI_TOT_DED        := 0;
          VI_BASE_IR        := 0;
          VI_BASE_PREV      := 0;
          VI_BASE_BRUTA     := 0;
          VI_BASE_BRUTA_13  := 0;
          COM_VAL_PORC_IND_133 :=0;
          -- Carrega Composic?o de salarios
          OPEN CUR_COMPBEN;
          FETCH CUR_COMPBEN
            INTO COM_COD_BENEFICIO, COM_TIP_BENEFICIO, COM_COD_RUBRICA, COM_COD_FCRUBRICA, COM_SEQ_VIG_FC, COM_NAT_COMP, COM_NUM_ORD_JUD, COM_IDE_CLI_INSTITUIDOR, COM_VAL_FIXO_IND, COM_VAL_PORC_IND, COM_VAL_PORC2, COM_QTY_UNID_IND, COM_VAL_UNID, COM_TIPO_VALOR, COM_IND_QTAS, COM_NUM_QTAS_PAG, COM_TOT_QTAS_PAG, COM_IND_COMP_RUB, COM_NAT_RUB, COM_INI_REF, COM_FIM_REF, COM_PRIORIDADE,
                 COM_DED_IR, COM_FLG_PROCESSA, COM_NAT_VAL, COM_TIPO_APLICACAO, COM_PERCENT_BEN, COM_TIPO_EVENTO_ESPECIAL, COM_VAL_STR1, COM_VAL_STR2, COM_MATRICULA, COM_ENTIDADE, COM_CARGO, COM_CARGO_APOS, BEN_DAT_INICIO, BEN_DAT_FIM, COM_DAT_INI_VIG, COM_DAT_FIM_VIG, COM_COD_IDE_CLI_BEN, COM_MSC_INFORMACAO, COM_COL_INFORMACAO, COM_PORC_VIG, COM_DAT_VIG_RUBRICA, COM_APLICA_RATEIO,
                 COM_SEQ_VIG, com_cod_entidade ,COM_NUM_CARGA,COM_NUM_SEQ_CONTROLE_CARGA,COM_NUM_GRUPO_PAG,COM_RUBRICA_TIPO,COM_FLG_STATUS, COM_DAT_CONTRATO ,COM_COD_CONVENIO ,COM_DISSOCIACAO,COM_COD_CONCEITO ,COM_COD_FUNCAO,COM_COD_CARGO_RUB,COM_COD_REFERENCIA_RUB  , COM_DAT_INCORP_RUB ,COM_COD_TABELA  , COM_FLG_MODALIDADE,COM_FLG_DESC_PARCIAL
                -----------------------------------------------
                -- Variavel para controle de Base de Calculo 13
                -- 06/05/2015
                ----------------------------------------------
                , COM_VAL_PORC_13
                , COM_VAL_FIXO_13
                , COM_VAL_UNIDADE_13
  --------------- Desenvolvimento Task 3689  --------------
                ,COM_APLICA_PROP_PENSAO;
   --------------- Desenvolvimento Task 3689  --------------


          IF CUR_COMPBEN%found then
            sp_obtem_cod_ide_cli_serv;

            ANT_COD_BENEFICIO   := COM_COD_BENEFICIO;
            ANT_COD_IDE_CLI_BEN := COM_COD_IDE_CLI_BEN;
            ANT_MATRICULA       := replace(COM_MATRICULA, '-', ''); -- alterado Ffranco 21/11/2006
            ANT_ENTIDADE        := COM_ENTIDADE;
            ANT_CARGO           := COM_CARGO;
            ANT_DAT_INI_BEN     := BEN_DAT_INICIO;
            ANT_TIP_BENEFICIO   := COM_TIP_BENEFICIO;
            ANT_NUM_GRUPO_PAG   := COM_NUM_GRUPO_PAG ;
            ANT_FLG_STATUS      := COM_FLG_STATUS;

            SP_CALC_DATAS_PROPORCIONAL;

          --------------- Desenvolvimento Task 3689  --------------
             VI_PERC_PENSAO    :=1;
            IF COM_TIP_BENEFICIO <> 'APOSENTADO' THEN
              VI_PERC_PENSAO  :=SP_OBTEM_HIST_PERC_BENEFICIO ( ANT_COD_BENEFICIO );
             END IF;
            --------------- Desenvolvimento Task 3689  --------------
            IF APLICAR_PROP_BEN THEN
              --Valor Proporcional SB
              VI_PROP_BEN := SP_OBTEM_PROP_BEN;
            END IF;

            -- Aplica proporcionalidade de saida
            IF APLICAR_PROP_SAIDA AND COM_TIP_BENEFICIO <> 'APOSENTADO' THEN
              --Valar Prop SB, Valor Fixo
              SP_OBTEM_PROP_SAIDA(VI_PROP_SAIDA, VI_PROP_13);
             ELSE
                 SP_OBTEM_PROP_SAIDA(VI_PROP_SAIDA, VI_PROP_13);


            END IF;

            SP_OBTEM_EVOLU_REL_FUNCIONAL;
            VI_PROP_COMPOSICAO := SP_OBTEM_PROP_COMPOSICAO;

          END IF;

          WHILE CUR_COMPBEN%FOUND LOOP

            SP_VERIFICA_ORDEM_JUDICIAL(0, PAR_PERCENT_CORRECAO); -- verifica ordem judicila para correc?o no calculo

            PROCESSA_RUB := TRUE;

            SP_PROCESSA_RUBRICA(PROCESSA_RUB);

            VI_PROP_COMPOSICAO := SP_OBTEM_PROP_COMPOSICAO;

            -------------------------
            --Novo modelo de rubricas
            -------------------------

            IF PROCESSA_RUB = TRUE THEN
              SP_CALCULA_VALOR_RUBRICA;

              IF mon_calculo > 0 and COM_FLG_PROCESSA = 'S' THEN

                -- armazena em array
                SP_INS_DETCALCULADO(mon_calculo);
              END IF;
            ELSE
              -- 'Rubrica Excludentes';
              --'Aviso - Rubrica Excluida por ser incompativel com outra';
              NULL;
            END IF;
            COM_COD_BENEFICIO := 0;
            FETCH CUR_COMPBEN
              INTO COM_COD_BENEFICIO, COM_TIP_BENEFICIO, COM_COD_RUBRICA, COM_COD_FCRUBRICA, COM_SEQ_VIG_FC, COM_NAT_COMP, COM_NUM_ORD_JUD, COM_IDE_CLI_INSTITUIDOR, COM_VAL_FIXO_IND, COM_VAL_PORC_IND, COM_VAL_PORC2, COM_QTY_UNID_IND, COM_VAL_UNID, COM_TIPO_VALOR, COM_IND_QTAS, COM_NUM_QTAS_PAG, COM_TOT_QTAS_PAG, COM_IND_COMP_RUB, COM_NAT_RUB, COM_INI_REF, COM_FIM_REF, COM_PRIORIDADE, COM_DED_IR, COM_FLG_PROCESSA, COM_NAT_VAL,
                   COM_TIPO_APLICACAO, COM_PERCENT_BEN, COM_TIPO_EVENTO_ESPECIAL, COM_VAL_STR1, COM_VAL_STR2, COM_MATRICULA, COM_ENTIDADE, COM_CARGO, COM_CARGO_APOS, BEN_DAT_INICIO, BEN_DAT_FIM, COM_DAT_INI_VIG, COM_DAT_FIM_VIG, COM_COD_IDE_CLI_BEN, COM_MSC_INFORMACAO, COM_COL_INFORMACAO, COM_PORC_VIG, COM_DAT_VIG_RUBRICA, COM_APLICA_RATEIO, COM_SEQ_VIG, com_cod_entidade,COM_NUM_CARGA,COM_NUM_SEQ_CONTROLE_CARGA,
                   COM_NUM_GRUPO_PAG,COM_RUBRICA_TIPO,COM_FLG_STATUS, COM_DAT_CONTRATO ,COM_COD_CONVENIO,COM_DISSOCIACAO ,COM_COD_CONCEITO ,COM_COD_FUNCAO ,COM_COD_CARGO_RUB,COM_COD_REFERENCIA_RUB  , COM_DAT_INCORP_RUB,COM_COD_TABELA , COM_FLG_MODALIDADE,COM_FLG_DESC_PARCIAL
                  -----------------------------------------------
                  -- Variavel para controle de Base de Calculo 13
                  -- 11/08/2015
                  ----------------------------------------------
                  , COM_VAL_PORC_13
                  , COM_VAL_FIXO_13
                  , COM_VAL_UNIDADE_13

    --------------- Desenvolvimento Task 3689  --------------
                  ,COM_APLICA_PROP_PENSAO;
    --------------- Desenvolvimento Task 3689  --------------


            IF COM_COD_BENEFICIO <> ANT_COD_BENEFICIO THEN

              VI_PERCENTUAL_RATEIO_ANT:=1;
              VI_PERCENTUAL_RATEIO_ANT:= VI_PERCENTUAL_RATEIO;
              APLICAR_PROP_SAIDA := TRUE;

              SP_CALC_DATAS_PROPORCIONAL;
             --------------- Desenvolvimento Task 3689  --------------
               VI_PERC_PENSAO    :=1;
               IF COM_TIP_BENEFICIO <> 'APOSENTADO'  AND
                  COM_COD_BENEFICIO <> 0             THEN
                  VI_PERC_PENSAO  := SP_OBTEM_HIST_PERC_BENEFICIO ( COM_COD_BENEFICIO );
               END IF;
              --------------- Desenvolvimento Task 3689  --------------

              IF APLICAR_PROP_SAIDA AND COM_TIP_BENEFICIO <> 'APOSENTADO' THEN
                --Valar Prop SB, Valor Fixo
                SP_OBTEM_PROP_SAIDA(VI_PROP_SAIDA, VI_PROP_13);
              ELSE
                    SP_OBTEM_PROP_SAIDA(VI_PROP_SAIDA, VI_PROP_13);

                     --  VI_PROP_SAIDA:=1 ;
                     --  VI_PROP_13:=1;


              END IF;

              v_cod_beneficio.extend;
              V_CONT_BENEF := V_CONT_BENEF + 1;
              v_cod_beneficio(V_CONT_BENEF) := ANT_COD_BENEFICIO;

              VI_BASE_IR_ARR(ANT_COD_BENEFICIO)(1)    := 0;
              VI_BASE_IR_ARR_13(ANT_COD_BENEFICIO)(1) := 0;
              VI_PERC_IR(ANT_COD_BENEFICIO)(1)        := 0;
              VI_PERC_IR13(ANT_COD_BENEFICIO)(1)      := 0;
              ver_benef := v_cod_beneficio.count;

              --- Controle de Base de Ir Deducida
              VI_BASE_IR_ARR_DED(ANT_COD_BENEFICIO)(1):=0;

              v_cargo(ant_cod_beneficio)(1) := ANT_CARGO; -- MVL1

              BEGIN
                IF v_cod_beneficio.count > 1 THEN
                  vi_sal_base_total := vi_sal_base_total +
                                       v_sal_base(ANT_cod_beneficio) (1);
                ELSE
                  vi_sal_base_total := v_sal_base(ANT_cod_beneficio) (1);
                END IF;
              EXCEPTION
                when others then
                  p_coderro       := sqlcode;
                  p_sub_proc_erro := 'Erro Salario Base Benef. - ' ||
                                     ANT_cod_beneficio;
                  p_msgerro       := sqlerrm;
                  INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                        p_coderro,
                                        'Calcula Folha',
                                        sysdate,
                                        p_msgerro,
                                        p_sub_proc_erro,
                                        BEN_IDE_CLI,
                                        COM_COD_FCRUBRICA);
                  VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
              END;

              SP_INCLUI_BENEFICIO_ARRAY;
              ANT_ENTIDADE        := COM_ENTIDADE;
              IF COM_COD_BENEFICIO <> 0 THEN

                ANT_BEN_DISSOCIACAO := BEN_DISSOCIACAO;
                -- TT48091 -- DISSOCIAR TAMBEM QUANDO HA MAIS DE UM BENEFÍCIO DE PENSAO PARA O MESMO IDE_CLI_BEN
                -- LJUNIOR EM 18/07/2018
                ANT_COD_BEN_DISSOCIACAO := COD_BEN_DISSOCIACAO;
                ANT_COD_BENEFICIO   := COM_COD_BENEFICIO;
                ANT_COD_IDE_CLI_BEN := COM_COD_IDE_CLI_BEN;
                ANT_TIP_BENEFICIO   := COM_TIP_BENEFICIO;
                ANT_ENTIDADE        := COM_ENTIDADE;
                ANT_NUM_GRUPO_PAG   := COM_NUM_GRUPO_PAG;
                ---- Incluido em 06-10-2016 ---
                --Data de Inicio de Beneficio recebe o valor
                -- do novo beneficio.
                --ANT_DAT_INI_BEN     := BEN_DAT_INICIO; -- PEPE 28102016
                -----------------------------------------
                NOM_CATEGORIA       := NULL;
                NOM_SUBCATEGORIA    := NULL;
                NOM_TIPO_PROVIMENTO := NULL;
                NOM_REGIME_JUR      := NULL;
                NOM_VINCULO         := NULL;
                ANT_FLG_STATUS      := NULL;

              --  ANT_DAT_INI_BEN     := BEN_DAT_INICIO;
              END IF;

              IF CUR_COMPBEN%FOUND THEN
                SP_OBTEM_COD_IDE_CLI_SERV;
                SP_OBTEM_EVOLU_REL_FUNCIONAL;

              END IF;

            ELSE
              ANT_MATRICULA     := replace(COM_MATRICULA, '-', ''); -- alterado Ffranco 21/11/2006
              ANT_ENTIDADE      := COM_ENTIDADE;
              ANT_CARGO         := COM_CARGO;
              ANT_NUM_GRUPO_PAG :=COM_NUM_GRUPO_PAG;
              ANT_FLG_STATUS    :=COM_FLG_STATUS;
              ANT_DAT_INI_BEN     := BEN_DAT_INICIO; --23/10/2017.. TT43373
            END IF;

          END LOOP;
          CLOSE CUR_COMPBEN;
          PREV_IDE_CLI   := BEN_IDE_CLI; --RAO : 20060220
          BEN_IDE_CLI    := '0';
          BEN_FLG_STATUS := 'X';
          -- TT48091 -- DISSOCIAR TAMBEM QUANDO HA MAIS DE UM BENEFÍCIO DE PENSAO PARA O MESMO IDE_CLI_BEN
          -- LJUNIOR EM 18/07/2018
          FETCH CURBEN
            INTO BEN_IDE_CLI, BEN_NUM_CPF, BEN_NOME, BEN_DTA_NASC, BEN_TIPO_PESSOA, BEN_FLG_STATUS, BEN_DISSOCIACAO,BEN_ENVIO_CORREIO, COD_BEN_DISSOCIACAO;

                                                                                                                                                                                                                                                                                                                                                                     IF CURBEN%rowcount >= 0 AND ant_ide_cli is not null THEN

            IF BEN_IDE_CLI <> ANT_IDE_CLI OR ( BEN_DISSOCIACAO!= ANT_BEN_DISSOCIACAO AND
               BEN_IDE_CLI = ANT_IDE_CLI ) 
               -- TT48091 -- DISSOCIAR TAMBEM QUANDO HA MAIS DE UM BENEFÍCIO DE PENSAO PARA O MESMO IDE_CLI_BEN
               -- LJUNIOR EM 18/07/2018
               OR ( COD_BEN_DISSOCIACAO!= ANT_COD_BEN_DISSOCIACAO AND
               BEN_IDE_CLI = ANT_IDE_CLI )
               THEN
              --AND PAR_TIP_PRO<>'R' THEN : RAO 20060216 Deve calcular FUNPREV

              --  Verifica se houve pagamento especial no mes
              --  havendo pagamento carregar array
              --  para novo calculo de IR
              SP_OBTEM_PAGAMENTO_ESPECIAL(o_v_pgto);

              IF PAR_TIP_PRO = 'E' THEN
                select distinct cod_beneficio, cod_entidade, cod_entidade
                  into ant_cod_beneficio, ant_entidade, com_entidade
                  from tb_beneficio_cargo
                 where cod_ins = PAR_COD_INS
                   and cod_ide_cli_ben = ant_ide_cli
                   and flg_status = 'V'
                   and dat_fim_vig is null;

                v_cod_beneficio.extend;
                V_CONT_BENEF := V_CONT_BENEF + 1;
                v_cod_beneficio(V_CONT_BENEF) := ANT_COD_BENEFICIO;

                SP_INS_DETCAL_RET;
                SP_INCLUI_BENEFICIO_ARRAY;
              END IF;
              ---LIMPA VARIAVEIS ESPECIAIS
              --
              DESC_TETO:=0;
              SP_OBTEM_PARVAL_FOLHA2('INST_PREV',
                                     1000,
                                     'INST_PREV',
                                     V_INST_PREV);

              IF V_INST_PREV = 1 THEN

                ----------  aplicar rubrica do Teto
                SP_CALCULA_TETO;

                SP_RUBRICAS_EXCESSO;
              ELSE
                nao_tem_prev := ''; -- MVL5
                IF ant_ide_cli not in ('0200008776800')  THEN
                  -- Caso fixado ate oficializar a mudanca no sistema
                  -- para atributos se isenc?o de Teto  independetntes
                    SP_OBTEM_TIPOS_ATRIBUTOS_prev(500,
                                                  ant_matricula,
                                                  ant_entidade,
                                                  ant_cargo,
                                                  nao_tem_prev); -- MVL5
                ELSE
                  nao_tem_prev:='N';
                END IF;
                IF nao_tem_prev = 'N' THEN
                  -- MVL5

                  SP_RUBRICAS_EXCESSO;

                END IF;

                nao_tem_prev := ''; -- MVL5


                ----------  aplicar rubrica do Teto
                SP_OBTEM_TIPOS_ATRIBUTOS_prev(35,
                                              ant_matricula,
                                              ant_entidade,
                                              ant_cargo,
                                              nao_tem_prev); -- MVL5


                IF nao_tem_prev = 'N' THEN
                  -- MVL5

                  SP_CALCULA_TETO;

                END IF;

              END IF;

               SP_GERA_RUBRICA_AGRUPADA;
               SP_INC_DET_RETROATIVO_INICIAL;
               SP_CALCULA_PENSAO;

              IF PAR_TIP_PRO <> 'R' AND PAR_PER_PRO = PAR_PER_REAL THEN

                 -- BLOCO COMENTADO 06-01-2012
                 IF/* PAR_TIP_PRO <> 'S' AND */ PAR_TIP_PRO <> 'E' AND
                   o_v_pgto = 0
                   AND PAR_TIP_PRO <> 'T'  -- incluido ROD DEZ09
                   THEN
                    --RAO 20060507 incluido e tirado
                    --- Insere no array o detalhe retroativo
                    --         SP_INS_NPAGO_RET;
                    SP_INS_DETCAL_RET;
                    SP_CALCULA_CORRECAO_UFESP ;
                    -- SP_INS_DETCAL_PARC;

                    -- LANCAMENTO DAS RUBRICAS DE PARCELAMENTO DE DEBITOS
                    -- 22/07/2015
                    -- chamada do procedimento apos a gerac?o de todo o retroativo
                    -- O parcelamento considera tambem margem do retroativo
                    IF NOT vi_suplementar  THEN
                       SP_CALCULA_PARCELAMENTO;
                    END IF;

                END IF;

                IF PAR_TIP_PRO = 'T' THEN
                  --                Inclui Rubrica de ajuste 13 saida e Antecipacao
                  SP_OBTEM_DETALHE_PAG(ANT_IDE_CLI, 'N', 'A', 'T');
                  SP_OBTEM_DETALHE_PAG(ANT_IDE_CLI, 'N', 'T', 'T');
                  --                Verifica Rateio
                END IF;

                V_CALCULO_IR := 'S';
                ----------------------------------------------
                 -- Rotina de Separac?o de Rendimentos
                -- Separa os Rendimento do Ano de competencia
                -- dos rendimentos de Periodos Anteriores e
                -- Rendimento de 13.

          ----- ROTINA DE CONTROLE CALCULO  DE IR
         IF NOT vi_suplementar  THEN
             VI_IR_EXTERIOR:=FALSE;
             VI_IR_EXTERIOR:=SP_IRRF_EXT(ANT_IDE_CLI);
             IF  NOT VI_IR_EXTERIOR  THEN
                     BEGIN
                        IDX_IRRF:=0;
                        V_VAL_IR:=0;
                        V_VAL_IR_RETRO:=0;
                        V_VAL_IR_13 :=0;

                        IF PAR_PER_PRO = PAR_PER_REAL THEN
                               SP_SEPARA_IRRF(IDX_IRRF,IDX_IRRF_RETRO ,IDX_IRRF_HISTO) ;
                                -----------------------------------------------------------------
                               SP_OBTEM_IRRF(ant_ide_cli,
                                             IDX_IRRF, ---IDX_CALN, Ticket 49431
                                            'N',
                                            V_VAL_IR,
                                            V_VAL_IR_13);
                             --- FIM PARA NAO PROCESSAR IR PARA RETROATIVOS
                            IF V_VAL_IR > 0 OR V_VAL_IR_13 > 0 THEN
                              IF PAR_TIP_PRO = 'T' THEN
                                -- Incluir a Rubrica do IR no ARRAY
                                 ----- Pasagem de Task 37101 Contribuição previdencia ...
                                COM_TIPO_EVENTO_ESPECIAL:='I';
                                SP_OBTEM_DETALHE_PAG(ANT_IDE_CLI, 'N', 'I', 'T');
                              ELSE
                                ----- Pasagem de Task 37101 Contribuição previdencia ...
                                COM_TIPO_EVENTO_ESPECIAL:='I';
                                SP_OBTEM_DETALHE_PAG(ANT_IDE_CLI, 'N', 'I', 'N');
                              END IF;
                            ELSE
                              vi_ir_ret.extend;
                              -- Inicializacao da variavel do ir retido, recebendo o valor do ir calculado
                              vi_ir_ret(1) := V_VAL_IR;
                              -- nao existindo IR , o valor da variavel ir retido ficara com zero.
                            END IF;

                               ---- Bloque de IR ACUMULADO do Periodo ----

                               V_VAL_IR:=V_VAL_IR_RETRO;
                               ---- 15-05-2018
                              ------- BLOQUE DE CALCULO DE IR  RETRO SALARIO ------
                               FOR i2 IN 1 .. vfolha.count LOOP
                                  rfol := vfolha(i2);
                                  VI_BASE_IR_ARR_DED(rfol.cod_beneficio)(1):=0;
                                  VI_BASE_IR_ARR (rfol.cod_beneficio)(1):=0;
                                  
                                END LOOP;
                               SP_OBTEM_IRRF_RETRO(ant_ide_cli   ,
                                             IDX_IRRF_RETRO      , -- IDX_CALN, -- Novo Calculo
                                             'R'                 ,
                                             V_VAL_IR_RETRO      ,
                                             V_VAL_IR_13         ,
                                             V_BASE_BRUTA_IRRF   ,
                                             V_BASE_BRUTA_13_IRRF,
                                             QTA_MESES);

                                V_VAL_IR:=V_VAL_IR_RETRO;
                                IF V_VAL_IR_RETRO > 0 OR V_VAL_IR_13 > 0 THEN
                                    ----- Pasagem de Task 37101 Contribuição previdencia ...
                                   COM_TIPO_EVENTO_ESPECIAL:='J';
                                   SP_OBTEM_DETALHE_PAG_IRRF(ANT_IDE_CLI, 'R', 'J', 'N','R',V_BASE_BRUTA_IRRF,V_BASE_BRUTA_13_IRRF);
                                ELSE
                                          vi_ir_ret.extend;
                                          vi_ir_ret(1) := V_VAL_IR_RETRO;
                                END IF;
                             ------- BLOQUE DE CALCULO DE IR DE 13 SALARIO ------
                               FOR i2 IN 1 .. vfolha.count LOOP
                                  rfol := vfolha(i2);
                                  VI_BASE_IR_ARR_DED(rfol.cod_beneficio)(1):=0;
                                  VI_BASE_IR_ARR (rfol.cod_beneficio)(1):=0;
                                  VI_PERC_IR13(rfol.cod_beneficio)(1):=0;
                                END LOOP;
                                  p  := VI_BASE_IR_ARR_DED(rfol.cod_beneficio)(1);

                               SP_OBTEM_IRRF_RETRO (ant_ide_cli   ,
                                             IDX_IRRF_HISTO      , -- IDX_CALN, -- Novo Calculo
                                             'D'                 ,
                                             V_VAL_IR_RETRO      ,
                                             V_VAL_IR_13         ,
                                             V_BASE_BRUTA_IRRF   ,
                                             V_BASE_BRUTA_13_IRRF,
                                             QTA_MESES13);
                              IF V_VAL_IR > 0 OR V_VAL_IR_13 > 0 THEN
                                 p  := VI_BASE_IR_ARR_DED(rfol.cod_beneficio)(1);

                                     ----- Pasagem de Task 37101 Contribuição previdencia ...
                                 COM_TIPO_EVENTO_ESPECIAL:='K';
                                SP_OBTEM_DETALHE_PAG13(ANT_IDE_CLI, 'D', 'K', 'N');
                              ELSE
                                -- vi_ir_ret.extend;
                                -- Inicializacao da variavel do ir retido, recebendo o valor do ir calculado
                                -- vi_ir_ret(1) := V_VAL_IR;
                                -- nao existindo IR , o valor da variavel ir retido ficara com zero.
                                NULL;
                              END IF;

                        ELSE
                           V_VAL_IR    := 0;
                           V_VAL_IR_13 := 0;
                        END IF;

                     EXCEPTION
                     WHEN OTHERS THEN
                         p_coderro       := sqlcode;
                         p_sub_proc_erro := 'SP_FOLHA_CALCULADA -Calculo IR';
                         p_msgerro       := sqlerrm;
                         INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                                p_coderro,
                                                'Calcula Folha',
                                                sysdate,
                                                p_msgerro,
                                                p_sub_proc_erro,
                                                ant_ide_cli,
                                                0);

                          VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
                    END;

           ELSE
             ---- Calculo de Ir para Residentes no Exterior
             BEGIN
                IDX_IRRF:=0;
                V_VAL_IR:=0;
                IDX_IRRF:=0;
                V_VAL_IR_13 :=0;
                              SP_OBTEM_IRRF(ant_ide_cli,
                              IDX_CALN,
                              'E',
                              V_VAL_IR,
                              V_VAL_IR_13);
                  IF V_VAL_IR > 0 OR V_VAL_IR_13 > 0 THEN
                       IF PAR_TIP_PRO = 'T' THEN
                                    -- Incluir a Rubrica do IR no ARRAY
                            COM_TIPO_EVENTO_ESPECIAL:='O';
                            SP_OBTEM_DETALHE_PAG(ANT_IDE_CLI, 'N', 'O', 'T');
                       ELSE
                            COM_TIPO_EVENTO_ESPECIAL:='O';
                            SP_OBTEM_DETALHE_PAG(ANT_IDE_CLI, 'N', 'O', 'N');
                       END IF;
                  ELSE
                    vi_ir_ret.extend;
                    -- Inicializacao da variavel do ir retido, recebendo o valor do ir calculado
                    vi_ir_ret(1) := V_VAL_IR;
                    -- nao existindo IR , o valor da variavel ir retido ficara com zero.
                  END IF;
               EXCEPTION
              WHEN OTHERS THEN
                         p_coderro       := sqlcode;
                         p_sub_proc_erro := 'SP_FOLHA_CALCULADA -Calculo IR';
                         p_msgerro       := sqlerrm;
                         INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                                p_coderro,
                                                'Calcula Folha',
                                                sysdate,
                                                p_msgerro,
                                                p_sub_proc_erro,
                                                ant_ide_cli,
                                                0);

                          VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
               END;
          END IF;

         END IF;
        ----- ROTINA DE CONTROLE CALCULO  DE IR


         --------------------------------------------
          -- Termino de Calculo de IR ----
         --------------------------------------------
               -- Comentando 11-10-2011
               --- vlr_margem_consig := CALCULA_MARGEM_CONSIG;

                IF VI_TEM_SAIDA AND VI_BASE_IR_13 > 0 THEN
                  -- Incluir a Rubrica do IR - 13  - no ARRAY
                  IF PAR_TIP_PRO = 'T' THEN
                    SP_OBTEM_DETALHE_PAG(ANT_IDE_CLI, 'N', 'A', 'T');
                  END IF;
                  SP_OBTEM_DETALHE_PAG(ANT_IDE_CLI, 'N', 'I', 'T');
                END IF;

                --              SP_CALCULA_REDUTOR; -- calculo do redutor MVL - 20060613

                --            verificar limite valor pagamento  (Creditos - Desconto)
                SP_INCLUI_DET_SUSPENSO;


                SP_GRAVA_MASTER_PAG;


                SP_GRAVA_DETALHE_PAG;
                SP_GRAVA_DETALHE_PA;

                cont_com  := nvl(cont_com, 0) + 1;
                cont_proc := nvl(cont_proc, 0) + 1;
                --              IF  cont_com = 150 THEN
                COMMIT;
                --                   cont_com := 0;
                --              END IF;
                IF PAR_TIP_PRO <> 'R' THEN
                   begin
                     update tb_controle_processamento cp
                        set --cp.num_cpf_inicial    = ANT_NUM_CPF,
                         cp.num_cpf_anter_proc = ANT_NUM_CPF,
                         cp.num_cpf_atual_proc = BEN_NUM_CPF
                      where cp.cod_ins = PAR_COD_INS
                        and cp.num_processo = PAR_NUM_PROCESSO
                        and cp.num_grp_pag = PAR_NUM_GRP_PAG
                        and cp.seq_processamento = PAR_NUM_SEQ_PROC;

                   exception
                     when others then
                       null;
                       commit;
                   end;

                   begin
                     update tb_processamento pp
                        set pp.qtde_calculado = cont_proc
                      where pp.cod_tip_processamento IN ( '01','20')
                        and pp.cod_ins = par_cod_ins
                        and pp.per_processo = par_per_pro
                        and pp.cod_tip_processo = par_tip_pro
                        and pp.seq_pagamento = vi_seq_pagamento
                        and pp.flg_processamento = 'P'
                        and pp.num_processo = PAR_NUM_PROCESSO --ROD6
                        and pp.num_grp = PAR_NUM_GRP_PAG --ROD7
                        and pp.seq_processamento = PAR_NUM_SEQ_PROC
                        and pp.dat_fim_proc is null;
                     COMMIT;
                   exception
                     when others then
                       null;
                   end;
                end if;

                SP_INICIALIZA_ARRAY;
                ANT_BEN_DISSOCIACAO := BEN_DISSOCIACAO;
                -- TT48091 -- DISSOCIAR TAMBEM QUANDO HA MAIS DE UM BENEFÍCIO DE PENSAO PARA O MESMO IDE_CLI_BEN
                -- LJUNIOR EM 18/07/2018
                ANT_COD_BEN_DISSOCIACAO := COD_BEN_DISSOCIACAO;
                ANT_IDE_CLI     := BEN_IDE_CLI;
                ANT_NUM_CPF     := BEN_NUM_CPF;
                ANT_NOME        := BEN_NOME;
                ANT_FLG_STATUS  := BEN_FLG_STATUS;
                ANT_DTA_NASC    := BEN_DTA_NASC;
                ANT_MATRICULA   := replace(COM_MATRICULA, '-', ''); -- alterado Ffranco 21/11/2006              ANT_ENTIDADE := COM_ENTIDADE;
                ANT_ENTIDADE    := COM_ENTIDADE;
                ANT_CARGO       := COM_CARGO;
                ANT_DAT_INI_BEN := BEN_DAT_INICIO;
                ANT_BEN_ENVIO_CORREIO  :=BEN_ENVIO_CORREIO;
              END IF;
            END IF;

            IF PAR_TIP_PRO = 'R' OR
               (PAR_TIP_PRO = 'T' AND PAR_PER_PRO <> PAR_PER_REAL) THEN
              -- GRAVA MASTER RETROATIVO
              SP_GRAVA_MASTER_RET;
              -- GRAVA DETALHE RETROATIVO
              SP_GRAVA_DETALHE_RET;

              COMMIT;

              SP_INICIALIZA_ARRAY;

              ANT_IDE_CLI    := BEN_IDE_CLI;
              ANT_NUM_CPF    := BEN_NUM_CPF;
              ANT_NOME       := BEN_NOME;
              ANT_FLG_STATUS := BEN_FLG_STATUS;
              ANT_DTA_NASC   := BEN_DTA_NASC;
            END IF;
          END IF;

          IF PAR_TIP_PRO <> 'R' OR
             (PAR_TIP_PRO = 'T' AND PAR_PER_PRO <> PAR_PER_REAL) THEN
            begin
              update tb_processamento pp
                 set pp.qtde_calculado = cont_proc
               where pp.cod_tip_processamento IN ( '01','20')
                 and pp.cod_ins = par_cod_ins
                 and pp.per_processo = par_per_pro
                 and pp.cod_tip_processo = par_tip_pro
                 and pp.seq_pagamento = vi_seq_pagamento
                 and pp.flg_processamento = 'P'
                 and pp.num_processo = PAR_NUM_PROCESSO --ROD6
                 and pp.num_grp = PAR_NUM_GRP_PAG --ROD7
                 and pp.seq_processamento = PAR_NUM_SEQ_PROC
                 and pp.dat_fim_proc is null;
              COMMIT;
            exception
              when others then
                null;
            end;
          END IF;

          -- verifica se houve cancelamento do usuario

          IF cont_com >= 0 THEN
            cont_com := 0;

            begin
              select pp.flg_processamento
                into v_status_processamento
                from tb_processamento pp
               where pp.cod_tip_processamento in ( '01', '08','20')
                 and pp.cod_ins = par_cod_ins
                 and pp.per_processo = par_per_pro
                 and pp.cod_tip_processo = par_tip_pro
                 and pp.seq_pagamento = vi_seq_pagamento
                 and pp.flg_processamento = 'C'
                 and pp.num_processo = PAR_NUM_PROCESSO --ROD6
                 and pp.num_grp = PAR_NUM_GRP_PAG --ROD7
                 and pp.seq_processamento = PAR_NUM_SEQ_PROC
                 and pp.dat_fim_proc is null;

              if v_status_processamento = 'C' then
                update tb_processamento pp
                   set pp.dat_fim_proc = sysdate
                 where pp.cod_tip_processamento in ( '01', '08','20')
                   and pp.cod_ins = par_cod_ins
                   and pp.per_processo = par_per_pro
                   and pp.cod_tip_processo = par_tip_pro
                   and pp.num_processo = PAR_NUM_PROCESSO --ROD6
                   and pp.num_grp = PAR_NUM_GRP_PAG --ROD7
                   and pp.seq_pagamento = vi_seq_pagamento
                   and pp.seq_processamento = PAR_NUM_SEQ_PROC
                   and pp.flg_processamento = 'C'
                   and pp.dat_fim_proc is null;

                commit;
                exit;
              end if;

            exception
              when others then

                null;
            end;
          END IF;

        END LOOP;
        CLOSE CURBEN;

      END LOOP;

              i_flg_retorno := 0;


      if cont_com > 0 then
        commit;
      end if;

      /* */
      if i_num_cpf is not null AND PAR_PARTIR_DE = 'N' then
        NULL;
      ELSE
        v_ide_cli := null;
      END IF;

      if nvl(v_status_processamento, 'N') <> 'C' and
         PAR_IND_PROC_ENQUADRAMENTO = 0 then

        IF PAR_TIP_PRO <> 'R' AND PAR_PER_PRO = PAR_PER_REAL THEN

          begin
            update tb_processamento pp
               set pp.qtde_calculado = cont_proc,
                   pp.qtde_erros     = VI_QTD_ERROS
             where pp.cod_tip_processamento IN ( '01','20')
               and pp.cod_ins = par_cod_ins
               and pp.per_processo = par_per_pro
               and pp.cod_tip_processo = par_tip_pro
               and pp.seq_pagamento = vi_seq_pagamento
               and pp.flg_processamento = 'P'
               and pp.num_processo = PAR_NUM_PROCESSO --ROD6
               and pp.num_grp = PAR_NUM_GRP_PAG --ROD7
               and pp.seq_processamento = PAR_NUM_SEQ_PROC
               and pp.dat_fim_proc is null;

            commit;
          exception
            when others then
              null;
          end;

          pac_processamento_GRP.sp_registra_log(p_cod_tip_processamento => '01',
                                                p_cod_ins               => PAR_COD_INS,
                                                p_per_processo          => PAR_PER_PRO,
                                                p_cod_tip_processo      => PAR_TIP_PRO,
                                                p_seq_pagamento         => vi_seq_pagamento,
                                                p_des_tipos_benef       => PAR_NOM_BENEF, --PAR_GRP_PAG,
                                                p_cod_tipo_beneficio    => PAR_COD_TIPO_BEN,
                                                p_cod_banco             => null,
                                                p_num_tip_emissao       => null,
                                                p_cod_ide_cli           => v_ide_cli,
                                                p_dat_agenda_proc       => sysdate,
                                                p_flg_processamento     => 'F',
                                                p_msg_erro              => P_MSGERRO,
                                                p_cod_cargo             => NULL,
                                                p_cod_categoria         => NULL,
                                                p_cod_pccs              => NULL,
                                                p_cod_entidade          => null,
                                                p_num_processo          => PAR_NUM_PROCESSO, --ROD6
                                                p_num_grp               => PAR_NUM_GRP_PAG, --ROD7
                                                p_num_seq_proc          => PAR_NUM_SEQ_PROC, --ROD8
                                                p_flg_retorno           => p_flg_retorno);


          COMMIT;

        END IF;
      else
        begin
          update tb_processamento pp
             set pp.dat_fim_proc = sysdate
           where pp.cod_tip_processamento in ('01','08','20')
             and pp.cod_ins = par_cod_ins
             and pp.per_processo = par_per_pro
             and pp.cod_tip_processo = par_tip_pro
             and pp.seq_pagamento = vi_seq_pagamento
             and pp.flg_processamento = 'C'
             and pp.num_processo = PAR_NUM_PROCESSO --ROD6 inc
             and pp.num_grp = PAR_NUM_GRP_PAG --ROD7 inc
             and pp.seq_processamento = PAR_NUM_SEQ_PROC
             and pp.dat_fim_proc is null;
          commit;
        exception
          when others then
            null;
        end;

      end if;

      /* */
    EXCEPTION
      WHEN ERRO THEN

        if PAR_IND_PROC_ENQUADRAMENTO = 0 then

          pac_processamento_GRP.sp_registra_log(p_cod_tip_processamento => '01',
                                                p_cod_ins               => PAR_COD_INS,
                                                p_per_processo          => PAR_PER_PRO,
                                                p_cod_tip_processo      => PAR_TIP_PRO,
                                                p_seq_pagamento         => vi_seq_pagamento,
                                                p_des_tipos_benef       => PAR_NOM_BENEF, --PAR_GRP_PAG,
                                                p_cod_tipo_beneficio    => PAR_COD_TIPO_BEN,
                                                p_cod_banco             => null,
                                                p_num_tip_emissao       => null,
                                                p_cod_ide_cli           => v_ide_cli,
                                                p_dat_agenda_proc       => sysdate,
                                                p_flg_processamento     => 'E',
                                                p_msg_erro              => P_MSGERRO,
                                                p_cod_cargo             => NULL,
                                                p_cod_categoria         => NULL,
                                                p_cod_pccs              => NULL,
                                                p_cod_entidade          => null,
                                                p_num_processo          => PAR_NUM_PROCESSO, --ROD6
                                                p_num_grp               => PAR_NUM_GRP_PAG, --ROD7
                                                p_num_seq_proc          => PAR_NUM_SEQ_PROC, --ROD8
                                                p_flg_retorno           => p_flg_retorno);

          COMMIT;
        end if;
    END;

  END SP_FOLHA_CALCULADA3;

  -------------------------------------------------------------------------------------
  PROCEDURE SP_INICIO_PROCESSO AS

    j                      number;
    p                      number;
    cont_com               number := 0;
    p_flg_retorno          varchar2(2) := '';
    RET_DELETE             NUMBER := 0;
    o_v_pgto               number := 0;
    v_status_processamento varchar2(2) := null;
    num_cpf_ant            tb_pessoa_fisica.num_cpf%type;
    vo_num_cpf             tb_pessoa_fisica.num_cpf%type;

  BEGIN

    num_cpf_ant := ' ';

    IF PAR_TIP_PRO = 'E' THEN
      IF PAR_NUM_CPF is not null THEN
        null;
      ELSE
        p_coderro       := 'CPF Invalido para o processo Especial';
        p_sub_proc_erro := 'PROCESSO PRINCIPAL';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              PAR_NUM_CPF,
                              NULL);
                              VI_QTD_ERROS:=VI_QTD_ERROS+1;

        RAISE ERRO;
      END IF;
    end if;

    -- carrega seq_pagamento
    --select pp.seq_pagamento, pp.per_processo
    --  into vi_seq_pagamento, VI_DATA_ENQUADRAMENTO
    --  from tb_periodos_processamento pp
    -- where pp.flg_status = 'A';

    ------ Rod em 02/12/09 carrega seq_pagamento na m?o
    VI_DATA_ENQUADRAMENTO:=PAR_PER_REAL;
    vi_seq_pagamento :=  par_seq_pagamento;
    ------------------------

    p_sub_proc_erro := 'SP_FOLHA_CALCULADA';

    num_cpf.delete;
    ide_cli.delete;

    if PAR_NUM_CPF is not null AND PAR_PARTIR_DE = 'N' then
      BEGIN

        SELECT DISTINCT P.COD_IDE_CLI
          INTO v_ide_cli
          FROM TB_BENEFICIARIO B, TB_PESSOA_FISICA P
         WHERE P.COD_INS = PAR_COD_INS
           AND P.COD_INS = B.COD_INS
           AND P.NUM_CPF = PAR_NUM_CPF
           AND P.COD_IDE_CLI = B.COD_IDE_CLI_BEN
           AND B.FLG_STATUS in ('A', 'H', 'S', 'X')
           AND (to_char(B.DAT_FIM_BEN, 'YYYYMM') >=
               to_char(PAR_PER_PRO, 'YYYYMM') or B.DAT_FIM_BEN IS NULL);

        j := nvl(j, 0) + 1;
        num_cpf.extend;
        ide_cli.extend;
        num_cpf(j) := par_num_cpf;
        ide_cli(j) := v_ide_cli;

      exception
        when too_many_rows then

          for z in (SELECT DISTINCT P.COD_IDE_CLI, p.num_cpf
                      FROM TB_BENEFICIARIO B, TB_PESSOA_FISICA P
                     WHERE
                            P.COD_INS     = PAR_COD_INS
                       AND  P.COD_INS     = B.COD_INS
                       AND  P.NUM_CPF     = PAR_NUM_CPF
                       AND  P.COD_IDE_CLI = B.COD_IDE_CLI_BEN
                       AND  B.FLG_STATUS in ('A', 'H', 'S', 'X')
                       ----- Alterado 27/01/2017 -- Considera  X No mes
                       AND  (to_char(B.DAT_FIM_BEN, 'YYYYMM') >=
                             to_char(PAR_PER_PRO, 'YYYYMM') OR
                             B.DAT_FIM_BEN IS NULL
                            )

                       )
                        loop

            IF z.num_cpf <> num_cpf_ant then

              j := nvl(j, 0) + 1;
              num_cpf.extend;
              ide_cli.extend;
              num_cpf(j) := par_num_cpf;
              ide_cli(j) := z.cod_ide_cli;

              num_cpf_ant := z.num_cpf;

            END IF;

          end loop;

        when others then
          p_coderro       := substr(p_msgerro, 1, 10);
          p_msgerro       := 'N?o foi encontrado um beneficio ativo para o CPF ';
          p_sub_proc_erro := 'PROCESSO PRINCIPAL';
          INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                p_coderro,
                                'Calcula Folha',
                                sysdate,
                                p_msgerro,
                                p_sub_proc_erro,
                                PAR_NUM_CPF,
                                0);

          RAISE ERRO;
      end;

    ELSE
      v_ide_cli := null;
      /*  j:=nvl(j,0)+1;
      num_cpf.extend;
      ide_cli.extend;
      num_cpf(j) := par_num_cpf;    */

    END IF;

    -- Registra entrada no log
    /**/

    if PAR_IND_PROC_ENQUADRAMENTO = 0 and PAR_TIP_PRO <> 'R' AND
       PAR_PER_PRO = PAR_PER_REAL AND PAR_PARTIR_DE = 'N' then

      pac_processamento_GRP.sp_registra_log(p_cod_tip_processamento => '01',
                                            p_cod_ins               => PAR_COD_INS,
                                            p_per_processo          => PAR_PER_PRO,
                                            p_cod_tip_processo      => PAR_TIP_PRO,
                                            p_seq_pagamento         => vi_seq_pagamento,
                                            p_des_tipos_benef       => PAR_NOM_BENEF, --PAR_GRP_PAG,
                                            p_cod_tipo_beneficio    => PAR_COD_TIPO_BEN,
                                            p_cod_banco             => null,
                                            p_num_tip_emissao       => null,
                                            p_cod_ide_cli           => v_ide_cli,
                                            p_dat_agenda_proc       => sysdate,
                                            p_flg_processamento     => 'P',
                                            p_msg_erro              => P_MSGERRO,
                                            p_cod_cargo             => NULL,
                                            p_cod_categoria         => NULL,
                                            p_cod_pccs              => NULL,
                                            p_cod_entidade          => null,
                                            p_num_processo          => PAR_NUM_PROCESSO,
                                            p_num_grp               => PAR_NUM_GRP_PAG,
                                            p_num_seq_proc          => PAR_NUM_SEQ_PROC, --ROD8
                                            p_flg_retorno           => p_flg_retorno); --ROD6

      commit;

    end if;

  END SP_INICIO_PROCESSO;
  -------------------------------------------------------------------------------------
  PROCEDURE SP_CARREGA_VARIAVEIS_PARAMETRO AS

    j        number;
    c_concei curform;

  BEGIN
    vparam.delete;
    val_taxa_prev.delete;
    lim_taxa_prev.delete;
    dsc_taxa_prev.delete;
    idx_param := 0;

    vtotvar.delete;
    idx_totvar := 0;
    ---Inicio variaveis --
    reg_ttypir.delete;
    -----------------------

    SP_CARREGA_PARVAL_FOLHA(PAR_PER_PRO);
    SP_CARREGA_VAR_TOTAIS_FOLHA;
    SP_CARREGA_DAT_PAGAMENTO;

    v_val_teto_pensao := SP_OBTEM_TETO_PENSAO;

    if par_tip_pro = 'R' then
      --efv
      W_COD_PARAM_GERAL_CORRECAO := 'FIPE';
      SP_OBTEM_FATOR_CORRECAO('', PAR_PER_PRO, VI_FATOR_MES);
    else
      VI_FATOR_MES := 1;
    end if;

    IF PAR_TIP_PRO = 'S' THEN
      VI_SUPLEMENTAR := TRUE;
    ELSE
      VI_SUPLEMENTAR := FALSE;
    END IF;

    -- Carrega Variaveis globais
    v_ded_ir_65  := 0;
    v_ded_ir_dep := 0;

    --  Taxa de Contribuic?o
    PAR_COD_PAR := 'TASCO';
    PAR_PER_NUM := 1;

    val_taxa_prev.extend;
    lim_taxa_prev.extend;
    dsc_taxa_prev.extend;

    p_msgerro := null;

    PAR_PER_NUM := 3;
    PAR_COD_PAR := 'IMPMA';

    -- Valor deducivel para maiores de 65 anos
    SP_OBTEM_PARVAL_FOLHA2('IMPMA', 1000, 'IMPMA', V_DED_IR_65);
    PAR_COD_PAR := 'IMPDE';

    -- Valor deducivel por dependente economico
    SP_OBTEM_PARVAL_FOLHA2('IMPDE', 1000, 'IMPDE', V_DED_IR_DEP);

    -- Salario Minimo
    PAR_COD_PAR := 'SALMIN';
    SP_OBTEM_PARVAL_FOLHA2('SALMIN', 1000, 'PAR_SAL_MIN', V_VAL_SAL_MIN);

    -- Salario Minimo de insalubridade
    PAR_COD_PAR := 'SALMIN2';
    SP_OBTEM_PARVAL_FOLHA2('SALMIN2', 1000, 'PAR_SAL_MIN_2', V_VAL_SAL_MIN_2);

    -- Percentual para desconto
    PAR_COD_PAR := 'ISMAX';
    SP_OBTEM_PARVAL_FOLHA2('ISMAX', 1000, 'ISMAX', V_ISMAX);

    V_ISMAX := V_ISMAX / 100; -- Percentual

    -- Controle de Consignatarias
    PAR_COD_PAR := 'ISMAX_2';
    SP_OBTEM_PARVAL_FOLHA2('ISMAX_2', 1000, 'ISMAX_2', V_ISMAX_2);

    V_ISMAX_2 := V_ISMAX_2 / 100; -- Percentual


    -- Controle de Consignatarias TASK 27904
    PAR_COD_PAR := 'ISMAX_3';
    SP_OBTEM_PARVAL_FOLHA2('ISMAX_3', 1000, 'ISMAX_3', V_ISMAX_3);
    V_ISMAX_3 := V_ISMAX_3 / 100; -- Percentual

    SP_OBTEM_PARVAL_FOLHA3('DAT_CONSIG', 1000, 'DAT_CONSIG', DAT_CONSIG );

      -- Controle de Consignatarias TASK 30993
    PAR_COD_PAR := 'ISMAX_5';
    SP_OBTEM_PARVAL_FOLHA2('ISMAX_5', 1000, 'ISMAX_5', V_ISMAX_5);
    V_ISMAX_5 := V_ISMAX_5 / 100; -- Percentual



    -- Carrega Valor Meta global

    SP_OBTEM_PARVAL_FOLHA2('METAG',
                           1000,
                           'VAL_META_GLOBAL',
                           VI_META_GLOBAL);

    -- Carrega valor Contrib. APIPREM

    SP_OBTEM_PARVAL_FOLHA2('APIPREM', 1000, 'VAL_APIPREM', VI_VAL_APIPREM);

    -- Carrega numero de dias para suspensao

    IF p_msgerro IS NOT NULL THEN
      p_coderro       := substr(p_msgerro, 1, 10);
      p_msgerro       := 'Erro ao obter os parametros - SALMIN, ISMAX';
      p_sub_proc_erro := 'OBTEM_PARVAL_FOLHA';
      INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                            p_coderro,
                            'Calcula Folha',
                            sysdate,
                            p_msgerro,
                            p_sub_proc_erro,
                            BEN_IDE_CLI,
                            COM_COD_FCRUBRICA);

      --    RAISE ERRO;
    END IF;

    -- Obtem qtd meses para calculo
    SELECT decode((to_number(to_char(PAR_PER_PRO, 'mm')) - 1),
                  0,
                  1,
                  to_number(to_char(PAR_PER_PRO, 'mm')) - 1),
           to_number(to_char(LAST_DAY(PAR_PER_PRO), 'DD'))
      INTO V_QTD_MESES, V_DIAS_MES
      FROM dual;

    SP_OBTEM_PARVAL_FOLHA2('PRZ_RT_PM',
                           1000,
                           'PRAZO_RETROATIVO',
                           NUM_DIAS_PRAZO);

    DAT_PRZ_SUSPENSO := PAR_PER_PRO - NUM_DIAS_PRAZO;

    -- Carrega Array - Rubrica e conceito com indicadores de IR

    cod_con.delete;
    cod_rub.delete;
    flag_ded.delete;
    flag_base.delete;
    flag_rateio.delete;
    tip_evento.delete;
    tip_evento_especial.delete;
    nom_variavel.delete;
    val_variavel.delete;
    cod_entidade.delete;
    ind_grava_detalhe.delete;

    j := 1;
    cod_con.extend;
    cod_rub.extend;
    flag_ded.extend;
    flag_base.extend;
    flag_rateio.extend;
    tip_evento.extend;
    tip_evento_especial.extend;
    nom_variavel.extend;
    val_variavel.extend;
    cod_entidade.extend;
    ind_grava_detalhe.extend;

   -- Modificado para Melhorar Performance do Retroativo
   -- 10-04-2010 JTS
    IF  PAR_TIP_PRO ='R' or PAR_NUM_CPF IS NOT NULL THEN

          OPEN c_concei FOR
                  SELECT /*+ RULE */
            distinct b.cod_conceito,
                     a.cod_rubrica,
                     nvl(a.flg_ded_ir, 'N'),
                     nvl(a.flg_base_ir, 'N'),
                     nvl(fc.flg_aplica_rateio, 'N'),
                     nvl(a.tip_evento, 'N'),
                     nvl(a.tip_evento_especial, 'N'),
                     nvl(fc.col_informacao, ' '),
                     0,
                     b.cod_entidade,
                     nvl(fc.ind_grava_detalhe, 'S')
             FROM tb_pessoa_fisica fis, tb_beneficiario ben ,tb_concessao_beneficio cc, tb_conceitos_pag b, tb_rubricas a, tb_formula_calculo fc
             WHERE fis.cod_ins=1
               AND fis.num_cpf=PAR_NUM_CPF
               AND  ben.cod_ins        =1

               AND a.cod_ins          =PAR_COD_INS
               AND a.cod_ins          =ben.cod_ins
               AND ben.cod_ins        =PAR_COD_INS
               AND ben.cod_ide_cli_ben=fis.cod_ide_cli -- Ide_cli
               and ben.cod_ins        =cc.cod_ins
               and ben.cod_beneficio  =cc.cod_beneficio
              and cc.cod_entidade    = a.cod_entidade

               AND a.cod_ins = b.cod_ins
               AND a.cod_conceito = b.cod_conceito
               AND a.cod_entidade = b.cod_entidade
               and a.cod_rubrica = fc.cod_rubrica
               and fc.cod_rubrica = fc.cod_fcrubrica
               and fc.cod_ins = a.cod_ins
               and b.cod_entidade = fc.cod_entidade
               and b.cod_entidade = nvl(null, b.cod_entidade)
            UNION ALL
            SELECT /*+ RULE */
            distinct b.cod_conceito,
                     fc.cod_fcrubrica,
                     nvl(a.flg_ded_ir, 'N'),
                     nvl(a.flg_base_ir, 'N'),
                     nvl(fc.flg_aplica_rateio, 'N'),
                     nvl(a.tip_evento, 'N'),
                     nvl(a.tip_evento_especial, 'N'),
                     nvl(fc.col_informacao, ' '),
                     0,
                     b.cod_entidade,
                     nvl(fc.ind_grava_detalhe, 'S')
              FROM tb_pessoa_fisica fis,tb_beneficiario ben,tb_concessao_beneficio cc,tb_conceitos_pag b, tb_rubricas a, tb_formula_calculo fc
             WHERE fis.cod_ins=1
               AND fis.num_cpf=PAR_NUM_CPF
               AND ben.cod_ins        =  PAR_COD_INS
               AND a.cod_ins          =  PAR_COD_INS
               AND a.cod_ins          =ben.cod_ins
               AND ben.cod_ide_cli_ben=fis.cod_ide_cli -- Ide_cli
               and ben.cod_ins        =cc.cod_ins
               and ben.cod_beneficio  =cc.cod_beneficio

               and cc.cod_entidade    = a.cod_entidade

               AND a.cod_ins = b.cod_ins
               AND a.cod_conceito = b.cod_conceito
               and a.cod_rubrica = fc.cod_rubrica
               and fc.cod_rubrica <> fc.cod_fcrubrica
               and fc.cod_ins = a.cod_ins
               and b.cod_entidade = a.cod_entidade
               and b.cod_entidade = fc.cod_entidade
               and b.cod_entidade = nvl(null, b.cod_entidade);
     ELSE
           OPEN c_concei FOR
            SELECT /*+ RULE */
            distinct b.cod_conceito,
                     a.cod_rubrica,
                     nvl(a.flg_ded_ir, 'N'),
                     nvl(a.flg_base_ir, 'N'),
                     nvl(fc.flg_aplica_rateio, 'N'),
                     nvl(a.tip_evento, 'N'),
                     nvl(a.tip_evento_especial, 'N'),
                     nvl(fc.col_informacao, ' '),
                     0,
                     b.cod_entidade,
                     nvl(fc.ind_grava_detalhe, 'S')
             FROM tb_conceitos_pag b, tb_rubricas a, tb_formula_calculo fc
             WHERE a.cod_ins = b.cod_ins
               AND a.cod_conceito = b.cod_conceito
               AND a.cod_entidade = b.cod_entidade
               and a.cod_rubrica = fc.cod_rubrica
               and fc.cod_rubrica = fc.cod_fcrubrica
               and fc.cod_ins = a.cod_ins
               and b.cod_entidade = fc.cod_entidade
               and b.cod_entidade = nvl(null, b.cod_entidade)
               -- agregado para teste
              /*  and b.cod_entidade = 05 */
            UNION ALL
            SELECT /*+ RULE */
            distinct b.cod_conceito,
                     fc.cod_fcrubrica,
                     nvl(a.flg_ded_ir, 'N'),
                     nvl(a.flg_base_ir, 'N'),
                     nvl(fc.flg_aplica_rateio, 'N'),
                     nvl(a.tip_evento, 'N'),
                     nvl(a.tip_evento_especial, 'N'),
                     nvl(fc.col_informacao, ' '),
                     0,
                     b.cod_entidade,
                     nvl(fc.ind_grava_detalhe, 'S')
              FROM tb_conceitos_pag b, tb_rubricas a, tb_formula_calculo fc
             WHERE a.cod_ins = b.cod_ins
               AND a.cod_conceito = b.cod_conceito
               and a.cod_rubrica = fc.cod_rubrica
               and fc.cod_rubrica <> fc.cod_fcrubrica
               and fc.cod_ins = a.cod_ins
               and b.cod_entidade = a.cod_entidade
               and b.cod_entidade = fc.cod_entidade
               and b.cod_entidade = nvl(null, b.cod_entidade)
                -- agregado para teste
                /* and b.cod_entidade = 05*/ ;

         END IF;

    FETCH C_CONCEI
      INTO cod_con(j), cod_rub(j), flag_ded(j), flag_base(j), flag_rateio(j), tip_evento(j), tip_evento_especial(j), nom_variavel(j), val_variavel(j), cod_entidade(j), ind_grava_detalhe(j);
    WHILE C_CONCEI%FOUND LOOP
      j := j + 1;
      cod_con.extend;
      cod_rub.extend;
      flag_ded.extend;
      flag_base.extend;
      flag_rateio.extend;
      tip_evento.extend;
      tip_evento_especial.extend;
      nom_variavel.extend;
      val_variavel.extend;
      cod_entidade.extend;
      ind_grava_detalhe.extend;

      FETCH C_CONCEI
        INTO cod_con(j), cod_rub(j), flag_ded(j), flag_base(j), flag_rateio(j), tip_evento(j), tip_evento_especial(j), nom_variavel(j), val_variavel(j), cod_entidade(j), ind_grava_detalhe(j);
    END LOOP;
    CLOSE C_CONCEI;

     --- BLOQUE PARA CONTROLE DE IR
     --  IF   (PAR_TIP_PRO <>'R' ) THEN
            j := 1;

            cod_con2.delete;
            cod_rub2.delete;
            flag_ded2.delete;
            flag_base2.delete;
            tip_evento2.delete;
            tip_evento_especial2.delete;

            cod_con2.extend;
            cod_rub2.extend;
            flag_ded2.extend;
            flag_base2.extend;
            tip_evento2.extend;
            tip_evento_especial2.extend;

           ------- Calculo de Ir Externo----------
           flag_ded2_ext.delete;
           flag_base2_ext.delete;
           ------- Calculo de Ir Externo----------
           flag_ded2_ext.extend;
           flag_base2_ext.extend;


            OPEN c_concei FOR
            SELECT /*+ RULE */
            distinct A.cod_conceito,
                     a.cod_rubrica,
                     nvl(a.flg_ded_ir, 'N'),
                     nvl(a.flg_base_ir, 'N'),
                     nvl(a.tip_evento, 'N'),
                     nvl(a.tip_evento_especial, 'N'),
          ------- Calculo de Ir Externo----------
                     nvl(a.flg_ded_ir_ext, 'N'),
                     nvl(a.flg_base_ir_ext, 'N')

             FROM  USER_IPESP.VW_RUBRICAS_IR A;
                -- agregado para teste

             FETCH C_CONCEI
                INTO cod_con2(j), cod_rub2(j), flag_ded2(j), flag_base2(j),  tip_evento2(j), tip_evento_especial2(j),
               ------- Calculo de Ir Externo----------
                flag_ded2_ext(j), flag_base2_ext(j);

            WHILE C_CONCEI%FOUND LOOP
                j := j + 1;
                cod_con2.extend;
                cod_rub2.extend;
                flag_ded2.extend;
                flag_base2.extend;

                tip_evento2.extend;
                tip_evento_especial2.extend;

                ------- Calculo de Ir Externo----------
                flag_ded2_ext.extend;
                flag_base2_ext.extend;


                FETCH C_CONCEI
                  INTO cod_con2(j), cod_rub2(j), flag_ded2(j), flag_base2(j),  tip_evento2(j), tip_evento_especial2(j),
                ------- Calculo de Ir Externo----------
                flag_ded2_ext(j), flag_base2_ext(j);

              END LOOP;
              CLOSE C_CONCEI;

      -- END IF;



     -----------------------------




  END SP_CARREGA_VARIAVEIS_PARAMETRO;
  -------------------------------------------------------------------------------------
  PROCEDURE SP_VERIFICA_REPROCESSAMENTO AS

    j          number;
    k          number;
    RET_DELETE NUMBER := 0;
    w_contar   char(1) := 'S';
    WWCON_PROC number := 0;

  BEGIN
    -- Carrega Reprocesso
    w_contar := 'S';

    -- num_cpf.extend;
    -- ide_cli.extend;

    -- IF PAR_TIP_PRO <> 'R' THEN
    IF PAR_NUM_CPF is null and PAR_IND_PROC_ENQUADRAMENTO = 0 then

      j := 0;


      IF PAR_TIP_PRO <> 'R' AND PAR_PER_PRO = PAR_PER_REAL THEN
      if j > 0 then
        update tb_processamento pp
           set pp.qtde_a_calcular = j
         where pp.cod_tip_processamento in ( '01', '08','20')
           and pp.cod_ins = par_cod_ins
           and pp.per_processo = par_per_pro
           and pp.cod_tip_processo = par_tip_pro
           and pp.num_processo = PAR_NUM_PROCESSO --ROD6
           and pp.num_grp = PAR_NUM_GRP_PAG --ROD7
           and pp.seq_pagamento = vi_seq_pagamento
           and pp.flg_processamento = 'P'
           and pp.seq_processamento = PAR_NUM_SEQ_PROC
           and pp.dat_fim_proc is null;
        commit;
        END IF;
        cont_proc := j;

        w_contar := 'N';

      end if;

    ELSE
      IF PAR_PARTIR_DE = 'N' THEN
        IF num_cpf(1) is null then
          j := 0;
          j := j + 1;
          num_cpf.extend;
          ide_cli.extend;
          num_cpf(j) := par_num_cpf;

          select distinct pf.cod_ide_cli
            into ide_cli(j)
            from tb_pessoa_fisica       pf,
                 tb_beneficiario        bb,
                 tb_informacao_bancaria ib
           where pf.cod_ins = PAR_COD_INS
             and pf.num_CPF = par_num_cpf
             and pf.cod_ins = bb.cod_ins
             and pf.cod_ide_cli = bb.cod_ide_cli_ben
             and ib.cod_ins = pf.cod_ins
             and nvl(ib.cod_ide_cli_englob, ib.cod_ide_cli) =
                 pf.cod_ide_cli;
        END IF;
      END IF;
    END IF;

    IF j = 0 then
      j := j + 1;
      num_cpf.extend;
      ide_cli.extend;
    END IF;

    --  IF PAR_NUM_CPF IS NULL
    --    AND w_contar = 'S' THEN

    --IF PAR_IND_PROC_ENQUADRAMENTO = 0 then           --comentado em 27.out.2009
    --  IF w_contar = 'S' AND PAR_PARTIR_DE = 'N' THEN --comentado em 27.out.2009
    IF PAR_IND_PROC_ENQUADRAMENTO = 0 then
      IF PAR_PARTIR_DE = 'N' THEN -- AND w_contar = 'S' THEN comentado Rod em 27.out.09

        BEGIN
          -- obter total a calcular para atualizacao no processamento

     SELECT count(distinct b.cod_ide_cli_ben)
       into WWCON_PROC
       FROM TB_BENEFICIARIO           B,
            TB_PESSOA_FISICA          P,
            TB_GRUPO_PAGAMENTO        GP,
            TB_CONCESSAO_BENEFICIO    CB,
            TB_CONTROLE_PROCESSAMENTO CP
      WHERE B.COD_INS = PAR_COD_INS
        AND CB.COD_ENTIDADE = nvl(PAR_COD_ENTIDADE, CB.COD_ENTIDADE)
        AND P.COD_INS = B.COD_INS
        AND B.COD_IDE_CLI_BEN >= 0
        AND P.COD_IDE_CLI = B.COD_IDE_CLI_BEN
        AND to_char(B.DAT_INI_BEN, 'YYYYMM') <= to_char(PAR_PER_PRO, 'YYYYMM')
        AND (to_char(B.DAT_FIM_BEN, 'YYYYMM') >= to_char(PAR_PER_PRO, 'YYYYMM') or
            B.DAT_FIM_BEN IS NULL)
        AND (DECODE(B.FLG_STATUS,
                    'S',
                    B.DAT_SUSPENSO,
                    to_date('01/12/2100', 'dd/mm/yyyy')) > DAT_PRZ_SUSPENSO OR
            b.mot_suspensao in ('15', '19'))
        AND B.FLG_STATUS in ('A', 'H', 'S', 'X')
        AND B.FLG_REG_ATIV    = 'S'
        AND B.FLG_CONT_BEN    = 'N'
        AND B.COD_IDE_CLI_BEN is not null
        AND (P.NUM_CPF        = nvl(PAR_NUM_CPF, P.NUM_CPF) and PAR_PARTIR_DE = 'N')
        AND CB.COD_BENEFICIO  = B.COD_BENEFICIO
        AND CB.COD_INS        = B.COD_INS
        and GP.NUM_GRP_PAG     > 0
        and GP.NUM_GRP_PAG     = PAR_NUM_GRP_PAG
        AND b.cod_proc_grp_pag = gp.cod_proc_grp_pago --ROD7
        AND CP.COD_INS         = B.COD_INS --ROD6
        AND CP.NUM_PROCESSO    = PAR_NUM_PROCESSO --ROD6
        AND CP.Num_Grp_Pag     = PAR_NUM_GRP_PAG --ROD7
        AND P.NUM_CPF          >= CP.NUM_CPF_INICIAL --ROD6
        AND P.NUM_CPF         < CP.NUM_CPF_FINAL --ROD6
        AND CP.SEQ_PROCESSAMENTO = PAR_NUM_SEQ_PROC;

          wcont_proc := 0;
          wcont_proc := wcont_proc + WWCON_PROC;
          cont_proc  := cont_proc + WWCON_PROC;

        exception
          when others then

            p_coderro       := substr(sqlerrm, 1, 10);
            p_msgerro       := 'Erro ao atualizar total a processar';
            p_sub_proc_erro := 'Processo Principal';
            INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                  p_coderro,
                                  'Calcula Folha',
                                  sysdate,
                                  p_msgerro,
                                  p_sub_proc_erro,
                                  1,
                                  0);

            RAISE ERRO;

        end;
      END IF;

      IF PAR_TIP_PRO <> 'R' AND PAR_PER_PRO = PAR_PER_REAL THEN
         update tb_processamento pp
            set pp.qtde_a_calcular = cont_proc
          where pp.cod_tip_processamento in ('01','20')
            and pp.cod_ins = par_cod_ins
            and pp.per_processo = par_per_pro
            and pp.cod_tip_processo = par_tip_pro
            and pp.seq_pagamento = vi_seq_pagamento
            and pp.flg_processamento = 'P'
            and pp.num_processo = PAR_NUM_PROCESSO --ROD6
            and pp.num_grp = PAR_NUM_GRP_PAG --ROD7
            and pp.seq_processamento = PAR_NUM_SEQ_PROC
            and pp.dat_fim_proc is null;
      commit;
      END IF;
    end if;

    cont_proc := 0;

    IF PAR_TIP_PRO <> 'R' AND
       --(PAR_TIP_PRO <> 'T' AND PAR_PER_REAL = PAR_PER_PRO) AND
       PAR_PARTIR_DE = 'N' THEN
      --ROD6 BLOCO LIMPA FOLHA "comentado Rodolfo 07/2009

      IF num_cpf(1) is null AND PAR_PARTIR_DE = 'N' THEN

/*        RET_DELETE := PAC_LIMPA_TABELAS.PAC_LIMPA_FOLHA_GERAL_APO(PAR_PER_PRO,
                                                                      PAR_TIP_PRO,
                                                                      PAR_COD_INS,
                                                                      PAR_NOM_BENEF,
                                                                      PAR_COD_TIPO_BEN,
                                                                      PAR_NUM_CPF,
                                                                      PAR_PARTIR_DE,
                                                                      PAR_NUM_PROCESSO,
                                                                      PAR_NUM_GRP_PAG,
                                                                      PAR_NUM_SEQ_PROC,
                                                                      vi_seq_pagamento );*/
                   RET_DELETE := PAC_LIMPA_TABELAS.PAC_LIMPA_FOLHA_GERAL (PAR_PER_PRO,
                                                                      PAR_TIP_PRO,
                                                                      PAR_COD_INS,
                                                                      PAR_NOM_BENEF,
                                                                      PAR_COD_TIPO_BEN,
                                                                      PAR_NUM_CPF,
                                                                      PAR_PARTIR_DE,
                                                                      PAR_NUM_PROCESSO,
                                                                      PAR_NUM_GRP_PAG,
                                                                      PAR_NUM_SEQ_PROC/*,
                                                                      vi_seq_pagamento */);



         null;
      END IF;

      FOR J IN 1 .. num_cpf.count LOOP

        IF num_cpf(j) is not null then
          par_num_cpf := num_cpf(j);

          k := 0;
          ide_cli.delete;

       FOR z in (select distinct pf.cod_ide_cli
                      from tb_pessoa_fisica pf, tb_beneficiario bb
                     where pf.cod_ins = PAR_COD_INS
                       and pf.num_CPF = par_num_cpf
                       and pf.cod_ins = bb.cod_ins
                       and pf.cod_ide_cli = bb.cod_ide_cli_ben
                       AND   exists (
                           select 1 from tb_processamento pp
                              where
                              pp.cod_tip_processamento in (01,08,20) and
                              pp.seq_processamento=PAR_NUM_SEQ_PROC  /*and
                              pp.cod_ide_cli=bb.cod_ide_cli_ben*/
                           )
                         AND  not  EXISTS (
                          SELECT 1 FROM  user_ipesp.tb_isensao_tot   ii
                          WHERE  ii.cod_ide_cli=bb.cod_ide_cli_ben
                         )

                       ) loop


            k := nvl(k, 0) + 1;
            ide_cli.extend;
            ide_cli(k) := z.cod_ide_cli;

          END LOOP;

------------------------------------------------
     FOR K IN 1 .. ide_cli.count LOOP

      v_ide_cli := ide_cli(k);
      FOR APAGA IN (
        SELECT DISTINCT /*+ RULE */ B.COD_IDE_CLI_BEN AS BEN_IDE_CLI ,
                        b.cod_beneficio/*,
                        CASE
                          WHEN DF.COD_IDE_CLI IS NULL THEN
                           0
                          ELSE
                           DECODE(CB.COD_TIPO_BENEFICIO, 'M', 2, 1)
                        END AS COM_TIPO_DISSOCIACAO*/
               ,0  COM_TIPO_DISSOCIACAO
          FROM USER_IPESP.TB_BENEFICIARIO        B,
               USER_IPESP.TB_CONCESSAO_BENEFICIO CB/*,
               USER_IPESP.TB_DISSOCIACAO_FOLHA   DF*/
         WHERE B.COD_INS = 1
           AND CB.COD_ENTIDADE = nvl(NULL, CB.COD_ENTIDADE)
           AND B.COD_IDE_CLI_BEN >= 0

/*           AND to_char(B.DAT_INI_BEN, 'YYYYMM') <=
               to_char(TO_DATE(PAR_PER_PRO, 'DD/MM/YYYY'), 'YYYYMM')
           AND (to_char(B.DAT_FIM_BEN, 'YYYYMM') >=
               to_char(TO_DATE(PAR_PER_PRO, 'DD/MM/YYYY'), 'YYYYMM') or
               B.DAT_FIM_BEN IS NULL)*/
           AND B.COD_IDE_CLI_BEN is not null
           AND (B.cod_ide_cli_BEN = v_ide_cli )
           AND CB.COD_BENEFICIO = B.COD_BENEFICIO
           AND CB.COD_INS = B.COD_INS
        --   AND B.COD_PROC_GRP_PAG = PAR_NUM_GRP_PAG
          /* AND B.COD_IDE_CLI_BEN = DF.COD_IDE_CLI(+)
           AND 1 = DF.COD_INS(+)
           AND  PAR_PER_PRO  >= DF.DAT_INI_VIG(+)
           AND   PAR_PER_PRO <=
               NVL(DF.DAT_FIM_VIG, TO_DATE('01/01/2020', 'DD/MM/YYYY'))*/
      ) LOOP


--------------------------------------------------

    --     FOR K IN 1 .. ide_cli.count LOOP

    --        v_ide_cli := ide_cli(k);
           v_ide_cli := APAGA.BEN_IDE_CLI;
           IF APAGA.COM_TIPO_DISSOCIACAO=0 THEN
               delete  tb_det_calculado_basrub2 fo
               where cod_ins              = PAR_COD_INS
                 and fo.per_processo_real = PAR_PER_REAL
                 and fo.per_processo      = PAR_PER_PRO
                 and cod_ide_cli          = v_ide_cli
                 and cod_beneficio        =apaga.cod_beneficio
                 and tip_processo         = PAR_TIP_PRO
                 and seq_pagamento        = vi_seq_pagamento;

               delete tb_det_suspenso fo
               where cod_ins = PAR_COD_INS
                 and per_processo = PAR_PER_PRO
                 and cod_ide_cli = v_ide_cli
                 and cod_beneficio =apaga.cod_beneficio
                 and tip_processo = PAR_TIP_PRO
                 and seq_pagamento = vi_seq_pagamento;

              delete tb_det_calculado fo
               where cod_ins = PAR_COD_INS
                 and per_processo = PAR_PER_PRO
                 and cod_ide_cli = v_ide_cli
                 and cod_beneficio =apaga.cod_beneficio
                 and tip_processo = PAR_TIP_PRO
                 and seq_pagamento = vi_seq_pagamento
/*                 and  cod_beneficio>=40000000
                 and cod_beneficio <=41000000*/

                and not  exists (
                    select 1 from
                              tb_beneficiario    bb,
                              tb_concessao_beneficio cc
                    where bb.cod_ins         = PAR_COD_INS      and
                          bb.cod_ide_cli_ben =fo.cod_ide_cli    and
                          bb.cod_beneficio   =fo.cod_beneficio  and
                          cc.cod_ins=bb.cod_ins                 and
                          cc.cod_beneficio =bb.cod_beneficio    and
                          cc.cod_entidade =5 and
                          cc.cod_tipo_beneficio !='M'           and
                          cc.cod_beneficio>=40000000      and
                          cc.cod_beneficio <=41000000
                  ) ;


              delete tb_folha fo
               where cod_ins = PAR_COD_INS
                 and per_processo = PAR_PER_PRO
                 and cod_ide_cli = v_ide_cli
                and cod_beneficio =apaga.cod_beneficio
                 and tip_processo = PAR_TIP_PRO
                 and seq_pagamento = vi_seq_pagamento
                 and not  exists (
                    select 1 from
                              tb_beneficiario    bb,
                              tb_concessao_beneficio cc
                    where bb.cod_ins         = PAR_COD_INS      and
                          bb.cod_ide_cli_ben =fo.cod_ide_cli    and
                          bb.cod_beneficio   =fo.cod_beneficio  and
                          cc.cod_ins=bb.cod_ins                 and
                          cc.cod_beneficio =bb.cod_beneficio    and
                          cc.cod_entidade =5 and
                          cc.cod_tipo_beneficio !='M'           and
                          cc.cod_beneficio>=40000000 and
                          cc.cod_beneficio <=41000000
                  ) ;



              delete tb_det_calculado_pa fo
               where cod_ins = PAR_COD_INS
                 and per_processo = PAR_PER_PRO
                 and cod_ide_cli = v_ide_cli
                 and cod_beneficio =apaga.cod_beneficio
                 and tip_processo = PAR_TIP_PRO
                 and seq_pagamento = vi_seq_pagamento
                 and not  exists (
                    select 1 from
                              tb_beneficiario    bb,
                              tb_concessao_beneficio cc
                    where bb.cod_ins         = PAR_COD_INS      and
                          bb.cod_ide_cli_ben =fo.cod_ide_cli    and
                          bb.cod_beneficio   =fo.cod_beneficio  and
                          cc.cod_ins=bb.cod_ins                 and
                          cc.cod_beneficio =bb.cod_beneficio    and
                          cc.cod_entidade =5 and
                          cc.cod_tipo_beneficio !='M'           and
                          cc.cod_beneficio>=40000000    and
                          cc.cod_beneficio <=41000000
                  ) ;

              delete tb_folha_pa fo
               where cod_ins = PAR_COD_INS
                 and per_processo = PAR_PER_PRO
                 and cod_ide_cli = v_ide_cli
                  and cod_beneficio =apaga.cod_beneficio
                 and tip_processo = PAR_TIP_PRO
                 and seq_pagamento = vi_seq_pagamento
                 and not  exists (
                    select 1 from
                              tb_beneficiario    bb,
                              tb_concessao_beneficio cc
                    where bb.cod_ins         = PAR_COD_INS      and
                          bb.cod_ide_cli_ben =fo.cod_ide_cli    and
                          bb.cod_beneficio   =fo.cod_beneficio  and
                          cc.cod_ins=bb.cod_ins                 and
                          cc.cod_beneficio =bb.cod_beneficio    and
                          cc.cod_entidade =5 and
                          cc.cod_tipo_beneficio !='M'           and
                          cc.cod_beneficio>=40000000  and
                          cc.cod_beneficio <=41000000
                  ) ;

    ----- Pasagem de Task 37101 Contribuição previdencia ...
            /*
             -- ALT 27 JTS APAGA TABELA DO RETROATIVO

                 delete tb_folha_ret_proc ret
                  where cod_ins = PAR_COD_INS
                    and per_processo = PAR_PER_PRO
                    and cod_ide_cli = v_ide_cli
                    and cod_beneficio =apaga.cod_beneficio


                     and not exists (
                    select 1 from tb_casos_ret_folha rf,
                                  tb_beneficiario    bb,
                                  tb_concessao_beneficio cc
                    where rf.cod_ins= PAR_COD_INS  and
                          rf.cod_ide_cli=v_ide_cli and
                          rf.cod_ins=bb.cod_ins    and
                          rf.cod_ide_cli=bb.cod_ide_cli_ben  and
                          ret.cod_beneficio=bb.cod_beneficio and
                          bb.cod_ins=cc.cod_ins              and
                          bb.cod_beneficio=cc.cod_beneficio  and
                          rf.num_matricula=cc.num_matricula  and
                          ret.cod_beneficio=cc.cod_beneficio and
                          -- TASK 3017 -- APLICADO POR LUIZ EM 28/04/2015
                          rf.flg_status = 'V'                and
                          -- FIM TASK 3017
                         (apaga.com_tipo_dissociacao=0 or
                             (apaga.com_tipo_dissociacao!=0
                             )
                          ) and
                           rf.DAT_PERIODO_COMP=PAR_PER_PRO) ;


                  delete tb_det_ret  ret
                  where cod_ins = PAR_COD_INS
                    and per_processo = PAR_PER_PRO
                    and cod_ide_cli = v_ide_cli
                    and cod_beneficio =apaga.cod_beneficio



                  and not exists (
                    select 1 from tb_casos_ret_folha rf,
                                  tb_beneficiario    bb,
                                  tb_concessao_beneficio cc
                    where rf.cod_ins= PAR_COD_INS  and
                          rf.cod_ide_cli=v_ide_cli and
                          rf.cod_ins=bb.cod_ins    and
                          rf.cod_ide_cli=bb.cod_ide_cli_ben  and
                          ret.cod_beneficio=bb.cod_beneficio and
                          bb.cod_ins=cc.cod_ins              and
                          bb.cod_beneficio=cc.cod_beneficio  and
                          rf.num_matricula=cc.num_matricula  and
                          ret.cod_beneficio=cc.cod_beneficio and
                          -- TASK 3017 -- APLICADO POR LUIZ EM 28/04/2015
                          rf.flg_status = 'V'                and
                          -- FIM TASK 3017
                        (apaga.com_tipo_dissociacao=0 or
                             (apaga.com_tipo_dissociacao!=0
                             )
                          ) and
                            rf.DAT_PERIODO_COMP=PAR_PER_PRO) ;

                  delete tb_valor_npago_ret ret
                   where cod_ins = PAR_COD_INS
                     and per_processo = PAR_PER_PRO
                     and cod_ide_cli = v_ide_cli
                     and cod_beneficio =apaga.cod_beneficio


                      and not exists (
                    select 1 from tb_casos_ret_folha rf,
                                  tb_beneficiario    bb,
                                  tb_concessao_beneficio cc
                    where rf.cod_ins= PAR_COD_INS  and
                          rf.cod_ide_cli=v_ide_cli and
                          rf.cod_ins=bb.cod_ins    and
                          rf.cod_ide_cli=bb.cod_ide_cli_ben  and
                          ret.cod_beneficio=bb.cod_beneficio and
                          bb.cod_ins=cc.cod_ins              and
                          bb.cod_beneficio=cc.cod_beneficio  and
                          rf.num_matricula=cc.num_matricula  and
                          ret.cod_beneficio=cc.cod_beneficio and
                          -- TASK 3017 -- APLICADO POR LUIZ EM 28/04/2015
                          rf.flg_status = 'V'                and
                          -- FIM TASK 3017
                         (apaga.com_tipo_dissociacao=0 or
                             (apaga.com_tipo_dissociacao!=0
                             )
                          ) and
                            rf.DAT_PERIODO_COMP=PAR_PER_PRO) ;


                  delete tb_valor_acima_ret ddr
                    where cod_ins = PAR_COD_INS
                     and per_processo = PAR_PER_PRO
                     and cod_ide_cli = v_ide_cli
                     and cod_beneficio =apaga.cod_beneficio


                    and not exists (
                    select 1 from tb_casos_ret_folha rf,
                                  tb_beneficiario    bb,
                                  tb_concessao_beneficio cc
                    where rf.cod_ins= PAR_COD_INS  and
                          rf.cod_ide_cli=v_ide_cli and
                          rf.cod_ins=bb.cod_ins    and
                          rf.cod_ide_cli=bb.cod_ide_cli_ben  and
                          ddr.cod_beneficio=bb.cod_beneficio and
                          bb.cod_ins=cc.cod_ins              and
                          bb.cod_beneficio=cc.cod_beneficio  and
                          rf.num_matricula=cc.num_matricula  and
                          ddr.cod_beneficio=cc.cod_beneficio and
                          -- TASK 3017 -- APLICADO POR LUIZ EM 28/04/2015
                          rf.flg_status = 'V'                and
                          -- FIM TASK 3017
                         (apaga.com_tipo_dissociacao=0 or
                             (apaga.com_tipo_dissociacao!=0
                             )
                          ) and
                            rf.DAT_PERIODO_COMP=PAR_PER_PRO) ;


                  delete tb_resultado_calc_ret ret
                   where cod_ins = PAR_COD_INS
                     and per_processo = PAR_PER_PRO
                     and cod_ide_cli = v_ide_cli
                     and cod_beneficio =apaga.cod_beneficio


                       and not exists (
                    select 1 from tb_casos_ret_folha rf,
                                  tb_beneficiario    bb,
                                  tb_concessao_beneficio cc
                    where rf.cod_ins= PAR_COD_INS  and
                          rf.cod_ide_cli=v_ide_cli and
                          rf.cod_ins=bb.cod_ins    and
                          rf.cod_ide_cli=bb.cod_ide_cli_ben  and
                          ret.cod_beneficio=bb.cod_beneficio and
                          bb.cod_ins=cc.cod_ins              and
                          bb.cod_beneficio=cc.cod_beneficio  and
                          rf.num_matricula=cc.num_matricula  and
                          ret.cod_beneficio=cc.cod_beneficio and
                          -- TASK 3017 -- APLICADO POR LUIZ EM 28/04/2015
                          rf.flg_status = 'V'                and
                          -- FIM TASK 3017
                        (apaga.com_tipo_dissociacao=0 or
                             (apaga.com_tipo_dissociacao!=0
                             )
                          ) and
                            rf.DAT_PERIODO_COMP=PAR_PER_PRO) ;
               */

              commit;
           ELSE

                delete tb_det_suspenso fo
                     where cod_ins = PAR_COD_INS
                       and per_processo = PAR_PER_PRO
                       and cod_ide_cli = v_ide_cli
                       and cod_beneficio =apaga.cod_beneficio
                       and tip_processo = PAR_TIP_PRO
                       and seq_pagamento = vi_seq_pagamento

                     and exists (
                          select 1 from
                                    tb_beneficiario    bb,
                                    tb_concessao_beneficio cc
                          where bb.cod_ins         = PAR_COD_INS      and
                                bb.cod_ide_cli_ben =fo.cod_ide_cli    and
                                bb.cod_beneficio   =fo.cod_beneficio  and
                                cc.cod_ins=bb.cod_ins                 and
                                cc.cod_beneficio =bb.cod_beneficio  --  and
                              --  bb.cod_proc_grp_pag=PAR_NUM_GRP_PAG

                                )
                    and not  exists (
                    select 1 from
                              tb_beneficiario    bb,
                              tb_concessao_beneficio cc
                    where bb.cod_ins         = PAR_COD_INS      and
                          bb.cod_ide_cli_ben =fo.cod_ide_cli    and
                          bb.cod_beneficio   =fo.cod_beneficio  and
                          cc.cod_ins=bb.cod_ins                 and
                          cc.cod_beneficio =bb.cod_beneficio    and
                          cc.cod_entidade =5 and
                          cc.cod_tipo_beneficio !='M'           and
                          cc.cod_beneficio>=40000000  and
                          cc.cod_beneficio <=41000000
                  ) ;


                    delete tb_det_calculado fo
                     where cod_ins = PAR_COD_INS
                       and per_processo = PAR_PER_PRO
                       and cod_ide_cli = v_ide_cli
                       and cod_beneficio =apaga.cod_beneficio
                       and tip_processo = PAR_TIP_PRO
                       and seq_pagamento = vi_seq_pagamento


                      and exists (
                          select 1 from
                                    tb_beneficiario    bb,
                                    tb_concessao_beneficio cc
                          where bb.cod_ins         = PAR_COD_INS      and
                                bb.cod_ide_cli_ben =fo.cod_ide_cli    and
                                bb.cod_beneficio   =fo.cod_beneficio  and
                                cc.cod_ins=bb.cod_ins                 and
                                cc.cod_beneficio =bb.cod_beneficio    --and
                              --  bb.cod_proc_grp_pag=PAR_NUM_GRP_PAG

                        )
                    and not  exists (
                    select 1 from
                              tb_beneficiario    bb,
                              tb_concessao_beneficio cc
                    where bb.cod_ins         = PAR_COD_INS      and
                          bb.cod_ide_cli_ben =fo.cod_ide_cli    and
                          bb.cod_beneficio   =fo.cod_beneficio  and
                          cc.cod_ins=bb.cod_ins                 and
                          cc.cod_beneficio =bb.cod_beneficio    and
                          cc.cod_entidade =5 and
                          cc.cod_tipo_beneficio !='M'           and
                          cc.cod_beneficio>=40000000  and
                          cc.cod_beneficio <=41000000
                  )  ;


                    delete tb_folha fo
                     where cod_ins = PAR_COD_INS
                       and per_processo = PAR_PER_PRO
                       and cod_ide_cli = v_ide_cli
                      and cod_beneficio =apaga.cod_beneficio
                       and tip_processo = PAR_TIP_PRO
                       and seq_pagamento = vi_seq_pagamento


                   and exists (
                          select 1 from
                                    tb_beneficiario    bb,
                                    tb_concessao_beneficio cc
                          where bb.cod_ins         = PAR_COD_INS      and
                                bb.cod_ide_cli_ben =fo.cod_ide_cli    and
                                bb.cod_beneficio   =fo.cod_beneficio  and
                                cc.cod_ins=bb.cod_ins                 and
                                cc.cod_beneficio =bb.cod_beneficio   -- and
                               --  bb.cod_proc_grp_pag=PAR_NUM_GRP_PAG
                         )
                   and not  exists (
                    select 1 from
                              tb_beneficiario    bb,
                              tb_concessao_beneficio cc
                    where bb.cod_ins         = PAR_COD_INS      and
                          bb.cod_ide_cli_ben =fo.cod_ide_cli    and
                          bb.cod_beneficio   =fo.cod_beneficio  and
                          cc.cod_ins=bb.cod_ins                 and
                          cc.cod_beneficio =bb.cod_beneficio    and
                          cc.cod_entidade =5 and
                          cc.cod_tipo_beneficio !='M'           and
                          cc.cod_beneficio>=40000000    and
                          cc.cod_beneficio <=41000000
                  )  ;



                    delete tb_det_calculado_pa fo
                     where cod_ins = PAR_COD_INS
                       and per_processo = PAR_PER_PRO
                       and cod_ide_cli = v_ide_cli
                       and cod_beneficio =apaga.cod_beneficio
                       and tip_processo = PAR_TIP_PRO
                       and seq_pagamento = vi_seq_pagamento


                     and exists (
                          select 1 from
                                    tb_beneficiario    bb,
                                    tb_concessao_beneficio cc
                          where bb.cod_ins         = PAR_COD_INS      and
                                bb.cod_ide_cli_ben =fo.cod_ide_cli    and
                                bb.cod_beneficio   =fo.cod_beneficio  and
                                cc.cod_ins=bb.cod_ins                 and
                                cc.cod_beneficio =bb.cod_beneficio  -- and
                               -- bb.cod_proc_grp_pag=PAR_NUM_GRP_PAG

                        )
                    and not  exists (
                    select 1 from
                              tb_beneficiario    bb,
                              tb_concessao_beneficio cc
                    where bb.cod_ins         = PAR_COD_INS      and
                          bb.cod_ide_cli_ben =fo.cod_ide_cli    and
                          bb.cod_beneficio   =fo.cod_beneficio  and
                          cc.cod_ins=bb.cod_ins                 and
                          cc.cod_beneficio =bb.cod_beneficio    and
                          cc.cod_entidade =5 and
                          cc.cod_tipo_beneficio !='M'           and
                          cc.cod_beneficio>=40000000   and
                          cc.cod_beneficio <=41000000
                  )  ;


                    delete tb_folha_pa fo
                     where cod_ins = PAR_COD_INS
                       and per_processo = PAR_PER_PRO
                       and cod_ide_cli = v_ide_cli
                        and cod_beneficio =apaga.cod_beneficio
                       and tip_processo = PAR_TIP_PRO
                       and seq_pagamento = vi_seq_pagamento


               and exists (
                          select 1 from
                                    tb_beneficiario    bb,
                                    tb_concessao_beneficio cc
                          where bb.cod_ins         = PAR_COD_INS      and
                                bb.cod_ide_cli_ben =fo.cod_ide_cli    and
                                bb.cod_beneficio   =fo.cod_beneficio  and
                                cc.cod_ins=bb.cod_ins                 and
                                cc.cod_beneficio =bb.cod_beneficio --   and
                              --   bb.cod_proc_grp_pag=PAR_NUM_GRP_PAG

                        )
                 and not  exists (
                    select 1 from
                              tb_beneficiario    bb,
                              tb_concessao_beneficio cc
                    where bb.cod_ins         = PAR_COD_INS      and
                          bb.cod_ide_cli_ben =fo.cod_ide_cli    and
                          bb.cod_beneficio   =fo.cod_beneficio  and
                          cc.cod_ins=bb.cod_ins                 and
                          cc.cod_beneficio =bb.cod_beneficio    and
                          cc.cod_entidade =5 and
                          cc.cod_tipo_beneficio !='M'           and
                          cc.cod_beneficio>=40000000     and
                          cc.cod_beneficio <=41000000
                  ) ;

                   ----- Pasagem de Task 37101 Contribuição
                  /*
                   -- ALT 27 JTS APAGA TABELA DO RETROATIVO

                       delete tb_folha_ret_proc ret
                        where cod_ins = PAR_COD_INS
                          and per_processo = PAR_PER_PRO
                          and cod_ide_cli = v_ide_cli
                          and cod_beneficio =apaga.cod_beneficio


                           and not exists (
                          select 1 from tb_casos_ret_folha rf,
                                        tb_beneficiario    bb,
                                        tb_concessao_beneficio cc
                          where rf.cod_ins= PAR_COD_INS  and
                                rf.cod_ide_cli=v_ide_cli and
                                rf.cod_ins=bb.cod_ins    and
                                rf.cod_ide_cli=bb.cod_ide_cli_ben  and
                                ret.cod_beneficio=bb.cod_beneficio and
                                bb.cod_ins=cc.cod_ins              and
                                bb.cod_beneficio=cc.cod_beneficio  and
                                rf.num_matricula=cc.num_matricula  and
                                ret.cod_beneficio=cc.cod_beneficio and
                                -- TASK 3017 -- APLICADO POR LUIZ EM 28/04/2015
                                rf.flg_status = 'V'                and
                                -- FIM TASK 3017
                                rf.DAT_PERIODO_COMP=PAR_PER_PRO) ;


                        delete tb_det_ret  ret
                        where cod_ins = PAR_COD_INS
                          and per_processo = PAR_PER_PRO
                          and cod_ide_cli = v_ide_cli
                          and cod_beneficio =apaga.cod_beneficio



                        and not exists (
                          select 1 from tb_casos_ret_folha rf,
                                        tb_beneficiario    bb,
                                        tb_concessao_beneficio cc
                          where rf.cod_ins= PAR_COD_INS  and
                                rf.cod_ide_cli=v_ide_cli and
                                rf.cod_ins=bb.cod_ins    and
                                rf.cod_ide_cli=bb.cod_ide_cli_ben  and
                                ret.cod_beneficio=bb.cod_beneficio and
                                bb.cod_ins=cc.cod_ins              and
                                bb.cod_beneficio=cc.cod_beneficio  and
                                rf.num_matricula=cc.num_matricula  and
                                ret.cod_beneficio=cc.cod_beneficio and
                                -- TASK 3017 -- APLICADO POR LUIZ EM 28/04/2015
                                rf.flg_status = 'V'                and
                                -- FIM TASK 3017
                                rf.DAT_PERIODO_COMP=PAR_PER_PRO) ;

                        delete tb_valor_npago_ret ret
                         where cod_ins = PAR_COD_INS
                           and per_processo = PAR_PER_PRO
                           and cod_ide_cli = v_ide_cli
                           and cod_beneficio =apaga.cod_beneficio


                            and not exists (
                          select 1 from tb_casos_ret_folha rf,
                                        tb_beneficiario    bb,
                                        tb_concessao_beneficio cc
                          where rf.cod_ins= PAR_COD_INS  and
                                rf.cod_ide_cli=v_ide_cli and
                                rf.cod_ins=bb.cod_ins    and
                                rf.cod_ide_cli=bb.cod_ide_cli_ben  and
                                ret.cod_beneficio=bb.cod_beneficio and
                                bb.cod_ins=cc.cod_ins              and
                                bb.cod_beneficio=cc.cod_beneficio  and
                                rf.num_matricula=cc.num_matricula  and
                                ret.cod_beneficio=cc.cod_beneficio and
                                -- TASK 3017 -- APLICADO POR LUIZ EM 28/04/2015
                                rf.flg_status = 'V'                and
                                -- FIM TASK 3017
                                rf.DAT_PERIODO_COMP=PAR_PER_PRO) ;


                        delete tb_valor_acima_ret ddr
                          where cod_ins = PAR_COD_INS
                           and per_processo = PAR_PER_PRO
                           and cod_ide_cli = v_ide_cli
                           and cod_beneficio =apaga.cod_beneficio


                          and not exists (
                          select 1 from tb_casos_ret_folha rf,
                                        tb_beneficiario    bb,
                                        tb_concessao_beneficio cc
                          where rf.cod_ins= PAR_COD_INS  and
                                rf.cod_ide_cli=v_ide_cli and
                                rf.cod_ins=bb.cod_ins    and
                                rf.cod_ide_cli=bb.cod_ide_cli_ben  and
                                ddr.cod_beneficio=bb.cod_beneficio and
                                bb.cod_ins=cc.cod_ins              and
                                bb.cod_beneficio=cc.cod_beneficio  and
                                rf.num_matricula=cc.num_matricula  and
                                ddr.cod_beneficio=cc.cod_beneficio and
                                -- TASK 3017 -- APLICADO POR LUIZ EM 28/04/2015
                                rf.flg_status = 'V'                and
                                -- FIM TASK 3017
                                rf.DAT_PERIODO_COMP=PAR_PER_PRO) ;


                        delete tb_resultado_calc_ret ret
                         where cod_ins = PAR_COD_INS
                           and per_processo = PAR_PER_PRO
                           and cod_ide_cli = v_ide_cli
                           and cod_beneficio =apaga.cod_beneficio


                             and not exists (
                          select 1 from tb_casos_ret_folha rf,
                                        tb_beneficiario    bb,
                                        tb_concessao_beneficio cc
                          where rf.cod_ins= PAR_COD_INS  and
                                rf.cod_ide_cli=v_ide_cli and
                                rf.cod_ins=bb.cod_ins    and
                                rf.cod_ide_cli=bb.cod_ide_cli_ben  and
                                ret.cod_beneficio=bb.cod_beneficio and
                                bb.cod_ins=cc.cod_ins              and
                                bb.cod_beneficio=cc.cod_beneficio  and
                                rf.num_matricula=cc.num_matricula  and
                                ret.cod_beneficio=cc.cod_beneficio and
                                -- TASK 3017 -- APLICADO POR LUIZ EM 28/04/2015
                                rf.flg_status = 'V'                and
                                -- FIM TASK 3017
                                rf.DAT_PERIODO_COMP=PAR_PER_PRO) ;
                        */

                    commit;

           END IF;

          END LOOP;
        END LOOP;
        END IF;
      END LOOP;
    END IF;

  END SP_VERIFICA_REPROCESSAMENTO;
  -------------------------------------------------------------------------------------
  PROCEDURE SP_INICIA_VAR AS
  BEGIN
    vi_condicao              := FALSE;
    RAT_PERCENTUAL_RATEIO    := 100;
    RAT_COD_BENEFICIO_ANT    := 0;
    ANT_COD_BENEFICIO        := 0;
    vi_sem_condicao          := TRUE;
    APLICAR_PROP_BEN         := TRUE;
    APLICAR_PROP_SAIDA       := TRUE;
    APLICAR_RATEIO_BENEFICIO := FALSE;
    APLICAR_DEC_TERCEIRO     := FALSE;
    VI_DOENCA                := FALSE;
    VI_ORD_JUD               := FALSE;
    VI_PROP_SAIDA            := 1;
    VI_PROP_BEN              := 1;
    VI_PERC_PECUNIA          := 1;
    mon_calculo              := 0;
    vi_sal_base_total        := 0;
    COM_NUM_FUNCAO           := 0;
    V_DED_IR_PA              := 0;
    V_DED_IR_DOENCA          := 0;
    vi_val_base_13           := 0;
    HOUVE_RATEIO             := FALSE;
    VI_BASE_IR_13            := 0;
    V_VAL_IR_13              := 0;
    V_CALCULO_IR             := 'N';
    vi_val_rubrica_prev      := 0;
    COM_COL_INFORMACAO       := null;
    idx_elemento             := 0;
    if par_num_cpf is null then
      PAR_PERCENT_CORRECAO := 1;
    end if;

    COM_VAL_RUBRICA_CHEIO := 0;

    IF PAR_TIP_PRO <> 'R' THEN
      tdcn.delete;
      tdcn_pa.delete;
      tdcd.delete;
      v_sal_base.delete;
      v_base_prev.delete;
      v_base_teto.delete;
      -- v_val_ir.delete;
      vi_base_ir_arr.delete;
      vi_base_ir_arr_13.delete;
      VI_PERC_IR.delete;
      vfolha.delete;
      v_cod_beneficio.delete;
      vi_ir_ret.delete;
      cod_fcrubrica.delete;
      cod_beneficiario.delete;
      a_beneficio.delete;
      p := 0;
      cod_fcrubrica_redutor.delete;
      cod_beneficiario_redutor.delete;
      a_beneficio_redutor.delete;
      d := 0;
      v_cargo.delete;
      ------ Agregadao 25-0-2015
      vfolha.delete;
    ELSE
      ret_tdcn.delete;
      ret_tdcn_ref.delete;
    END IF;

  END SP_INICIA_VAR;
  ---------------------------------------------------------------------------------
  PROCEDURE SP_INICIALIZA_ARRAY AS
  BEGIN

    ------- Var Para Calculo 13 %
    T_Beneficiario.delete;
    -------
    tdcn.delete;
    tdcn_pa.delete;
    tdcd.delete;
    vfolha.delete;
    ret_tdcn.delete;
    ret_tdcn_ref.delete;
    ret_tval_npago.delete;
    v_sal_base.delete;
    v_base_prev.delete;
    v_base_teto.delete;
    VI_PERC_IR.delete;
    vi_base_ir_arr.delete;
    vi_base_ir_arr_13.delete;
    VI_PERC_IR.delete;
    v_cod_beneficio.delete;
    cod_fcrubrica.delete;
    cod_fcrubrica_seg.delete;
    cod_beneficiario.delete;
    a_beneficio.delete;
    v_cargo.delete;
    -------------
     rubricas_tipos.delete;
    --------------

    p := 0;
    D := 0;
    vi_ir_ret.delete;
    idx_caln                 := 0;
    idx_seq_detalhe          := 0;
    idx_cald                 := 0;
    idx_folha                := 0;
    idx_parcela              := 0;
    idx_ret                  := 0;
    idx_ret_ref              := 0;
    V_CONT_BENEF             := 0;
    APLICAR_DEC_TERCEIRO     := FALSE;
    vi_condicao              := FALSE;
    vi_sem_condicao          := TRUE;
    APLICAR_RATEIO_BENEFICIO := FALSE;
    HOUVE_RATEIO             := FALSE;
    V_DED_IR_PA              := 0;
    V_DED_IR_DOENCA          := 0;
    VI_DOENCA                := FALSE;
    VI_ORD_JUD               := FALSE;
    VI_BASE_IR_13            := 0;
    VI_VAL_BASE_13           := 0;
    V_BASE_ISENCAO           := 0;
    NOM_CATEGORIA            := NULL;
    NOM_SUBCATEGORIA         := NULL;
    NOM_TIPO_PROVIMENTO      := NULL;
    NOM_REGIME_JUR           := NULL;
    NOM_VINCULO              := NULL;
    NUM_DEP_IR_MIL           := 0;
    VI_IDADE                 := 0;
    V_CALCULO_IR             := 'N';
    vi_val_rubrica_prev      := 0;
    COM_COL_INFORMACAO       := null;
    idx_elemento             := 0;
    vi_cod_ref_pad_venc      := null;
    vrubexc.delete;

    --- JTS 29092010 JTS
     VI_PERCENTUAL_RATEIO    :=1;

    if par_num_cpf is null then
      PAR_PERCENT_CORRECAO := 1;
    end if;
     p_sub_proc_erro := null;
     p_coderro       := null;
     P_MSGERRO       := null;
  END SP_INICIALIZA_ARRAY;
  ---------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_COD_IDE_CLI_SERV AS
  BEGIN

    BEGIN

      select tcb.cod_ide_cli_serv,
             tcb.cod_ide_rel_func,
             tcb.val_percent_ben,
             tcb.val_perc_pecunia,
             tcb.cod_tipo_calculo
        into BEN_IDE_CLI_SERV,
             BEN_IDE_REL_FUNC,
             vi_prop_ben,
             vi_perc_pecunia,
             BEN_COD_TIPO_CALCULO
        from tb_concessao_beneficio tcb
       where tcb.cod_ins = PAR_COD_INS
         and tcb.cod_beneficio = COM_COD_BENEFICIO
         and tcb.cod_entidade = COM_ENTIDADE
            --        and tcb.cod_pccs = COM_PCCS
            --        and tcb.cod_cargo = COM_CARGO
         and tcb.num_matricula = COM_MATRICULA;

    exception
      when others then
        BEN_IDE_CLI_SERV := ben_ide_cli;
    end;

    vi_prop_ben     := vi_prop_ben / 100;
    vi_perc_pecunia := vi_perc_pecunia / 100;

    --- ATUALIZA % DO BENEFICIO JTS
     IF (COM_COD_BENEFICIO >=40000001 AND
         COM_COD_BENEFICIO <=41000000 ) AND
         COM_ENTIDADE IN (07,06,04,22,12) THEN
        vi_prop_ben    :=1;
        vi_perc_pecunia:=1;
     END IF;


  END SP_OBTEM_COD_IDE_CLI_SERV;
  ---------------------------------------------------------------------------------
  PROCEDURE SP_PROCESSA_RUBRICA(CALC_RUB OUT BOOLEAN) AS
    V_RUBRICA_FILHA NUMBER(8);
    V_RUBRICA_PAI   NUMBER(8);
    rdcn2           TB_DET_CALCULADO_ESTRUC%rowtype;
    cont            NUMBER(3);
    I               NUMBER(3);

  BEGIN

    CALC_RUB := TRUE;

    for x in (SELECT /*+ RULE */
               COD_RUBRICA_A, COD_RUBRICA_B
                FROM TB_RUBRICAS_EXC
               WHERE COD_RUBRICA_B = COM_COD_FCRUBRICA
                 AND COD_ENTIDADE_B = COM_COD_ENTIDADE) loop

      cont := tdcn.count;
      IF cont > 0 then
        FOR I IN 1 .. cont LOOP
          rdcn2 := tdcn(I);

          -- Mudanca para ANT_IDE_CLI no dia 12-06-2013
          IF (rdcn2.COD_FCRUBRICA = x.cod_RUBRICA_a) AND
             (rdcn2.COD_IDE_CLI = ANT_IDE_CLI /*BEN_IDE_CLI*/) AND
             (rdcn2.COD_BENEFICIO = COM_COD_BENEFICIO) THEN
            CALC_RUB := FALSE;
            exit;

          END IF;
        END LOOP;
      ELSE
        CALC_RUB := TRUE;
      END IF;
      --      END IF;
    end loop;

  END SP_PROCESSA_RUBRICA;
  ----------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_EVOLU_REL_FUNCIONAL AS
  begin
    begin
    -- JTS24
      SELECT EF.COD_REFERENCIA,
             EF.COD_PCCS      ,
             EF.COD_JORNADA   ,
             EF.COD_QUADRO    ,
             EF.IND_OPCAO     ,
             EF.COD_REFERENCIA_2,
             EF.COD_REFERENCIA_3,
             EF.COD_JORNADA_2   ,
             EF.COD_JORNADA_3   ,
             EF.QTD_MES_2       ,
             EF.QTD_MES_3       ,
             EF.QTD_MES
        INTO BEN_COD_REFERENCIA,
             COM_PCCS,
             COM_COD_JORNADA,
             COM_QUADRO,
             COM_OPCAO,
             COM_REFERENCIA_2,
             COM_REFERENCIA_3,
             COM_JORNADA_2   ,
             COM_JORNADA_3   ,
             COM_QTD_MES_2   ,
             COM_QTD_MES_3   ,
             COM_QTD_MES

        FROM TB_EVOLUCAO_FUNCIONAL_BEN EF
       WHERE EF.COD_INS = par_cod_ins
         AND EF.COD_IDE_CLI_SERV = BEN_IDE_CLI_SERV --Caso Pensao por morte efv 20060823
         AND EF.COD_IDE_CLI_BEN = BEN_IDE_CLI
         AND EF.COD_ENTIDADE = COM_ENTIDADE
         AND EF.NUM_MATRICULA = COM_MATRICULA
         AND (PAR_PER_PRO >=
             TO_DATE('01/' || TO_CHAR(EF.DAT_INI_EFEITO, 'MM/YYYY'),
                      'DD/MM/YYYY') -- FFRANCO - 06052009
             AND
             PAR_PER_PRO <=
             NVL(EF.DAT_FIM_EFEITO, TO_DATE('01/01/2045', 'DD/MM/YYYY')))
         AND EF.FLG_STATUS = 'V'
         AND EF.COD_IDE_REL_FUNC = BEN_IDE_REL_FUNC;
    exception
      WHEN NO_DATA_FOUND THEN
        p_coderro       := sqlcode;
        p_sub_proc_erro := 'SP_FOLHA_CALCULADA - Evol. Func';
        p_msgerro       := 'N?o foi encontrada Evolucao_funcional -> 2319';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              BEN_IDE_CLI,
                              0);
      WHEN OTHERS THEN
        p_coderro       := sqlcode;
        p_sub_proc_erro := 'SP_FOLHA_CALCULADA - Evol. Func';
        p_msgerro       := 'Erro ao obter Evolucao Funcional --> 2319';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              BEN_IDE_CLI,
                              0);

        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
    END;

  END SP_OBTEM_EVOLU_REL_FUNCIONAL;
  ----------------------------------------------------------------------------------
  PROCEDURE SP_CALCULA_VALOR_RUBRICA AS

    valor13 number(18, 4) := 0;
    valor_temp number(18, 4) := 0;
  BEGIN

    mon_calculo := 0;

    --ROD8
    --  29092010
    -- IF COM_TIP_BENEFICIO = 'APOSENTADO' THEN
     -- VI_PERCENTUAL_RATEIO := 1;
    -- END IF;

    --Novo modelo de rubricas
    IF BEN_TIPO_PESSOA = 'T' THEN
      sp_ins_detcalculado(SP_OBTEM_VALOR_OJ); --valor igual ao desconto do instituidor
    ELSE
      SP_VERIFICA_EXISTE_RATEIO;
      SP_CARREGA_FORMULA;

      SP_VERIFICA_VAR_RUBRICA;

      IF vi_condicao or vi_sem_condicao THEN
        SP_OBTEM_VALOR_FORMULA;



        -- guarda valor cheio
        IF COM_IND_COMP_RUB = 'S' AND COM_TIP_BENEFICIO = 'PENSIONISTA' THEN
          --ROD10
          IF VI_PERCENTUAL_RATEIO = 0 OR VI_PERCENTUAL_RATEIO is null THEN
             SP_RATEIO_BENEFICIO(COM_COD_BENEFICIO,
                                ANT_IDE_CLI,
                                valor_temp,
                                valor_temp,
                                VI_PERCENTUAL_RATEIO); -- salario base com rateio
          END IF;
          --ROD10

          BEGIN
            IF VI_PERCENTUAL_RATEIO >0 THEN
            COM_VAL_RUBRICA_CHEIO := mon_calculo / (VI_PERCENTUAL_RATEIO *
                                     VI_PERC_PECUNIA);

            ELSE
               COM_VAL_RUBRICA_CHEIO := 0;
            END IF;
          EXCEPTION
            when others then
              p_sub_proc_erro := 'SP_CALCULA_VALOR_RUBRICA';
              p_coderro       := SQLCODE;
              P_MSGERRO       := 'Erro ao calcular valor rubrica - provavel Percentual rateio zerado';
              INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                    p_coderro,
                                    'Calcula Folha',
                                    sysdate,
                                    p_msgerro,
                                    p_sub_proc_erro,
                                    ANT_IDE_CLI,
                                    COM_COD_FCRUBRICA);
              VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
              IF VI_PERCENTUAL_RATEIO =0 or VI_PERCENTUAL_RATEIO is null THEN
                 VI_PERCENTUAL_RATEIO := 0.01;
              END IF;
          END;

        ELSE
          --IF SUBSTR(LPAD(TO_CHAR(COM_COD_FCRUBRICA),7,0),6,2) in ('01','02','03','04','05') then       ---- FFRANCO 18052009

          ----------------- INCLUIDO ROD 11.DEZ.09
          SP_RATEIO_BENEFICIO(COM_COD_BENEFICIO,
                                  ANT_IDE_CLI,
                                  valor_temp,
                                  valor_temp,
                                  VI_PERCENTUAL_RATEIO);
          ---
          ---Incluidas as extenc?es '57','59', para todas as instruc?es abaixo 29-05-2014
          IF COM_TIP_BENEFICIO = 'PENSIONISTA' THEN
            IF SUBSTR(LPAD(TO_CHAR(COM_COD_FCRUBRICA), 7, 0), 6, 2) in ('01','03','05','55','56','57','58','59','60') then
            COM_VAL_RUBRICA_CHEIO := mon_calculo * VI_PERC_PECUNIA;
            ELSE
            COM_VAL_RUBRICA_CHEIO := mon_calculo * VI_PERC_PECUNIA *  vi_prop_ben;
            END IF;
          ELSE
            IF COM_IND_COMP_RUB = 'S' OR COM_COD_FCRUBRICA=7000600  OR COM_COD_FCRUBRICA IN (200405) THEN ---25-07-2012 fagero contro 200405
              COM_IND_COMP_RUB := 'S' ;

               --- SOLUCIONA PROBLEMA DE FORMULA ESTA PROPROCIONALIZANDO POR FATOR MES
               --- ---  20170203 -  Ticket 37687 Suporte Proporcionalizar Valor Cheio
                 IF  (APLICAR_ENTRADA OR   V_QTD_DIAS <V_DIAS_MES ) AND COM_TIP_BENEFICIO = 'APOSENTADO' AND

                       V_QTD_DIAS <V_DIAS_MES AND   V_QTD_DIAS >0
                     THEN
                            COM_VAL_RUBRICA_CHEIO := mon_calculo/ (V_QTD_DIAS / V_DIAS_MES);
                     ELSE
                             COM_VAL_RUBRICA_CHEIO := mon_calculo ;
                  END IF;


            ELSE
              ----------------------
              IF (COM_COD_BENEFICIO >=40000000 AND  COM_COD_BENEFICIO <=41000000 )
                AND (SUBSTR(LPAD(TO_CHAR(COM_COD_FCRUBRICA), 7, 0), 6, 2) IN ('01','03','05','55','56','57','58','59','60') -- ('01')
                     OR COM_COD_FCRUBRICA IN (200403,200407,200405)
                    ) THEN
                    ---25-07-2012 fagero contro 200405

                COM_VAL_RUBRICA_CHEIO := mon_calculo  ;
              ELSE
                IF SUBSTR(LPAD(TO_CHAR(COM_COD_FCRUBRICA), 7, 0), 6, 2) IN  ('01','03','05','55','56','57','58','59','60') --('01')
                  THEN
                   COM_VAL_RUBRICA_CHEIO := mon_calculo  ;
                ELSE
                   COM_VAL_RUBRICA_CHEIO := mon_calculo * vi_prop_ben;
                END IF;
             END IF;
            END IF;
          END IF;
          --ROD20


        END IF;


       --- Incrementado um Novo evento especial para tratar repasses.
       ---- Evento Especial 8

        IF COM_TIPO_EVENTO_ESPECIAL in ( 'P','8' ) THEN

          p := nvl(p, 0) + 1;
          cod_fcrubrica.extend;
          cod_fcrubrica_seg.extend;
          cod_beneficiario.extend;

          a_beneficio.extend;
          cod_fcrubrica(p)     := COM_COD_FCRUBRICA;
          cod_fcrubrica_seg(p) :=  COM_SEQ_VIG;
          cod_beneficiario(p)  := COM_COD_IDE_CLI_BEN;
          a_beneficio(p)       := COM_COD_BENEFICIO;
          -- Agregada 26-01-2011
          rubricas_tipos.extend;
          rubricas_tipos(p)  :=COM_RUBRICA_TIPO;
        END IF;

        -- guardar rubrica de redutor
        IF (COM_TIPO_EVENTO_ESPECIAL = 'D' AND COM_TIP_BENEFICIO <> 'APOSENTADO')
           OR (COM_TIPO_EVENTO_ESPECIAL = 'G' AND COM_TIP_BENEFICIO = 'APOSENTADO') THEN
          d := nvl(d, 0) + 1;
          cod_fcrubrica_redutor.extend;
          cod_beneficiario_redutor.extend;
          a_beneficio_redutor.extend;
          cod_fcrubrica_redutor(d) := COM_COD_FCRUBRICA;
          cod_beneficiario_redutor(d) := ANT_IDE_CLI;
          a_beneficio_redutor(d) := COM_COD_BENEFICIO;
        END IF;
        --ROD20 incluido abaixo -- Modificados parentesis de agrupac?o JTS
        IF     (COM_TIP_BENEFICIO = 'APOSENTADO' AND COM_TIPO_EVENTO_ESPECIAL = 'D')
           OR (COM_TIP_BENEFICIO <> 'APOSENTADO' AND COM_TIPO_EVENTO_ESPECIAL = 'G') THEN
           COM_FLG_PROCESSA := 'N';
        END IF;

        IF (COM_NAT_RUB = 'C' AND COM_FLG_PROCESSA = 'S') THEN

          IF PAR_TIP_PRO = 'T' AND COM_TIP_BENEFICIO = 'PENSIONISTA' AND
             HOUVE_RATEIO = TRUE AND COM_COD_FCRUBRICA = 15000 THEN
            HOUVE_RATEIO := FALSE;
            valor13      := SP_OBTEM_ADIANTAMENTO_13;
            HOUVE_RATEIO := TRUE;
          END IF;

          IF APLICAR_RATEIO_BENEFICIO = TRUE THEN
            -- Calculo do valor da rubrica com Rateio e mudanca no percentual
            -- do rateio no mesmo mes do periodo
            -- o Fator traz somado a proporc?o do mes
            -- IF  SUBSTR(LPAD(TO_CHAR(COM_COD_FCRUBRICA),7,0),6,2) in ('01','02','03','04','05') then
            IF SUBSTR(LPAD(TO_CHAR(COM_COD_FCRUBRICA), 7, 0), 6, 2) in
               ('01','03', '05','55','56','57','58','59','60') then
              -- ROD4 removido '02'-04 (09/06/09)-22-09-2010
              mon_calculo := (mon_calculo * VI_PROP_SAIDA * VI_PERC_PECUNIA);
            ELSE
              mon_calculo := (mon_calculo * VI_PROP_BEN * VI_PROP_SAIDA *
                             VI_PERC_PECUNIA);
            END IF;
            IF VI_PROP_BEN = 1 and VI_PROP_SAIDA = 1 THEN
              HOUVE_RATEIO := FALSE;
            ELSE
              HOUVE_RATEIO := TRUE; --efv pensao 20060918
            END IF;

            IF APLICAR_ENTRADA THEN
              mon_calculo := mon_calculo;
            ELSE
              IF HOUVE_RATEIO = FALSE AND VI_TEM_SAIDA = FALSE AND
                 PAR_TIP_PRO = 'T' THEN
                HOUVE_RATEIO := TRUE;
                SP_RATEIO_BENEFICIO(COM_COD_BENEFICIO,
                                    ANT_IDE_CLI,
                                    mon_calculo,
                                    mon_calculo,
                                    VI_PERCENTUAL_RATEIO); -- salario base com rateio
              ELSE
                IF (APLICAR_DEC_TERCEIRO = TRUE OR APLICAR_RATEIO_BENEFICIO) AND
                   PAR_TIP_PRO = 'T' AND HOUVE_RATEIO = FALSE THEN
                  SP_RATEIO_BENEFICIO(COM_COD_BENEFICIO,
                                      ANT_IDE_CLI,
                                      mon_calculo,
                                      mon_calculo,
                                      VI_PERCENTUAL_RATEIO); -- salario base com rateio
                ELSIF (APLICAR_DEC_TERCEIRO = TRUE OR
                      APLICAR_RATEIO_BENEFICIO) AND
                      COM_TIP_BENEFICIO = 'PENSIONISTA' AND
                      HOUVE_RATEIO = FALSE THEN
                  SP_RATEIO_BENEFICIO(COM_COD_BENEFICIO,
                                      ANT_IDE_CLI,
                                      mon_calculo,
                                      mon_calculo,
                                      VI_PERCENTUAL_RATEIO); -- salario base com rateio
                END IF;
              END IF;
            END IF;
          ELSIF APLICAR_DEC_TERCEIRO AND COM_TIP_BENEFICIO = 'APOSENTADO' AND
                APLICAR_ENTRADA = FALSE AND COM_IND_COMP_RUB = 'N' AND
                COM_TIPO_EVENTO_ESPECIAL <> 'S' THEN
            -- aplicar proporcao somente para o salario base
            --IF SUBSTR(LPAD(TO_CHAR(COM_COD_FCRUBRICA),7,0),6,2) not in ('01','02','03','04','05') THEN
            IF SUBSTR(LPAD(TO_CHAR(COM_COD_FCRUBRICA), 7, 0), 6, 2) not in
               ('01','03', '05','55','56','57','58','59','60') THEN
              --ROD4
              ---- 29-08-2014 Altareda func?o para utilizar ROUND(COM_PERCENT_BEN / 100,4)
              ---- Aqui entra quando SP_CALC_DATAS_PROPORCIONAL coloca  APLICAR_DEC_TERCEIRO='TRUE'
              --   Quando o aposentado tem fim de beneficio no Mes

              --mon_calculo := (mon_calculo * VI_PROP_BEN * NVL(VI_PROP_SAIDA,1) *
              --               VI_PERC_PECUNIA);
               mon_calculo := (mon_calculo * ROUND(COM_PERCENT_BEN / 100,4) * NVL(VI_PROP_SAIDA,1) *
                             VI_PERC_PECUNIA);
            else
               --- NVL agregado  9-9-2013
              mon_calculo := (mon_calculo * nvl(VI_PROP_SAIDA,1) * VI_PERC_PECUNIA);
            END IF;
          ELSIF APLICAR_ENTRADA AND COM_TIP_BENEFICIO = 'APOSENTADO' AND
                COM_IND_COMP_RUB = 'N' AND COM_TIPO_EVENTO_ESPECIAL <> 'S' THEN
                IF V_QTD_DIAS > V_DIAS_MES THEN
                   V_QTD_DIAS := V_DIAS_MES;
                END IF;
                 -- Cod Novo
                             -- Codigo Gerado por JTS 24-05-2010 agregamos criterio de por% 22-09
                  IF     SUBSTR(LPAD(TO_CHAR(COM_COD_FCRUBRICA), 7, 0), 6, 2) not in  ('50' ,'51')
                    and  SUBSTR(LPAD(TO_CHAR(COM_COD_FCRUBRICA), 7, 0), 6, 2) not in
                     ('01','03', '05','55','56','57','58','59','60')
                   THEN
                          mon_calculo := ((mon_calculo * (V_QTD_DIAS / V_DIAS_MES)) *
                           ROUND(COM_PERCENT_BEN / 100,4));
                   ELSE
                     mon_calculo := ((mon_calculo * (V_QTD_DIAS / V_DIAS_MES)));
                  END IF;

         ELSIF APLICAR_ENTRADA = FALSE AND
                COM_TIP_BENEFICIO = 'APOSENTADO' AND COM_IND_COMP_RUB = 'N' AND
                COM_NAT_VAL <> 'L' AND COM_TIPO_EVENTO_ESPECIAL <> 'S' AND
                COM_TIPO_EVENTO_ESPECIAL <> 'F' THEN
            -- Aplicar somente o percentual proporcional para os pensionistas
              --Cod Novo
                 ----- ajuste 30092010
                 IF NOT (COM_COD_BENEFICIO >=80000000 AND  COM_COD_BENEFICIO <=81000000 ) THEN
                      -- Codigo Gerado por JTS 24-05-2010 agregamos criterio de por% 22-09
                       IF SUBSTR(LPAD(TO_CHAR(COM_COD_FCRUBRICA), 7, 0), 6, 2) not in  ('50' ,'51','55','56','57','58','59','60')
                       THEN
                          IF (COM_COD_BENEFICIO >=40000000 AND  COM_COD_BENEFICIO <=41000000 )
                               AND (SUBSTR(LPAD(TO_CHAR(COM_COD_FCRUBRICA), 7, 0), 6, 2) IN ('01')
                               OR COM_COD_FCRUBRICA IN (200403,200407,200405)
                            ) THEN
                                ---25-07-2012 fagero contro 200405
                            mon_calculo := mon_calculo * VI_PROP_COMPOSICAO;
                          ELSE
                            mon_calculo := mon_calculo * ROUND(COM_PERCENT_BEN / 100,4) *
                                           VI_PROP_COMPOSICAO;
                          END IF;
                       ELSE
                                     mon_calculo := mon_calculo * VI_PROP_COMPOSICAO;
                      END IF;
                  ELSE
                      IF SUBSTR(LPAD(TO_CHAR(COM_COD_FCRUBRICA), 7, 0), 6, 2) not in  ('50' ,'51')
                         and  SUBSTR(LPAD(TO_CHAR(COM_COD_FCRUBRICA), 7, 0), 6, 2) not in
                         ('01','03', '05','55','56','57','58','59','60') THEN
                            mon_calculo := mon_calculo * ROUND(COM_PERCENT_BEN / 100,4) *
                                           VI_PROP_COMPOSICAO;
                       ELSE
                                     mon_calculo := mon_calculo * VI_PROP_COMPOSICAO;
                      END IF;

                 END IF;

          ELSIF COM_NAT_VAL = 'L' AND COM_IND_COMP_RUB = 'S' AND
                COM_NAT_RUB = 'C' AND COM_TIPO_EVENTO_ESPECIAL <> 'S' AND
                (PAR_TIP_PRO = 'T' or APLICAR_DEC_TERCEIRO) THEN
            IF APLICAR_RATEIO_BENEFICIO THEN
              SP_RATEIO_BENEFICIO(COM_COD_BENEFICIO,
                                  ANT_IDE_CLI,
                                  mon_calculo,
                                  mon_calculo,
                                  VI_PERCENTUAL_RATEIO); -- salario base com rateio
            END IF;
            IF APLICAR_DEC_TERCEIRO AND PAR_TIP_PRO = 'T' THEN
              -- VI_FATOR_DIAS + VI_PROP_SAIDA +
              mon_calculo := ((mon_calculo * (QTD_MESES_13)) * VI_PROP_BEN *
                             VI_PERC_PECUNIA) / 12;
            ELSIF PAR_TIP_PRO <> 'T' THEN
              --IF SUBSTR(LPAD(TO_CHAR(COM_COD_FCRUBRICA),7,0),6,2) not  in ('01','02','03','04','05') THEN
              IF SUBSTR(LPAD(TO_CHAR(COM_COD_FCRUBRICA), 7, 0), 6, 2) not in
                 ('01','03','04','05','55','56','57','58','59','60') THEN
                mon_calculo := (mon_calculo * VI_PROP_BEN * VI_PERC_PECUNIA *
                               VI_PROP_SAIDA * V_FATOR_13_SAIDA);
              ELSE
                mon_calculo := (mon_calculo * VI_PROP_SAIDA *
                               V_FATOR_13_SAIDA * VI_PERC_PECUNIA);
              END IF;
            END IF;
          ELSIF COM_TIPO_EVENTO_ESPECIAL = 'T' AND PAR_TIP_PRO = 'N' THEN
            mon_calculo := 0;
          ELSIF PAR_TIP_PRO = 'R' AND to_char(PAR_PER_PRO, 'MM') = '02' AND
                COM_COD_FCRUBRICA = 13800 THEN
            mon_calculo           := mon_calculo * VI_FATOR_DIAS_RET;
            IF VI_PERCENTUAL_RATEIO = 0 OR VI_PERCENTUAL_RATEIO IS NULL THEN --ROD incluido 27.out.09
              SP_RATEIO_BENEFICIO(COM_COD_BENEFICIO,
                                  ANT_IDE_CLI,
                                  valor_temp,
                                  valor_temp,
                                  VI_PERCENTUAL_RATEIO);
            END IF;                                                          --fim

            COM_VAL_RUBRICA_CHEIO := mon_calculo / VI_PERCENTUAL_RATEIO;
          ELSIF VI_PROP_COMPOSICAO <> 1 THEN
            mon_calculo           := mon_calculo * VI_PROP_COMPOSICAO;
            IF VI_PERCENTUAL_RATEIO = 0 OR VI_PERCENTUAL_RATEIO IS NULL THEN --ROD incluido 27.out.09
              SP_RATEIO_BENEFICIO(COM_COD_BENEFICIO,
                                  ANT_IDE_CLI,
                                  valor_temp,
                                  valor_temp,
                                  VI_PERCENTUAL_RATEIO);
            END IF;                                                          --fim
            COM_VAL_RUBRICA_CHEIO := mon_calculo / VI_PERCENTUAL_RATEIO;
          ELSIF COM_IND_COMP_RUB = 'N'  THEN
            IF VI_PERCENTUAL_RATEIO = 0 OR VI_PERCENTUAL_RATEIO IS NULL THEN --ROD incluido 27.out.09
              SP_RATEIO_BENEFICIO(COM_COD_BENEFICIO,
                                  ANT_IDE_CLI,
                                  valor_temp,
                                  valor_temp,
                                  VI_PERCENTUAL_RATEIO);
            END IF;                                                          --fim
            COM_VAL_RUBRICA_CHEIO := mon_calculo / VI_PERCENTUAL_RATEIO;
          END IF;

  /*      ELSIF APLICAR_DEC_TERCEIRO THEN


          null; */
        ELSIF COM_NAT_RUB = 'D' AND COM_FLG_PROCESSA = 'S' AND
              COM_IND_QTAS = 'S' AND COM_NAT_VAL = 'C' AND
              (COM_NAT_COMP = 'I' OR COM_NAT_COMP = 'C') THEN
          -- Acumula Desconto para verificar percentual Pagamento
          IF PAR_TIP_PRO <> 'R' THEN
            SP_INS_ARRAY_DESCONTO(mon_calculo);
            mon_calculo := 0;
          END IF;
        ELSIF COM_NAT_RUB = 'D' AND COM_FLG_PROCESSA = 'S' THEN
          IF APLICAR_RATEIO_BENEFICIO THEN
            SP_RATEIO_BENEFICIO(COM_COD_BENEFICIO,
                                BEN_IDE_CLI,
                                mon_calculo,
                                mon_calculo,
                                VI_PERCENTUAL_RATEIO); -- salario base com rateio
          END IF;
        ELSIF COM_FLG_PROCESSA = 'N' THEN
          mon_calculo := 0;
        END IF;

        --------------- Desenvolvimento Task 3689  --------------
        --- Ajuste valor da Rubrica para casos de Aposentadoria
         IF    COM_FLG_PROCESSA = 'S' AND  COM_TIP_BENEFICIO != 'APOSENTADO'
           AND COM_NAT_RUB      = 'C' AND  COM_IND_COMP_RUB = 'N'
           AND  APLICAR_RATEIO_BENEFICIO  THEN

              MON_CALCULO           := (MON_CALCULO *  VI_PERC_PENSAO);
              COM_VAL_RUBRICA_CHEIO := ( COM_VAL_RUBRICA_CHEIO *  VI_PERC_PENSAO);
         END IF;
        --------------- Desenvolvimento Task 3689  --------------

      ELSE
        mon_calculo := 0;
        IF COM_NAT_COMP <> 'G' THEN
          p_sub_proc_erro := 'SP_CALCULA_VALOR_RUBRICA';
          p_coderro       := SQLCODE;
          P_MSGERRO       := 'Aviso - Rubrica n?o calculada por n?o se enquadrar nas condicoes';
          INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                p_coderro,
                                'Calcula Folha',
                                sysdate,
                                p_msgerro,
                                p_sub_proc_erro,
                                BEN_IDE_CLI,
                                COM_COD_FCRUBRICA);
          VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;

        END IF;
      END IF;
    END IF;

  END;
  ---------------------------------------------------------------------------------
  PROCEDURE SP_VERIFICA_EXISTE_RATEIO AS

    i number := 0;

  BEGIN

    APLICAR_RATEIO_BENEFICIO := FALSE;

    IF COM_TIP_BENEFICIO = 'PENSIONISTA' AND
       (COM_NAT_COMP = 'B' or COM_NAT_COMP = 'G' or COM_NAT_COMP = 'I') AND
       COM_IND_COMP_RUB = 'N' -- AND
    --   COM_TIPO_VALOR <> 'P'                       AND efv 20060823
    --   COM_NAT_RUB = 'C'    ---- FCPF 082008
     THEN

      FOR i IN 1 .. cod_con.count LOOP
        IF flag_rateio(i) = 'S' THEN
          IF cod_rub(i) = com_cod_fcrubrica and
             cod_entidade(i) = com_cod_entidade THEN
            APLICAR_RATEIO_BENEFICIO := TRUE;
            EXIT;
          END IF;
        END IF;
      END LOOP;
    ELSE
      APLICAR_RATEIO_BENEFICIO := FALSE;
    END IF;

  END SP_VERIFICA_EXISTE_RATEIO;
  ---------------------------------------------------------------------------------
  PROCEDURE SP_VERIFICA_VAR_RUBRICA AS

  BEGIN
    IF COM_COL_INFORMACAO is not null THEN

      FOR i IN 1 .. nom_variavel.count LOOP
        IF COM_COL_INFORMACAO = 'VAL_PERC_BENEFICIO' OR
           COM_COL_INFORMACAO = 'PERC_SAL_MIN_PENSAO' THEN
          IF nom_variavel(i) = COM_COL_INFORMACAO THEN
            IF COM_VAL_PORC_IND IS NULL AND IDX_ELEMENTO > 0 THEN
              begin
                select case
                         when to_number(translate(vas_elemento(idx_elemento),
                                                  '.',
                                                  ','),
                                        '9999999D9999') > 1 then
                          to_number(translate(vas_elemento(idx_elemento),
                                              '.',
                                              ','),
                                    '9999999D9999')
                         else
                          to_number(translate(vas_elemento(idx_elemento),
                                              '.',
                                              ','),
                                    '9999999D9999') * 100
                       end
                  into val_variavel(i)
                  from dual;
              exception
                when others then
                  p_sub_proc_erro := 'SP_VERIFICA_VAR_RUBRICA';
                  p_coderro       := SQLCODE;
                  P_MSGERRO       := 'Erro ao obter as variaveis de percentuais as rubricas';
                  INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                        p_coderro,
                                        'Calcula Folha',
                                        sysdate,
                                        p_msgerro,
                                        p_sub_proc_erro,
                                        BEN_IDE_CLI,
                                        COM_COD_FCRUBRICA);
                  VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;

              end;
              IF val_variavel(i) < 1 THEN
                val_variavel(i) := val_variavel(i) * 100;
              END IF;
              --                 val_variavel(i) := to_number(vas_elemento(idx_elemento),NLS_NUMERIC_CHARACTERS = ".,") * 100;
              v_val_percentual := val_variavel(i);
            ELSE
              val_variavel(i) := nvl(COM_VAL_PORC_IND, 0);
              v_val_percentual := nvl(COM_VAL_PORC_IND, 0);
              exit;
            END IF;
            if idx_elemento = 3 then
              exit;
            end if;
          END IF;
        ELSIF COM_COL_INFORMACAO = 'QTD_BENEFICIO' OR
              COM_COL_INFORMACAO = 'QTD_SAL_MIN_PENSAO' THEN
          IF nom_variavel(i) = COM_COL_INFORMACAO THEN
            val_variavel(i) := nvl(COM_QTY_UNID_IND, 0);
            v_qtd_horas := nvl(COM_QTY_UNID_IND, 0);
          END IF;
        ELSIF COM_COL_INFORMACAO = 'PERC_VAL_PENSAO' THEN
          IF nom_variavel(i) = COM_COL_INFORMACAO THEN
            val_variavel(i) := nvl(COM_VAL_PORC_IND, 0);
            v_val_percentual := nvl(COM_VAL_PORC_IND, 0);
          END IF;
        ELSIF COM_COL_INFORMACAO = 'VAL_PERC_FIXO' THEN
          IF nom_variavel(i) = COM_COL_INFORMACAO THEN
             val_variavel(i) := COM_VAL_PORC_IND;
          END IF;
        ELSIF COM_COL_INFORMACAO = 'QTD_COTAS' THEN
          IF nom_variavel(i) = COM_COL_INFORMACAO THEN
            val_variavel(i) := nvl(COM_VAL_PORC_IND, 0);
          END IF;
        ELSIF COM_COL_INFORMACAO = 'PERC_RATEIO_PECUNIA' THEN
          IF nom_variavel(i) = COM_COL_INFORMACAO THEN
            val_variavel(i) := nvl(VI_PERC_PECUNIA, 0);
          END IF;
        ELSIF COM_COL_INFORMACAO = 'VAL_PERC_FIXO_13' THEN
          IF nom_variavel(i) = COM_COL_INFORMACAO THEN
             val_variavel(i) := nvl(COM_VAL_PORC_13 , 0);
          END IF;
        END IF;

      END LOOP;
    END IF;

  END SP_VERIFICA_VAR_RUBRICA;
  ---------------------------------------------------------------------------------
  PROCEDURE SP_INCLUI_BENEFICIO_ARRAY AS

  BEGIN

    vfolha.extend;
    idx_folha := nvl(idx_folha, 0) + 1;

    rfol.COD_INS       := PAR_COD_INS;
    rfol.TIP_PROCESSO  := PAR_TIP_PRO;
    rfol.PER_PROCESSO  := PAR_PER_PRO;
    rfol.SEQ_PAGAMENTO := vi_seq_pagamento;
    rfol.tip_beneficio := ANT_TIP_BENEFICIO;

    IF PAR_TIP_PRO = 'E' THEN
      rfol.COD_IDE_CLI := ANT_IDE_CLI;
    ELSE
      rfol.COD_IDE_CLI := BEN_IDE_CLI;
    END IF;
    rfol.COD_BENEFICIO := ANT_COD_BENEFICIO;
    rfol.NUM_GRP       := ANT_NUM_GRUPO_PAG ; --eliminar del modelo
    rfol.COD_ENTIDADE  := ANT_ENTIDADE ; --eliminar del modelo
    rfol.NUM_SEQ_BENEF := null;

    rfol.cod_ide_cli_ben := BEN_IDE_CLI;

    SP_OBTEM_DADOS_PF(BEN_IDE_CLI, 'S', rfol.cod_ide_serv, rfol.nom_serv);
    rfol.cod_ide_ben := ANT_NUM_CPF;
    rfol.nom_ben     := substr(ANT_NOME, 1, 50);
    --   SP_OBTEM_DADOS_PF(ANT_IDE_CLI, 'B',rfol.cod_ide_ben,rfol.nom_ben);
    SP_OBTEM_DADOS_PF(ANT_IDE_CLI, 'T', rfol.cod_ide_tut, rfol.nom_tut);

    rfol.dat_processo := PAR_PER_PRO;

    IF PAR_TIP_PRO = 'E' THEN
      BEGIN
        SELECT SUM(VAL_SAL_BASE)
          INTO rfol.val_sal_base
          FROM TB_FOLHA_RET_PROC
         WHERE COD_INS = PAR_COD_INS
           AND TIP_PROCESSO = 'R'
           AND PER_PROCESSO = PAR_PER_PRO
           AND COD_IDE_CLI = ANT_IDE_CLI
           AND COD_BENEFICIO = ANT_COD_BENEFICIO;
      exception
        when others then

          rfol.val_sal_base := 0;

      end;

    ELSE
      begin
        rfol.val_sal_base := V_SAL_BASE(ANT_COD_BENEFICIO) (1);
      exception
        when no_data_found then
          p_sub_proc_erro := 'SP_INCLUI_BENEFICIO_ARRAY';
          p_coderro       := SQLCODE;
          P_MSGERRO       := 'Erro ao obter o valor do salario base';
          INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                p_coderro,
                                'Calcula Folha',
                                sysdate,
                                p_msgerro,
                                p_sub_proc_erro,
                                BEN_IDE_CLI,
                                COM_COD_FCRUBRICA);

          --       RAISE ERRO;
          VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;

      end;
    END IF;

    rfol.ded_ir_oj          := 0; --V_DED_IR_OJ;
    rfol.ded_ir_doenca      := V_DED_IR_DOENCA;
    rfol.ded_ir_pa          := V_DED_IR_PA;
    rfol.flg_pag            := 'S';
    rfol.flg_ind_pago       := 'N';
    rfol.flg_ind_ultimo_pag := 'N';
    rfol.tot_cred_pag       := 0;
    rfol.tot_deb_pag        := 0;
    rfol.val_liquido_pag    := 0;
    rfol.per_rateio         :=VI_PERCENTUAL_RATEIO_ANT;
    rfol.dat_ingresso       :=sysdate;
    rfol.flg_pag            :=ANT_FLG_STATUS;
    rfol.cod_dissociacao    :=ANT_BEN_DISSOCIACAO;
    -- TT48091 -- DISSOCIAR TAMBEM QUANDO HA MAIS DE UM BENEFÍCIO DE PENSAO PARA O MESMO IDE_CLI_BEN
    -- LJUNIOR EM 18/07/2018
    --rfol.cod_ben_dissociacao :=ANT_COD_BEN_DISSOCIACAO;
    rfol.ind_processo := 'S';
    rfol.val_base_redutor:=null;
    vfolha(idx_folha) := rfol;

      --- Carrega Dados do Beneficiario para 13
    R_Beneficiario.cod_beneficio  :=ANT_COD_BENEFICIO;
    R_Beneficiario.cod_ide_cli_ben:=ANT_IDE_CLI;
    R_Beneficiario.DAT_INI_BEN    := ANT_DAT_INI_BEN;--   := BEN_DAT_INICIO;BEN_DAT_INICIO;
    T_Beneficiario.extend;
    T_Beneficiario(idx_folha):=R_Beneficiario;


  END SP_INCLUI_BENEFICIO_ARRAY;
  ---------------------------------------------------------------------------------
  PROCEDURE SP_CARREGA_FORMULA AS

    vi_num_formula  number;
    c_elem          curform;
    c_cond          curform;
    c_dcond         curform;
    vi_cod_elemento varchar2(30);
    vi_tip_elemento varchar2(10);
    vi_num_funcao   number;
    vi_variavel     varchar2(30);
    i               number;

    XX             VARCHAR(5);

      ------ Variavel de Apoio Variavel de Rateio Beneficio ----
    ------------------06-09-2017------------------------------
     APLICAR_RATEIO_BENEFICIO_WORK BOOLEAN;
    ----------------------------------------------------------

  BEGIN

    i               := 0;
    vi_sem_condicao := TRUE;
    cod_elemento.delete;
    tip_elemento.delete;
    val_elemento.delete;
    vas_elemento.delete;
    num_funcao.delete;

    ------ Variavel de Apoio Variavel de Rateio Beneficio ----
    ------------------06-09-2017------------------------------
     APLICAR_RATEIO_BENEFICIO_WORK :=APLICAR_RATEIO_BENEFICIO;
    ----------------------------------------------------------

    -- obtem formula
    -- Valida condicao
    OPEN c_cond for
      SELECT distinct CF.COD_FORMULA
        FROM TB_CONDICAO_FORMULA CF
       WHERE CF.COD_INS = PAR_COD_INS
         AND CF.COD_FCRUBRICA = COM_COD_FCRUBRICA
         AND CF.COD_ENTIDADE = COM_COD_ENTIDADE
         AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
             to_char(CF.DAT_INI_VIG, 'YYYYMM') and
             to_char(PAR_PER_PRO, 'YYYYMM') <=
             to_char(nvl(CF.DAT_FIM_VIG,
                          to_date('01/01/2045', 'dd/mm/yyyy')),
                      'YYYYMM'));

    FETCH c_cond
      INTO VI_NUM_FORMULA;

    lim_funcao := 0;

    IF C_COND%FOUND THEN
      vi_sem_condicao := FALSE;
      WHILE C_COND%FOUND LOOP
        OPEN c_dcond FOR
          SELECT DC.COD_ELEMENTO,
                 DC.TIP_ELEMENTO,
                 fv.num_funcao,
                 fv.cod_variavel
            FROM TB_DCONDICAO_FORMULA DC, TB_VARIAVEIS FV
           WHERE DC.COD_INS = PAR_COD_INS
             AND DC.COD_FCRUBRICA = COM_COD_FCRUBRICA
             AND DC.COD_FORMULA = vi_num_formula
             AND DC.COD_ENTIDADE = COM_ENTIDADE
             AND FV.COD_VARIAVEL(+) = DC.COD_ELEMENTO
             AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
                 to_char(DC.DAT_INI_VIG, 'YYYYMM') and
                 to_char(PAR_PER_PRO, 'YYYYMM') <=
                 to_char(nvl(DC.DAT_FIM_VIG,
                              to_date('01/01/2045', 'dd/mm/yyyy')),
                          'YYYYMM'))
           ORDER BY DC.NUM_CONDICAO, DC.NUM_SEQ_COND;

        FETCH C_DCOND
          INTO VI_COD_ELEMENTO, VI_TIP_ELEMENTO, VI_NUM_FUNCAO, VI_VARIAVEL;
        WHILE C_DCOND%FOUND LOOP
          i := i + 1;
          cod_elemento.extend(1);
          tip_elemento.extend(1);
          val_elemento.extend(1);
          vas_elemento.extend(1);
          num_funcao.extend(1);
          cod_elemento(i) := vi_cod_elemento;
          tip_elemento(i) := vi_tip_elemento;

          IF vi_tip_elemento = 'VAR' THEN
            vas_elemento(i) := sp_obtem_valor_var(vi_num_funcao,
                                                  vi_variavel,
                                                  1);
          ELSIF vi_tip_elemento = 'VAL' THEN
            vas_elemento(i) := vi_cod_elemento;
          ELSIF vi_tip_elemento = 'STR' THEN
            vas_elemento(i) := vi_cod_elemento;
          ELSE
            val_elemento(i) := 0;
            vas_elemento(i) := NULL;
          END IF;
          FETCH C_DCOND
            INTO VI_COD_ELEMENTO, VI_TIP_ELEMENTO, VI_NUM_FUNCAO, VI_VARIAVEL;
        END LOOP;
        CLOSE C_DCOND;
        lim_funcao  := i;
        vi_condicao := SP_VALIDA_CONDICAO;
        IF vi_condicao THEN
          EXIT;
        END IF;
        FETCH C_COND
          INTO VI_NUM_FORMULA;
        i := 0;
        --      vi_sem_condicao:=FALSE;
        cod_elemento.delete;
        tip_elemento.delete;
        val_elemento.delete;
        vas_elemento.delete;
        num_funcao.delete;
      END LOOP;
      CLOSE C_COND;
    ELSE
      BEGIN
        -- Formula
        SELECT FF.COD_FORMULA
          INTO vi_num_formula
          FROM TB_FORMULA FF
         WHERE FF.COD_INS = PAR_COD_INS
           AND FF.COD_FCRUBRICA = COM_COD_FCRUBRICA
           AND FF.SEQ_VIG_FC = COM_SEQ_VIG_FC
           AND FF.COD_ENTIDADE = COM_ENTIDADE
           AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
               to_char(FF.DAT_INI_VIG, 'YYYYMM') and
               to_char(PAR_PER_PRO, 'YYYYMM') <=
               to_char(nvl(FF.DAT_FIM_VIG,
                            to_date('01/01/2045', 'dd/mm/yyyy')),
                        'YYYYMM'));

      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          vi_num_formula := 0;
        WHEN OTHERS THEN
          p_sub_proc_erro := 'SP_CARREGA_FORMULA';
          p_coderro       := SQLCODE;
          P_MSGERRO       := 'Erro ao obter o numero da Formula';
          INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                p_coderro,
                                'Calcula Folha',
                                sysdate,
                                p_msgerro,
                                p_sub_proc_erro,
                                BEN_IDE_CLI,
                                COM_COD_FCRUBRICA);

          --       RAISE ERRO;
          VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
      END;

    END IF;
    cod_elemento.delete;
    tip_elemento.delete;
    val_elemento.delete;
    vas_elemento.delete;
    num_funcao.delete;
    idx_elemento := 0;
    IF vi_condicao or vi_sem_condicao THEN
      -- obtem elementos
      OPEN c_elem FOR
        SELECT FE.COD_ELEMENTO,
               FE.TIP_ELEMENTO,
               FV.NUM_FUNCAO,
               FV.COD_VARIAVEL
          FROM TB_ELEMENTOS FE, TB_VARIAVEIS FV
         WHERE FE.COD_INS = PAR_COD_INS
           AND FE.COD_FCRUBRICA = COM_COD_FCRUBRICA
           AND FE.COD_FORMULA = vi_num_formula
           AND FE.COD_ENTIDADE = COM_ENTIDADE
           AND FV.COD_VARIAVEL(+) = FE.COD_ELEMENTO
           AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
               to_char(FE.DAT_INI_VIG, 'YYYYMM') and
               to_char(PAR_PER_PRO, 'YYYYMM') <=
               to_char(nvl(FE.DAT_FIM_VIG,
                            to_date('01/01/2045', 'dd/mm/yyyy')),
                        'YYYYMM'))
         ORDER BY FE.NUM_SEQ_EXEC;

      IF C_ELEM%ISOPEN THEN
        FETCH C_ELEM
          INTO VI_COD_ELEMENTO, VI_TIP_ELEMENTO, VI_NUM_FUNCAO, VI_VARIAVEL;
      END IF;
      i := 0;
      WHILE C_ELEM%FOUND LOOP
        i := i + 1;
        cod_elemento.EXTEND(1);
        tip_elemento.extend(1);
        val_elemento.extend(1);
        vas_elemento.extend(1);
        num_funcao.extend(1);

        cod_elemento(i) := vi_cod_elemento;
        tip_elemento(i) := vi_tip_elemento;

        IF vi_tip_elemento = 'VAR' THEN
          vas_elemento(i) := sp_obtem_valor_var(vi_num_funcao,
                                                vi_variavel,
                                                2);
        ELSIF vi_tip_elemento = 'VAL' THEN
          vas_elemento(i) := vi_cod_elemento;
          IF vi_cod_elemento < '100' THEN
            idx_elemento := i;
          END IF;
        ELSE
          vas_elemento(i) := NULL;
        END IF;
        FETCH C_ELEM
          INTO VI_COD_ELEMENTO, VI_TIP_ELEMENTO, VI_NUM_FUNCAO, VI_VARIAVEL;
      END LOOP;
      lim_funcao := i;
      CLOSE c_elem;
    END IF;

    ------ Variavel de Apoio Variavel de Rateio Beneficio ----
    ------------------06-09-2017------------------------------
     APLICAR_RATEIO_BENEFICIO:=APLICAR_RATEIO_BENEFICIO_WORK;
    ----------------------------------------------------------


 END SP_CARREGA_FORMULA;

  --------------------------------------------------------------------------------
  FUNCTION SP_OBTEM_VALOR_VAR(i_num_funcao   in number,
                              i_cod_variavel in varchar2,
                              i_ordem        in number) return varchar2 IS
 --------------- Desenvolvimento Task 3689  --------------
    o_valor          number(18, 6) := 0;  --- 18.6
  --------------- Desenvolvimento Task 3689  --------------
    o_str            varchar2(30) := null;
    vi_valor         number(18, 5);
    o_valor_13       number(18, 4) := 0;
    cont_ben         number := 0;
    cod_ref          number(8) := 0;
    v_val_base_liqui number(18, 4) := 0;
    o_data           date := null;
    o_padrao         varchar2(15) := null;
    v_referencia     number := 0;

   -- Variavel de apoio func?o 539
    COM_COD_TRAMITE VARCHAR2(10);
  BEGIN

    o_str    := null;
    vi_valor := 0;
    Global_num_funcao             :=i_num_funcao;
  BEGIN
    IF i_num_funcao = 3 THEN
      -- Descricao Categoria
      IF NOM_CATEGORIA is null then
        SP_OBTEM_CATEGORIA(O_STR);
      END IF;
      o_str := '''' || NOM_CATEGORIA || '''';
    ELSIF i_num_funcao = 4 THEN
      -- Descricao Sub Categoria
      IF NOM_SUBCATEGORIA is null then
        SP_OBTEM_SUBCATEGORIA(O_STR);
      END IF;
      o_str := '''' || NOM_SUBCATEGORIA || '''';
    ELSIF i_num_funcao = 5 THEN
      -- Proporcionalidade Jornada
      SP_OBTEM_PROPORCAO_JORNADA(i_num_funcao, o_valor);
    ELSIF i_num_funcao = 6 THEN
      --SALARIO DO CARGO
      o_valor := SP_OBTEM_SALARIO_BASE_CARGO(ben_cod_referencia);
      --           o_valor := round(o_valor * PAR_PERCENT_CORRECAO,2);
      v_sal_base(com_cod_beneficio)(1) := o_valor;
    ELSIF i_num_FUNCAO in (38, 8, 1, 2, 114) THEN
      -- Descricao, Opcao cargo, Regime juridico, Tipo Vinculo
      IF NOM_TIPO_PROVIMENTO is null OR NOM_REGIME_JUR is null OR
         NOM_VINCULO is null THEN
        SP_OBTEM_RELACAO_FUNCIONAL(i_num_funcao, o_str, o_valor);
      END IF;
      IF i_num_FUNCAO = 8 or i_num_FUNCAO = 38 then
        o_str := '''' || NOM_TIPO_PROVIMENTO || '''';
        --      sp_Obtem_prov_cc_fg(o_str);
      ELSIF i_num_FUNCAO = 1 then
        o_str := '''' || NOM_REGIME_JUR || '''';
      ELSE
        -- funcao 2
        o_str := '''' || NOM_VINCULO || '''';
      END IF;
      IF i_num_funcao = 114 THEN
        o_str := '''' || COM_COD_SIT_PREV || '''';
      END IF;
    ELSIF i_num_FUNCAO in (7, 12) THEN
      SP_OBTEM_VENC_CCOMI_GRATIF(i_num_funcao, o_valor);
      --           o_valor := round(o_valor * PAR_PERCENT_CORRECAO,2);
      v_sal_base(com_cod_beneficio)(1) := o_valor;
    ELSIF i_num_FUNCAO = 09 THEN
      -- Percentual Representacao por Graduacao
      SP_CALCULA_PORC_GRADUACAO(o_valor);
    ELSIF i_num_funcao = 10 THEN
      --COMPOSICAO DE RUBRICAS
      sp_composicao(COM_COD_FCRUBRICA,
                    i_cod_variavel,
                    COM_COD_BENEFICIO,
                    COM_ENTIDADE,
                    'N',
                    o_valor);
    ELSIF i_num_funcao in (11,516) THEN
      -- Valor Referencia Representac?o
      o_valor := SP_OBTEM_SALARIO_REFER_REP;
    ELSIF i_num_funcao = 13 THEN
      --COMPLEMENTO SALARIO MINIMO
      /*           IF COM_TIPO_APLICACAO = 'I' THEN
                    HOUVE_RATEIO := FALSE;
                    o_valor:=V_VAL_SAL_MIN;
                 ELSIF  APLICAR_ENTRADA OR
                        VI_TEM_SAIDA and
                        i_ordem = 2 THEN
                        IF  COM_TIP_BENEFICIO = 'APOSENTADO' THEN
                            o_valor:=V_VAL_SAL_MIN * (V_QTD_DIAS / V_DIAS_MES)*VI_PROP_BEN;
                        else
                            o_valor:=V_VAL_SAL_MIN * (V_QTD_DIAS / V_DIAS_MES)*VI_PROP_BEN*VI_PROP_SAIDA;
                        end if;
                 ELSIF  APLICAR_RATEIO_BENEFICIO = TRUE THEN
                       o_valor := V_VAL_SAL_MIN * VI_PROP_BEN;
                       o_valor:=(o_valor*VI_PROP_BEN*VI_PROP_SAIDA);
      --                 SP_RATEIO_BENEFICIO(COM_COD_BENEFICIO, BEN_IDE_CLI, o_valor, o_valor, VI_PERCENTUAL_RATEIO); -- salario base com rateio
                       IF i_ordem = 2 THEN
                          APLICAR_RATEIO_BENEFICIO := FALSE;
                       END IF;
                  ELSE */
      o_valor := V_VAL_SAL_MIN;
      --           END IF;
    ELSIF i_num_FUNCAO = 14 THEN
      -- Percentual de Graduac?o
      SP_OBTEM_PERCENTUAL_CARGO(o_valor);
      --- JTS --ISENTA DE ADIANTAMENTO
    ELSIF i_num_FUNCAO in (15, 29, 33, 34, 35, 36, 37, 70, 78, 414) THEN
      -- Tipos Atributos
      SP_OBTEM_TIPOS_ATRIBUTOS(i_num_funcao,
                               replace(com_matricula, '-', ''),
                               com_entidade,
                               com_cargo,
                               o_str); --FFranco 21/11/2006
      if i_num_funcao = 37 then
        if o_str = 'S' then
          SP_OBTEM_PARVAL_FOLHA2('TASCO', 2000, 'DESC_CONTR', o_valor);
          if o_valor is null then
            o_valor := 0;
          end if;
        else
          o_valor := 0;
        end if;
      end if;
      o_str := '''' || o_str || '''';
    ELSIF i_num_FUNCAO = 16 THEN
      -- Tipos Vencimento
      SP_OBTEM_IND_DJ(o_str);
      o_str := '''' || o_str || '''';
    ELSIF i_num_FUNCAO = 17 THEN
      -- Qtd. Horas
      SP_OBTEM_QTD_HORAS(i_num_funcao, O_VALOR);
    ELSIF i_num_FUNCAO = 18 THEN
      -- Parametro UPF
      SP_OBTEM_PARVAL_FOLHA2('UPF', 1000, i_cod_variavel, o_valor);
    ELSIF i_num_FUNCAO = 19 THEN
      -- Tipo aposentadoria
      IF COM_PERCENT_BEN = 100 THEN
        o_str := 'INTEGRAL';
      ELSE
        o_str := 'PROPORCIONAL';
      END IF;
      o_str := '''' || o_str || '''';
    ELSIF i_num_FUNCAO = 20 THEN
      SP_OBTEM_PARVAL_FOLHA2('REFER', 1000, i_cod_variavel, o_valor);
      cod_ref := o_valor;
      SP_OBTEM_VENCIMENTO(COD_REF, O_VALOR);
    ELSIF i_num_FUNCAO = 21 THEN
      --Composic?o Percentual
      o_valor := NVL(COM_VAL_PORC_IND,0);--- 06-04-21016 Incluido NVL0
    ELSIF i_num_FUNCAO = 22 THEN
      --Composic?o Beneficio
      o_valor := COM_VAL_PORC2;
    ELSIF i_num_FUNCAO = 23 THEN
      SP_OBTEM_RELGRUPO(o_valor);
    ELSIF i_num_FUNCAO = 24 THEN
      -- Limite Redu. Const
      SP_OBTEM_PARVAL_FOLHA2('REDUT', 2000, i_cod_variavel, o_valor);
      VI_REDUC := o_valor;
    ELSIF i_num_FUNCAO = 25 THEN
      -- Obtem Tab Vencimento
      SP_OBTEM_ORIG_TAB_VENC(o_str);
      o_str := '''' || o_str || '''';
    ELSIF i_num_FUNCAO = 26 THEN
      -- Salario Familia
      SP_OBTEM_PARVAL_FOLHA2('SALFAMIL', 1000, i_cod_variavel, o_valor);
    ELSIF i_num_FUNCAO = 27 THEN
      -- Composicao Individual
      SP_OBTEM_PARVAL_FOLHA2('CONSIG', 1000, i_cod_variavel, o_valor);
      FOR i IN 1 .. nom_variavel.count LOOP

        IF nom_variavel(i) = COM_COL_INFORMACAO THEN
          val_variavel(i) := o_valor;
          v_val_percentual := o_valor;
          exit;
        END IF;

      END LOOP;
    ELSIF i_num_FUNCAO = 28 THEN
      -- Valor Individual das composicoes
      o_valor := COM_VAL_UNID;
    ELSIF i_num_funcao = 31 THEN
      --Composicao Individual - Valor Fixo
      o_valor := COM_VAL_FIXO_IND;
      IF COM_NAT_COMP <> 'C' THEN
        APLICAR_PROP_SAIDA := TRUE;
      ELSE
        APLICAR_PROP_SAIDA := FALSE;
      END IF;
      --           o_valor := round(o_valor * PAR_PERCENT_CORRECAO , 2);
      v_sal_base(com_cod_beneficio)(1) := o_valor;
    ELSIF i_num_FUNCAO = 32 THEN
      SP_OBTEM_PARVAL_FOLHA2('', 1000, COM_VAL_STR2, o_valor);
    ELSIF i_num_FUNCAO = 39 THEN
      SP_OBTEM_NOME_CARGO(o_str);
    ELSIF i_num_FUNCAO = 40 THEN
      SP_OBTEM_PARVAL_FOLHA2('PROCUR', 1000, i_cod_variavel, o_valor);
    ELSIF i_num_FUNCAO = 41 THEN
      --Composicao Individual - Unidade
      o_valor := COM_QTY_UNID_IND;
    ELSIF i_num_FUNCAO = 42 THEN
      --Composicao Pensao
      SP_OBTEM_SOMA_PENSAO(o_valor);
      o_valor := o_valor * -1; -- obter o valor positivo para gravar o valor da rubrica correto
    ELSIF i_num_FUNCAO = 43 THEN
      --Composicao Sal. Familia
      SP_OBTEM_SOMA_SALFA(o_valor);
    ELSIF i_num_FUNCAO = 44 THEN
      --Composicao Vencimento
      SP_OBTEM_SOMA_VENCIMENTO(com_cod_beneficio,
                               com_cod_entidade,
                               'N',
                               o_valor);
    ELSIF i_num_FUNCAO = 45 THEN
      -- Obtem cod grupo abono cargo
      SP_OBTEM_CODGRUPO_ABONO(o_valor);
      V_COD_GRUPO_45 := o_valor;
    ELSIF i_num_FUNCAO = 46 THEN
      -- Obtem valor do abono
      SP_OBTEM_VALOR_ABONO(o_valor);
    ELSIF i_num_FUNCAO = 47 THEN
      -- Obtem tipo do abono
      SP_OBTEM_TIPO_ABONO(o_str);
      o_str := '''' || o_str || '''';
    ELSIF i_num_funcao = 48 THEN
      -- Categoria Opcao
      SP_OBTEM_CATEGORIA_OPCAO(O_STR);
      o_str := '''' || o_str || '''';
    ELSIF i_num_funcao = 49 THEN
      -- Percentual do Beneficio
      o_valor := COM_PERCENT_BEN;
    ELSIF i_num_FUNCAO = 50 THEN
      -- Percentual Representacao por Graduacao Evolucao funcional
      SP_CALC_PORC_GRADUACAO_EVOLU(o_valor);
    ELSIF i_num_FUNCAO = 51 THEN
      o_str := COM_VAL_STR1;
      o_str := '''' || o_str || '''';
    ELSIF i_num_FUNCAO = 53 THEN
      SP_OBTEM_PARVAL_FOLHA2('ETAPA', 1000, i_cod_variavel, o_valor);
    ELSIF i_num_funcao = 54 THEN
      -- obtem_gratificacao_escolar
      null;
    ELSIF i_num_FUNCAO = 55 THEN
      -- Base IR
      SP_OBTEM_BASE_IR(IDX_CALN,'N', o_valor, o_valor_13);
      IF PAR_TIP_PRO = 'T' THEN
        o_valor := o_valor_13;
      END IF;
    ELSIF i_num_FUNCAO = 56 THEN
      -- Percentual IR
      SP_OBTEM_BASE_IR(IDX_CALN,'N',o_valor, o_valor_13);
      IF PAR_TIP_PRO = 'T' THEN
        o_valor := o_valor_13;
      END IF;
      v_val_base_liqui := nvl(o_valor, 0);
      SP_OBTEM_DEDUCOES(ben_ide_cli, o_valor);
      v_val_base_liqui := v_val_base_liqui - nvl(o_valor, 0);
      SP_OBTEM_PERCEN_CALC_IR(ben_ide_cli,v_val_base_liqui, o_valor, o_valor_13);
      o_valor := o_valor / 100;
    ELSIF i_num_FUNCAO = 57 THEN
      -- Deducoes IR
      SP_OBTEM_DEDUCOES(ben_ide_cli, o_valor);
    ELSIF i_num_FUNCAO = 58 THEN
      -- Retorna Redutor IR
      SP_OBTEM_BASE_IR(IDX_CALN,'N', o_valor, o_valor_13);
      IF PAR_TIP_PRO = 'T' THEN
        o_valor := o_valor_13;
      END IF;
      v_val_base_liqui := nvl(o_valor, 0);
      SP_OBTEM_DEDUCOES(ben_ide_cli, o_valor);
      v_val_base_liqui := v_val_base_liqui - nvl(o_valor, 0);
      SP_OBTEM_PERCEN_CALC_IR(ben_ide_cli,v_val_base_liqui, o_valor_13, o_valor);
    ELSIF i_num_funcao = 59 THEN
      --CONTRIBUIC?O PREV BASE
      SP_OBTEM_PARVAL_FOLHA2('TASCO', 2000, i_cod_variavel, o_valor);
    ELSIF i_num_funcao = 60 THEN
      -- Complemento Salario Fmilia Faixa1
      SP_OBTEM_PARVAL_FOLHA2('SALFA', 2000, i_cod_variavel, o_valor);
    ELSIF i_num_funcao = 61 THEN
      --
      SP_OBTEM_PARVAL_FOLHA2('VMAR', 1000, i_cod_variavel, o_valor);
    ELSIF i_num_funcao = 62 THEN
      -- Numero de dependentes CIVIL
      SP_OBTEM_PARVAL_FOLHA2('SALFA', 2000, i_cod_variavel, VI_IDADE);
      SP_OBTEM_QTD_DEPENDENTES(BEN_IDE_CLI, o_valor);
    ELSIF i_num_funcao = 63 THEN
      -- Numero de dependentes MILITAR
      SP_OBTEM_QTD_DEPENDENTES_MIL(BEN_IDE_CLI, o_valor);
    ELSIF i_num_funcao = 65 THEN
      -- Valor Referencia Representac?o
      o_valor := SP_OBTEM_SALARIO_REFERENCIA;
    ELSIF i_num_FUNCAO = 66 THEN
      SP_OBTEM_VENC_CCOMI_GRATIF_REP(i_num_funcao, o_valor);
      --           o_valor := round(o_valor * PAR_PERCENT_CORRECAO , 2);
      v_sal_base(com_cod_beneficio)(1) := o_valor;
    ELSIF i_num_FUNCAO = 67 THEN
      SP_OBTEM_ORIG_TAB_VENC_CCOMI(o_str);
      o_str := '''' || o_str || '''';
    ELSIF i_num_FUNCAO = 68 THEN
      SP_OBTEM_VENC_CCOMI_GRATIF_RF(i_num_funcao, o_valor); --RAO: 20060115
      --           SP_OBTEM_VENC_CCOMI_GRATIF_REP( i_num_funcao, o_valor );
      --           o_valor := round(o_valor * PAR_PERCENT_CORRECAO , 2);
      v_sal_base(com_cod_beneficio)(1) := o_valor;
    ELSIF i_num_FUNCAO = 69 THEN
      o_valor := COM_VAL_FIXO_IND;
      --           o_valor := round(o_valor * PAR_PERCENT_CORRECAO , 2);
      v_sal_base(com_cod_beneficio)(1) := o_valor;
    ELSIF i_num_funcao = 71 THEN
      -- Salario Esposa
      SP_OBTEM_PARVAL_FOLHA2('SALESP', 1000, i_cod_variavel, o_valor);
    ELSIF i_num_funcao = 72 THEN
      -- CODIGO DE REFERENCIA DO VENCIMENTO -- FFRANCO 07/12/2006
      SP_OBTEM_COD_REFERENCIA(o_str);
      o_str := '''' || o_str || '''';
    ELSIF i_num_funcao = 73 THEN
      -- Piso Min. Operacional -- FFRANCO 06/02/2007
      SP_OBTEM_PARVAL_FOLHA2('PISO_MINIMO_OPER',
                             1000,
                             i_cod_variavel,
                             o_valor);
    ELSIF i_num_funcao = 74 THEN
      -- Piso Min. Medio -- FFRANCO 06/02/2007
      SP_OBTEM_PARVAL_FOLHA2('PISO_MINIMO_MEDIO',
                             1000,
                             i_cod_variavel,
                             o_valor);
    ELSIF i_num_funcao = 75 THEN
      -- limite regime geral -- FFRANCO 03/2007
      SP_OBTEM_LIMITE_REGIME_GERAL(V_DAT_OBITO);
      SP_OBTEM_PARVAL_FOLHA3('LIMREGER', 1000, I_cod_variavel, o_data);
      if V_DAT_OBITO >= o_data then
        SP_OBTEM_PARVAL_FOLHA2('LIMREGER', 1000, I_cod_variavel, o_valor);
      else
        o_valor := 0;
      end if;
    ELSIF i_num_funcao = 76 THEN
      -- Teto Ministro Supremo -- FFRANCO 03/2007
      SP_OBTEM_PARVAL_FOLHA2('TETO_MIN', 1000, i_cod_variavel, o_valor);
    ELSIF i_num_funcao = 77 THEN
      -- Teto Prefeito -- FFRANCO 03/2007
      SP_OBTEM_PARVAL_FOLHA2('TETO_PREF', 1000, i_cod_variavel, o_valor);
    ELSIF i_num_funcao = 79 THEN
      --Vantagens excludentes base do Teto ---> ffranco 03/2007
      sp_composicao_teto(COM_COD_FCRUBRICA, i_cod_variavel, o_valor);
    ELSIF i_num_FUNCAO = 80 THEN
      -- % reajuste ordem judicial --->> FFRANCO 03/2007
      v_cod_beneficio_oj := 0;
      SP_OBTEM_ENQUADRAMENTO(3, v_cod_ref_oj, v_cod_beneficio_oj, o_valor);
      if v_cod_beneficio_oj <> com_cod_beneficio then
        o_valor := 0;
      end if;
    ELSIF i_num_FUNCAO = 81 THEN
      --Enquadramento - Codigo referencia ordem judicial  --->> FFRANCO 03/2007
      v_cod_ref_oj       := null;
      v_cod_beneficio_oj := 0;
      o_valor            := 0;
      SP_OBTEM_ENQUADRAMENTO(4, v_cod_ref_oj, v_cod_beneficio_oj, o_valor);
      if v_cod_ref_oj <> 0 and v_cod_beneficio_oj = com_cod_beneficio then
        o_valor := SP_OBTEM_SALARIO_BASE_CARGO_OJ;
        if PAR_IND_PROC_ENQUADRAMENTO = 1 then
          o_valor := o_valor * PAR_PERCENT_CORRECAO;
        end if;
        v_sal_base(com_cod_beneficio)(1) := o_valor;
      else
        o_valor := 0;
      end if;
    ELSIF i_num_FUNCAO = 82 THEN
      -- quantidade dias do beneficio no mes
      o_valor := SP_OBTEM_DIAS_BENEFICIO;
    ELSIF i_num_FUNCAO = 83 THEN
      -- quantidade dias no mes
      begin
        SELECT to_number(to_char(LAST_DAY(PAR_PER_PRO), 'DD'))
          INTO o_valor
          FROM dual;
      end;
    ELSIF i_num_FUNCAO = 84 THEN
      -- SUBSIDIO DEPUTADO ESTADUAL
      SP_OBTEM_PARVAL_FOLHA2('SUBDEPEST', 1000, I_cod_variavel, o_valor);
    ELSIF i_num_FUNCAO = 87 THEN
      SP_OBTEM_PARVAL_FOLHA2('', 1000, i_cod_variavel, o_valor);
    ELSIF i_num_FUNCAO = 88 THEN
      SP_OBTEM_PARVAL_FOLHA2('PERCDEC', 1000, i_cod_variavel, o_valor);
    ELSIF i_num_FUNCAO = 94 THEN
      -- Data do Obito efv
      SP_OBTEM_DATA_OBITO(com_cod_beneficio, v_date_obito_char);
      o_str := '''' || v_date_obito_char || '''';
    ELSIF i_num_FUNCAO = 95 THEN
      -- Valor do teto INSS efv
      SP_OBTEM_PARVAL_FOLHA2('TETOPM', 1000, I_cod_variavel, o_valor);
    ELSIF i_num_FUNCAO = 96 THEN
      -- Valor de adiantamento 13 efv
      o_valor := SP_OBTEM_ADIANTAMENTO_13;
    ELSIF i_num_FUNCAO = 97 THEN
      -- Valor de rateio do beneficio de pensao por morte (efv 20060823)
      o_valor := VI_PERCENTUAL_RATEIO;
      --           SP_RATEIO_BENEFICIO (com_cod_beneficio, BEN_IDE_CLI, 1, o_valor_13, o_valor);
    ELSIF i_num_FUNCAO = 98 THEN
      --IRRF
      SP_OBTEM_IRRF(ant_ide_cli, IDX_CALN, 'N', o_valor, o_valor_13);
    ELSIF i_num_funcao = 99 THEN
      o_str          := '''' || COM_TIP_BENEFICIO || '''';
      COM_NUM_FUNCAO := i_num_funcao;
    ELSIF i_num_funcao = 101 THEN
      IF vi_cod_ref_pad_venc is not null then
        o_str := vi_cod_ref_pad_venc;
      ELSE
        o_str := SP_OBTEM_PADRAO_VENCIMENTO;
      END IF;
      o_str := '''' || o_str || '''';
    ELSIF i_num_funcao = 102 THEN
      o_valor := SP_OBTEM_SALARIO_PADRAO_INI;
    ELSIF i_num_funcao = 103 THEN
      o_valor := COM_PCCS;
    ELSIF i_num_funcao = 104 THEN
      o_valor := COM_QUADRO;
    ELSIF i_num_funcao = 105 THEN
      o_str := SP_OBTEM_DESC_NIVEL;
      o_str := '''' || o_str || '''';
    ELSIF i_num_funcao = 106 THEN
      o_valor := VI_META_GLOBAL;
    ELSIF i_num_funcao = 107 THEN
      o_valor := COM_QTY_UNID_IND;
    ELSIF i_num_funcao = 108 THEN
      select DECODE(COM_QUADRO,
                    0,
                    'NAOOPTANTE',
                    1,
                    'NAOOPTANTE',
                    2,
                    'NAOOPTANTE',
                    3,
                    'NAOOPTANTE',
                    4,
                    'NAOOPTANTE',
                    5,
                    'NAOOPTANTE',
                    6,
                    'NAOOPTANTE',
                    7,
                    'NAOOPTANTE',
                    'OPTANTE')
        into o_str
        from dual;
      o_str := '''' || o_str || '''';
    ELSIF i_num_funcao = 109 THEN
      SP_OBTEM_DATA_OBITO_INV(com_cod_beneficio, v_date_obito_char);
      o_str := '''' || v_date_obito_char || '''';
    ELSIF i_num_funcao = 110 THEN
      SP_OBTEM_PARVAL_FOLHA2('VAL_0168', 1000, i_cod_variavel, o_valor);
    ELSIF i_num_funcao = 111 THEN
      SP_OBTEM_PARVAL_FOLHA2('VAL_0168A', 1000, i_cod_variavel, o_valor);
    ELSIF i_num_funcao = 112 THEN
      o_valor := SP_OBTEM_SALARIO_PADRAO_INI_A;
    ELSIF i_num_funcao = 113 THEN
      o_str := '''' || BEN_COD_TIPO_CALCULO || '''';
    ELSIF i_num_funcao = 115 THEN
      SP_OBTEM_PARVAL_FOLHA2('VAL_VH0', 1000, i_cod_variavel, o_valor);
    ELSIF i_num_funcao = 116 THEN
      o_valor := VI_PERCENTUAL_RATEIO * VI_PERC_PECUNIA;
    ELSIF i_num_funcao = 117 THEN
      o_padrao := substr(i_cod_variavel, 9, length(i_cod_variavel) - 9 + 1);
      sp_obtem_referencia(o_padrao, v_referencia);
      o_valor := SP_OBTEM_SALARIO_BASE_CARGO(v_referencia);
    ELSIF i_num_funcao = 118 THEN
      o_str := SP_OBTEM_DESC_PISO;
      o_str := '''' || o_str || '''';
    ELSIF i_num_funcao = 119 THEN
      o_valor := SP_OBTEM_SALARIO_BASE_CARGO(ben_cod_referencia); --ROD10
      v_sal_base(com_cod_beneficio)(1) := o_valor; --ROD10

      o_valor := COM_CARGO;
    ELSIF i_num_funcao = 120 THEN
      SP_OBTEM_VAL_JORN_PISO(o_valor);
    ELSIF i_num_funcao = 122 THEN
      SP_OBTEM_VENC_BASE_CCOMIG(i_num_funcao, o_valor);
    ELSIF i_num_funcao = 123 THEN
      o_valor := V_DIAS_MES;
    ELSIF i_num_funcao = 125 THEN
      o_valor := PAR_PERCENT_CORRECAO;
    ELSIF i_num_funcao = 126 THEN
      SP_OBTEM_PARVAL_FOLHA2('COT_1059', 1000, i_cod_variavel, o_valor);
      v_sal_base(com_cod_beneficio)(1) := o_valor;
    ELSIF i_num_funcao = 127 THEN
      SP_OBTEM_PARVAL_FOLHA2('COT_GEXE', 1000, i_cod_variavel, o_valor);
    ELSIF i_num_funcao = 128 THEN
      SP_OBTEM_PARVAL_FOLHA2('COT_GJUD', 1000, i_cod_variavel, o_valor);
    ELSIF i_num_funcao = 129 THEN
      SP_OBTEM_PARVAL_FOLHA2('COT_HADV', 1000, i_cod_variavel, o_valor);
    ELSIF i_num_funcao = 130 THEN
      SP_OBTEM_PARVAL_FOLHA2('VALOR_GEA', 1000, i_cod_variavel, o_valor);
    ELSIF i_num_funcao = 131 THEN
      SP_OBTEM_PARVAL_FOLHA2('VAL_GGER', 1000, i_cod_variavel, o_valor);
    ELSIF i_num_funcao in (132, 133, 134, 135, 136,137) THEN
      IF vi_cod_ref_pad_venc <> ' ' then
         o_str := SP_OBTEM_PADRAO_VENCIMENTO;
         if o_str is null then
          o_str := '0000000000000000000000000';
        end if;
      ELSE
        o_str := SP_OBTEM_PADRAO_VENCIMENTO;
        if o_str is null then
          o_str := '0000000000000000000000000';
        end if;
      END IF;
      IF i_num_funcao = 132 THEN
        o_valor := to_number(substr(vi_cod_ref_pad_venc, 10, 3));
      ELSIF i_num_funcao = 133 THEN
        o_valor := to_number(substr(vi_cod_ref_pad_venc, 21, 2));
      ELSIF i_num_funcao = 134 THEN
        o_valor := to_number(substr(vi_cod_ref_pad_venc, 24, 2));
      ELSIF i_num_funcao = 135 THEN
        BEGIN
            o_str := to_number(substr(vi_cod_ref_pad_venc, 16, 2));
        EXCEPTION
            when others then
            o_str :=  substr(vi_cod_ref_pad_venc, 16, 2);
            -- INCLUSAO TT30776 POR LJUNIOR EM 03/03/2017
            -- A INFORMACAO REF/FAIXA PODE SER UM CAMPO STRING POR ISSO PRECISA DA ASPAS
            o_str := '''' || o_str || '''';
        END;

      ELSIF i_num_funcao = 136 THEN
        o_str := substr(vi_cod_ref_pad_venc, 19, 1);
        o_str := '''' || o_str || '''';
       ELSIF i_num_funcao = 137 THEN
         SP_OBTEM_PARVAL_FOLHA2('VAL_PISO_F', 1000, i_cod_variavel, o_valor);
      END IF;
    ELSIF i_num_funcao = 201 THEN
      o_str := SP_OBTEM_PODER(com_cod_entidade);
      --o_str := SP_OBTEM_PODER;                      --ROD8
      o_str := '''' || o_str || '''';
    ELSIF i_num_funcao = 202 THEN
      o_valor := COM_COD_JORNADA;
    ELSIF i_num_funcao = 203 THEN
      -- FFRANCO - 01052009
      o_valor := VI_VAL_APIPREM;
    ELSIF i_num_funcao = 210 THEN
      --          o_str := BEN_FLG_OPCAO_13;
      o_str := '''' || o_str || '''';
    ELSIF i_num_funcao = 211 THEN
      o_str := to_char(BEN_DTA_NASC, 'MM');
      o_str := '''' || o_str || '''';
    ELSIF i_num_funcao = 212 THEN
      o_str := to_char(add_months(PAR_PER_PRO, 1), 'MM');
      o_str := '''' || o_str || '''';
    ELSIF i_num_funcao = 213 THEN
      o_str := BEN_FLG_OPCAO_IAMSP;
      o_str := '''' || o_str || '''';
    ELSIF i_num_funcao = 214 THEN
      SP_VERIFICA_ORDEM_JUDICIAL(i_num_funcao, o_valor); -- verifica ordem judicial para correc?o no calculo
    ELSIF i_num_funcao = 215 THEN
      --pega valor de salario minimo insalubridade
      o_valor := V_VAL_SAL_MIN_2;
    ELSIF i_num_funcao = 301 THEN
      SP_OBTEM_PARVAL_FOLHA2('VAL_5709', 1000, i_cod_variavel, o_valor);
    ELSIF i_num_funcao = 302 THEN
      SP_OBTEM_PARVAL_FOLHA2('VAL_5001', 1000, i_cod_variavel, o_valor);
    ELSIF i_num_funcao = 303 THEN
      SP_OBTEM_PARVAL_FOLHA2('COT_4817', 1000, i_cod_variavel, o_valor);
    ELSIF i_num_funcao = 304 THEN
      SP_OBTEM_PARVAL_FOLHA2('COT_4088', 1000, i_cod_variavel, o_valor);
    ELSIF i_num_funcao = 306 THEN
      SP_OBTEM_PARVAL_FOLHA2('UBV', 1000, i_cod_variavel, o_valor);
    ELSIF i_num_funcao = 307 THEN
      SP_OBTEM_PARVAL_FOLHA2('RF_CETPS', 1000, i_cod_variavel, o_valor);
    ELSIF i_num_funcao = 308 THEN
      SP_OBTEM_PARVAL_FOLHA2('VAL_5710', 1000, i_cod_variavel, o_valor);

    ELSIF i_num_funcao = 312 THEN
      SP_OBTEM_PARVAL_FOLHA2('6407_6A', 1000, i_cod_variavel, o_valor);
    ELSIF i_num_funcao = 313 THEN
      SP_OBTEM_PARVAL_FOLHA2('6407_6B', 1000, i_cod_variavel, o_valor);
    ELSIF i_num_funcao = 314 THEN
      SP_OBTEM_PARVAL_FOLHA2('6407_6C', 1000, i_cod_variavel, o_valor);
    ELSIF i_num_funcao = 315 THEN
      SP_OBTEM_PARVAL_FOLHA2('6407_6D', 1000, i_cod_variavel, o_valor);
    ELSIF i_num_funcao = 316 THEN
      SP_OBTEM_PARVAL_FOLHA2('6407_6E', 1000, i_cod_variavel, o_valor);
    ELSIF i_num_funcao = 317 THEN
      SP_OBTEM_PARVAL_FOLHA2('6409_3A', 1000, i_cod_variavel, o_valor);
    ELSIF i_num_funcao = 318 THEN
      SP_OBTEM_PARVAL_FOLHA2('6409_3B', 1000, i_cod_variavel, o_valor);
    ELSIF i_num_funcao = 319 THEN
      SP_OBTEM_PARVAL_FOLHA2('6409_3C', 1000, i_cod_variavel, o_valor);
    ELSIF i_num_funcao = 320 THEN
      SP_OBTEM_PARVAL_FOLHA2('6409_3D', 1000, i_cod_variavel, o_valor);
    ELSIF i_num_funcao = 321 THEN
      SP_OBTEM_PARVAL_FOLHA2('6409_3E', 1000, i_cod_variavel, o_valor);
    ELSIF i_num_funcao = 322 THEN
      SP_OBTEM_PARVAL_FOLHA2('6409_6A', 1000, i_cod_variavel, o_valor);
    ELSIF i_num_funcao = 323 THEN
      SP_OBTEM_PARVAL_FOLHA2('6409_6B', 1000, i_cod_variavel, o_valor);
    ELSIF i_num_funcao = 324 THEN
      SP_OBTEM_PARVAL_FOLHA2('6409_6C', 1000, i_cod_variavel, o_valor);
    ELSIF i_num_funcao = 325 THEN
      SP_OBTEM_PARVAL_FOLHA2('6409_6D', 1000, i_cod_variavel, o_valor);
    ELSIF i_num_funcao = 326 THEN
      SP_OBTEM_PARVAL_FOLHA2('6409_6E', 1000, i_cod_variavel, o_valor);
    ELSIF i_num_funcao = 327 THEN
      SP_OBTEM_PARVAL_FOLHA2('6407_3A', 1000, i_cod_variavel, o_valor);
    ELSIF i_num_funcao = 328 THEN
      SP_OBTEM_PARVAL_FOLHA2('6407_3B', 1000, i_cod_variavel, o_valor);
    ELSIF i_num_funcao = 329 THEN
      SP_OBTEM_PARVAL_FOLHA2('6407_3C', 1000, i_cod_variavel, o_valor);
    ELSIF i_num_funcao = 330 THEN
      SP_OBTEM_PARVAL_FOLHA2('6407_3D', 1000, i_cod_variavel, o_valor);
    ELSIF i_num_funcao = 331 THEN
      SP_OBTEM_PARVAL_FOLHA2('6407_3E', 1000, i_cod_variavel, o_valor);
    ELSIF i_num_funcao = 332 THEN
      SP_OBTEM_PARVAL_FOLHA2('VLR_4830', 1000, i_cod_variavel, o_valor);
    ELSIF i_num_funcao = 401 THEN
      --PAULO MIRANDA
      SP_OBTEM_PARVAL_FOLHA2('NIVEL_PM', 1000, i_cod_variavel, o_valor);
   ELSIF i_num_funcao = 402 THEN
      sp_composicao(COM_COD_FCRUBRICA,
                    'BASE_IAMSP',
                    COM_COD_BENEFICIO,
                    COM_ENTIDADE,
                    'N',
                    o_valor);

    ELSIF i_num_funcao = 403 THEN
      o_str := to_char( PAR_PER_REAL , 'yyyy');
      o_str := '''' || o_str || '''';
    ELSIF i_num_funcao = 404 THEN
      o_str := to_char( PAR_PER_PRO , 'yyyy');
      o_str := '''' || o_str || '''';
    ELSIF i_num_funcao = 405 THEN
      o_valor := SP_OBTEM_SALARIO_BASE_CARGO(ben_cod_referencia); --JTS24
       o_valor:=NVL( o_valor ,0);
    ELSIF i_num_funcao = 406 THEN
      o_valor := SP_OBTEM_SALARIO_BASE_CARGO(COM_REFERENCIA_2); --JTS24
      o_valor:=NVL( o_valor ,0);
   ELSIF i_num_funcao = 407 THEN
      o_valor := SP_OBTEM_SALARIO_BASE_CARGO(COM_REFERENCIA_3); --JTS24
      o_valor:=NVL( o_valor ,0);
   ELSIF i_num_funcao = 408 THEN
      o_valor := nvl(COM_QTD_MES,0);
   ELSIF i_num_funcao = 409 THEN
       o_valor := nvl(COM_QTD_MES_2,0);
   ELSIF i_num_funcao = 410 THEN
      o_valor :=nvl(COM_QTD_MES_3,0);
   ELSIF i_num_funcao = 411 THEN
      o_str := to_char( PAR_PER_REAL , 'mm');
      o_str := '''' || o_str || '''';
   ELSIF i_num_funcao = 412 THEN
      o_str := to_char( PAR_PER_PRO , 'mm');
      o_str := '''' || o_str || '''';
  ELSIF i_num_FUNCAO = 413 THEN
      -- Deducoes IR JTS-23-07-2010
     SP_OBTEM_DEDUCOES_BASICAS(ben_ide_cli, o_valor);
  ELSIF  i_num_FUNCAO = 415 THEN
  -- Deducoes IR JTS-01-08-2010
          ---- o_valor:=VI_PROP_SAIDA;

   --- novo Calculo de proporcionalidade 18102010 JTS
       SP_OBTEM_FATOR_MES_PRO(BEN_DAT_INICIO ,o_valor );
 --------------------------------------------------------------
   ELSIF i_num_FUNCAO = 416 THEN
      -- Parametro UPF
      SP_OBTEM_PARVAL_FOLHA2('SAL_MIN_EST_SP', 1000, i_cod_variavel, o_valor);

   ELSIF i_num_FUNCAO = 418 THEN
      -- Parametro UPF
        o_valor:=COM_COD_CONVENIO;
   ELSIF i_num_FUNCAO = 419 THEN

        BEGIN
          SELECT  SUM(NVL(CC.PERC_PENS,0) )/100
           INTO O_VALOR
          FROM USER_IPESP.TB_CONCESSAO_BENEFICIO CC
          WHERE CC.COD_INS       = PAR_COD_INS
             AND CC.COD_BENEFICIO= COM_COD_BENEFICIO;
         -------------------
          EXCEPTION
            when  no_data_found then
                  O_VALOR:=0;
            when others then
                   O_VALOR:=0 ;

        END;
   -------------------NOVAS FUNC?ES ---------
  ELSIF i_num_FUNCAO = 500 THEN
       COM_CARGO_DIF_VENC    := COM_COD_CARGO_RUB  ;
       -- Modifica 16-09-2013
       COM_CONCEITO_DIF_VENC := COM_COD_CONCEITO ;
       COM_ENTIDADE_DIF_VENC := COM_ENTIDADE ;
       SP_OBTEM_BASE_133(COM_COD_CONCEITO   ,
                         COM_ENTIDADE      ,
                         COM_CARGO_DIF_VENC ,
                         O_VALOR
                         );

     ELSIF i_num_FUNCAO = 501 THEN
       COM_CARGO_DIF_VENC:= COM_COD_CARGO_RUB  ;
       SP_OBTEM_BASE_NORMAL133(COM_CARGO_DIF_VENC , O_VALOR );
    ELSIF i_num_FUNCAO = 502 THEN
        NULL;
        -------------------
        BEGIN
        select   B.VAL_UNIDADE INTO O_VALOR
                 from
                 tb_conceito_rub_dominio      a,
                 tb_conceito_rub_det_dominio  b
        where b.cod_ins=PAR_COD_INS          and
              a.cod_ins=b.cod_ins            and
              b.cod_entidade=b.cod_entidade  and
              a.cod_conceito = COM_COD_CONCEITO and
              a.cod_func     = COM_COD_FUNCAO   and
              a.cod_entidade = COM_COD_ENTIDADE and
              a.cod_conceito= b.cod_conceito and
              a.cod_func=b.cod_func          and
              a.cod_entidade=b.cod_entidade  and
              b.dat_ini_vig<=PAR_PER_PRO    and
              nvl(b.dat_fim_vig,to_date('01/01/2199','dd/mm/yyyy')  ) >PAR_PER_PRO;
            EXCEPTION
            when  no_data_found then
                  O_VALOR:=0;
            when others then
                   O_VALOR:=0 ;
            END;

   ELSIF i_num_FUNCAO = 509 THEN
           SP_OBTEM_PARVAL_FOLHA2('VAL_CNTR', 1000, i_cod_variavel, o_valor);
   ELSIF i_num_FUNCAO = 510 THEN
           SP_OBTEM_SIM_CNT(COM_COD_BENEFICIO, O_VALOR);
   ELSIF i_num_funcao = 511 THEN
      -- Valor Referencia Representac?o
        o_valor :=  SP_OBTEM_PERC_FEQ ;
   ELSIF i_num_funcao = 517 THEN
               SP_OBTEM_PARVAL_FOLHA2('REF06_PM', 1000, i_cod_variavel, o_valor);

   ELSIF i_num_funcao = 518 THEN
               SP_CALCULA_SALMIN_ANTER(o_valor);
   ELSIF i_num_FUNCAO = 519 THEN
       o_valor:= COM_COD_CARGO_RUB;
   ELSIF  i_num_FUNCAO = 521 THEN
      SP_OBTEM_TETO (ben_ide_cli      ,
                     com_cod_entidade ,
                     com_cargo        ,
                     o_valor          );

   ELSIF  i_num_FUNCAO = 522 THEN
      SP_OBTEM_TETO (ben_ide_cli      ,
                     com_cod_entidade ,
                     com_cargo        ,
                     o_valor          );
   ELSIF  i_num_FUNCAO = 523 THEN
      SP_VERIFICA_TIP_JUDICIAL (COM_COD_IDE_CLI_BEN     ,
                     COM_NUM_ORD_JUD             ,
                     o_str          );
  ELSIF  i_num_FUNCAO = 524 THEN
      SP_COMPOSICAO_BENEFICIO
                   (COM_COD_FCRUBRICA,
                    I_COD_VARIAVEL,
                    COM_COD_BENEFICIO,
                    COM_ENTIDADE,
                    'N',
                    O_VALOR);
                    O_VALOR:=ABS(O_VALOR);
     ELSIF  i_num_FUNCAO = 525  THEN
      o_valor := COM_VAL_PORC_IND_133;
      BEGIN
        select   ben.val_porc
                INTO O_VALOR
                 from
                 tb_composicao_ben ben
        where ben.cod_ins       =PAR_COD_INS       and
              ben.cod_entidade  =COM_ENTIDADE      and
              ben.cod_beneficio =COM_COD_BENEFICIO and
              trunc(ben.cod_fcrubrica/100) =trunc(COM_COD_FCRUBRICA/100) and
              ben.flg_status='V'                    and
              to_date('01/'||to_char(ben.dat_ini_vig,'MM/YYYY'),'dd/mm/yyyy') <=PAR_PER_PRO        and
              nvl(ben.dat_fim_vig,to_date('01/01/2199','dd/mm/yyyy')  ) >PAR_PER_PRO;
         EXCEPTION
            when  no_data_found then
                 o_valor := COM_VAL_PORC_IND_133;
            when others then
                   O_VALOR:=0 ;
          END;
       ---------------------------------
     ELSIF  i_num_FUNCAO = 526 THEN
            O_VALOR :=0;
            BEGIN
              select  1
                      INTO  O_VALOR
              FROM tb_compoe_beneficio cd
             WHERE cd.cod_ins = PAR_COD_INS
               AND cd.cod_fcrubrica_composta =  COM_COD_FCRUBRICA
               AND cd.cod_variavel           =  'BASE_COMP_INDIV'
               AND cd.cod_entidade           =  COM_ENTIDADE
               AND cd.cod_beneficio          =  COM_COD_BENEFICIO
               AND cd.cod_fcrubrica_compoe   =  7001200
               AND to_date('01/'||to_char(cd.dat_ini_vig,'MM/YYYY'),'dd/mm/yyyy') <=PAR_PER_PRO
               AND nvl(cd.dat_fim_vig,to_date('01/01/2199','dd/mm/yyyy')  ) >PAR_PER_PRO
               AND NVL(CD.FLG_STATUS,'V')='V'; ---- TASK 2347-Manutenc?o  Tela  composic?o de PA por beneficios

               EXCEPTION
                  when  no_data_found then
                        O_VALOR :=0;
                  when others then
                       O_VALOR :=0;
                END;

       ---------------------------------

    ELSIF i_num_funcao = 527 THEN
      -- Valor % do Cargo por conceito Calculado
             o_valor :=  SP_OBTEM_PERC_CARGO ;
    ELSIF   i_num_funcao = 528 THEN
          --- Codigo de Tabela
         o_str:=COM_COD_TABELA;

    ELSIF  i_num_FUNCAO = 531 THEN
                   o_valor:= SP_CALC_PORCENTUAL13(COM_COD_BENEFICIO);

     -- Funcao de Antecipacao de 13 -- TASK 2093
    ELSIF  i_num_FUNCAO = 533 THEN
           o_valor:= SP_OBTEM_ANTECIP_DECIMO(COM_COD_BENEFICIO);

    ELSIF  i_num_FUNCAO = 534 THEN
          -----------------------------------------------
          -- Variavel para controle de Base de Calculo 13
          -- 06/05/2015
          ----------------------------------------------
                   o_valor:=   COM_VAL_PORC_13  ;
   ELSIF  i_num_FUNCAO = 535 THEN
                  o_valor:=    COM_VAL_FIXO_13  ;
   ELSIF  i_num_FUNCAO = 536 THEN
                  o_valor:=    COM_VAL_UNIDADE_13  ;

 --------------- Desenvolvimento Task 3689  --------------
   ELSIF  i_num_FUNCAO = 538 THEN
                  o_valor:=  SP_OBTEM_HIST_PERC_BENEFICIO(COM_COD_BENEFICIO);
  --------------- Desenvolvimento Task 3689  --------------

   ELSIF  i_num_FUNCAO = 539 THEN
                 BEGIN
                   COM_COD_TRAMITE  :=LPAD(COM_COD_BENEFICIO,10,'0');
                  o_valor:=  SP_OBTEM_DIAS_CONTRIB(COM_COD_TRAMITE);
                 END;

          -- TASK 33709 -- INCLUINDO EM 20/09/2016 -- LJUNIOR
         -- RETORNAR O CODIGO DA FUNCAO INCORPORADA DO CARGO
   ELSIF i_num_FUNCAO = 541 THEN
             o_valor:= COM_COD_FUNCAO;

   ELSIF  i_num_funcao = 542 THEN
     -------NOVA FUNCAO PARA OBTER ATS RELACIONADOS NA COMPOSICAO DO BENEFICIO
     ------- 08-02-2017 --- ATLANTIC SOLUTIONS....


      O_VALOR :=0;
      BEGIN
         SELECT  MIN(BEN.VAL_INIDADE ) ---- Minimo Valor Retornado de ATS
         INTO   O_VALOR
           FROM TB_CONCESSAO_BENEFICIO    BC,
                TB_BENEFICIO_CARGO        EC,
                TB_COMPOSICAO_BEN         BEN
           WHERE
               BC.COD_INS          =  PAR_COD_INS
           AND BC.COD_BENEFICIO    =  COM_COD_BENEFICIO
           AND EC.COD_BENEFICIO    = BC.COD_BENEFICIO
           AND EC.COD_IDE_CLI_SERV = BC.COD_IDE_CLI_SERV
           AND EC.COD_IDE_CLI_BEN  = ben_ide_cli
           AND EC.COD_ENTIDADE     = BC.COD_ENTIDADE
           AND EC.NUM_MATRICULA    = BC.NUM_MATRICULA
           AND EC.COD_IDE_REL_FUNC = BC.COD_IDE_REL_FUNC
           AND EC.FLG_STATUS       = 'V'
           AND EC.IND_OPCAO        = BEN.IND_OPCAO
           AND BEN.COD_INS         = BC.COD_INS
           AND BEN.COD_ENTIDADE    = BC.COD_ENTIDADE
           AND BEN.COD_BENEFICIO   = BC.COD_BENEFICIO
           AND BEN.FLG_STATUS='V'

           ------ Vigencia de Beneficio Cargo ---
           AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
                 to_char(EC.DAT_INI_VIG, 'YYYYMM') AND
                 to_char(PAR_PER_PRO, 'YYYYMM') <=
               to_char(nvl(EC.DAT_FIM_VIG, to_date('01/01/2045', 'dd/mm/yyyy')),
                          'YYYYMM'))
            ---- Vigencia de Concessao_beneficio
           AND  to_date('01/'||to_char(ben.dat_ini_vig,'MM/YYYY'),'dd/mm/yyyy') <=PAR_PER_PRO        and
               nvl(ben.dat_fim_vig,to_date('01/01/2199','dd/mm/yyyy')  ) >PAR_PER_PRO

           AND exists ( select 1 from tb_compoe_det cd
                     where cd.cod_ins                    =  PAR_COD_INS
                          AND  cd.cod_fcrubrica_composta = COM_COD_FCRUBRICA
                          AND cd.cod_fcrubrica_compoe    = ben.cod_fcrubrica
                          AND to_date('01/'||to_char(cd.dat_ini_vig,'MM/YYYY'),'dd/mm/yyyy') <=PAR_PER_PRO
                          AND nvl(cd.dat_fim_vig,to_date('01/01/2199','dd/mm/yyyy')  ) >PAR_PER_PRO
                          AND cd.cod_variavel ='BASE_QQ_ATS'    ---
                          AND cd.cod_entidade_composta = BC.COD_ENTIDADE
                         );

       EXCEPTION
          when  no_data_found then
                O_VALOR :=0;
          when others then
               O_VALOR :=0;
        END;

     ---------------- FUNCOES DE PDI -----------------------------------------------
     --32627 / TASK / [ TASK2022 ] Critério para aplicação do PDI - rubrica 4217.--
     --- 543 E 544
     --------------------------------------------------------------------------------
      ELSIF  i_num_funcao = 543 THEN  
               
        O_VALOR :=0; 
        BEGIN  
             SELECT PDI.NUM_COEFICIENTE
             INTO   O_VALOR   
               FROM TB_MANUTENCAO_PDI_INFO    PDI
                WHERE  
                   PDI.COD_INS          =  PAR_COD_INS
               AND PDI.COD_BENEFICIO    =  COM_COD_BENEFICIO  
               ------ Vigencia de Beneficio Cargo ---
               AND ( to_char(PAR_PER_PRO, 'YYYYMM') >=
                     to_char(PDI.DAT_INI_VIG, 'YYYYMM') AND
                     to_char(PAR_PER_PRO, 'YYYYMM') <=
                   to_char(nvl(PDI.DAT_FIM_VIG, to_date('01/01/2045', 'dd/mm/yyyy')),
                              'YYYYMM')
               -------YUMI EM 25/10/2017: TT41651 - SOMENTE REGISTROS COM STATUS VIGENTE-----
               AND PDI.FLG_STATUS = 'V'
                    )
               AND ROWNUM =1;
             EXCEPTION
                        when  no_data_found then
                              O_VALOR :=0;
                        when others then
                             O_VALOR :=0;
             END;

    ELSIF  i_num_funcao = 544 THEN  
               
        O_VALOR :=0; 
        BEGIN  
           SELECT PDI.QTD_AVO 
           INTO   O_VALOR   
             FROM TB_MANUTENCAO_PDI_INFO    PDI
              WHERE  
                 PDI.COD_INS          =  PAR_COD_INS
             AND PDI.COD_BENEFICIO    =  COM_COD_BENEFICIO  
             ------ Vigencia de Beneficio Cargo ---
             AND ( to_char(PAR_PER_PRO, 'YYYYMM') >=
                   to_char(PDI.DAT_INI_VIG, 'YYYYMM') AND
                   to_char(PAR_PER_PRO, 'YYYYMM') <=
                 to_char(nvl(PDI.DAT_FIM_VIG, to_date('01/01/2045', 'dd/mm/yyyy')),
                            'YYYYMM')
             -------YUMI EM 25/10/2017: TT41651 - SOMENTE REGISTROS COM STATUS VIGENTE-----
            AND PDI.FLG_STATUS = 'V'               
                  )
             AND ROWNUM =1;
             EXCEPTION
                        when  no_data_found then
                              O_VALOR :=0;
                        when others then
                             O_VALOR :=0;
             END;
          
		  
     
     ELSIF  i_num_funcao = 545 THEN
           IF  NVL(COM_FLG_STATUS,' ') IN ('A') THEN
              o_str:='N';
           ELSE
              o_str:='S';
           END IF;
           o_str := '''' ||o_str || '''';

     ELSIF i_num_funcao =550 THEN
           --- TASK 43078 ¿ Busca da proporção de tempo da proporcionalização 
           --  de jornada da carreira de saúde:  
           -- 12/09/2018     
        O_VALOR :=0; 
        BEGIN  
           SELECT PJORC.PROPORCAO
           INTO   O_VALOR   
             FROM TB_CARGOS_PROPORCAO_JORNADA     PJORC
              WHERE  
                 PJORC.COD_INS          =  PAR_COD_INS
             AND PJORC.COD_CARGO        =  COM_CARGO
             AND PJORC.COD_ENTIDADE     =  COM_ENTIDADE
             ------ Vigencia da proporçcao ---
             AND ( to_char(PAR_PER_PRO, 'YYYYMM')   >=
                   to_char(PJORC.DAT_INI_VIG, 'YYYYMM') AND
                   to_char(PAR_PER_PRO, 'YYYYMM')  <=
                 to_char(nvl(PJORC.DAT_FIM_VIG, to_date('01/01/2045', 'dd/mm/yyyy')),
                            'YYYYMM')
              AND PJORC.COD_STATUS = '1'               
                  )
             AND ROWNUM =1;
             EXCEPTION
                        when  no_data_found then
                              O_VALOR :=0;
                        when others then
                             O_VALOR :=0;
             END;
          ELSIF i_num_funcao =551 THEN
           --TICKET 46395: Criar função de código 551, cujo nome da variável: PERC_FEQ_1
           -- 12/09/2018
            o_valor :=  SP_OBTEM_PERC_FEQ_CARGO  ;
          ELSIF i_num_funcao =552 THEN
              -----------------------------------------------------------------------------
              --TASK48653: Automatização cálculo da rubrica de gratificação executiva: 4074
             -------------------------------------------------------------------------------
            o_valor :=  SP_OBTEM_PERC_CARGO_JOR  ;
          ELSIF i_num_funcao =553 THEN
              -----------------------------------------------------------------------------
              --TASK48653: Automatização cálculo da rubrica de gratificação executiva: 4074
             -------------------------------------------------------------------------------
               BEGIN
                o_str := TRUNC(to_number(substr(vi_cod_ref_pad_venc, 16, 2)));
                o_valor :=  SP_OBTEM_PERC_CARGO_REF(o_str) ;
 
               END;
           ELSIF i_num_funcao =554 THEN
              -----------------------------------------------------------------------------
              --TASK48653: Automatização cálculo da rubrica de gratificação executiva: 4074
             -------------------------------------------------------------------------------
                SP_OBTEM_CATEGORIA_CARGO(O_STR); 
               
    END IF;


    /*
    fcn = obter o flag opcao 210 -- OPCAO_13
        = obter o mes de nascimento 211 -- MES_NASCIMENTO
        = obter o mes de processamento 212 -- MES_PERIODO_PROC
    */

     EXCEPTION
      WHEN OTHERS THEN

          p_coderro       := sqlcode;
          p_sub_proc_erro := 'SP_OBTEM_VALOR_FORMULA';
          p_msgerro       := 'Erro formula' ||sqlerrm || ' - '|| TO_CHAR(i_num_FUNCAO ) ;

          INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                p_coderro,
                                'Calcula Folha',
                                sysdate,
                                p_msgerro,
                                p_sub_proc_erro,
                                BEN_IDE_CLI,
                                COM_COD_FCRUBRICA);

          --       RAISE ERRO;
          VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
          o_valor:=0;
          o_str:=' ';
     END;

    IF i_num_funcao in
       (99, 1, 2, 3, 4, 8, 16, 19, 25, 15, 29, 48, 51, 33, 34, 35, 36, 37, 38, 39, 47, 67, 70, 72, 78, 94, 101, 105, 108, 109, 113, 114, 118, 135,136, 201, 210, 211, 212,403,404,411,412,414,523,528,545,554/*TASK48653*/ ) THEN
      return(o_str);
    ELSE
      return(to_char(o_valor, '0000000.99999'));
    END IF;




  END SP_OBTEM_VALOR_VAR;
  ---------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_VALOR_FORMULA AS

    i          number;
    vi_formula varchar2(500);
    vi_valor   number(18, 4);
    vi_str     varchar2(600);
    cur_form   curesp;

  BEGIN

    vi_valor := 0;
    -- vi_formula:='vi_valor:=';

    FOR i IN 1 .. lim_funcao LOOP
      IF tip_elemento(i) = 'OPER' or tip_elemento(i) = 'SIMB' THEN
        vi_formula := concat(vi_formula, cod_elemento(i));
      ELSE
        --         vi_formula:=concat(vi_formula,to_char(val_elemento(i),'0000000.9999'));
        vi_formula := concat(vi_formula, vas_elemento(i));
        IF tip_elemento(i) = 'VAR' THEN
          idx_elemento := i;
        END IF;
      END IF;
    END LOOP;
    vi_str := 'select ' || vi_formula || ' from dual';
    BEGIN
      OPEN cur_form FOR vi_str;
      FETCH cur_form
        INTO vi_valor;
      CLOSE cur_form;
    EXCEPTION
      WHEN OTHERS THEN
        IF SQLCODE = -936 THEN
          vi_valor := 0;
        ELSE
          p_coderro       := sqlcode;
          p_sub_proc_erro := 'SP_OBTEM_VALOR_FORMULA';
          p_msgerro       := 'Erro ao obter o valor da formula' || ' - ' ||
                             vi_str;
          INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                p_coderro,
                                'Calcula Folha',
                                sysdate,
                                p_msgerro,
                                p_sub_proc_erro,
                                BEN_IDE_CLI,
                                COM_COD_FCRUBRICA);

          --       RAISE ERRO;
          VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
        END IF;
    END;

    IF trunc(com_cod_fcrubrica / 100, 000) <> 119 THEN
      mon_calculo := vi_valor * COM_PORC_VIG; --RAO 20060321
    else
      mon_calculo := vi_valor;
    end if;

  END SP_OBTEM_VALOR_FORMULA;
  ------------------------------------------------------------------------------
  FUNCTION SP_VALIDA_CONDICAO RETURN BOOLEAN AS

    i          number;
    vi_formula varchar2(700);
    vi_str     varchar2(700);
    cur_form   curesp;
    o_condicao boolean;
    vi_res     number;

  BEGIN
    vi_res     := 0;
    o_condicao := FALSE;
    FOR i IN 1 .. lim_funcao LOOP
      IF tip_elemento(i) = 'OPER' OR tip_elemento(i) = 'SIMB' THEN
        vi_formula := concat(vi_formula, cod_elemento(i));
      ELSE
        vi_formula := concat(vi_formula, vas_elemento(i));
        --         vi_formula:=concat(vi_formula,to_char(val_elemento(i),'0000000.9999'));
      END IF;
    END LOOP;
    vi_str := 'select case when ' || vi_formula ||
              ' then 1 else 0 end from dual';
    begin
      OPEN cur_form FOR vi_str;
      -- fetch cur_form into o_condicao;
      FETCH cur_form
        INTO vi_res;
      CLOSE cur_form;
    exception
      when others then
        IF SQLCODE = -936 THEN
          vi_res := 0;
        ELSE
          p_coderro       := sqlcode;
          p_sub_proc_erro := 'SP_VALIDA_CONDICAO';
          p_msgerro       := 'Erro ao validar a condicao da formula' || '  ' ||
                             vi_str;
          INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                p_coderro,
                                'Calcula Folha',
                                sysdate,
                                p_msgerro,
                                p_sub_proc_erro,
                                BEN_IDE_CLI,
                                COM_COD_FCRUBRICA);

          --       RAISE ERRO;
          VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
        END IF;
    end;
    IF vi_res = 1 THEN
      o_condicao := TRUE;
    ELSE
      o_condicao := FALSE;
    END IF;
    RETURN(o_condicao);

  END SP_VALIDA_CONDICAO;
  ------------------------------------------------------------------------------
  PROCEDURE SP_COMPOSICAO(I_COD_RUBRICA   in number,
                          I_VARIAVEL      in varchar2,
                          I_COD_BENEFICIO IN NUMBER,
                          I_COD_ENTIDADE  IN NUMBER,
                          i_ind_val_cheio in varchar2,
                          I_VALOR         OUT NUMBER) AS
    c_comp     curform;
    vi_valor   number(18, 5);
    VI_RUBRICA NUMBER;
    m          number := 0;
    v_soma     char(1) := 'S';

  BEGIN

    m := nvl(vrubexc.count, 0);

    I_VALOR  := 0;
    VI_VALOR := 0;
    --- Obtem rubricas da composic?o
    OPEN c_comp FOR
      SELECT cd.cod_fcrubrica_compoe
        FROM tb_compoe_det cd
       WHERE cd.cod_ins = PAR_COD_INS
         AND cd.cod_fcrubrica_composta = I_COD_RUBRICA
         AND cd.cod_variavel = I_VARIAVEL
         AND cd.cod_entidade_composta = I_COD_ENTIDADE
         AND (PAR_PER_PRO >= cd.dat_ini_vig AND
             PAR_PER_PRO <=
             nvl(cd.dat_fim_vig, to_date('01/01/2045', 'dd/mm/yyyy')));
    FETCH c_comp
      INTO vi_rubrica;
    WHILE C_COMP%FOUND LOOP
      IF VI_RUBRICA IN (490004) THEN
        NULL;
      END IF;
      IF m = 0 then
        sp_valor_calculado(VI_RUBRICA,
                           I_COD_BENEFICIO,
                           I_VARIAVEL,
                           I_COD_ENTIDADE,
                           i_ind_val_cheio,
                           vi_valor);
        I_VALOR := I_VALOR + VI_VALOR;
      ELSE
        FOR m IN 1 .. vrubexc.count LOOP

          IF vrubexc(m).cod_fcrubrica = VI_RUBRICA then
            v_soma := 'N';
            exit;
          END IF;

        END LOOP;

        IF v_soma = 'S' THEN
          sp_valor_calculado(VI_RUBRICA,
                             I_COD_BENEFICIO,
                             I_VARIAVEL,
                             I_COD_ENTIDADE,
                             i_ind_val_cheio,
                             vi_valor);
          I_VALOR := I_VALOR + VI_VALOR;
        ELSE
          v_soma := 'S';
        END IF;
      END IF;

      FETCH c_comp
        INTO vi_rubrica;
    END LOOP;
    CLOSE C_COMP;

  END SP_COMPOSICAO;
  ------------------------------------------------------------------------------

  PROCEDURE SP_VALOR_CALCULADO(I_RUBRICA       IN NUMBER,
                               I_COD_BENEFICIO IN NUMBER,
                               I_COD_VARIAVEL  IN VARCHAR2,
                               I_COD_ENTIDADE  IN NUMBER,
                               I_IND_VAL_CHEIO IN VARCHAR2,
                               O_VALOR         OUT NUMBER) AS
    i       integer;
    cont_sp number := 0;
  BEGIN
    O_VALOR := 0;
    cont_sp := tdcn.count;
    FOR i IN 1 .. tdcn.count LOOP
      rdcn := tdcn(i);
      IF I_COD_VARIAVEL = 'BASE_PREV' THEN
        IF rdcn.cod_fcrubrica = i_rubrica AND
           rdcn.cod_beneficio = i_cod_beneficio AND
          --             rdcn.cod_entidade = i_cod_entidade AND
           rdcn.per_processo = PAR_PER_PRO AND
           rdcn.dat_ini_ref <= PAR_PER_PRO THEN
          IF rdcn.flg_natureza = 'D' then
            IF i_ind_val_cheio = 'N' THEN
              O_VALOR := nvl(O_VALOR, 0) - TRUNC(rdcn.val_rubrica,2);
            ELSE
              O_VALOR := nvl(O_VALOR, 0) - TRUNC(rdcn.val_rubrica_cheio,2);
            END IF;
            --                 exit;
          ELSE
            IF i_ind_val_cheio = 'N' THEN
              O_VALOR := nvl(O_VALOR, 0) + TRUNC(rdcn.val_rubrica,2);
            ELSE
              O_VALOR := nvl(O_VALOR, 0) + TRUNC(rdcn.val_rubrica_cheio,2);
            END IF;
            --                 exit;
          END IF;
        END IF;
      ELSE
        IF rdcn.cod_fcrubrica = i_rubrica AND
           rdcn.cod_beneficio = i_cod_beneficio AND
           rdcn.per_processo = PAR_PER_PRO --AND
           --(COM_VAL_STR2 = 'S' OR COM_VAL_STR2 IS NULL)
           THEN
          IF rdcn.flg_natureza = 'D' then
            IF i_ind_val_cheio = 'N' THEN
              o_valor := o_valor - TRUNC(rdcn.val_rubrica,2);
            ELSE
              o_valor := o_valor - TRUNC(rdcn.val_rubrica_cheio,2);
            END IF;
            --                 exit;
          ELSE
            IF i_ind_val_cheio = 'N' THEN
              o_valor := o_valor + TRUNC(rdcn.val_rubrica,2);
            ELSE
              o_valor := o_valor + TRUNC(rdcn.val_rubrica_cheio,2);
            END IF;
            --                 exit;
          END IF;
        END IF;
      END IF;
    END LOOP;
    FOR i IN 1 .. tdcd.count LOOP
      rdcn := tdcd(i);
      IF rdcn.cod_fcrubrica = i_rubrica AND
         rdcn.cod_beneficio = i_cod_beneficio AND
         rdcn.per_processo = PAR_PER_PRO THEN
        IF rdcn.flg_natureza = 'D' then
          IF i_ind_val_cheio = 'N' THEN
            o_valor := o_valor - TRUNC(rdcn.val_rubrica,2);
          ELSE
            o_valor := o_valor - TRUNC(rdcn.val_rubrica_cheio,2);
          END IF;
          --                 exit;
        ELSE
          IF i_ind_val_cheio = 'N' THEN
            o_valor := o_valor + TRUNC(rdcn.val_rubrica,2);
          ELSE
            o_valor := o_valor + TRUNC(rdcn.val_rubrica_cheio,2);
          END IF;
          --                 exit;
        END IF;
                --- Para Controle de Magem 18-09-2013
           IF  INSTRB(NVL(tdcd(i).des_complemento,' '),'- S/CM') =0  THEN
              tdcd(i).des_complemento:= tdcd(i).des_complemento||'- S/CM';
           END IF;
      END IF;
    END LOOP;

  END SP_VALOR_CALCULADO;
  ------------------------------------------------------------------------------
  PROCEDURE SP_COMPOSICAO_TETO(I_COD_RUBRICA in number,
                               I_VARIAVEL    in varchar2,
                               I_VALOR       OUT NUMBER) AS
    c_comp     curform;
    vi_valor   number(18, 5);
    VI_RUBRICA NUMBER;

  BEGIN
    I_VALOR  := 0;
    VI_VALOR := 0;
    --- Obtem rubricas da composic?o
    OPEN c_comp FOR
      SELECT cbe.cod_fcrubrica
        FROM tb_composicao_ben cbe
       WHERE cbe.cod_ins = PAR_COD_INS
         AND CBE.COD_BENEFICIO = COM_COD_BENEFICIO
         AND CBE.VAL_STR2 = 'S'
         AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
             to_char(CBE.DAT_INI_VIG, 'YYYYMM') AND
             to_char(PAR_PER_PRO, 'YYYYMM') <=
             to_char(nvl(CBE.DAT_FIM_VIG,
                          to_date('01/01/2045', 'dd/mm/yyyy')),
                      'YYYYMM'));
    FETCH c_comp
      INTO vi_rubrica;
    WHILE C_COMP%FOUND LOOP
      sp_valor_calculado(VI_RUBRICA,
                         COM_COD_BENEFICIO,
                         I_VARIAVEL,
                         COM_COD_ENTIDADE,
                         'N',
                         vi_valor);
      I_VALOR := I_VALOR + VI_VALOR;
      FETCH c_comp
        INTO vi_rubrica;
    END LOOP;
    CLOSE C_COMP;

  END SP_COMPOSICAO_TETO;
  ---------------------------------------------------------------------------------
  PROCEDURE SP_CONTRIB(i_variavel IN VARCHAR,
                       i_valbase  number,
                       o_valor    OUT NUMBER) AS
  BEGIN

    FOR i IN 1 .. 2 LOOP
      IF i_valbase < lim_taxa_prev(i) THEN
        IF i_variavel = 'DESC_CONTR' THEN
          o_valor := dsc_taxa_prev(i);
        ELSIF i_variavel = 'PORC_CONTR' THEN
          o_valor := val_taxa_prev(i) / 100;
        END IF;
        EXIT;
      END IF;
    END LOOP;

  END SP_CONTRIB;
  ---------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_SOMA_PENSAO(o_valor out number) AS

    i       number := 0;
    i_valor number(18, 4) := 0;

  BEGIN

    o_valor := 0;

    FOR i IN 1 .. cod_con.count LOOP
      IF tip_evento_especial(i) = 'P' THEN
        sp_valor_calculado(cod_rub(i),
                           COM_COD_BENEFICIO,
                           ' ',
                           cod_entidade(i),
                           'N',
                           i_valor);
        o_valor := o_valor + i_valor;
      END IF;
    END LOOP;

  END SP_OBTEM_SOMA_PENSAO;
  ---------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_SOMA_SALFA(o_valor out number) AS

    i       number := 0;
    i_valor number(18, 4) := 0;

  BEGIN

    o_valor := 0;

    FOR i IN 1 .. cod_con.count LOOP
      IF tip_evento_especial(i) = 'F' THEN
        sp_valor_calculado(cod_rub(i),
                           COM_COD_BENEFICIO,
                           '',
                           cod_entidade(i),
                           'N',
                           i_valor);
        o_valor := o_valor + i_valor;
      END IF;
    END LOOP;

  END SP_OBTEM_SOMA_SALFA;
  ---------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_SOMA_VENCIMENTO(i_cod_beneficio in number,
                                     i_cod_entidade  in number,
                                     i_ind_val_cheio in varchar2,
                                     o_valor         out number) AS

    i       number := 0;
    i_valor number(18, 4) := 0;
    m       number := 0;
    v_soma  char(1) := 'S';
    e       number := 0;

  BEGIN
    o_valor := 0;

    m := nvl(vrubexc.count, 0);
    --  e := nvl(vrubexcesso.count,0);

    FOR i IN 1 .. cod_con.count LOOP
      IF (tip_evento_especial(i) = 'V' OR tip_evento_especial(i) = 'L' OR
         tip_evento_especial(i) = 'E') AND cod_entidade(i) = i_cod_entidade THEN
        IF m = 0 then
          sp_valor_calculado(cod_rub(i),
                             I_COD_BENEFICIO,
                             '',
                             cod_entidade(i),
                             i_ind_val_cheio,
                             i_valor);
          o_valor := o_valor + i_valor;
        ELSE
          FOR m IN 1 .. vrubexc.count LOOP

            IF vrubexc(m).cod_fcrubrica = cod_rub(i) then
              v_soma := 'N';
              exit;
            END IF;

          END LOOP;

          IF v_soma = 'S' THEN
            sp_valor_calculado(cod_rub(i),
                               I_COD_BENEFICIO,
                               '',
                               cod_entidade(i),
                               i_ind_val_cheio,
                               i_valor);
            o_valor := o_valor + i_valor;
          ELSE
            v_soma := 'S';
          END IF;
        END IF;

      END IF;
    END LOOP;

  END SP_OBTEM_SOMA_VENCIMENTO;
  ---------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_QTD_DEPENDENTES(P_COD_IDE_CLI IN VARCHAR2,
                                     O_VALOR       OUT NUMBER) AS

    num_dependentes number := 0;

  BEGIN

    num_dependentes := 0;

    /*
    select count(1)
      into o_valor
     from tb_dependente d,
          tb_pessoa_fisica pf
    where d.cod_ins = PAR_COD_INS
      and d.cod_ins = pf.cod_ins
      and d.cod_ide_cli_serv = P_COD_IDE_CLI
      and d.cod_ide_cli_dep = pf.cod_ide_cli
      and ( to_char(PAR_PER_PRO,'YYYYMM') >=  to_char(d.DAT_INI_DEP,'YYYYMM')
          and to_char(PAR_PER_PRO,'YYYYMM') <=  to_char(nvl(D.DAT_FIM_DEP,to_date('01/01/2045','dd/mm/yyyy')),'YYYYMM'))
      and (( to_number(to_char(PAR_PER_PRO,'YYYYMMDD'))
          - to_number(to_char(pf.dat_nasc,'YYYYMMDD')) ) / 10000 < VI_IDADE
          or exists (select 1
                       from tb_situacao_dep sd
                      where d.cod_ins = sd.cod_ins
                        and d.cod_ide_cli_serv = sd.cod_ide_cli_serv
                        and d.cod_ide_cli_dep = sd.cod_ide_cli_dep
                        and ( PAR_PER_PRO >= sd.dat_ini_dep
                             and PAR_PER_PRO <= nvl(sd.dat_fim_dep,to_date('01/01/2045','DD/MM/YYYY')))));
    */

--...................... Comentado por ROD em 20Set09
/*    select count(1)
      into o_valor
      from tb_dependencia_economica de
     where de.cod_ins = par_cod_ins
       and de.flg_dep_ir = 'S'
       and par_per_pro >= de.dat_ini_dep_eco
       and par_per_pro <= nvl(de.dat_fim_dep_eco, '01/01/2200')
       and de.cod_ide_cli_ben = BEN_IDE_CLI;*/

    select pf.num_dep_ir
     into  o_valor
     from  tb_pessoa_fisica pf
     where pf.cod_ins = par_cod_ins
     and   pf.cod_ide_cli = BEN_IDE_CLI;
    if o_valor is null then
       o_valor := 0;
    end if;

    FOR i IN 1 .. nom_variavel.count LOOP

      IF nom_variavel(i) = COM_COL_INFORMACAO THEN
        val_variavel(i) := o_valor;
        v_qtd_horas := o_valor;
        exit;
      END IF;

    END LOOP;

  END SP_OBTEM_QTD_DEPENDENTES;
  ---------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_QTD_DEPENDENTES_MIL(P_COD_IDE_CLI IN VARCHAR2,
                                         O_VALOR       OUT NUMBER) AS
  BEGIN
    begin
      select s.num_dep_sf_mil, s.num_dep_ir
        into o_valor, num_dep_ir_mil
        from tb_servidor s
       where s.cod_ins = PAR_COD_INS
         and s.cod_ide_cli = BEN_IDE_CLI;
      begin
        select count(1)
          into o_valor
          from tb_dependencia_economica de
         where de.cod_ins = par_cod_ins
           and de.flg_dep_ir = 'S'
           and par_per_pro >= de.dat_ini_dep_eco
           and par_per_pro <= nvl(de.dat_fim_dep_eco, '01/01/2200')
           and de.cod_ide_cli_ben = BEN_IDE_CLI;

        num_dep_ir_mil := o_valor;

      exception
        when others then

          o_valor := 0;

      end;
      FOR i IN 1 .. nom_variavel.count LOOP

        IF nom_variavel(i) = COM_COL_INFORMACAO THEN
          val_variavel(i) := o_valor;
          v_qtd_horas := o_valor;
          exit;
        END IF;

      END LOOP;

    EXCEPTION
      WHEN OTHERS THEN
        p_coderro       := sqlcode;
        p_sub_proc_erro := 'SP_OBTEM_QTD_DEPENDENTES_MIL';
        p_msgerro       := 'Erro ao obter a quantidades de dependentes';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              BEN_IDE_CLI,
                              COM_COD_FCRUBRICA);

        --       RAISE ERRO;
        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
    END;

  END SP_OBTEM_QTD_DEPENDENTES_MIL;
  ---------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_RELACAO_FUNCIONAL(I_NUM_FUNCAO IN NUMBER,
                                       O_STR        OUT VARCHAR2,
                                       O_NUM        OUT NUMBER) AS

  BEGIN
    BEGIN

      select distinct decode(i_num_funcao,
                             8,
                             tp.COD_TIPO_OPCAO,
                             38,
                             tip.COD_TIPO_OPCAO,
                             114,
                             tip.COD_TIPO_OPCAO,
                             tp.COD_TIPO_OPCAO),
                      rj.nom_regime_jur,
                      v.NOM_VINCULO,
                      rf.cod_sit_prev
        into NOM_TIPO_PROVIMENTO,
             NOM_REGIME_JUR,
             NOM_VINCULO,
             COM_COD_SIT_PREV
        from tb_relacao_funcional      rf,
             tb_tipo_vinculo           v,
             tb_regime_juridico        rj,
             tb_tipo_provimento        tp,
             tb_evolu_ccomi_gfuncional ecg,
             tb_tipo_provimento        tip,
             tb_concessao_beneficio    cb
       where rf.cod_ins = PAR_COD_INS
         and rf.cod_ins = cb.cod_ins
         and cb.cod_beneficio = COM_COD_BENEFICIO
         and rf.cod_ide_cli = cb.cod_ide_cli_serv
         and rf.num_matricula = COM_MATRICULA
         and rf.cod_ide_rel_func = cb.cod_ide_rel_func
         and rf.cod_entidade = COM_ENTIDADE
            --  and rf.cod_cargo = COM_CARGO
         and rf.cod_vinculo = v.cod_vinculo(+)
         and rf.cod_regime_jur = rj.cod_regime_jur(+)
         and tip.cod_tipo_provimento(+) = rf.tip_provimento
         and tp.cod_tipo_provimento(+) = ecg.tip_provimento
            --  and rf.cod_cargo = ecg.cod_cargo_rel (+)
         and rf.cod_ins = ecg.cod_ins(+)
         and rf.cod_ide_cli = ecg.cod_ide_cli(+)
         and rf.cod_entidade = ecg.cod_entidade(+)
         and rf.num_matricula = ecg.num_matricula(+);

      o_str := '''' || o_str || '''';
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        o_str               := null;
        o_str               := '''' || o_str || '''';
        NOM_TIPO_PROVIMENTO := null;
        NOM_REGIME_JUR      := null;
        NOM_VINCULO         := null;
      WHEN OTHERS THEN
        p_coderro       := sqlcode;
        p_sub_proc_erro := 'SP_OBTEM_RELACAO_FUNCIONAL';
        p_msgerro       := 'Erro ao obter a Relacao Funcional';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              BEN_IDE_CLI,
                              COM_COD_FCRUBRICA);

        --       RAISE ERRO;
        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
    END;

  END SP_OBTEM_RELACAO_FUNCIONAL;
  ---------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_CATEGORIA(O_VALOR OUT VARCHAR2) AS

  BEGIN

    BEGIN

      select sc.nom_categoria, sbc.nom_subcategoria
        into NOM_CATEGORIA, NOM_SUBCATEGORIA
        from tb_cargo ca, tb_categoria sc, tb_subcategoria sbc
       where CA.COD_CARGO = COM_CARGO
         AND CA.COD_INS = PAR_COD_INS
         AND CA.COD_ENTIDADE = COM_ENTIDADE
         AND CA.COD_PCCS = COM_PCCS
         and sc.cod_categoria = ca.cod_categoria
         and sbc.cod_categoria = ca.cod_categoria
         and sbc.cod_subcategoria = ca.cod_subcategoria;

      o_valor := '''' || o_valor || '''';
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        o_valor := null;
        o_valor := '''' || o_valor || '''';
      WHEN OTHERS THEN
        p_coderro       := sqlcode;
        p_sub_proc_erro := 'SP_OBTEM_CATEGORIA';
        p_msgerro       := 'Erro ao obter a Categoria';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              BEN_IDE_CLI,
                              COM_COD_FCRUBRICA);
        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
    END;

  END SP_OBTEM_CATEGORIA;
  ---------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_SUBCATEGORIA(O_VALOR OUT VARCHAR2) AS

  BEGIN

    BEGIN
      select sc.nom_categoria, sbc.nom_subcategoria
        into NOM_CATEGORIA, NOM_SUBCATEGORIA
        from tb_cargo ca, tb_categoria sc, tb_subcategoria sbc
       where CA.COD_CARGO = COM_CARGO
         AND CA.COD_INS = PAR_COD_INS
         AND CA.COD_ENTIDADE = COM_ENTIDADE
         AND CA.COD_PCCS = COM_PCCS
         and sc.cod_categoria = ca.cod_categoria
         and sbc.cod_categoria = ca.cod_categoria
         and sbc.cod_subcategoria = ca.cod_subcategoria;

      o_valor := '''' || o_valor || '''';
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        o_valor := null;
        o_valor := '''' || o_valor || '''';
      WHEN OTHERS THEN
        p_coderro       := sqlcode;
        p_sub_proc_erro := 'SP_OBTEM_SUBCATEGORIA';
        p_msgerro       := 'Erro ao obter a subcategoria';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              BEN_IDE_CLI,
                              COM_COD_FCRUBRICA);
        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;

    END;

  END SP_OBTEM_SUBCATEGORIA;
-----------------------------------------------------------------------------
----TASK48653: Automatização cálculo da rubrica de gratificação executiva: 4074
-------------------------------------------------------------------------------

 PROCEDURE SP_OBTEM_CATEGORIA_CARGO(O_VALOR OUT VARCHAR2) AS

  BEGIN

    BEGIN

      select sc.nom_categoria 
        into NOM_CATEGORIA 
        from tb_cargo ca, tb_categoria sc 
       where CA.COD_CARGO    = COM_CARGO
         AND CA.COD_INS       = PAR_COD_INS
         AND CA.COD_ENTIDADE = COM_ENTIDADE
         AND CA.COD_PCCS     = COM_PCCS
         and sc.cod_categoria = ca.cod_categoria;
          o_valor := '''' || NOM_CATEGORIA || '''';
      
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        o_valor := null;
       WHEN OTHERS THEN
        p_coderro       := sqlcode;
        p_sub_proc_erro := 'SP_OBTEM_CATEGORIA';
        p_msgerro       := 'Erro ao obter a Categoria';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              BEN_IDE_CLI,
                              COM_COD_FCRUBRICA);
        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
    END;

  END SP_OBTEM_CATEGORIA_CARGO;
  ---------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_CATEGORIA_OPCAO(O_STR OUT VARCHAR2) AS

    cargo_aux number(8) := 0;

  BEGIN

    begin

      select /*+ RULE */
       ecg.cod_cargo_comp, sc.nom_categoria
        into cargo_aux, O_STR
        from tb_evolu_ccomi_gfuncional ecg, tb_cargo ca, tb_categoria sc
       where ecg.cod_ins = PAR_COD_INS
         and ecg.cod_ide_cli = BEN_IDE_CLI_SERV
         and ecg.cod_entidade = COM_ENTIDADE
         and ecg.num_matricula = COM_MATRICULA
         and (PAR_PER_PRO >= ecg.dat_ini_efeito and
             PAR_PER_PRO <=
             nvl(ecg.dat_fim_efeito, to_date('01/01/2045', 'dd/mm/yyyy')))
         and ecg.cod_cargo_comp = ca.cod_cargo
         and ecg.cod_ins = ca.cod_ins
         and ecg.cod_entidade = ca.cod_entidade
         and ecg.cod_pccs = ca.cod_pccs
         and sc.cod_categoria = ca.cod_categoria;

    exception
      when no_data_found then
        cargo_aux     := null;
        nom_categoria := null;
      WHEN OTHERS THEN
        p_sub_proc_erro := 'SP_OBTEM_CATEGORIA_OPCAO';
        p_coderro       := SQLCODE;
        P_MSGERRO       := 'Erro ao obter o cargo';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              BEN_IDE_CLI,
                              COM_COD_FCRUBRICA);
        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
    end;

  END SP_OBTEM_CATEGORIA_OPCAO;
  ---------------------------------------------------------------------------------
  FUNCTION SP_OBTEM_PADRAO_VENCIMENTO RETURN VARCHAR2 IS

  BEGIN
    begin
      select rr.cod_ref_pad_venc
        into vi_cod_ref_pad_venc
        from tb_referencia rr
       where rr.cod_entidade = COM_ENTIDADE
         and rr.cod_ins = PAR_COD_INS
         and rr.cod_pccs = COM_PCCS
         and rr.cod_quadro = COM_QUADRO
         and rr.cod_referencia = BEN_COD_REFERENCIA
         and (PAR_PER_PRO >= rr.dat_ini_vig and
             PAR_PER_PRO <=
             nvl(rr.dat_fim_vig, to_date('01/01/2045', 'dd/mm/yyyy')));
    exception
      when others then
        vi_cod_ref_pad_venc := ' ';
    end;

    return vi_cod_ref_pad_venc;

  END SP_OBTEM_PADRAO_VENCIMENTO;
  ---------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_PERCENTUAL_CARGO(O_VALOR OUT NUMBER) AS

  BEGIN
    BEGIN
      select rmc.val_percentual
        into o_valor
        from tb_rep_mil_cargo rmc
       where rmc.cod_ins = PAR_COD_INS
         and rmc.cod_entidade = COM_ENTIDADE
            --   and rmc.cod_cargo = COM_CARGO
         and rmc.cod_cargo = COM_CARGO_APOS
         and (PAR_PER_PRO >= rmc.dat_ini and
             PAR_PER_PRO <=
             nvl(rmc.dat_fim, to_date('01/01/2045', 'dd/mm/yyyy')));
    exception
      when others then
        o_valor := 0;
    end;

    idx_elemento := 3;

  END SP_OBTEM_PERCENTUAL_CARGO;
  ---------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_PROPORCAO_JORNADA(i_num_funcao in number,
                                       O_VALOR      OUT NUMBER) AS

  BEGIN

    QTD_HORAS_JORNADA := 0;

    BEGIN
      select jo.val_valor_percentual, jo.num_horas_mes
        into o_valor, QTD_HORAS_JORNADA
        from tb_jornada jo
       where jo.cod_ins = PAR_COD_INS
         and jo.cod_jornada = COM_COD_JORNADA;

      FOR i IN 1 .. nom_variavel.count LOOP

        IF nom_variavel(i) = COM_COL_INFORMACAO THEN
          val_variavel(i) := QTD_HORAS_JORNADA;
          v_qtd_horas := QTD_HORAS_JORNADA;
          exit;
        END IF;

      END LOOP;

    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        o_valor := 1;
      WHEN OTHERS THEN
        p_sub_proc_erro := 'SP_OBTEM_PROPORCAO_JORNADA';
        p_coderro       := SQLCODE;
        P_MSGERRO       := 'Erro ao obter a proporcao da jornada';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              BEN_IDE_CLI,
                              COM_COD_FCRUBRICA);

        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
    END;

  END SP_OBTEM_PROPORCAO_JORNADA;
  ---------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_QTD_HORAS(i_num_funcao in number, O_VALOR OUT NUMBER) AS
  BEGIN
    begin
    select DECODE(I_NUM_FUNCAO, 17, j.num_horas_mes)
      into o_valor
      from tb_jornada j
     where j.cod_jornada = COM_COD_JORNADA
       and j.cod_ins = PAR_COD_INS;

    exception
      when no_data_found then
        o_valor := 0;
        p_sub_proc_erro := 'SP_OBTEM_QTD_HORAS';
        p_coderro       := SQLCODE;
        P_MSGERRO       := 'Erro ao obter qtd horas no mes-valor zerado';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              BEN_IDE_CLI,
                              COM_COD_FCRUBRICA);
        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
      when others then
        p_sub_proc_erro := 'SP_OBTEM_QTD_HORAS';
        p_coderro       := SQLCODE;
        P_MSGERRO       := 'Erro ao obter qtd horas no mes';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              BEN_IDE_CLI,
                              COM_COD_FCRUBRICA);
        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
    end;




  END SP_OBTEM_QTD_HORAS;
  ---------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_TIPOS_ATRIBUTOS(num_funcao      in number,
                                     i_num_matricula in number,
                                     i_entidade      in number,
                                     i_cargo         in number,
                                     O_STR           OUT VARCHAR2) AS

  BEGIN
    begin
      select distinct 'S'
        into o_str
        from tb_atributos_pf    ats, --tb_atributos_serv ats,
             tb_tipos_atributos ta
       where --ats.cod_beneficio = com_cod_beneficio --RAO 20060207 Atributos por pessoa
      -- and
       ats.cod_ins = par_cod_ins
       and (ats.cod_ide_cli = ben_ide_cli_serv or ats.cod_ide_cli = ant_ide_cli) --RAO 20060216
       and ats.cod_atributo = ta.cod_atributo
       and decode(num_funcao,
              15,
              1000,
              29,
              2000,
              33,
              3000,
              34,
              4000,
              35,
              5000,
              36,
              6000,
              37,
              7000,
              70,
              9000,
              78,
              10000,
              414,
              11000) = ta.cod_atributo
       and (PAR_PER_PRO >= ats.dat_ini_vig and
       PAR_PER_PRO <=
       nvl(ats.dat_fim_vig, to_date('01/01/2045', 'DD/MM/YYYY')));
    exception
      when no_data_found then
        o_str := 'N';
      when others then
        p_sub_proc_erro := 'SP_OBTEM_TIPOS_ATRIBUTOS';
        p_coderro       := SQLCODE;
        P_MSGERRO       := 'Erro ao obter atributos do servidor';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              BEN_IDE_CLI,
                              COM_COD_FCRUBRICA);
        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
    end;

  END SP_OBTEM_TIPOS_ATRIBUTOS;

  ----------------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_TIPOS_ATRIBUTOS_prev(num_funcao      in number,
                                          i_num_matricula in number,
                                          i_entidade      in number,
                                          i_cargo         in number,
                                          O_STR           OUT VARCHAR2) AS

  BEGIN
    begin
      select distinct 'S'
        into o_str
        from tb_atributos_pf    ats, --tb_atributos_serv ats,
             tb_tipos_atributos ta
       where --ats.cod_beneficio = com_cod_beneficio --RAO 20060207 Atributos por pessoa
      -- and
       ats.cod_ins = par_cod_ins
       and (ats.cod_ide_cli = prev_ide_cli) --RAO 20060216
       and ats.cod_atributo = ta.cod_atributo
       and
         (
         decode(num_funcao,
              15, 1000,
              29, 2000,
              33, 3000,
              34, 4000,
              35, 5000,
              36, 6000,
              37, 7000,
              70, 9000,
              78, 10000,
              500,12000,
              13 ,13000) = ta.cod_atributo --  JTS AGREGA CODIGO 6000 7-2010
            OR
           decode(num_funcao,
               35,
              6000,
               371,
               7001,
               372,
               7002,
               500,
               12001
            ) = ta.cod_atributo
           OR
           decode(num_funcao,
                500,
               12002
            ) = ta.cod_atributo
        )
       and (PAR_PER_PRO >= ats.dat_ini_vig
       and ats.flg_status <> 'C'
       and PAR_PER_PRO <=
       nvl(ats.dat_fim_vig, to_date('01/01/2045', 'DD/MM/YYYY')));
    exception
      when no_data_found then
        o_str := 'N';
      when others then
        p_sub_proc_erro := 'SP_OBTEM_TIPOS_ATRIBUTOS';
        p_coderro       := SQLCODE;
        P_MSGERRO       := 'Erro ao obter os tipos de atributos do servidor';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              BEN_IDE_CLI,
                              COM_COD_FCRUBRICA);
        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;

    end;

  END SP_OBTEM_TIPOS_ATRIBUTOS_prev;

  ---------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_VENC_BASE_CCOMIG(i_num_funcao in number,
                                      o_valor      out number) AS

    v_val_vencimento     number(18, 4) := 0;
    v_val_vencimento_rep number(18, 4) := 0;

  BEGIN
    BEGIN
      select /*+ RULE */
      -- RAO : 20060322
      --    v.val_vencimento,
       sum(v.val_vencimento * (case
             when v.dat_fim_vig is not null and
                  v.dat_fim_vig <= add_months(PAR_PER_PRO, 1) - 1
              and to_number(to_char(v.dat_fim_vig, 'dd')) < 31 then
              to_number(to_char(v.dat_fim_vig, 'dd'))
             when v.dat_fim_vig is not null and
                  v.dat_fim_vig <= add_months(PAR_PER_PRO, 1) - 1
                  and to_number(to_char(v.dat_fim_vig, 'dd')) = 31 then
                  30
             when v.dat_fim_vig is null and v.dat_ini_vig < PAR_PER_PRO then
             --to_number(to_char(add_months(PAR_PER_PRO, 1) - 1, 'dd'))  --ROD13 comentado
              30 --ROD13 incluido
             when to_char(v.dat_ini_vig, 'YYYYMM') <
                  to_char(PAR_PER_PRO, 'YYYYMM') then
             --31                                                        --ROD13 comentado
              30 --ROD13 incluido
             else
             -- to_number(to_char(add_months(PAR_PER_PRO, 1) - 1, 'dd')) -  --ROD13 comentado
              30 - --ROD13 incluido
              to_number(to_char(v.dat_ini_vig, 'dd')) + 1
           end) / 30), --ROD13 incluido divisao por 30
       -- / to_char(add_months(PAR_PER_PRO, 1) - 1, 'dd')),
       -- RAO : 20060322
       v.val_vencimento_rep
        into v_val_vencimento, v_val_vencimento_rep
        from tb_evolu_ccomi_gfuncional ecg, tb_vencimento v
       where ecg.cod_ins = PAR_COD_INS
         and ecg.cod_ide_cli = BEN_IDE_CLI_SERV -- efv 02032007
         and (PAR_PER_PRO >= ecg.dat_ini_efeito and
             PAR_PER_PRO <=
             nvl(ecg.dat_fim_efeito, to_date('01/01/2045', 'dd/mm/yyyy')))
         and ecg.num_matricula = COM_MATRICULA
         and ecg.cod_ide_rel_func = BEN_IDE_REL_FUNC
         and ecg.cod_entidade = COM_ENTIDADE
         and ecg.cod_referencia = v.cod_referencia
         and v.cod_ins = ecg.cod_ins
         and v.cod_entidade = ecg.cod_entidade
         and v.cod_entidade = COM_ENTIDADE
         and (v.dat_fim_vig is null or v.dat_fim_vig >= PAR_PER_PRO)
         and add_months(PAR_PER_PRO, 1) - 1 >= v.dat_ini_vig
         and v.flg_status = 'V'
       group by v.val_vencimento_rep
      --RAO : 20060322
      ;
      IF v_val_vencimento > v_sal_base(com_cod_beneficio) (1) THEN
        O_VALOR := v_val_vencimento * VI_PROP_BEN;
      ELSIF v_val_vencimento < v_sal_base(com_cod_beneficio) (1) then
        O_VALOR := v_sal_base(com_cod_beneficio) (1) * VI_PROP_BEN;
      ELSE
        O_VALOR := v_val_vencimento * VI_PROP_BEN;
      END IF;

    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        O_VALOR := SP_OBTEM_SALARIO_BASE_CARGO(ben_cod_referencia);
        O_VALOR := O_VALOR * VI_PROP_BEN;

      WHEN OTHERS THEN
        p_sub_proc_erro := 'SP_OBTEM_VENC_CCOMI_GRATIF';
        p_coderro       := SQLCODE;
        P_MSGERRO       := 'Erro ao obter vencimento comissao gratificada';
    end;

  END SP_OBTEM_VENC_BASE_CCOMIG;
  ---------------------------------------------------------------------------------

  PROCEDURE SP_OBTEM_VENC_CCOMI_GRATIF(i_num_funcao in number,
                                       o_valor      out number) AS

    v_val_vencimento     number(18, 4) := 0;
    v_val_vencimento_rep number(18, 4) := 0;

  BEGIN
    BEGIN
      select /*+ RULE */
      -- RAO : 20060322
      --    v.val_vencimento,
       sum(v.val_vencimento * (case
             when v.dat_fim_vig is not null and
                  v.dat_fim_vig <= add_months(PAR_PER_PRO, 1) - 1
              and to_number(to_char(v.dat_fim_vig, 'dd')) < 31 then
              to_number(to_char(v.dat_fim_vig, 'dd'))
             when v.dat_fim_vig is not null and
                  v.dat_fim_vig <= add_months(PAR_PER_PRO, 1) - 1
                  and to_number(to_char(v.dat_fim_vig, 'dd')) = 31 then
                  30
             when v.dat_fim_vig is null and v.dat_ini_vig < PAR_PER_PRO then
             --to_number(to_char(add_months(PAR_PER_PRO, 1) - 1, 'dd'))      --Rod13 coment
              30
             when to_char(v.dat_ini_vig, 'YYYYMM') <
                  to_char(PAR_PER_PRO, 'YYYYMM') then
             --31                                                            --Rod13 coment
              30 --Rod13 incluido
             else
             -- to_number(to_char(add_months(PAR_PER_PRO, 1) - 1, 'dd')) -   --Rod13 coment
              30 - to_number(to_char(v.dat_ini_vig, 'dd')) + 1
           end) / 30), --Rod13 incluido
       -- to_char(add_months(PAR_PER_PRO, 1) - 1, 'dd')),          --Rod13 coment
       -- RAO : 20060322
       v.val_vencimento_rep
        into v_val_vencimento, v_val_vencimento_rep
        from tb_evolu_ccomi_gfuncional ecg, tb_vencimento v
       where ecg.cod_ins = PAR_COD_INS
         and ecg.cod_ide_cli = BEN_IDE_CLI_SERV -- efv 02032007
         and (PAR_PER_PRO >= ecg.dat_ini_efeito and
             PAR_PER_PRO <=
             nvl(ecg.dat_fim_efeito, to_date('01/01/2045', 'dd/mm/yyyy')))
         and ecg.num_matricula = COM_MATRICULA
         and ecg.cod_entidade = COM_ENTIDADE
         and ecg.cod_referencia = v.cod_referencia
         and v.cod_ins = ecg.cod_ins
         and v.cod_entidade = ecg.cod_entidade
         and v.cod_entidade = COM_ENTIDADE
         and (v.dat_fim_vig is null or v.dat_fim_vig >= PAR_PER_PRO)
         and add_months(PAR_PER_PRO, 1) - 1 >= v.dat_ini_vig
         and v.flg_status = 'V'
       group by v.val_vencimento_rep
      --RAO : 20060322
      ;
      IF v_val_vencimento > v_val_vencimento_rep THEN
        O_VALOR := v_val_vencimento;
      ELSIF v_val_vencimento < v_val_vencimento_rep then
        O_VALOR := v_val_vencimento_rep;
      ELSE
        O_VALOR := v_val_vencimento;
      END IF;

    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        O_VALOR := SP_OBTEM_SALARIO_BASE_CARGO(ben_cod_referencia);

      WHEN OTHERS THEN
        p_sub_proc_erro := 'SP_OBTEM_VENC_CCOMI_GRATIF';
        p_coderro       := SQLCODE;
        P_MSGERRO       := 'Erro ao obter vencimento comissao gratificada';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              BEN_IDE_CLI,
                              COM_COD_FCRUBRICA);
        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;

    END;

  END SP_OBTEM_VENC_CCOMI_GRATIF;
  ---------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_VENC_CCOMI_GRATIF_RF(i_num_funcao in number,
                                          o_valor      out number) AS

    v_val_vencimento     number(18, 4) := 0;
    v_val_vencimento_rep number(18, 4) := 0;

  BEGIN
    BEGIN
      SELECT
      -- RAO : 20060322
      --  V.VAL_VENCIMENTO,
       sum(v.val_vencimento * (case
             when v.dat_fim_vig is not null and
                  v.dat_fim_vig <= add_months(PAR_PER_PRO, 1) - 1
              and to_number(to_char(v.dat_fim_vig, 'dd')) < 31 then
              to_number(to_char(v.dat_fim_vig, 'dd'))
             when v.dat_fim_vig is not null and
                  v.dat_fim_vig <= add_months(PAR_PER_PRO, 1) - 1
                  and to_number(to_char(v.dat_fim_vig, 'dd')) = 31 then
                  30
             when v.dat_fim_vig is null and v.dat_ini_vig < PAR_PER_PRO then
             --to_number(to_char(add_months(PAR_PER_PRO, 1) - 1, 'dd'))
              30
             when to_char(v.dat_ini_vig, 'YYYYMM') <
                  to_char(PAR_PER_PRO, 'YYYYMM') then
             --31                                                            --Rod13 coment
              30
             else
             -- to_number(to_char(add_months(PAR_PER_PRO, 1) - 1, 'dd')) -   --Rod13 coment
              30 - to_number(to_char(v.dat_ini_vig, 'dd')) + 1
           end) / 30),
       -- to_char(add_months(PAR_PER_PRO, 1) - 1, 'dd')),                  --Rod13 coment
       -- RAO : 20060322
       V.VAL_VENCIMENTO_REP
        into v_val_vencimento, v_val_vencimento_rep
        FROM TB_RELACAO_FUNCIONAL RF, TB_VENCIMENTO V
       WHERE RF.COD_INS = PAR_COD_INS
         AND RF.NUM_MATRICULA = COM_MATRICULA
         AND RF.COD_IDE_CLI = BEN_IDE_CLI_SERV -- efv 02032007
         AND RF.COD_ENTIDADE = COM_ENTIDADE
         AND RF.COD_CARGO = COM_CARGO
         AND RF.COD_PCCS = COM_PCCS
         AND V.COD_ENTIDADE = RF.COD_ENTIDADE
         AND V.COD_REFERENCIA = BEN_COD_REFERENCIA
         and (v.dat_fim_vig is null or v.dat_fim_vig >= PAR_PER_PRO)
         and add_months(PAR_PER_PRO, 1) - 1 >= v.dat_ini_vig
         and v.flg_status = 'V'
       group by v.val_vencimento_rep
      --RAO : 20060322
      ;
      --   and tip_provimento = 3;  RAO 20060113 erro em rubrica 1400

      IF v_val_vencimento > v_val_vencimento_rep THEN
        O_VALOR := v_val_vencimento;
      ELSIF v_val_vencimento < v_val_vencimento_rep then
        O_VALOR := v_val_vencimento_rep;
      ELSE
        O_VALOR := v_val_vencimento;
      END IF;

    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        O_VALOR := 0;

      WHEN OTHERS THEN
        p_sub_proc_erro := 'SP_OBTEM_VENC_CCOMI_GRATIF_RF';
        p_coderro       := SQLCODE;
        P_MSGERRO       := 'Erro ao obter vencimento comissao gratificada RF';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              BEN_IDE_CLI,
                              COM_COD_FCRUBRICA);
        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;

    END;

  END SP_OBTEM_VENC_CCOMI_GRATIF_RF;
  ---------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_VENC_CCOMI_GRATIF_REP(i_num_funcao in number,
                                           o_valor      out number) AS

    v_val_vencimento     number(18, 4) := 0;
    v_val_vencimento_rep number(18, 4) := 0;

  BEGIN
    BEGIN
      select
      -- RAO : 20060322
       sum(v.val_vencimento * (case
             when v.dat_fim_vig is not null and
                  v.dat_fim_vig <= add_months(PAR_PER_PRO, 1) - 1
              and to_number(to_char(v.dat_fim_vig, 'dd')) < 31 then
              to_number(to_char(v.dat_fim_vig, 'dd'))
             when v.dat_fim_vig is not null and
                  v.dat_fim_vig <= add_months(PAR_PER_PRO, 1) - 1
                  and to_number(to_char(v.dat_fim_vig, 'dd')) = 31 then
                  30
             when v.dat_fim_vig is null and v.dat_ini_vig < PAR_PER_PRO then
             --to_number(to_char(add_months(PAR_PER_PRO, 1) - 1, 'dd'))  --Rod13 coment
              30
             when to_char(v.dat_ini_vig, 'YYYYMM') <
                  to_char(PAR_PER_PRO, 'YYYYMM') then
             --31 --Rod13 coment
              30
             else
             --to_number(to_char(add_months(PAR_PER_PRO, 1) - 1, 'dd')) -  --Rod13 coment
              30 - to_number(to_char(v.dat_ini_vig, 'dd')) + 1
           end) / 30)
      --to_char(add_months(PAR_PER_PRO, 1) - 1, 'dd'))   --Rod13 coment
      -- RAO : 20060322
        into v_val_vencimento
        from tb_evolu_ccomi_gfuncional ecg, tb_vencimento v
       where ecg.cod_ins = PAR_COD_INS
         and ecg.cod_ide_cli = BEN_IDE_CLI_SERV -- efv 02032007
         and (PAR_PER_PRO >= ecg.dat_ini_efeito and
             PAR_PER_PRO <=
             nvl(ecg.dat_fim_efeito, to_date('01/01/2045', 'dd/mm/yyyy')))
         and ecg.num_matricula = COM_MATRICULA
         and ecg.cod_entidade = COM_ENTIDADE
         and ecg.cod_referencia = v.cod_referencia
         and v.cod_ins = ecg.cod_ins
         and v.cod_entidade = ecg.cod_entidade
         and v.cod_entidade = COM_ENTIDADE
            -- MVL : 20060417
         and (v.dat_fim_vig is null or v.dat_fim_vig >= PAR_PER_PRO)
         and add_months(PAR_PER_PRO, 1) - 1 >= v.dat_ini_vig
         and v.flg_status = 'V';

      O_VALOR := v_val_vencimento;

    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        O_VALOR := SP_OBTEM_SALARIO_BASE_CARGO(ben_cod_referencia);

      WHEN OTHERS THEN
        p_sub_proc_erro := 'SP_OBTEM_VENC_CCOMI_GRATIF_REP';
        p_coderro       := SQLCODE;
        P_MSGERRO       := 'Erro ao obter comissao gratificada por representacao';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              BEN_IDE_CLI,
                              COM_COD_FCRUBRICA);
        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;

    END;

  END SP_OBTEM_VENC_CCOMI_GRATIF_REP;
  ---------------------------------------------------------------------------------

  PROCEDURE SP_OBTEM_RELGRUPO(o_valor out number) AS
  BEGIN
    BEGIN
      select rg.cod_grupo
        into o_valor
        from tb_relgrupo rg, tb_concessao_beneficio cb
       where cb.cod_ins = PAR_COD_INS
         and cb.cod_ins = rg.cod_ins
         and cb.cod_beneficio = com_cod_beneficio
         and cb.cod_ide_cli_serv = ben_ide_cli_serv
         and cb.num_matricula = com_matricula
         and cb.cod_entidade = com_entidade
         and cb.cod_cargo = com_cargo
         and cb.cod_entidade = rg.cod_entidade
         and cb.cod_cargo = rg.cod_cargo
         and (PAR_PER_PRO >= rg.dat_ini and
             PAR_PER_PRO <=
             nvl(rg.dat_fim, to_date('01/01/2045', 'dd/mm/yyyy')));

      FOR i IN 1 .. nom_variavel.count LOOP

        IF nom_variavel(i) = COM_COL_INFORMACAO THEN
          val_variavel(i) := o_valor;
          v_val_percentual := o_valor;
          exit;
        END IF;

      END LOOP;

    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        O_VALOR := 0;

      WHEN OTHERS THEN
        p_sub_proc_erro := 'SP_OBTEM_RELGRUPO';
        p_coderro       := SQLCODE;
        P_MSGERRO       := 'Erro ao obter a relacao de grupo';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              BEN_IDE_CLI,
                              COM_COD_FCRUBRICA);

        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;

    END;
  END;
  ---------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_NOME_CARGO(o_str out varchar2) AS
  BEGIN
    Begin
      select ca.nom_cargo
        into o_str
        from tb_cargo ca
       where ca.cod_cargo = COM_CARGO
         and ca.cod_ins = PAR_COD_INS
         and ca.cod_entidade = COM_ENTIDADE
         and ca.cod_pccs = COM_PCCS;

      o_str := '''' || o_str || '''';
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        o_str := null;
        o_str := '''' || o_str || '''';
      WHEN OTHERS THEN
        p_coderro       := sqlcode;
        p_sub_proc_erro := 'SP_OBTEM_NOME_CARGO';
        p_msgerro       := 'Erro ao obter o nome do cargo';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              BEN_IDE_CLI,
                              COM_COD_FCRUBRICA);
        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;

    END;

  END;
  ---------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_CODGRUPO_ABONO(o_valor out number) AS
  BEGIN
    BEGIN
      SELECT distinct GAC.COD_GRUPO
        INTO O_VALOR
        FROM TB_GRUPO_ABONO_CARGO GAC
       WHERE GAC.COD_INS = PAR_COD_INS
         AND GAC.COD_CARGO = COM_CARGO;

      FOR i IN 1 .. nom_variavel.count LOOP

        IF nom_variavel(i) = COM_COL_INFORMACAO THEN
          val_variavel(i) := o_valor;
          exit;
        END IF;

      END LOOP;

    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        O_VALOR := 0;

      WHEN OTHERS THEN
        p_sub_proc_erro := 'SP_OBTEM_CODGRUPO_ABONO';
        p_coderro       := SQLCODE;
        P_MSGERRO       := 'Erro ao obter o grupo abono';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              BEN_IDE_CLI,
                              COM_COD_FCRUBRICA);

        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;

    END;

  END;
  ---------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_VALOR_ABONO(o_valor out number) AS

    i_valor number := 0;

  BEGIN
    BEGIN
      SELECT distinct GAV.VAL_VALOR
        INTO O_VALOR
        FROM TB_GRUPO_ABONO_VALOR GAV, TB_GRUPO_ABONO_CARGO GAC
       WHERE GAV.COD_INS = PAR_COD_INS
         AND GAV.COD_GRUPO = GAC.COD_GRUPO
         AND GAC.COD_INS = GAV.COD_INS
         AND GAC.COD_CARGO = COM_CARGO
         AND (GAV.COD_SETOR is null or
             (GAV.COD_SETOR = '0211' or GAV.COD_SETOR = '0212'))
         AND (PAR_PER_PRO >= GAC.DAT_INI AND
             PAR_PER_PRO <=
             nvl(GAC.DAT_FIM, to_date('01/01/2045', 'dd/mm/yyyy')))
         AND (PAR_PER_PRO >= GAV.DAT_INI AND
             PAR_PER_PRO <=
             nvl(GAV.DAT_FIM, to_date('01/01/2045', 'dd/mm/yyyy')));

      FOR i IN 1 .. nom_variavel.count LOOP

        IF nom_variavel(i) = COM_COL_INFORMACAO THEN
          BEGIN
            SELECT distinct GAC.COD_GRUPO
              INTO I_VALOR
              FROM TB_GRUPO_ABONO_CARGO GAC
             WHERE GAC.COD_INS = PAR_COD_INS
               AND GAC.COD_CARGO = COM_CARGO
               AND (PAR_PER_PRO >= GAC.DAT_INI AND
                   PAR_PER_PRO <=
                   nvl(GAC.DAT_FIM, to_date('01/01/2045', 'dd/mm/yyyy')));

          EXCEPTION
            WHEN NO_DATA_FOUND THEN
              I_VALOR := 0;
          END;
          val_variavel(i) := i_valor;
          v_val_percentual := i_valor;
          exit;
        END IF;

      END LOOP;

    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        O_VALOR := 0;

      WHEN OTHERS THEN
        p_sub_proc_erro := 'SP_OBTEM_VALOR_ABONO';
        p_coderro       := SQLCODE;
        P_MSGERRO       := 'Erro ao obter o valor do abono';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              BEN_IDE_CLI,
                              COM_COD_FCRUBRICA);

        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;

    END;

  END;
  ---------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_TIPO_ABONO(o_str out varchar2) AS
  BEGIN
    BEGIN
      SELECT distinct GAV.COD_TIPO
        INTO O_STR
        FROM TB_GRUPO_ABONO_VALOR GAV, TB_GRUPO_ABONO_CARGO GAC
       WHERE GAV.COD_INS = PAR_COD_INS
         AND GAV.COD_GRUPO = GAC.COD_GRUPO
         AND GAC.COD_INS = GAV.COD_INS
         AND GAC.COD_CARGO = COM_CARGO
         AND (PAR_PER_PRO >= GAC.DAT_INI AND
             PAR_PER_PRO <=
             nvl(GAC.DAT_FIM, to_date('01/01/2045', 'dd/mm/yyyy')))
         AND (PAR_PER_PRO >= GAV.DAT_INI AND
             PAR_PER_PRO <=
             nvl(GAV.DAT_FIM, to_date('01/01/2045', 'dd/mm/yyyy')));

    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        O_STR := '';

      WHEN OTHERS THEN
        p_sub_proc_erro := 'SP_OBTEM_TIPO_ABONO';
        p_coderro       := SQLCODE;
        P_MSGERRO       := 'Erro ao obter o Tipo de Abono';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              BEN_IDE_CLI,
                              COM_COD_FCRUBRICA);

        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;

    END;

  END;
  ---------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_VENCIMENTO(cod_refer in number, o_valor out number) AS
  BEGIN
    BEGIN
      SELECT case
               when V.VAL_VENCIMENTO_REP > V.VAL_VENCIMENTO then
                V.VAL_VENCIMENTO_REP
               when V.VAL_VENCIMENTO >= V.VAL_VENCIMENTO_REP then
                V.VAL_VENCIMENTO
             end
        INTO O_VALOR
        FROM TB_VENCIMENTO V
       WHERE V.COD_INS = PAR_COD_INS
         AND V.COD_ENTIDADE = COM_ENTIDADE
         AND V.COD_REFERENCIA = COD_REFER
         AND (PAR_PER_PRO >= V.DAT_INI_VIG
             -- MVL
             AND PAR_PER_PRO <=
             nvl(V.DAT_FIM_VIG, to_date('01/01/2045', 'dd/mm/yyyy')))
         AND V.FLG_STATUS = 'V'
      --     and nvl(v.dat_fim_vig,COM_DAT_VIG_RUBRICA) <= COM_DAT_VIG_RUBRICA )  -- MVL 20060417
      ;

    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        O_VALOR := 0;

      WHEN OTHERS THEN
        p_sub_proc_erro := 'SP_OBTEM_VENCIMENTO';
        p_coderro       := SQLCODE;
        P_MSGERRO       := 'Erro ao obter o valor do vencimento';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              BEN_IDE_CLI,
                              COM_COD_FCRUBRICA);

        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;

    END;

  END SP_OBTEM_VENCIMENTO;
  ---------------------------------------------------------------------------------
      PROCEDURE SP_OBTEM_IRRF(ide_cli    in varchar2,
                          idx_val    in number,
                          FLG_PA     IN VARCHAR2,
                          O_VALOR    OUT NUMBER,
                          O_VALOR_13 OUT NUMBER) AS

    VI_VAL_PAGOS        NUMBER(18, 4) := 0;
    VI_ISENTO           boolean := TRUE;
    nEdad               number;
    nIni                number;
    nFin                number;
    vi_rubrica          number := 0;
    vi_val_rubrica      number := 0;
    vi_seq_vig          number := 0;
    valor_proc_especial NUMBER(18, 4) := 0;
    DAT_PERIODO_PAG     date;
    PARAMETRO_IR        CHAR(1);
  BEGIN

    vi_val_pagos := 0;

    nEdad   := 0;
    nIni    := 0;
    nFin    := 0;
    o_valor := 0;

    IF  FLG_PA  ='A' THEN
       PARAMETRO_IR:='A';
    ELSIF FLG_PA ='D' THEN
      PARAMETRO_IR:='D';
    ELSIF FLG_PA ='E' THEN
      PARAMETRO_IR:='E';
    ELSE
     PARAMETRO_IR:='A';
     END IF;

    IF FLG_PA = 'S' THEN
      vi_base_ir    := v_valor_total_pa;
      vi_base_ir_13 := v_valor_total_pa;
    ELSE
             IF NVL(PARAMETRO_IR,'A') !='E' THEN
               SP_OBTEM_BASE_IR(idx_val,PARAMETRO_IR, vi_base_ir, vi_base_ir_13);
            ELSE
               SP_OBTEM_BASE_IR_EXT(idx_val,PARAMETRO_IR, vi_base_ir, vi_base_ir_13);
            END IF;
   END IF;

    vi_base_bruta    := vi_base_ir;
    vi_base_bruta_13 := vi_base_ir_13;

    VI_TOT_DED := 0;
    VI_TOT_DED_RUB:=0;
    --- Obtem valores deduc?es
    -- Enfermidade grave
    -- judicial (isenc?o)
    IF sp_isenta_irrf(ide_cli) <> VI_ISENTO THEN
       IF NOT VI_IR_EXTERIOR THEN
              -- Maior 65
             --- Verifica Grupo de Pagamento e Data de Pagamento.
                FOR I IN 1 ..  tgrup.COUNT LOOP
                 IF  VFOLHA.COUNT  >0 THEN
                  IF tgrup(i).NUM_GRP_PAG =VFOLHA(1).NUM_GRP THEN
                     DAT_PERIODO_PAG :=tgrup(i).DAT_PAGAMENTO;
                     EXIT;
                   END IF;
                 END IF;
                 END LOOP;
                 IF   DAT_PERIODO_PAG IS NULL OR
                      DAT_PERIODO_PAG < PAR_PER_PRO THEN
                      DAT_PERIODO_PAG:=PAR_PER_PRO;
                 END IF;

              nFin  := to_char(ANT_DTA_NASC, 'yyyymmdd');
              nIni  := to_char(last_day(DAT_PERIODO_PAG), 'yyyymmdd');
              nEdad := (nIni - nFin) / 10000;
              IF nEdad >= 65 THEN
                VI_TOT_DED := V_DED_IR_65;
              END IF;

              -- Dependentes
              VI_NUM_DEP_ECO := 0;
              IF COM_TIP_BENEFICIO = 'APOSENTADO' THEN
                VI_NUM_DEP_ECO := SP_OBTEM_DEP_DED_IR(IDE_CLI, 'A');
              ELSE
                VI_NUM_DEP_ECO := SP_OBTEM_DEP_DED_IR(IDE_CLI, 'P');
              END IF;

              IF VI_NUM_DEP_ECO > 0 THEN
                VI_TOT_DED := nvl(VI_TOT_DED, 0) + (V_DED_IR_DEP * VI_NUM_DEP_ECO);
              END IF;
       END IF;
      IF FLG_PA = 'S' THEN
        vi_val_pagos := 0;
      else
        -- Rubricas que deduzem no IR
        vi_val_pagos := SP_OBTEM_DED_PAGOS_IRRF(PARAMETRO_IR);--SP_OBTEM_DED_PAGOS;
      end if;
      IF vi_val_pagos > 0 THEN
        VI_TOT_DED_RUB  :=vi_val_pagos;
        VI_TOT_DED := VI_TOT_DED + vi_val_pagos;
      END IF;

      --- Obtem Base IRRF
      --     sp_composicao ('BASE_IRRF', VI_BASE_IR);
      IF VI_BASE_IR > VI_TOT_DED THEN
        VI_BASE_IR := nvl(VI_BASE_IR, 0) - VI_TOT_DED;
        --- Obtem valor IR
        
           ------- Calculo de Ir Externo ------
          IF NVL(PARAMETRO_IR,'A') !='E' THEN 
              SP_CALCULA_IMPOSTO2(vi_base_ir, o_valor);
          ELSE
               SP_CALCULA_IMPOSTO_EXT(vi_base_ir, o_valor);
          END IF;           
        
      END IF;

      IF VI_BASE_IR_13 > VI_TOT_DED THEN
        vi_base_ir_13 := vi_base_ir_13 - VI_TOT_DED;
        IF VI_TEM_SAIDA OR PAR_TIP_PRO = 'T' or  PARAMETRO_IR='D' THEN
        
               ------- Calculo de Ir Externo ------
           IF NVL(PARAMETRO_IR,'A') !='E' THEN 
               SP_CALCULA_IMPOSTO2(vi_base_ir_13, o_valor_13);
           ELSE
               SP_CALCULA_IMPOSTO_EXT(vi_base_ir_13, o_valor_13);
           END IF;           
          
        END IF;
      END IF;
      ---RAO : Somente retem se maior a 10 reais 20060301
      --        IF o_valor<=10 then
      --           o_valor:=0;    ----->> ffranco 10/11/2008
      --        END IF;

    ELSE
      IF VI_DOENCA THEN
        V_DED_IR_DOENCA := VI_BASE_IR;
        VI_BASE_IR      := 0;
      ELSE
        V_BASE_ISENCAO  := VI_BASE_IR;
        V_DED_IR_DOENCA := 0;
        VI_BASE_IR      := 0;
      END IF;
    END IF;
    -- Agregado para Calculo de IR


  END SP_OBTEM_IRRF;
  ----------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_BASE_IR(idx        in number,
                             tipo_irr   in varchar,
                             vi_base_ir out number,
                             base_ir_13 out number
                              ) as

    i           number := 0;
    j           number := 0;
    iver        number := 0;
    cod_ben_ant number := 0;
    cod_ben_atu number := 0;
    v_inicio    char(1) := 'S';
    DAT_INICIO_IRRF DATE:=NULL;
    DAT_TERMINO_IRRF DATE:=NULL;


  BEGIN
    BEGIN
      FOR i IN 1 .. cod_con2.count LOOP
        iver :=cod_con2.count;
        IF PAR_TIP_PRO <> 'E' THEN
          IF (par_tip_pro = 'T' OR   tipo_irr='D') AND flag_base2(i) = 'S' THEN
            FOR j IN 1 .. idx LOOP

                 irdcn := case
                               when tipo_irr ='A' then  tdcn_irrf(j)
                               when tipo_irr ='R' then  tdcn_irrf_RETRO(j)
                               when tipo_irr ='D' then  tdcn_irrf_RETRO13(j)

                              else tdcn(j) end;
              IF irdcn.per_processo = PAR_PER_PRO THEN
                IF cod_rub2(i) = irdcn.cod_fcrubrica  /*AND
                   cod_entidade(i) = irdcn.cod_entidade */ THEN -- ANT_ENTIDADE THEN
                  IF ( tip_evento2(i) = 'T' or tipo_irr='D') AND irdcn.flg_natureza = 'C' THEN
                    base_ir_13 := nvl(base_ir_13, 0) + irdcn.val_rubrica;
                    IF V_CALCULO_IR = 'S' THEN
                      VI_BASE_IR_ARR_13(irdcn.cod_beneficio)(1) := VI_BASE_IR_ARR_13(irdcn.cod_beneficio)
                                                                   (1) +
                                                                   irdcn.val_rubrica;

                    END IF;
                  ELSIF ( tip_evento2(i) = 'T' or tipo_irr='D') AND irdcn.flg_natureza = 'D' THEN
                    IF irdcn.cod_fcrubrica<>1860702 THEN  ---- incluido por ROD DEZ09
                      base_ir_13 := nvl(base_ir_13, 0) - irdcn.val_rubrica;
                      IF V_CALCULO_IR = 'S' THEN
                        VI_BASE_IR_ARR_13(irdcn.cod_beneficio)(1) := VI_BASE_IR_ARR_13(irdcn.cod_beneficio)
                                                                     (1) -
                                                                     irdcn.val_rubrica;


                      END IF;
                    END IF;                                ---- incluido por ROD DEZ09
                  END IF;
                END IF;
              END IF;
            END LOOP;
          ELSIF flag_base2(i) = 'S' THEN
            FOR j IN 1 .. idx LOOP
              irdcn := case
                               when tipo_irr ='A' then  tdcn_irrf(j)
                               when tipo_irr ='R' then  tdcn_irrf_RETRO(j)
                               when tipo_irr ='D' then  tdcn_irrf_RETRO13(j)

                               else tdcn(j) end;
              IF irdcn.per_processo = PAR_PER_PRO THEN
                IF cod_rub2(i) = irdcn.cod_fcrubrica /* AND
                   cod_entidade(i) = irdcn.cod_entidade */ THEN --ANT_ENTIDADE THEN
                  IF irdcn.flg_natureza = 'C'
                     -- Modificado por IR ACUMULADO
                     AND tip_evento_especial2(i) <> 'T' AND par_tip_pro <> 'T'
                    THEN
                    vi_base_ir := nvl(vi_base_ir, 0) + irdcn.val_rubrica;
                    IF V_CALCULO_IR = 'S' THEN
                      begin
                        VI_BASE_IR_ARR(irdcn.cod_beneficio)(1) := VI_BASE_IR_ARR(irdcn.cod_beneficio)
                                                                  (1) +
                                                                  irdcn.val_rubrica;



                         IF DAT_INICIO_IRRF IS NULL OR irdcn.dat_ini_ref <DAT_INICIO_IRRF THEN
                             DAT_INICIO_IRRF :=irdcn.dat_ini_ref ;
                          END IF;
                          IF DAT_TERMINO_IRRF   IS NULL OR irdcn.dat_fim_ref >DAT_TERMINO_IRRF   THEN
                           DAT_TERMINO_IRRF  :=irdcn.dat_FIM_ref ;
                          END IF;
                          IF  tipo_irr ='R' THEN
                            tdcn_irrf_RETRO(j).FLG_IR_ACUMULADO :='S';
                            tdcn(j).FLG_IR_ACUMULADO            :='S';
                          END IF;
                       exception
                        when others then
                          p_sub_proc_erro := 'SP_OBTEM_BASE_IR';
                          p_coderro       := SQLCODE;
                          P_MSGERRO       := 'Erro na inclusao do array da base de IR';
                          INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                                p_coderro,
                                                'Calcula Folha',
                                                sysdate,
                                                p_msgerro,
                                                p_sub_proc_erro,
                                                irdcn.cod_ide_cli,
                                                irdcn.cod_fcrubrica);

                          VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;

                      end;
                    END IF;
                  ELSIF tip_evento_especial2(i) <> 'T' AND
                        irdcn.flg_natureza = 'D' AND par_tip_pro <> 'T' THEN
                    vi_base_ir := nvl(vi_base_ir, 0) - irdcn.val_rubrica;
                    IF V_CALCULO_IR = 'S' THEN
                      begin
                        VI_BASE_IR_ARR(irdcn.cod_beneficio)(1) := VI_BASE_IR_ARR(irdcn.cod_beneficio)
                                                                  (1) -
                                                                  irdcn.val_rubrica;
                         IF DAT_INICIO_IRRF IS NULL OR irdcn.dat_ini_ref <DAT_INICIO_IRRF THEN
                             DAT_INICIO_IRRF :=irdcn.dat_ini_ref ;
                          END IF;
                          IF DAT_TERMINO_IRRF   IS NULL OR irdcn.dat_fim_ref >DAT_TERMINO_IRRF   THEN
                           DAT_TERMINO_IRRF  :=irdcn.dat_FIM_ref ;
                          END IF;
                          IF  tipo_irr ='R' THEN
                            tdcn_irrf_RETRO(j).FLG_IR_ACUMULADO :='S';
                            tdcn(j).FLG_IR_ACUMULADO            :='S';
                           END IF;
                     exception
                        when others then
                          p_sub_proc_erro := 'SP_OBTEM_BASE_IR';
                          p_coderro       := SQLCODE;
                          P_MSGERRO       := 'Erro na inclusao do array da base de IR';
                          INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                                p_coderro,
                                                'Calcula Folha',
                                                sysdate,
                                                p_msgerro,
                                                p_sub_proc_erro,
                                                irdcn.cod_ide_cli,
                                                irdcn.cod_fcrubrica);

                          VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
                      end;
                    END IF;
                  ELSE
                    base_ir_13 := nvl(base_ir_13, 0) + irdcn.val_rubrica;
                  END IF;
                END IF;
              END IF;
            END LOOP;
          ELSIF flag_base2(i) = 'N' AND tip_evento_especial2(i) = 'T' AND
                par_tip_pro <> 'T' THEN
            FOR j IN 1 .. idx LOOP
              irdcn := case
                               when tipo_irr ='A' then  tdcn_irrf(j)
                               when tipo_irr ='R' then  tdcn_irrf_RETRO(j)
                               when tipo_irr ='D' then  tdcn_irrf_RETRO13(j)

                                else tdcn(j) end;
              IF irdcn.per_processo = PAR_PER_PRO THEN
                IF cod_rub2(i) = irdcn.cod_fcrubrica  /* AND
                   cod_entidade(i) = irdcn.cod_entidade */ THEN --ANT_ENTIDADE THEN
                  base_ir_13 := nvl(base_ir_13, 0) + irdcn.val_rubrica;
                  VI_BASE_IR_ARR_13(irdcn.cod_beneficio)(1) := VI_BASE_IR_ARR_13(irdcn.cod_beneficio)
                                                               (1) +
                                                               irdcn.val_rubrica;
                END IF;
              END IF;
            END LOOP;
          END IF;
        ELSE
          IF flag_base2(i) = 'S' THEN
            FOR j IN 1 .. idx LOOP
               irdcn := case
                               when tipo_irr ='A' then  tdcn_irrf(j)
                               when tipo_irr ='R' then  tdcn_irrf_RETRO(j)
                               when tipo_irr ='D' then  tdcn_irrf_RETRO13(j)
                             else tdcn(j) end;
              IF irdcn.per_processo = PAR_PER_PRO THEN
                IF cod_rub2(i) = irdcn.cod_fcrubrica /* AND
                   cod_entidade(i) = irdcn.cod_entidade*/  THEN --ANT_ENTIDADE THEN
                  IF irdcn.flg_natureza = 'C' AND
                     tip_evento_especial2(i) <> 'T' THEN
                    vi_base_ir := nvl(vi_base_ir, 0) + irdcn.val_rubrica;
                    IF V_CALCULO_IR = 'S' THEN
                      IF v_inicio = 'S' THEN
                        VI_BASE_IR_ARR(irdcn.cod_beneficio)(1) := irdcn.val_rubrica;
                        v_inicio := 'N';
                      ELSE
                        VI_BASE_IR_ARR(irdcn.cod_beneficio)(1) := VI_BASE_IR_ARR(irdcn.cod_beneficio)
                                                                  (1) +
                                                                  irdcn.val_rubrica;
                      END IF;
                      IF DAT_INICIO_IRRF IS NULL OR irdcn.dat_ini_ref <DAT_INICIO_IRRF THEN
                         DAT_INICIO_IRRF :=irdcn.dat_ini_ref ;
                      END IF;
                      IF DAT_TERMINO_IRRF   IS NULL OR irdcn.dat_fim_ref >DAT_TERMINO_IRRF   THEN
                       DAT_TERMINO_IRRF  :=irdcn.dat_FIM_ref ;
                      END IF;

                    END IF;
                  ELSE
                    base_ir_13 := nvl(base_ir_13, 0) + irdcn.val_rubrica;
                  END IF;
                END IF;
              END IF;
            END LOOP;
          END IF;
        END IF;
      END LOOP;



      IF tipo_irr ='R' THEN
         DAT_INI_IRRF_RETRO  :=DAT_INICIO_IRRF;
         DAT_FIM_IRRF_RETRO  :=DAT_TERMINO_IRRF ;
      END IF;

       exception
        when others then
          p_sub_proc_erro := 'SP_OBTEM_BASE_IR';
          p_coderro       := SQLCODE;
          P_MSGERRO       := 'Erro no  IR Novo';
          INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                p_coderro,
                                'Calcula Folha',
                                sysdate,
                                p_msgerro,
                                p_sub_proc_erro,
                                irdcn.cod_ide_cli,
                                irdcn.cod_fcrubrica);

       end;
   END sp_obtem_base_ir;
  ----------------------------------------------------------------------------------

  FUNCTION SP_OBTEM_DED_PAGOS RETURN NUMBER IS
    O_VALOR NUMBER(18, 4);
    i       number := 0;
  BEGIN
    O_VALOR := 0;

    FOR i IN 1 .. tdcn.count LOOP
      rdcn := tdcn(i);
      ant_entidade:=RDCN.COD_ENTIDADE;
      IF SP_DED_IR(rdcn.cod_fcrubrica) and rdcn.per_processo = PAR_PER_PRO THEN
        o_valor := o_valor + rdcn.val_rubrica;
        IF rdcn.NUM_ORD_JUD IS NOT NULL THEN
          IF SP_DED_IR_PA(rdcn.cod_fcrubrica, rdcn.NUM_ORD_JUD) THEN
            V_DED_IR_PA := V_DED_IR_PA + rdcn.val_rubrica;
          END IF;
        END IF;
      END IF;
    END LOOP;

    RETURN(O_VALOR);
  END SP_OBTEM_DED_PAGOS;
  -----------------------------

  FUNCTION SP_OBTEM_DED_PAGOS_SEMPA RETURN NUMBER IS
    O_VALOR NUMBER(18, 4);
    i       number := 0;
  BEGIN
    O_VALOR := 0;

    FOR i IN 1 .. tdcn.count LOOP
      rdcn := tdcn(i);
      ant_entidade:=RDCN.COD_ENTIDADE;
      IF SP_DED_IR(rdcn.cod_fcrubrica) and rdcn.per_processo = PAR_PER_PRO
         AND rdcn.cod_fcrubrica NOT IN (7800115,2200156)
         AND TRUNC(rdcn.cod_fcrubrica/100) NOT IN (78006,78007,78008,78009,78010,78030,78001)
         THEN
        o_valor := o_valor + rdcn.val_rubrica;
        IF rdcn.NUM_ORD_JUD IS NOT NULL THEN
          IF SP_DED_IR_PA(rdcn.cod_fcrubrica, rdcn.NUM_ORD_JUD) THEN
            V_DED_IR_PA := V_DED_IR_PA + rdcn.val_rubrica;
          END IF;
        END IF;
      END IF;
    END LOOP;

    RETURN(O_VALOR);
  END SP_OBTEM_DED_PAGOS_SEMPA ;
  ----------------------------------------------------------------------------------
  FUNCTION SP_DED_IR(I_NUM_FCRUBRICA NUMBER) RETURN BOOLEAN IS
    O_DED_IR BOOLEAN;

    i number := 0;

  BEGIN
    o_ded_ir := FALSE;

    FOR i IN 1 .. cod_con2.count LOOP
         /*
           IF cod_rub2(i) = i_num_fcrubrica   THEN
              IF flag_ded2(i) = 'S' THEN
                 O_DED_IR := TRUE;
              END IF;
           END IF;
        */
        IF cod_rub2(i) = i_num_fcrubrica THEN
         ------------------ Calculo de Ir Externo -------------------
         IF NOT  VI_IR_EXTERIOR THEN
           IF flag_ded2(i) = 'S' THEN
              O_DED_IR := TRUE;
            END IF;
        ELSE
            IF flag_ded2_EXT(i) = 'S' THEN
              O_DED_IR := TRUE;
            END IF;
        END IF;
      END IF;


    END LOOP;

    RETURN(o_ded_ir);
  END SP_DED_IR;
  ----------------------------------------------------------------------------------
  FUNCTION SP_DED_IR_PA(I_NUM_FCRUBRICA NUMBER, I_NUM_ORD_JUD NUMBER)
    RETURN BOOLEAN IS
    O_DED_IR BOOLEAN;

    i number := 0;

  BEGIN
    O_DED_IR := FALSE;

    BEGIN
      SELECT COUNT(1)
        INTO I
        FROM TB_COMPOSICAO_OJ CO, TB_ORDEM_JUDICIAL OJ
       WHERE CO.COD_INS = PAR_COD_INS
         AND CO.NUM_ORD_JUD = I_NUM_ORD_JUD
         AND CO.COD_FCRUBRICA = i_num_fcrubrica
         AND OJ.COD_INS = CO.COD_INS
         AND OJ.NUM_ORD_JUD = CO.NUM_ORD_JUD;

      IF I > 0 THEN
        O_DED_IR := TRUE;
      END IF;

    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        O_DED_IR := FALSE;
    END;

    RETURN(O_DED_IR);
  END SP_DED_IR_PA;
  ----------------------------------------------------------------------------------
  PROCEDURE SP_CALCULA_PORC(I_VALOR out number) AS

  BEGIN

    BEGIN

      IF COM_QTY_UNID_IND = 0 THEN
        COM_QTY_UNID_IND := 1;
      END IF;
      IF COM_VAL_PORC_IND > 0 THEN
        I_VALOR := (COM_VAL_PORC_IND * nvl(COM_QTY_UNID_IND, 1)) / 100;
      ELSE
        I_VALOR := (COM_VAL_UNID * nvl(COM_QTY_UNID_IND, 1)) / 100;
      END IF;

    EXCEPTION
      WHEN OTHERS THEN
        p_sub_proc_erro := 'SP_CALCULA_PORC';
        p_coderro       := SQLCODE;
        P_MSGERRO       := 'Erro no calculo do Percentual';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              BEN_IDE_CLI,
                              COM_COD_FCRUBRICA);

        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;

    END;

  END SP_CALCULA_PORC;
  ----------------------------------------------------------------------------------
  PROCEDURE SP_CALCULA_PORC_GRADUACAO(i_valor out number) AS
  BEGIN
    BEGIN
      SELECT /*+ RULE */
       rm.val_percentual
        into i_valor
        from tb_rel_refs               rr,
             tb_rep_militar_tbref      rm,
             tb_evolu_ccomi_gfuncional ecg
       where ecg.cod_ins = PAR_COD_INS
         and ecg.cod_ide_cli = ben_ide_cli_serv
         and ecg.cod_referencia = rr.cod_referencia
         and ecg.cod_entidade = com_entidade
         and ecg.cod_cargo_rel = com_cargo
         and ecg.num_matricula = num_matricula
         and rr.cod_ins = ecg.cod_ins
         and rr.cod_ins = rm.cod_ins
         and rr.cod_tabela_venc = rm.cod_tabela_venc
         and rr.cod_ref_ativos = rm.cod_ref_ativos
         and (PAR_PER_PRO >= ecg.dat_ini_efeito and
             PAR_PER_PRO <=
             nvl(ecg.dat_fim_efeito, to_date('01/01/2045', 'dd/mm/yyyy')));

    EXCEPTION
      WHEN OTHERS THEN
        i_valor := 0;
    end;

  END SP_CALCULA_PORC_GRADUACAO;
  ----------------------------------------------------------------------------------
  PROCEDURE SP_CALC_PORC_GRADUACAO_EVOLU(i_valor out number) AS
  BEGIN
    BEGIN
      SELECT rm.val_percentual
        into i_valor
        from tb_rel_refs rr, tb_rep_militar_tbref rm
       where rr.cod_referencia = BEN_COD_REFERENCIA
         and rr.cod_ins = PAR_COD_INS
         and rr.cod_ins = rm.cod_ins
         and rr.cod_tabela_venc = rm.cod_tabela_venc
         and rr.cod_ref_ativos = rm.cod_ref_ativos;

    EXCEPTION
      WHEN OTHERS THEN
        i_valor := 0;
    end;

  END SP_CALC_PORC_GRADUACAO_EVOLU;
  ----------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_ORIG_TAB_VENC(o_str out varchar2) AS
  BEGIN

    begin
      select v.cod_orig_tab_venc
        into o_str
        from tb_rel_refs rr, tb_tabela_vencimento v
       where rr.cod_referencia = BEN_COD_REFERENCIA
         and rr.cod_ins = PAR_COD_INS
         and rr.cod_tabela_venc = v.cod_tabela_venc
         and rr.cod_ins = v.cod_ins;

    exception
      when others then
        o_str := null;
    end;
  END SP_OBTEM_ORIG_TAB_VENC;
  ----------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_COD_REFERENCIA(o_str out varchar2) AS
  BEGIN

    begin
      select venc.cod_referencia
        into o_str
        from tb_vencimento venc, tb_evolucao_funcional_ben ef
       where ef.cod_ins = PAR_COD_INS
         and venc.cod_referencia = ef.cod_referencia
         and venc.cod_ins = ef.cod_ins
         and venc.cod_pccs = ef.cod_pccs
         and venc.cod_entidade = ef.cod_entidade
         and venc.dat_fim_vig is null
         and ef.cod_ide_cli_ben = COM_IDE_CLI_INSTITUIDOR
         and ef.cod_ide_rel_func = BEN_IDE_REL_FUNC
         ---- Incluido em 15-05-2018
         and venc.flg_status='V';

    exception
      when others then
        o_str := null;
    end;
  END SP_OBTEM_COD_REFERENCIA;
  ----------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_ORIG_TAB_VENC_CCOMI(o_str out varchar2) AS
  BEGIN

    begin
      select distinct v.cod_orig_tab_venc
        into o_str
        from tb_rel_refs               rr,
             tb_tabela_vencimento      v,
             tb_evolu_ccomi_gfuncional ecg
       where rr.cod_referencia = ecg.cod_referencia
         and rr.cod_ins = PAR_COD_INS
         and rr.cod_tabela_venc = v.cod_tabela_venc
         and rr.cod_ins = v.cod_ins
         and rr.cod_ins = ecg.cod_ins
         and rr.cod_jornada = ecg.cod_jornada
         and ecg.cod_ide_cli = ben_ide_cli_serv
         and ecg.cod_entidade = COM_ENTIDADE
         and ecg.num_matricula = COM_MATRICULA
         and ecg.cod_cargo_rel = com_cargo
         and (PAR_PER_PRO >= ecg.dat_ini_efeito and
             PAR_PER_PRO <=
             nvl(ecg.dat_fim_efeito, to_date('01/01/2045', 'dd/mm/yyyy')));

    exception
      when others then
        o_str := null;
    end;
  END SP_OBTEM_ORIG_TAB_VENC_CCOMI;
  ----------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_IND_DJ(o_str out varchar2) AS
  BEGIN
    BEGIN
      select rr.flg_ind_d
        into o_str
        from tb_referencia rr
       where rr.cod_referencia = BEN_COD_REFERENCIA
         and rr.cod_ins = PAR_COD_INS
         and rr.cod_entidade = COM_ENTIDADE;

    EXCEPTION
      WHEN NO_DATA_FOUND THEN

        o_str := 'N';

      WHEN OTHERS THEN
        p_sub_proc_erro := 'SP_OBTEM_IND_DJ';
        p_coderro       := SQLCODE;
        P_MSGERRO       := 'Erro ao obter o Indicador DJ';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              BEN_IDE_CLI,
                              COM_COD_FCRUBRICA);

        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;

    END;

  END SP_OBTEM_IND_DJ;
  ----------------------------------------------------------------------------------
  PROCEDURE SP_INS_DETCALCULADO(i_valor in number) AS
  BEGIN
    IF BEN_TIPO_PESSOA = 'B' THEN
      SP_INS_DETCAL_NORMAL(i_valor);
    END IF;

  END SP_INS_DETCALCULADO;
  ----------------------------------------------------------------------------------
  -- Agrega rubrica en array que sera inserido na tabela de detalhe calculado
  --
  PROCEDURE SP_INS_DETCAL_NORMAL(i_valor in number) AS
    cur_form         curesp;
    vs_str           varchar2(100);
    vs_inf           varchar2(10);
    vs_valor_val     number(18, 4);
    val_rubrica_supl number(18, 4) := 0;
    vi_valor_det     number(18, 4) := 0;
    vc_nao_parcela   varchar2(1) := null;
    vs_valor_novo    number(18, 4);
    vs_valor_novo2   number(18, 4);
    vs_tem_ajuste    char(1) := 'S';
    ENCONTRO_BENEFICIO NUMBER:=0;
    -- vi_valor_det number(18,4) := 0;
    -- vc_nao_parcela varchar2(1) := null;
  BEGIN

    vi_valor_det := i_valor;
    -- incluir informacao do beneficiario por ordem judicial PA

    IF COM_NUM_ORD_JUD IS NOT NULL THEN
      BEGIN
        select co.cod_ide_cli
          into rdcn.cod_ide_cli_ben
          from tb_composicao_oj co
         where co.cod_ins = PAR_COD_INS
           and co.num_ord_jud = COM_NUM_ORD_JUD
           AND co.cod_fcrubrica = com_cod_fcrubrica;
      EXCEPTION
        when no_data_found then
          rdcn.cod_ide_cli_ben := null;
      END;
    ELSE
      rdcn.cod_ide_cli_ben := null;
    END IF;

    vc_nao_parcela := 'N';

    --  testa se houve parcelamento --


    --Ajuste de rubricas de valor distinto do calculado
    IF COM_TIP_BENEFICIO = 'PENSIONISTA' THEN
      BEGIN
        SELECT distinct valor_novo
          INTO vs_valor_novo
          FROM TB_AJUSTES_RUB a
         WHERE COD_INS = PAR_COD_INS
           AND COD_FCRUBRICA = COM_COD_FCRUBRICA
           AND to_char(DAT_INI_VIG, 'YYYYMM') <=
               to_char(PAR_PER_PRO, 'YYYYMM')
           AND (to_char(DAT_FIM_VIG, 'YYYYMM') >=
               to_char(PAR_PER_PRO, 'YYYYMM') or DAT_FIM_VIG IS NULL)
           AND COD_BENEFICIO = COM_COD_BENEFICIO
           AND SEQ_VIG = COM_SEQ_VIG;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          vs_tem_ajuste := 'N';
      END;

      IF vs_tem_ajuste = 'S' THEN
        SP_RATEIO_BENEFICIO(COM_COD_BENEFICIO,
                            BEN_IDE_CLI,
                            vs_valor_novo,
                            vs_valor_novo2,
                            VI_PERCENTUAL_RATEIO); -- Valor com rateio
        vi_valor_det := vs_valor_novo * VI_PERCENTUAL_RATEIO;
      END IF;
    END IF;

    IF vc_nao_parcela = 'N' THEN

      IF vi_valor_det > 0 THEN
        BEGIN
          tdcn.extend;
        EXCEPTION
          when others then
            p_sub_proc_erro := 'SP_INS_DETCAL_NORMAL';
            p_coderro       := SQLCODE;
            P_MSGERRO       := 'Erro na criacao do ARRAY das rubricas';
            INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                  p_coderro,
                                  'Calcula Folha',
                                  sysdate,
                                  p_msgerro,
                                  p_sub_proc_erro,
                                  BEN_IDE_CLI,
                                  COM_COD_FCRUBRICA);

            VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;

        END;

        idx_caln        := nvl(idx_caln, 0) + 1;
        idx_seq_detalhe := nvl(idx_seq_detalhe, 0) + 1;

        rdcn.cod_ins       := PAR_COD_INS;
        rdcn.tip_processo  := PAR_TIP_PRO;
        rdcn.per_processo  := PAR_PER_PRO;
        rdcn.cod_ide_cli   := BEN_IDE_CLI;
        rdcn.cod_beneficio := COM_COD_BENEFICIO;
        rdcn.seq_pagamento := vi_seq_pagamento;
        rdcn.seq_detalhe   := idx_seq_detalhe;
        rdcn.cod_fcrubrica := COM_COD_FCRUBRICA;
        rdcn.seq_vig       := COM_SEQ_VIG; --COM_SEQ_VIG_FC;  ---- Modificado seq de rebrica pela tabela fonte 21-01-2014
        rdcn.seg_vig_indiv := COM_SEQ_VIG;
        --rdcn.val_rubrica    :=round(vi_valor_det,2);
        --rdcn.val_rubrica  := trunc(vi_valor_det, 2); -- MRS1-Trunca o valor da rubrica
        rdcn.val_rubrica  := trunc(round(vi_valor_det,2), 2); --incluido o ROUND por ROD10.set
        rdcn.num_quota    := COM_NUM_QTAS_PAG + 1;
        rdcn.flg_natureza := COM_NAT_RUB;
        rdcn.tot_quota    := COM_TOT_QTAS_PAG;
        rdcn.dat_ini_ref  := nvl(COM_INI_REF, PAR_PER_PRO);
        rdcn.dat_fim_ref  := COM_FIM_REF;
        rdcn.flg_status   := COM_FLG_STATUS;
        rdcn.tip_evento_especial :=COM_TIPO_EVENTO_ESPECIAL;

        --JTS 20-07-2010
        rdcn.val_inidade  := COM_QTY_UNID_IND;

        ---COTROLE DE ENTIDADE ---
            ENCONTRO_BENEFICIO:=0;
            FOR i IN 1 .. vfolha.count LOOP
              rfol := vfolha(i);
              IF RFOL.COD_BENEFICIO=rdcn.cod_beneficio   THEN
                 rdcn.cod_entidade := RFOL.COD_ENTIDADE;
                  ENCONTRO_BENEFICIO:=1;
              END IF;
            END LOOP;
            if  ENCONTRO_BENEFICIO=0 THEN
              rdcn.cod_entidade:= ANT_ENTIDADE;
            END IF;



        IF  (V_QTD_DIAS / V_DIAS_MES)  =1 THEN
            rdcn.val_porc     := COM_VAL_PORC_IND;
        ELSE
            rdcn.val_porc     := (V_QTD_DIAS / V_DIAS_MES) ;
        END  IF;


        -- VERIFICAR

        IF COM_NAT_COMP <> 'I' THEN
          -- MVL 7
          --          IF COM_DAT_INI_VIG is null then
          --            rdcn.dat_ini_ref := nvl(COM_INI_REF,PAR_PER_PRO);
          --          ELSE
          --            rdcn.dat_ini_ref := COM_DAT_INI_VIG;
          --          END IF;
          --        ELSE
          -- MVL 7
          rdcn.dat_ini_ref := PAR_PER_PRO;
          rdcn.dat_fim_ref := null; -- mvl7
        END IF;

        rdcn.num_ord_jud       := COM_NUM_ORD_JUD;
        rdcn.dat_ing           := sysdate;
        rdcn.dat_ult_atu       := sysdate;
        rdcn.nom_usu_ult_atu   := PAR_COD_USU;
        rdcn.nom_pro_ult_atu   := 'FOLHA CALCULADA';
        rdcn.des_informacao    := null;
        rdcn.val_rubrica_cheio := trunc(round(COM_VAL_RUBRICA_CHEIO,2), 2); --ROD incluido o ROUND em 10.set.09


        IF PAR_TIP_PRO IN ( 'N','S') AND
           SUBSTR(LPAD(TO_CHAR(rdcn.cod_fcrubrica), 7, 0), 6, 2) in
            ( '55','56') THEN
             rdcn.des_complemento := 'Ret.M';
        ELSIF PAR_TIP_PRO = 'R' AND rdcn.des_complemento IS NULL THEN
          rdcn.des_complemento := 'Ret.';
        ELSIF rdcn.des_complemento not like 'Parc%' Then
          rdcn.des_complemento := null;
        END IF;



        rdcn.cod_ide_cli_ben := null;
        rdcn.cod_ide_cli_ben := COM_COD_IDE_CLI_BEN;
        rdcn.num_carga       := com_num_carga;
        rdcn.num_seq_controle_carga:=com_num_seq_controle_carga;
        vs_valor_val := 0;

        ---- Mudado por JTS 07-07-2010
        IF COM_MSC_INFORMACAO is not null OR
           COM_COL_INFORMACAO is not null THEN

          FOR i IN 1 .. nom_variavel.count LOOP

            IF nom_variavel(i) = COM_COL_INFORMACAO THEN
              vs_valor_val     := val_variavel(i);
              v_val_percentual := vs_valor_val;
              exit;
            END IF;

          END LOOP;

         vs_str := 'select ' || 'to_char(' || '''' || substr(TO_CHAR(vs_valor_val),1,10) || '''' || ')' || ' from dual';

          BEGIN
            OPEN cur_form FOR vs_str;
            FETCH cur_form
              INTO vs_inf;
            CLOSE cur_form;
          END;

          IF COM_COL_INFORMACAO = 'VAL_PERC_BENEFICIO' OR
             COM_COL_INFORMACAO = 'VAL_PAR_CONS'       OR
             COM_COL_INFORMACAO = 'PERC_VAL_PENSAO'    OR
             COM_COL_INFORMACAO = 'VAL_PERC_FIXO'      OR
             COM_COL_INFORMACAO = 'VAL_PERC_FIXO_13'
              -----------------------------------------------
              -- Variavel para controle de Base de Calculo 13
              -- 06/05/2015
              ----------------------------------------------

                THEN
            rdcn.des_informacao := vs_inf || '%';
          ELSIF COM_COL_INFORMACAO = 'PERC_RATEIO_PECUNIA' THEN
            rdcn.des_informacao := TO_CHAR(VI_PERC_PECUNIA,
                                           COM_MSC_INFORMACAO);
          ELSIF COM_COL_INFORMACAO = 'NUM_DEPENDENTES' THEN
            rdcn.des_informacao := vs_inf || ' Dep.';
          ELSIF COM_COL_INFORMACAO = 'GRP_ABONO_SALARIAL' THEN
            rdcn.des_informacao := 'GRP=' || vs_inf;
          ELSIF COM_COL_INFORMACAO = 'NUM_PARCELAS' THEN
            rdcn.des_informacao := lpad(to_char(COM_NUM_QTAS_PAG, '999'),
                                        3,
                                        0) || '/' ||
                                   lpad(to_char(COM_TOT_QTAS_PAG, '999'),
                                        3,
                                        0);
          ELSIF COM_COL_INFORMACAO = 'VAL_PENSAO' THEN
            rdcn.des_informacao := 'VAL. FIXO';
          ELSIF COM_COL_INFORMACAO = 'QTD_SAL_MIN_PENSAO' THEN
            rdcn.des_informacao := vs_inf || 'S.M.';
          ELSIF COM_COL_INFORMACAO = 'PERC_SAL_MIN_PENSAO' THEN
            rdcn.des_informacao := ltrim(vs_inf) || '% SM';
          ELSIF COM_COL_INFORMACAO = 'QTD_COTAS' THEN
            rdcn.des_informacao := ltrim(vs_inf);
          ELSE
            rdcn.des_informacao := vs_inf;
          END IF;
        END IF;

        ------ Variaveis para Controle de Consignatarias --
        ---------------------------------------------------
         rdcn.flg_modalidade  :=COM_FLG_MODALIDADE;
         rdcn.flg_desc_parcial:=COM_FLG_DESC_PARCIAL;

        ------- Task 37101 Contribuição previdencia ....
         rdcn.flg_rubrica_contrib:=' ';
         rdcn.cod_fcrubrica_assoc:=null;
         rdcn.cod_beneficio_assoc:=null;


      -- Begin
        tdcn(idx_caln) := rdcn;

      END IF;
    END IF;
    COM_NUM_CARGA             := NULL;
    COM_NUM_SEQ_CONTROLE_CARGA:=NULL;
    COM_FLG_MODALIDADE       :=NULL;
    COM_FLG_DESC_PARCIAL     :=NULL;
  END SP_INS_DETCAL_NORMAL;
  ----------------------------------------------------------------------------------
  -- Agrega rubrica em array que sera inserido na tabela de detalhe calculado
  --
  PROCEDURE SP_INS_ARRAY_DESCONTO(i_valor in number) AS
  BEGIN
    BEGIN
      tdcd.extend;
    EXCEPTION
      when others then
        p_sub_proc_erro := 'SP_INS_ARRAY_DESCONTO';
        p_coderro       := SQLCODE;
        P_MSGERRO       := 'Erro na inclusao do array de desconto';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              BEN_IDE_CLI,
                              COM_COD_FCRUBRICA);

        --     RAISE ERRO;
        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
    END;

    idx_cald := nvl(idx_cald, 0) + 1;

    rdcd.cod_ins         := PAR_COD_INS;
    rdcd.tip_processo    := PAR_TIP_PRO;
    rdcd.per_processo    := PAR_PER_PRO;
    rdcd.cod_ide_cli     := BEN_IDE_CLI;
    rdcd.cod_beneficio   := COM_COD_BENEFICIO;
    rdcd.seq_pagamento   := vi_seq_pagamento;
    rdcd.seq_detalhe     := idx_cald;
    rdcd.cod_fcrubrica   := COM_COD_FCRUBRICA;
    rdcd.seq_vig         := COM_SEQ_VIG_FC;
    rdcd.val_rubrica     := i_valor;
    rdcd.num_quota       := COM_NUM_QTAS_PAG + 1;
    rdcd.flg_natureza    := COM_NAT_RUB;
    rdcd.tot_quota       := COM_TOT_QTAS_PAG;
    rdcd.dat_ini_ref     := COM_INI_REF;
    rdcd.dat_fim_ref     := COM_FIM_REF;
    rdcd.num_ord_jud     := COM_NUM_ORD_JUD;
    rdcd.dat_ing         := sysdate;
    rdcd.dat_ult_atu     := sysdate;
    rdcd.nom_usu_ult_atu := PAR_COD_USU;
    rdcd.nom_pro_ult_atu := 'FOLHA CALCULADA';
    if  COM_COD_CONVENIO > 0 then
      rdcd.des_complemento := com_cod_convenio;
    else
       rdcd.des_complemento:=' ';
    end if;
    rdcd.num_carga       := COM_NUM_CARGA;
    rdcd.num_seq_controle_carga:=COM_NUM_SEQ_CONTROLE_CARGA;
    ------ Variaveis para Controle de Consignatarias --
    ---------------------------------------------------
     rdcd.flg_modalidade  :=COM_FLG_MODALIDADE;
     rdcd.flg_desc_parcial:=COM_FLG_DESC_PARCIAL;

    -- Controle de Consignatarias TASK 27904 -------
     rdcd.dat_contrato_consig := COM_DAT_CONTRATO;
    --- Fim Controle de Consignatarias TASK 27904 --


    tdcd(idx_cald) := rdcd;

    COM_NUM_CARGA              := NULL;
    COM_NUM_SEQ_CONTROLE_CARGA :=NULL;
    COM_FLG_MODALIDADE         :=NULL;
    COM_FLG_DESC_PARCIAL       :=NULL;


  END SP_INS_ARRAY_DESCONTO;
  ---------------------------------------------------------------------------------
  FUNCTION SP_OBTEM_VALOR_OJ RETURN NUMBER IS
    O_VALOR NUMBER(18, 4);
  BEGIN
    O_VALOR := 0;
    BEGIN
      SELECT DC.VAL_RUBRICA
        INTO O_VALOR
        FROM TB_DET_CALCULADO DC
       WHERE DC.COD_INS = PAR_COD_INS
         AND DC.PER_PROCESSO = PAR_PER_PRO
         AND DC.COD_IDE_CLI_BEN = BEN_IDE_CLI
         AND DC.NUM_ORD_JUD = COM_NUM_ORD_JUD;
    EXCEPTION
      WHEN OTHERS THEN
        p_sub_proc_erro := 'SP_OBTEM_VALOR_OJ';
        p_coderro       := SQLCODE;
        P_MSGERRO       := 'Erro ao obter o valor OJ';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              BEN_IDE_CLI,
                              COM_COD_FCRUBRICA);

        --      RAISE ERRO;
        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
    END;

    RETURN(O_VALOR);

  END SP_OBTEM_VALOR_OJ;
  ---------------------------------------------------------------------------------
  FUNCTION SP_OBTEM_PROP_BEN RETURN NUMBER IS
    VI_PORC_BEN  NUMBER(18, 4);
    VI_TEM_SAIDA CHAR;
    VI_PROP_RAT  NUMBER(18, 4);
    O_VALOR      NUMBER(18, 4);
  BEGIN
    VI_TEM_SAIDA := 'N';
    VI_PORC_BEN  := 0;
    VI_PROP_RAT  := 0;
    BEGIN
      --proporcionalidade do beneficio

      SELECT --CB.VAL_PERCENT_BEN,

                 CASE
              WHEN ( B.COD_BENEFICIO>40000001 AND
                     B.COD_BENEFICIO<41000000 and
                     CB.COD_ENTIDADE= 7        AND
                       NVL(CB.NAO_PROPORCIONA_FOLHA,'N')!='S') THEN
                      CB.VAL_PERCENT_BEN
               ELSE
                 CB.VAL_PERCENT_BEN  END ,


             CASE
               WHEN to_char(NVL(B.DAT_FIM_BEN,
                                add_months(PAR_PER_PRO, 1) - 1),
                            'YYYYMM') =
                    to_char(add_months(PAR_PER_PRO, 1) - 1, 'YYYYMM') then
                'N'
               ELSE
                'S'
             END,
             CASE
               WHEN CB.VAL_PERC_PECUNIA > 0 THEN
                CB.VAL_PERC_PECUNIA
               ELSE
                100
             END
      --        'N'
        INTO VI_PORC_BEN, VI_TEM_SAIDA, VI_PERC_PECUNIA
        FROM TB_BENEFICIARIO B, TB_CONCESSAO_BENEFICIO CB
       WHERE B.COD_INS = PAR_COD_INS
         AND B.COD_IDE_CLI_BEN = BEN_IDE_CLI
         AND CB.COD_BENEFICIO = COM_COD_BENEFICIO
         AND (to_char(B.DAT_INI_BEN, 'YYYYMM') <=
             to_char(PAR_PER_PRO, 'YYYYMM') AND
             (to_char(B.DAT_FIM_BEN, 'YYYYMM') >=
             to_char(PAR_PER_PRO, 'YYYYMM') or
             to_char(B.DAT_INI_BEN, 'YYYYMM') <=
             to_char(PAR_PER_PRO, 'YYYYMM') and B.DAT_FIM_BEN is null))
         AND B.FLG_STATUS in ('A', 'H', 'S', 'X')
         AND B.FLG_REG_ATIV = 'S'
         AND B.FLG_CONT_BEN = 'N'
         AND CB.COD_INS = B.COD_INS
         AND CB.COD_BENEFICIO = B.COD_BENEFICIO
         AND CB.COD_ENTIDADE = COM_ENTIDADE
      --AND CB.COD_CARGO = COM_CARGO --cargo muda por opc?o
      ;
      VI_PERC_PECUNIA := VI_PERC_PECUNIA / 100.00;
      O_VALOR         := VI_PORC_BEN / 100.00;

    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        O_VALOR      := 1;
        VI_TEM_SAIDA := 'N';
      WHEN OTHERS THEN
        p_sub_proc_erro := 'SP_OBTEM_PROP_BEN';
        p_coderro       := SQLCODE;
        P_MSGERRO       := 'Erro ao obter a Proporcao do Beneficio';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              BEN_IDE_CLI,
                              COM_COD_FCRUBRICA);

        --   RAISE ERRO;
        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
    END;

    RETURN(O_VALOR);
  END SP_OBTEM_PROP_BEN;
  ----------------------------------------------------------------------------------
  FUNCTION SP_OBTEM_PROP_COMPOSICAO RETURN NUMBER IS
    O_VALOR NUMBER(18, 4);
    dia_ini NUMBER;
    dia_fim NUMBER;

  BEGIN
    O_VALOR := 1;

    IF COM_IND_COMP_RUB = 'N' OR
       (
          --- 815002,815102,1207502,1207602 Incluidas em 17/06/2014 -- 808706 /25-10-2017
          COM_COD_FCRUBRICA IN (900102,1000102, 818202, 808702, 805102,6500402,6500502,6500702,6500802,815002,815102,1207502,1207602,808706,805106)
         AND COM_COD_ENTIDADE=5
         AND TO_CHAR(BEN_DAT_INICIO,'YYYYMM') <
             TO_CHAR(NVL(COM_DAT_INI_VIG,TO_DATE('01/01/2999','DD/MM/YYYY')),'YYYYMM')
       )
       THEN

     dia_fim:=30;
     dia_ini:=1;
     IF  COM_DAT_FIM_VIG is not null AND
         TO_CHAR(COM_DAT_FIM_VIG,'YYYYMM')=
         TO_CHAR(PAR_PER_PRO,'YYYYMM')
          THEN
        dia_fim := to_number(to_char(COM_DAT_FIM_VIG, 'dd'));
        IF COM_DAT_FIM_VIG = add_months(PAR_PER_PRO, 1) - 1 THEN
           dia_fim := 30;
        ELSE
           dia_fim := to_number(to_char(COM_DAT_FIM_VIG, 'dd'));
        END IF;
     END IF;
     IF COM_DAT_INI_VIG <= PAR_PER_PRO THEN
        dia_ini :=1;
     ELSE
        IF to_char(COM_DAT_INI_VIG,'MMYYYY')=to_char(PAR_PER_PRO,'MMYYYY')
           THEN
           dia_ini := to_number(to_char(COM_DAT_INI_VIG,'dd'));
           --- Ticket 46515  -- Calculo zerado na primeira folha quando data de inicio da
          -- rubrica corresponde ao último dia do mês
          IF ( dia_ini IN (31) OR ( to_char(PAR_PER_PRO,'MM')='02' AND
                                    dia_ini IN (29,28) )
             ) THEN
              dia_ini:=30;
          END IF;
        END IF;
     END IF;
     IF dia_fim >30 THEN
       dia_fim:=30;
     END IF;
     o_valor := (dia_fim - dia_ini + 1) / 30 ;

   END IF;

   RETURN(O_VALOR);
  END SP_OBTEM_PROP_COMPOSICAO;
  ----------------------------------------------------------------------------------
  FUNCTION SP_OBTEM_SALARIO_BASE_CARGO(o_cod_referencia in number)
    RETURN NUMBER IS
    O_VALOR              NUMBER(18, 4);
    w_data_enquadramento date;

  BEGIN

    IF PAR_IND_PROC_ENQUADRAMENTO = 1 THEN

      w_data_enquadramento := VI_DATA_ENQUADRAMENTO;

    ELSE
      w_data_enquadramento := PAR_PER_PRO;

    END IF;

    BEGIN
      SELECT
      -- ROD fev2010
       sum(v.val_vencimento *
          (case
             when v.dat_fim_vig is null and v.dat_ini_vig < w_data_enquadramento then
                    30
             when v.dat_fim_vig is not null and v.dat_ini_vig <= PAR_PER_PRO AND
                  v.dat_fim_vig = add_months(w_data_enquadramento, 1) - 1 then
                    30
             when v.dat_fim_vig is not null and v.dat_ini_vig > PAR_PER_PRO and v.dat_ini_vig <= add_months(w_data_enquadramento, 1) - 1 and
                  v.dat_fim_vig = add_months(w_data_enquadramento, 1) - 1 then
                    to_number(to_char(v.dat_fim_vig, 'dd')) - to_number(to_char(v.dat_ini_vig, 'dd'))
             when v.dat_fim_vig is not null and
                  v.dat_fim_vig < add_months(w_data_enquadramento, 1) - 1 then
                    to_number(to_char(v.dat_fim_vig, 'dd'))
             when v.dat_fim_vig is not null and
                  v.dat_fim_vig <= add_months(PAR_PER_PRO, 1) - 1
                  and to_number(to_char(v.dat_fim_vig, 'dd')) = 31 then
                    30
             when to_char(v.dat_ini_vig, 'YYYYMM') <
                  to_char(PAR_PER_PRO, 'YYYYMM') then
                    30
             else
              30 - to_number(to_char(v.dat_ini_vig, 'dd')) + 1
          end) / 30)
      -- to_char(add_months(w_data_enquadramento, 1) - 1, 'dd'))    --Rod13 coment
        INTO O_VALOR
        FROM TB_VENCIMENTO V
       WHERE V.COD_ENTIDADE = COM_ENTIDADE
         AND V.COD_REFERENCIA = o_cod_referencia -- BEN_COD_REFERENCIA
            -- MVL 20060417
         AND (to_char(w_data_enquadramento, 'YYYYMM') >=
             to_char(v.dat_ini_vig, 'YYYYMM') AND
             (w_data_enquadramento <= V.DAT_FIM_VIG OR
             V.DAT_FIM_VIG is null))
         and V.FLG_STATUS = 'V';

      -- RAO 20060321
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        O_VALOR := 0;

      WHEN OTHERS THEN
        p_sub_proc_erro := 'SP_SALARIO_BASE_CARGO';
        p_coderro       := SQLCODE;
        P_MSGERRO       := 'Erro ao obter o salario base cargo';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              BEN_IDE_CLI,
                              COM_COD_FCRUBRICA);

        --          RAISE ERRO;
        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
    END;
    RETURN(O_VALOR);
  END SP_OBTEM_SALARIO_BASE_CARGO;
  ----------------------------------------------------------------------------------
  FUNCTION SP_OBTEM_SALARIO_BASE_CARGO_OJ ---->> ffranco 03/2007
   RETURN NUMBER IS
    O_VALOR              NUMBER(18, 4);
    w_data_enquadramento date;

  BEGIN

    IF PAR_IND_PROC_ENQUADRAMENTO = 1 THEN

      w_data_enquadramento := VI_DATA_ENQUADRAMENTO;

    ELSE
      w_data_enquadramento := PAR_PER_PRO;

    END IF;

    BEGIN
      SELECT
      -- ROD fev2010
       sum(v.val_vencimento * (case
             when v.dat_fim_vig is null and v.dat_ini_vig <= w_data_enquadramento then
                    30
             when v.dat_fim_vig is not null and v.dat_ini_vig <= PAR_PER_PRO and
                  v.dat_fim_vig = add_months(w_data_enquadramento, 1) - 1 then
                    30
             when v.dat_fim_vig is not null and v.dat_ini_vig > PAR_PER_PRO and v.dat_ini_vig <= add_months(w_data_enquadramento, 1) - 1 and
                  v.dat_fim_vig = add_months(w_data_enquadramento, 1) - 1 then
                    to_number(to_char(v.dat_fim_vig, 'dd')) - to_number(to_char(v.dat_ini_vig, 'dd'))
             when v.dat_fim_vig is not null and v.dat_ini_vig <= PAR_PER_PRO and
                  v.dat_fim_vig < add_months(w_data_enquadramento, 1) - 1 then
                    to_number(to_char(v.dat_fim_vig, 'dd'))
             when v.dat_fim_vig is not null
                  and to_number(to_char(v.dat_fim_vig, 'dd')) = 31 then
                    30
             when to_char(v.dat_ini_vig, 'YYYYMM') < to_char(PAR_PER_PRO, 'YYYYMM') then
                    30 - to_number(to_char(v.dat_ini_vig, 'dd')) + 1
             else
                    30
           end) / 30)
        INTO O_VALOR
        FROM TB_VENCIMENTO V
       WHERE V.COD_ENTIDADE = COM_ENTIDADE
         AND V.COD_REFERENCIA = v_cod_ref_oj
         and (v.dat_fim_vig is null or
             v.dat_fim_vig >= w_data_enquadramento)
         and add_months(w_data_enquadramento, 1) - 1 >= v.dat_ini_vig
         and V.FLG_STATUS = 'V';
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        O_VALOR := 0;

      WHEN OTHERS THEN
        p_sub_proc_erro := 'SP_SALARIO_BASE_CARGO_OJ';
        p_coderro       := SQLCODE;
        P_MSGERRO       := 'Erro ao obter o salario base OJ';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              BEN_IDE_CLI,
                              COM_COD_FCRUBRICA);

        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
    END;
    RETURN(O_VALOR);
  END SP_OBTEM_SALARIO_BASE_CARGO_OJ;
  ----------------------------------------------------------------------------------
  FUNCTION SP_OBTEM_SALARIO_PADRAO_INI RETURN NUMBER IS
    O_VALOR              NUMBER(18, 4);
    w_data_enquadramento date;
  BEGIN

    vi_cod_ref_pad_venc := SP_OBTEM_PADRAO_VENCIMENTO;

    IF PAR_IND_PROC_ENQUADRAMENTO = 1 THEN

      w_data_enquadramento := VI_DATA_ENQUADRAMENTO;

    ELSE
      w_data_enquadramento := PAR_PER_PRO;

    END IF;

    BEGIN
      SELECT
      -- ROD fev2010
       sum(v.val_vencimento * (case
             when v.dat_fim_vig is null and v.dat_ini_vig <= w_data_enquadramento then
                    30
             when v.dat_fim_vig is not null and v.dat_ini_vig <= w_data_enquadramento and
                  v.dat_fim_vig = add_months(w_data_enquadramento, 1) - 1 then
                    30
             when v.dat_fim_vig is not null and v.dat_ini_vig > w_data_enquadramento and v.dat_ini_vig <= add_months(w_data_enquadramento, 1) - 1 and
                  v.dat_fim_vig = add_months(w_data_enquadramento, 1) - 1 then
                    to_number(to_char(v.dat_fim_vig, 'dd')) - to_number(to_char(v.dat_ini_vig, 'dd'))
             when v.dat_fim_vig is not null and v.dat_ini_vig <= w_data_enquadramento and
                  v.dat_fim_vig < add_months(w_data_enquadramento, 1) - 1 then
                    to_number(to_char(v.dat_fim_vig, 'dd'))
             when v.dat_fim_vig is not null
                  and to_number(to_char(v.dat_fim_vig, 'dd')) = 31 then
                    30
             when to_char(v.dat_ini_vig, 'YYYYMM') < to_char(PAR_PER_PRO, 'YYYYMM') then
                    30 - to_number(to_char(v.dat_ini_vig, 'dd')) + 1
             else
                    30
           end) / 30)
        INTO O_VALOR
        FROM TB_VENCIMENTO V,
             (select distinct re1.cod_ref_pad_ini_serv
                from tb_referencia re1
               where re1.cod_ins = PAR_COD_INS
                 and re1.cod_entidade = COM_ENTIDADE
                 and re1.cod_pccs = COM_PCCS
                 and re1.cod_quadro = COM_QUADRO
                 AND RE1.COD_REFERENCIA = ben_cod_referencia
                 and re1.cod_ref_pad_venc = vi_cod_ref_pad_venc
                 and (re1.dat_fim_vig is null or
                     re1.dat_fim_vig >= w_data_enquadramento)
                 and add_months(w_data_enquadramento, 1) - 1 >=
                     re1.dat_ini_vig) ree,
             tb_referencia re
       WHERE V.COD_INS = PAR_COD_INS
         AND V.COD_ENTIDADE = COM_ENTIDADE
         AND V.COD_REFERENCIA = RE.COD_REFERENCIA
         and (v.dat_fim_vig is null or
             v.dat_fim_vig >= w_data_enquadramento)
         and add_months(w_data_enquadramento, 1) - 1 >= v.dat_ini_vig
         and V.FLG_STATUS = 'V'
         and re.cod_ref_pad_venc = ree.cod_ref_pad_ini_serv
         AND re.cod_ins = v.cod_ins
         and re.cod_entidade = v.cod_entidade
         and re.cod_pccs = COM_PCCS
         and re.cod_quadro = COM_QUADRO
         and (re.dat_fim_vig is null or
             re.dat_fim_vig >= w_data_enquadramento)
         and add_months(w_data_enquadramento, 1) - 1 >= re.dat_ini_vig;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        O_VALOR := 0;

      WHEN OTHERS THEN
        p_sub_proc_erro := 'SB_OBTEM_SALARIO_PADRAO_INI';
        p_coderro       := SQLCODE;
        P_MSGERRO       := 'Erro ao obter o salario base padr?o';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              BEN_IDE_CLI,
                              COM_COD_FCRUBRICA);

        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
    END;
    RETURN(O_VALOR);
  END SP_OBTEM_SALARIO_PADRAO_INI;
  ----------------------------------------------------------------------------------
  FUNCTION SP_OBTEM_SALARIO_PADRAO_INI_A RETURN NUMBER IS
    O_VALOR              NUMBER(18, 4);
    w_data_enquadramento date;
  BEGIN

    vi_cod_ref_pad_venc := SP_OBTEM_PADRAO_VENCIMENTO;

    IF PAR_IND_PROC_ENQUADRAMENTO = 1 THEN

      w_data_enquadramento := VI_DATA_ENQUADRAMENTO;

    ELSE
      w_data_enquadramento := PAR_PER_PRO;

    END IF;

    BEGIN
      SELECT
      -- ROD fev2010
       sum(v.val_vencimento *
          (case
             when v.dat_fim_vig is null and v.dat_ini_vig <= w_data_enquadramento then
                    30
             when v.dat_fim_vig is not null and v.dat_ini_vig <= w_data_enquadramento and
                  v.dat_fim_vig = add_months(w_data_enquadramento, 1) - 1 then
                    30
             when v.dat_fim_vig is not null and v.dat_ini_vig > w_data_enquadramento and v.dat_ini_vig <= add_months(w_data_enquadramento, 1) - 1 and
                  v.dat_fim_vig = add_months(w_data_enquadramento, 1) - 1 then
                    to_number(to_char(v.dat_fim_vig, 'dd')) - to_number(to_char(v.dat_ini_vig, 'dd'))
             when v.dat_fim_vig is not null and v.dat_ini_vig <= w_data_enquadramento and
                  v.dat_fim_vig < add_months(w_data_enquadramento, 1) - 1 then
                    to_number(to_char(v.dat_fim_vig, 'dd'))
             when v.dat_fim_vig is not null
                  and to_number(to_char(v.dat_fim_vig, 'dd')) = 31 then
                    30
             when to_char(v.dat_ini_vig, 'YYYYMM') < to_char(PAR_PER_PRO, 'YYYYMM') then
                    30 - to_number(to_char(v.dat_ini_vig, 'dd')) + 1
             else
                    30
           end) / 30)
        INTO O_VALOR
        FROM TB_VENCIMENTO V,
             (select distinct re1.cod_ref_pad_ini_carg
                from tb_referencia re1
               where re1.cod_ins = PAR_COD_INS
                 and re1.cod_entidade = COM_ENTIDADE
                 and re1.cod_pccs = COM_PCCS
                 and re1.cod_quadro = COM_QUADRO
                 AND RE1.COD_REFERENCIA = ben_cod_referencia
                 and re1.cod_ref_pad_venc = vi_cod_ref_pad_venc
                 and (re1.dat_fim_vig is null or
                     re1.dat_fim_vig >= w_data_enquadramento)
                 and add_months(w_data_enquadramento, 1) - 1 >=
                     re1.dat_ini_vig) ree,
             tb_referencia re
       WHERE V.COD_INS = PAR_COD_INS
         AND V.COD_ENTIDADE = COM_ENTIDADE
         AND V.COD_REFERENCIA = RE.COD_REFERENCIA
         and (v.dat_fim_vig is null or
             v.dat_fim_vig >= w_data_enquadramento)
         and add_months(PAR_PER_PRO, 1) - 1 >= v.dat_ini_vig
         and V.FLG_STATUS = 'V'
         and re.cod_ref_pad_venc = ree.cod_ref_pad_ini_carg
         AND re.cod_ins = v.cod_ins
         and re.cod_entidade = v.cod_entidade
         and re.cod_pccs = COM_PCCS
         and re.cod_quadro = COM_QUADRO
         and (re.dat_fim_vig is null or
             re.dat_fim_vig >= w_data_enquadramento)
         and add_months(w_data_enquadramento, 1) - 1 >= re.dat_ini_vig;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        O_VALOR := 0;

      WHEN OTHERS THEN
        p_sub_proc_erro := 'SB_OBTEM_SALARIO_PADRAO_INI';
        p_coderro       := SQLCODE;
        P_MSGERRO       := 'Erro ao obter o salario base padr?o';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              BEN_IDE_CLI,
                              COM_COD_FCRUBRICA);

        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
    END;
    RETURN(O_VALOR);
  END SP_OBTEM_SALARIO_PADRAO_INI_A;
  ----------------------------------------------------------------------------------
  FUNCTION SP_OBTEM_SALARIO_REFERENCIA RETURN NUMBER IS
    O_VALOR              NUMBER(18, 4);
    v_val_vencimento     number(18, 4) := 0;
    v_val_vencimento_rep number(18, 4) := 0;
    w_data_enquadramento date;
  BEGIN

    IF PAR_IND_PROC_ENQUADRAMENTO = 1 THEN

      w_data_enquadramento := VI_DATA_ENQUADRAMENTO;

    ELSE
      w_data_enquadramento := PAR_PER_PRO;

    END IF;

    BEGIN

      select
       sum(v.val_vencimento *
          (case
             when v.dat_fim_vig is null and v.dat_ini_vig <= w_data_enquadramento then
                    30
             when v.dat_fim_vig is not null and v.dat_ini_vig <= w_data_enquadramento and
                  v.dat_fim_vig = add_months(w_data_enquadramento, 1) - 1 then
                    30
             when v.dat_fim_vig is not null and v.dat_ini_vig > w_data_enquadramento and v.dat_ini_vig <= add_months(w_data_enquadramento, 1) - 1 and
                  v.dat_fim_vig = add_months(w_data_enquadramento, 1) - 1 then
                    to_number(to_char(v.dat_fim_vig, 'dd')) - to_number(to_char(v.dat_ini_vig, 'dd'))
             when v.dat_fim_vig is not null and v.dat_ini_vig <= w_data_enquadramento and
                  v.dat_fim_vig < add_months(w_data_enquadramento, 1) - 1 then
                    to_number(to_char(v.dat_fim_vig, 'dd'))
             when v.dat_fim_vig is not null
                  and to_number(to_char(v.dat_fim_vig, 'dd')) = 31 then
                    30
             when to_char(v.dat_ini_vig, 'YYYYMM') < to_char(PAR_PER_PRO, 'YYYYMM') then
                    30 - to_number(to_char(v.dat_ini_vig, 'dd')) + 1
             else
                    30
          end) / 30),
       v.val_vencimento_rep
        INTO v_val_vencimento, v_val_vencimento_rep
        from tb_vencimento v, tb_composicao_ben cb
       where v.cod_referencia = cb.cod_referencia
         and cb.cod_ins = PAR_COD_INS
         and cb.cod_beneficio = COM_COD_BENEFICIO
         and cb.cod_fcrubrica = COM_COD_FCRUBRICA
         and cb.cod_ins = v.cod_ins
         and v.cod_entidade = COM_ENTIDADE
         AND cb.flg_status = 'V'
         AND (to_char(w_data_enquadramento, 'YYYYMM') >=
             to_char(cb.dat_ini_vig, 'YYYYMM') AND
             to_char(w_data_enquadramento, 'YYYYMM') <=
             to_char(nvl(CB.DAT_FIM_VIG,
                          to_date('01/01/2045', 'dd/mm/yyyy')),
                      'YYYYMM'))
         and (v.dat_fim_vig is null or
             v.dat_fim_vig >= w_data_enquadramento)
         and add_months(w_data_enquadramento, 1) - 1 >= v.dat_ini_vig
         and v.flg_status = 'V'
         and cb.dat_ini_vig = COM_DAT_INI_VIG -- MVL 20/07/2006 -- duplicidade no retroativo
       group by v.val_vencimento_rep;

      IF v_val_vencimento > v_val_vencimento_rep THEN
        O_VALOR := v_val_vencimento;
      ELSIF v_val_vencimento < v_val_vencimento_rep then
        O_VALOR := v_val_vencimento_rep;
      ELSE
        O_VALOR := v_val_vencimento;
      END IF;

    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        O_VALOR              := 0;
        v_val_vencimento     := 0;
        v_val_vencimento_rep := 0;

      WHEN OTHERS THEN
        p_sub_proc_erro := 'SP_SALARIO_REFERENCIA';
        p_coderro       := SQLCODE;
        P_MSGERRO       := 'Erro ao obter o salario base de referencia';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              BEN_IDE_CLI,
                              COM_COD_FCRUBRICA);

        --          RAISE ERRO;
        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
    END;
    RETURN(O_VALOR);
  END SP_OBTEM_SALARIO_REFERENCIA;
  ----------------------------------------------------------------------------------
  FUNCTION SP_OBTEM_SALARIO_REFER_REP RETURN NUMBER IS
    O_VALOR              NUMBER(18, 4);
    v_val_vencimento     number(18, 4) := 0;
    v_val_vencimento_rep number(18, 4) := 0;

  BEGIN
    -- alterar funcao salario referencia
    IF global_num_funcao  =516 THEN
        BEGIN
            select
             sum(v.val_vencimento *
                (case
                   when v.dat_fim_vig is null and v.dat_ini_vig <= PAR_PER_PRO then
                          30
                   when v.dat_fim_vig is not null and v.dat_ini_vig <= PAR_PER_PRO and
                        v.dat_fim_vig = add_months(PAR_PER_PRO, 1) - 1 then
                          30
                   when v.dat_fim_vig is not null and v.dat_ini_vig > PAR_PER_PRO and v.dat_ini_vig <= add_months(PAR_PER_PRO, 1) - 1 and
                        v.dat_fim_vig >= PAR_PER_PRO and  v.dat_fim_vig <= add_months(PAR_PER_PRO, 1) - 1 then
                          to_number(to_char(v.dat_fim_vig, 'dd')) - to_number(to_char(v.dat_ini_vig, 'dd'))
                   when v.dat_fim_vig is not null and v.dat_ini_vig <= PAR_PER_PRO and
                        v.dat_fim_vig < add_months(PAR_PER_PRO, 1) - 1 then
                          to_number(to_char(v.dat_fim_vig, 'dd'))
                   when v.dat_fim_vig is not null
                        and to_number(to_char(v.dat_fim_vig, 'dd')) = 31 then
                          30
                   when to_char(v.dat_ini_vig, 'YYYYMM') < to_char(PAR_PER_PRO, 'YYYYMM') then
                          30 - to_number(to_char(v.dat_ini_vig, 'dd')) + 1
                   else
                          30

                 end) / 30)

              INTO v_val_vencimento
              from tb_vencimento v, USER_IPESP.tb_composicao_ben cb
             where v.cod_referencia = cb.cod_referencia_2
               and cb.cod_ins = PAR_COD_INS
               and cb.cod_beneficio = COM_COD_BENEFICIO
               and cb.cod_fcrubrica = COM_COD_FCRUBRICA
               and cb.seq_vig = COM_SEQ_VIG
               and cb.cod_ins = v.cod_ins
               and v.cod_entidade = COM_ENTIDADE
               AND cb.flg_status = 'V'
               AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
                   to_char(cb.dat_ini_vig, 'YYYYMM') AND
                   to_char(PAR_PER_PRO, 'YYYYMM') <=
                   to_char(nvl(CB.DAT_FIM_VIG,
                                to_date('01/01/2045', 'dd/mm/yyyy')),
                            'YYYYMM'))
                  -- MVL  : 20060417
               and (v.dat_fim_vig is null or v.dat_fim_vig >= PAR_PER_PRO)
               and add_months(PAR_PER_PRO, 1) - 1 >= v.dat_ini_vig
               and V.FLG_STATUS = 'V'
               and cb.dat_ini_vig = COM_DAT_INI_VIG;
            O_VALOR := v_val_vencimento;

          EXCEPTION
            WHEN NO_DATA_FOUND THEN
              O_VALOR              := 0;
              v_val_vencimento     := 0;
              v_val_vencimento_rep := 0;

            WHEN OTHERS THEN
              p_sub_proc_erro := 'SP_SALARIO_REFERENCIA_REP';
              p_coderro       := SQLCODE;
              P_MSGERRO       := 'Erro ao obter o salario de referencia por representacao';
              INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                    p_coderro,
                                    'Calcula Folha',
                                    sysdate,
                                    p_msgerro,
                                    p_sub_proc_erro,
                                    BEN_IDE_CLI,
                                    COM_COD_FCRUBRICA);


              VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
              END;
    ELSE
        BEGIN

              select
               sum(v.val_vencimento *
                  (case
                     when v.dat_fim_vig is null and v.dat_ini_vig <= PAR_PER_PRO then
                            30
                     when v.dat_fim_vig is not null and v.dat_ini_vig <= PAR_PER_PRO and
                          v.dat_fim_vig = add_months(PAR_PER_PRO, 1) - 1 then
                            30
                     when v.dat_fim_vig is not null and v.dat_ini_vig > PAR_PER_PRO and v.dat_ini_vig <= add_months(PAR_PER_PRO, 1) - 1 and
                          v.dat_fim_vig >= PAR_PER_PRO and  v.dat_fim_vig <= add_months(PAR_PER_PRO, 1) - 1 then
                            to_number(to_char(v.dat_fim_vig, 'dd')) - to_number(to_char(v.dat_ini_vig, 'dd'))
                     when v.dat_fim_vig is not null and v.dat_ini_vig <= PAR_PER_PRO and
                          v.dat_fim_vig < add_months(PAR_PER_PRO, 1) - 1 then
                            to_number(to_char(v.dat_fim_vig, 'dd'))
                     when v.dat_fim_vig is not null
                          and to_number(to_char(v.dat_fim_vig, 'dd')) = 31 then
                            30
                     when to_char(v.dat_ini_vig, 'YYYYMM') < to_char(PAR_PER_PRO, 'YYYYMM') then
                            30 - to_number(to_char(v.dat_ini_vig, 'dd')) + 1
                     else
                            30
                   end) / 30)
                INTO v_val_vencimento
                from tb_vencimento v, tb_composicao_ben cb
               where v.cod_referencia = cb.cod_referencia
                 and cb.cod_ins = PAR_COD_INS
                 and cb.cod_beneficio = COM_COD_BENEFICIO
                 and cb.cod_fcrubrica = COM_COD_FCRUBRICA
                 and cb.seq_vig = COM_SEQ_VIG
                 and cb.cod_ins = v.cod_ins
                 and v.cod_entidade = COM_ENTIDADE
                 AND cb.flg_status = 'V'
                 AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
                     to_char(cb.dat_ini_vig, 'YYYYMM') AND
                     to_char(PAR_PER_PRO, 'YYYYMM') <=
                     to_char(nvl(CB.DAT_FIM_VIG,
                                  to_date('01/01/2045', 'dd/mm/yyyy')),
                              'YYYYMM'))
                    -- MVL  : 20060417
                 and (v.dat_fim_vig is null or v.dat_fim_vig >= PAR_PER_PRO)
                 and add_months(PAR_PER_PRO, 1) - 1 >= v.dat_ini_vig
                 and V.FLG_STATUS = 'V'
                 and cb.dat_ini_vig = COM_DAT_INI_VIG -- MVL 20/07/2006 -- duplicidade no retroativo
              ;
              O_VALOR := v_val_vencimento;

            EXCEPTION
              WHEN NO_DATA_FOUND THEN
                O_VALOR              := 0;
                v_val_vencimento     := 0;
                v_val_vencimento_rep := 0;

              WHEN OTHERS THEN
                p_sub_proc_erro := 'SP_SALARIO_REFERENCIA_REP';
                p_coderro       := SQLCODE;
                P_MSGERRO       := 'Erro ao obter o salario de referencia por representacao';
                INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                      p_coderro,
                                      'Calcula Folha',
                                      sysdate,
                                      p_msgerro,
                                      p_sub_proc_erro,
                                      BEN_IDE_CLI,
                                      COM_COD_FCRUBRICA);

                --          RAISE ERRO;
                VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
        END;
   END IF;
   RETURN(O_VALOR);
  END SP_OBTEM_SALARIO_REFER_REP;
  ---------------------------------------------------------------------------------
  FUNCTION SP_ISENTA_IRRF(ide_cli in varchar2) return boolean is
    vi_isenta      boolean;
    vi_count       number;
    vi_ind_doe     varchar(1);
    vi_ind_atb     varchar(1);
    w_cod_atributo number;
  Begin
    vi_isenta  := false;
    vi_ind_doe := 'N';

    vi_count := 0;

    --- Valida se tem isencao por doenca
    -- Valida se tem doenca
    BEGIN
      SELECT CASE
               WHEN (SELECT DC.FLG_ISE_IR
                       FROM TB_CID10_COMPORT DC
                      WHERE DC.COD_INS = LC.COD_INS
                        AND DC.COD_DOENCA = LC.COD_DOENCA
                        AND DC.DAT_INI_VIG <= PAR_PER_PRO
                        AND nvl(DC.DAT_FIM_VIG, PAR_PER_PRO) >= PAR_PER_PRO) = 'S' THEN
                'S'
               ELSE
                'N'
             END
        INTO VI_IND_DOE
        FROM TB_LAUDO_MEDICO LM, TB_LAUDO_MEDICO_CID10 LC
       WHERE LM.COD_INS = PAR_COD_INS
         AND LM.COD_IDE_CLI = ANT_IDE_CLI
         AND LM.DAT_INI_VIG <= PAR_PER_PRO
         AND nvl(LM.DAT_FIM_VIG, par_per_pro) >= PAR_PER_PRO
         AND LC.COD_INS = LM.COD_INS
         AND LC.COD_IDE_CLI = LM.COD_IDE_CLI
         AND LC.COD_ENTIDADE = LM.COD_ENTIDADE
         AND LC.NUM_LAUDO_MEDICO = LM.NUM_LAUDO_MEDICO;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        VI_IND_DOE := 'N';
      WHEN OTHERS THEN
        p_sub_proc_erro := 'SP_ISENTA_IRRF';
        p_coderro       := SQLCODE;
        P_MSGERRO       := 'Erro ao buscar isencao de IR - Laudo Medico';
        RAISE ERRO;
    END;

    IF VI_IND_DOE = 'S' THEN
      VI_ISENTA := TRUE;
      VI_DOENCA := TRUE;
    ELSE
      -- Valida se tem isenc?o por ordem judicial
      VI_COUNT := 0;
      SELECT COUNT(1)
        INTO VI_COUNT
        FROM TB_ORD_JUD_PESSOA_FISICA JP,
             TB_ORDEM_JUD_TIPO_EFEITO TE,
             TB_TIPO_EFEITO_ORDEM_JUD EE
       WHERE JP.COD_INS = PAR_COD_INS
         AND JP.COD_IDE_CLI = ANT_IDE_CLI
         AND JP.DAT_INI_VIG <= PAR_PER_PRO
         AND (JP.DAT_FIM_VIG >= PAR_PER_PRO or JP.DAT_FIM_VIG is null)
         AND TE.COD_INS = JP.COD_INS
         AND TE.NUM_ORD_JUD = JP.NUM_ORD_JUD
         AND EE.TIP_EFEITO = 'I'
         AND EE.COD_TIP_EFEITO = TE.COD_TIP_EFEITO;
      IF VI_COUNT > 0 THEN
        VI_ISENTA  := TRUE;
        VI_ORD_JUD := TRUE;
      END IF;
    END IF;

    IF NVL(vfolha.COUNT,0) >=1 THEN
      case
          when nvl(vfolha(1).cod_dissociacao,0) = 0 then
              w_cod_atributo :=8000;
          when nvl(vfolha(1).cod_dissociacao,0) = 1 then
              w_cod_atributo :=8001;
          when nvl(vfolha(1).cod_dissociacao,0) = 2 then
              w_cod_atributo :=8002;
          else
              w_cod_atributo :=8000;
      end case;
    ELSE
        case
          when nvl(BEN_DISSOCIACAO,0) = 0 then
              w_cod_atributo :=8000;
          when nvl(BEN_DISSOCIACAO,0) = 1 then
              w_cod_atributo :=8001;
          when nvl(BEN_DISSOCIACAO,0) = 2 then
              w_cod_atributo :=8002;
          else
              w_cod_atributo :=8000;
      end case;

    END IF;

    begin
      select distinct 'S' into vi_ind_atb from tb_atributos_pf b
      where exists (
      select 1
        from tb_atributos_pf    ats, --tb_atributos_serv ats,
             tb_tipos_atributos ta
       where --ats.cod_beneficio = ant_cod_beneficio
      --and
       ats.cod_ins = par_cod_ins
       and b.cod_ide_cli = ats.cod_ide_cli
       and ats.cod_ide_cli = ant_ide_cli
       and ats.cod_atributo = ta.cod_atributo
       and nvl(ats.flg_status,'V')='V'
       and ats.dat_ini_vig <=PAR_PER_PRO
       and (ats.dat_fim_vig is null or ats.dat_fim_vig >= PAR_PER_PRO) --incluido FFranco 20/11/2006
       and  ( ta.cod_atributo=w_cod_atributo OR
              TA.cod_atributo=8000 )
              );
    exception
      when no_data_found then
        vi_ind_atb := 'N';
    end;

    IF vi_ind_atb = 'S' THEN
      VI_ISENTA := TRUE;

    END IF;

    return(vi_isenta);
  END SP_ISENTA_IRRF;

  -------------------------------------------------------------------------------------
  --Falta alterar para procurar dependentes por Beneficiario efv 20060823
  FUNCTION SP_OBTEM_DEP_DED_IR(IDE_CLI IN VARCHAR2, I_TIPO_BEN CHAR)
    RETURN NUMBER IS
    O_QTY NUMBER;
  BEGIN
    O_QTY := 0;

    IF I_TIPO_BEN = 'A' THEN
      begin
/*       select s.num_dep_ir
          into o_qty
          from tb_servidor s
          where s.cod_ins = PAR_COD_INS
            and s.cod_ide_cli = IDE_CLI;*/
         select pf.num_dep_ir
          into  o_qty
          from  tb_pessoa_fisica pf
          where pf.cod_ins = par_cod_ins
            and   pf.cod_ide_cli = IDE_CLI;
      exception
        when others then
          o_qty := 0;
      end;
    ELSE
      begin
/*        select count(1)
          into o_qty
          from tb_dependencia_economica de
         where de.cod_ins = par_cod_ins
           and de.flg_dep_ir = 'S'
           and par_per_pro >= de.dat_ini_dep_eco
           and par_per_pro <= nvl(de.dat_fim_dep_eco, '01/01/2200')
           and de.cod_ide_cli_ben = IDE_CLI;*/
         select pf.num_dep_ir
          into  o_qty
          from  tb_pessoa_fisica pf
          where pf.cod_ins = par_cod_ins
          and   pf.cod_ide_cli = IDE_CLI;
      exception
        when others then
          o_qty := 0;
      end;

    END IF;

    IF NUM_DEP_IR_MIL > 0 then
      O_QTY := NUM_DEP_IR_MIL;
    END IF;

    RETURN(O_QTY);
  END SP_OBTEM_DEP_DED_IR;
  -------------------------------------------------------------------------------------

  FUNCTION SP_OBTEM_RUBRICA_SUPL(I_FCRUBRICA NUMBER) RETURN NUMBER AS
    O_FCRUBRICA NUMBER(8);
  BEGIN
    BEGIN
      SELECT FC.COD_FCRUBRICA
        INTO O_FCRUBRICA
        FROM TB_RUBRICAS RR, TB_FORMULA_CALCULO FC
       WHERE RR.COD_INS = PAR_COD_INS
         AND RR.TIP_EVENTO_ESPECIAL = 'S'
         AND FC.COD_INS = RR.COD_INS
         AND FC.COD_RUBRICA = RR.COD_RUBRICA
         AND FC.COD_ENTIDADE = RR.COD_ENTIDADE
         AND FC.COD_ENTIDADE = COM_ENTIDADE
         AND FC.DAT_INI_VIG <= PAR_PER_PRO
         AND (FC.DAT_FIM_VIG >= PAR_PER_PRO or FC.DAT_FIM_VIG is null)
         AND EXISTS (SELECT 1
                FROM TB_FORMULA_CALCULO CF
               WHERE CF.COD_INS = FC.COD_INS
                 AND CF.COD_FCRUBRICA = I_FCRUBRICA
                 AND CF.COD_RUBRICA = FC.COD_RUBRICA
                 AND CF.COD_ENTIDADE = FC.COD_ENTIDADE
                 AND CF.DAT_INI_VIG <= PAR_PER_PRO
                 AND (CF.DAT_FIM_VIG <= PAR_PER_PRO or
                     CF.DAT_FIM_VIG is null));
    EXCEPTION
      WHEN OTHERS THEN
        p_sub_proc_erro := 'SP_OBTEM_RUBRICA_SUPL';
        p_coderro       := SQLCODE;
        P_MSGERRO       := 'Erro ao obter s rubrica suplementar';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              BEN_IDE_CLI,
                              COM_COD_FCRUBRICA);

        --      RAISE ERRO;
        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
    END;

    RETURN(O_FCRUBRICA);

  END SP_OBTEM_RUBRICA_SUPL;
  ----------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_PROP_SAIDA(I_VALOR OUT NUMBER, I_VALOR_13 OUT NUMBER) IS
    vi_count         number;
    vi_val_prop      number(18, 6) := 0;
    vi_val_prop_calc number(18, 6) := 0;
    qtd_dias         number := 0;
  BEGIN
    vi_count    := 0;
    vi_val_prop := 1;

    IF (COM_TIP_BENEFICIO = 'PENSIONISTA' OR COM_TIP_BENEFICIO ='APOSENTADO') AND
       (COM_NAT_COMP = 'B' or COM_NAT_COMP = 'G') AND
       COM_IND_COMP_RUB = 'N' AND --efv
       COM_APLICA_RATEIO = 'S' AND --efv
      --     COM_TIPO_VALOR <> 'P'                     AND efv 20060823
       COM_NAT_RUB = 'C' THEN

      --    Obtem a quantidade de meses proporcional
      --    Verifica se tem beneficiarios saindo / rateio
      BEGIN
        SELECT to_number(to_char(RB.DAT_FIM_VIG, 'YYYYMM')) -
               to_number(to_char(RB.DAT_INI_VIG, 'YYYYMM'))
          INTO V_QTD_MESES
          FROM tb_rateio_beneficio rb
         WHERE RB.COD_INS = PAR_COD_INS
           AND RB.COD_IDE_CLI_BEN = BEN_IDE_CLI
           AND RB.COD_BENEFICIO = COM_COD_BENEFICIO
           AND RB.DAT_FIM_VIG IS NOT NULL
           AND  NVL(RB.flg_STATUS,'A') = 'A' -- 26-01-2015
           AND RB.DAT_INI_VIG <= PAR_PER_PRO
           AND to_char(RB.DAT_FIM_VIG, 'YYYYMM') =
               to_char(PAR_PER_PRO, 'YYYYMM')

           and not exists ( select * from tb_rateio_beneficio rr
                                         WHERE Rr.COD_INS = PAR_COD_INS
                                         AND Rr.COD_IDE_CLI_BEN = BEN_IDE_CLI
                                         AND Rr.COD_BENEFICIO = COM_COD_BENEFICIO
                                         AND rr.dat_fim_vig is null
                                         AND  NVL(RR.flg_STATUS,'A') = 'A' -- 26-01-2015
                                         );

      EXCEPTION
        WHEN OTHERS THEN
          V_QTD_MESES := 0;
      END;

      IF V_QTD_MESES = 0 THEN
        SP_RATEIO_BENEFICIO(COM_COD_BENEFICIO,
                            BEN_IDE_CLI,
                            1,
                            vi_val_prop_calc,
                            vi_val_prop);
        -- vi_val_prop_calc := 0; efv 20060823
      ELSE
        BEGIN
          -------------------Modificada consic?o 20130619 para considerar termino  = per_processo
          ---------------- Alterado por ROD em fev2009
          --
          SELECT sum(RB.VAL_PERCENT_RATEIO *
               to_number(
              (case
                 when rb.dat_fim_vig is null and rb.dat_ini_vig <= PAR_PER_PRO then
                        30
                 when rb.dat_fim_vig is not null and rb.dat_ini_vig <= PAR_PER_PRO and
                      rb.dat_fim_vig = add_months(PAR_PER_PRO, 1) - 1 then
                        30
                 when rb.dat_fim_vig is not null and rb.dat_ini_vig > PAR_PER_PRO and rb.dat_ini_vig <= add_months(PAR_PER_PRO, 1) - 1 and
                      rb.dat_fim_vig = add_months(PAR_PER_PRO, 1) - 1 then
                        to_number(to_char(rb.dat_fim_vig, 'dd')) - to_number(to_char(rb.dat_ini_vig, 'dd'))
                 when rb.dat_fim_vig is not null and rb.dat_ini_vig <= PAR_PER_PRO and
                      rb.dat_fim_vig < add_months(PAR_PER_PRO, 1) - 1 then
                        to_number(to_char(rb.dat_fim_vig, 'dd'))
                 when rb.dat_fim_vig is not null
                      and to_number(to_char(rb.dat_fim_vig, 'dd')) = 31 then
                        30
                 when to_char(rb.dat_ini_vig, 'YYYYMM') = to_char(PAR_PER_PRO, 'YYYYMM') then
                        30 - to_number(to_char(rb.dat_ini_vig, 'dd')) + 1
                 else
                        30
              end)) / 30 / 100)   ,
              (case
                 when rb.dat_fim_vig is null and rb.dat_ini_vig <= PAR_PER_PRO then
                        30
                 when rb.dat_fim_vig is not null and rb.dat_ini_vig <= PAR_PER_PRO and
                      rb.dat_fim_vig = add_months(PAR_PER_PRO, 1) - 1 then
                        30
                 when rb.dat_fim_vig is not null and rb.dat_ini_vig > PAR_PER_PRO and rb.dat_ini_vig <= add_months(PAR_PER_PRO, 1) - 1 and
                      rb.dat_fim_vig = add_months(PAR_PER_PRO, 1) - 1 then
                        to_number(to_char(rb.dat_fim_vig, 'dd')) - to_number(to_char(rb.dat_ini_vig, 'dd'))
                 when rb.dat_fim_vig is not null and rb.dat_ini_vig <= PAR_PER_PRO and
                      rb.dat_fim_vig < add_months(PAR_PER_PRO, 1) - 1 then
                        to_number(to_char(rb.dat_fim_vig, 'dd'))
                 when rb.dat_fim_vig is not null
                      and to_number(to_char(rb.dat_fim_vig, 'dd')) = 31 then
                        30
                 when to_char(rb.dat_ini_vig, 'YYYYMM') = to_char(PAR_PER_PRO, 'YYYYMM') then
                        30 - to_number(to_char(rb.dat_ini_vig, 'dd')) + 1
                 else
                        30
              end)
            INTO vi_val_prop, v_qtd_dias
            FROM TB_RATEIO_BENEFICIO RB
           WHERE RB.COD_INS = PAR_COD_INS
             AND RB.COD_IDE_CLI_BEN = BEN_IDE_CLI
             AND RB.COD_BENEFICIO = COM_COD_BENEFICIO
             AND NVL(RB.flg_STATUS,'A') = 'A'
             AND nvl(RB.DAT_FIM_VIG,add_months(PAR_PER_PRO, 1) - 1
                     ) > =PAR_PER_PRO
             and RB.DAT_INI_VIG < add_months(PAR_PER_PRO, 1) - 1

           group by
               to_number(
              (case
                 when rb.dat_fim_vig is null and rb.dat_ini_vig <= PAR_PER_PRO then
                        30
                 when rb.dat_fim_vig is not null and rb.dat_ini_vig <= PAR_PER_PRO and
                      rb.dat_fim_vig = add_months(PAR_PER_PRO, 1) - 1 then
                        30
                 when rb.dat_fim_vig is not null and rb.dat_ini_vig > PAR_PER_PRO and rb.dat_ini_vig <= add_months(PAR_PER_PRO, 1) - 1 and
                      rb.dat_fim_vig = add_months(PAR_PER_PRO, 1) - 1 then
                        to_number(to_char(rb.dat_fim_vig, 'dd')) - to_number(to_char(rb.dat_ini_vig, 'dd'))
                 when rb.dat_fim_vig is not null and rb.dat_ini_vig <= PAR_PER_PRO and
                      rb.dat_fim_vig < add_months(PAR_PER_PRO, 1) - 1 then
                        to_number(to_char(rb.dat_fim_vig, 'dd'))
                 when rb.dat_fim_vig is not null
                      and to_number(to_char(rb.dat_fim_vig, 'dd')) = 31 then
                        30
                 when to_char(rb.dat_ini_vig, 'YYYYMM') = to_char(PAR_PER_PRO, 'YYYYMM') then
                        30 - to_number(to_char(rb.dat_ini_vig, 'dd')) + 1
                 else
                        30
              end))  ,
              (case
                 when rb.dat_fim_vig is null and rb.dat_ini_vig <= PAR_PER_PRO then
                        30
                 when rb.dat_fim_vig is not null and rb.dat_ini_vig <= PAR_PER_PRO and
                      rb.dat_fim_vig = add_months(PAR_PER_PRO, 1) - 1 then
                        30
                 when rb.dat_fim_vig is not null and rb.dat_ini_vig > PAR_PER_PRO and rb.dat_ini_vig <= add_months(PAR_PER_PRO, 1) - 1 and
                      rb.dat_fim_vig = add_months(PAR_PER_PRO, 1) - 1 then
                        to_number(to_char(rb.dat_fim_vig, 'dd')) - to_number(to_char(rb.dat_ini_vig, 'dd'))
                 when rb.dat_fim_vig is not null and rb.dat_ini_vig <= PAR_PER_PRO and
                      rb.dat_fim_vig < add_months(PAR_PER_PRO, 1) - 1 then
                        to_number(to_char(rb.dat_fim_vig, 'dd'))
                 when rb.dat_fim_vig is not null
                      and to_number(to_char(rb.dat_fim_vig, 'dd')) = 31 then
                        30
                 when to_char(rb.dat_ini_vig, 'YYYYMM') = to_char(PAR_PER_PRO, 'YYYYMM') then
                        30 - to_number(to_char(rb.dat_ini_vig, 'dd')) + 1
                 else
                        30
              end);

          ------------------------------------------------------------------------------

        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            vi_val_prop          := 1;
            APLICAR_DEC_TERCEIRO := FALSE;
          WHEN OTHERS THEN
          -- teoricamente n?o deveria passar por aqui ... remover futuramente
          SELECT sum(RB.VAL_PERCENT_RATEIO *
                               to_number(
                               case
                                 when to_number(to_char(LAST_DAY(rb.dat_fim_vig), 'DD'))=31 then
                                  to_date('30'||to_char(PAR_PER_PRO, 'mm/yyyy'),'DD/MM/YYYY')
                                 else
                                   (nvl(rb.dat_fim_vig,
                                   to_date('30' ||to_char(PAR_PER_PRO, 'mm/yyyy'),'DD/MM/YYYY')))
                               end
                               - --menos
                               case
                                 when rb.dat_ini_vig < PAR_PER_PRO then
                                  to_date('01' || to_char(PAR_PER_PRO, 'mm/yyyy'),'DD/MM/YYYY')
                                 when  to_number(to_char(LAST_DAY(rb.dat_fim_vig), 'DD'))=31 then
                                  to_date('02' || to_char(PAR_PER_PRO, 'mm/yyyy'),'DD/MM/YYYY')
                                 when rb.dat_ini_vig >= PAR_PER_PRO then
                                  rb.dat_ini_vig
                                 else
                                  to_date('01' || to_char(PAR_PER_PRO, 'mm/yyyy'),'DD/MM/YYYY')
                               end
                               + 1)) / 30 / 100,
                              to_number(
                               case
                                 when to_number(to_char(LAST_DAY(rb.dat_fim_vig), 'DD'))=31 then
                                  to_date('30'||to_char(PAR_PER_PRO, 'mm/yyyy'),'DD/MM/YYYY')
                                 else
                                   (nvl(rb.dat_fim_vig,
                                   to_date('30' ||to_char(PAR_PER_PRO, 'mm/yyyy'),'DD/MM/YYYY')))
                               end
                                - --menos

                               case
                                when rb.dat_ini_vig < PAR_PER_PRO then
                                     to_date('01' || to_char(PAR_PER_PRO, 'mm/yyyy'),'DD/MM/YYYY')
                                 when rb.dat_ini_vig >= PAR_PER_PRO then
                                  rb.dat_ini_vig
                                 else
                                  to_date('01' || to_char(PAR_PER_PRO, 'mm/yyyy'),'DD/MM/YYYY')
                               end
                                  ) + 1
            INTO vi_val_prop, v_qtd_dias
            FROM TB_RATEIO_BENEFICIO RB
           WHERE RB.COD_INS = PAR_COD_INS
             AND RB.COD_IDE_CLI_BEN = BEN_IDE_CLI
             AND RB.COD_BENEFICIO = COM_COD_BENEFICIO
             AND  NVL(RB.flg_STATUS,'A') = 'A'
             AND nvl(RB.DAT_FIM_VIG,add_months(PAR_PER_PRO, 1) - 1
                     ) > PAR_PER_PRO
             and RB.DAT_INI_VIG < add_months(PAR_PER_PRO, 1) - 1
             and rb.dat_ini_vig =
                 (select max(r.dat_ini_vig)
                    from tb_rateio_beneficio r
                   where r.cod_ins = rb.cod_ins
                     and r.cod_ide_cli_ben = rb.cod_ide_cli_ben
                     and r.cod_beneficio = rb.cod_beneficio
                     AND  NVL(R.flg_STATUS,'A') = 'A'
                     and RB.DAT_FIM_VIG < add_months(PAR_PER_PRO, 1) - 1
                  )
                  GROUP BY
                            to_number(
                               case
                                 when to_number(to_char(LAST_DAY(rb.dat_fim_vig), 'DD'))=31 then
                                  to_date('30'||to_char(PAR_PER_PRO, 'mm/yyyy'),'DD/MM/YYYY')
                                 else
                                   (nvl(rb.dat_fim_vig,
                                   to_date('30' ||to_char(PAR_PER_PRO, 'mm/yyyy'),'DD/MM/YYYY')))
                               end
                               - --menos
                               case
                                 when rb.dat_ini_vig < PAR_PER_PRO then
                                  to_date('01' || to_char(PAR_PER_PRO, 'mm/yyyy'),'DD/MM/YYYY')
                                 when  to_number(to_char(LAST_DAY(rb.dat_fim_vig), 'DD'))=31 then
                                  to_date('02' || to_char(PAR_PER_PRO, 'mm/yyyy'),'DD/MM/YYYY')
                                 when rb.dat_ini_vig >= PAR_PER_PRO then
                                  rb.dat_ini_vig
                                 else
                                  to_date('01' || to_char(PAR_PER_PRO, 'mm/yyyy'),'DD/MM/YYYY')
                               end
                               + 1) / 30 / 100,
                              to_number(
                               case
                                 when to_number(to_char(LAST_DAY(rb.dat_fim_vig), 'DD'))=31 then
                                  to_date('30'||to_char(PAR_PER_PRO, 'mm/yyyy'),'DD/MM/YYYY')
                                 else
                                   (nvl(rb.dat_fim_vig,
                                   to_date('30' ||to_char(PAR_PER_PRO, 'mm/yyyy'),'DD/MM/YYYY')))
                               end
                                - --menos

                               case
                                when rb.dat_ini_vig < PAR_PER_PRO then
                                     to_date('01' || to_char(PAR_PER_PRO, 'mm/yyyy'),'DD/MM/YYYY')
                                 when rb.dat_ini_vig >= PAR_PER_PRO then
                                  rb.dat_ini_vig
                                 else
                                  to_date('01' || to_char(PAR_PER_PRO, 'mm/yyyy'),'DD/MM/YYYY')
                               end
                                  ) + 1 ;

            p_sub_proc_erro := 'SP_OBTEM_PROP_SAIDA';
            p_coderro       := SQLCODE;
            P_MSGERRO       := 'Erro ao obter a proporcao saida - Rateio Beneficio';
            INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                  p_coderro,
                                  'Calcula Folha',
                                  sysdate,
                                  p_msgerro,
                                  p_sub_proc_erro,
                                  BEN_IDE_CLI,
                                  COM_COD_FCRUBRICA);

            --                 RAISE ERRO;
            VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
        END;
      END IF;

      IF VI_TEM_SAIDA = FALSE THEN
        --    Obtem proporcionalidade anterior
        BEGIN

          SELECT sum(RB.VAL_PERCENT_RATEIO *
               to_number(
              (case
                 when rb.dat_fim_vig is null and rb.dat_ini_vig <= PAR_PER_PRO then
                        30
                 when rb.dat_fim_vig is not null and rb.dat_ini_vig <= PAR_PER_PRO and
                      rb.dat_fim_vig = add_months(PAR_PER_PRO, 1) - 1 then
                        30
                 when rb.dat_fim_vig is not null and rb.dat_ini_vig > PAR_PER_PRO and rb.dat_ini_vig <= add_months(PAR_PER_PRO, 1) - 1 and
                      rb.dat_fim_vig = add_months(PAR_PER_PRO, 1) - 1 then
                        to_number(to_char(rb.dat_fim_vig, 'dd')) - to_number(to_char(rb.dat_ini_vig, 'dd'))
                 when rb.dat_fim_vig is not null and rb.dat_ini_vig <= PAR_PER_PRO and
                      rb.dat_fim_vig < add_months(PAR_PER_PRO, 1) - 1 then
                        to_number(to_char(rb.dat_fim_vig, 'dd'))
                 when rb.dat_fim_vig is not null
                      and to_number(to_char(rb.dat_fim_vig, 'dd')) = 31 then
                        30
                 when to_char(rb.dat_ini_vig, 'YYYYMM') = to_char(PAR_PER_PRO, 'YYYYMM') then
                        30 - to_number(to_char(rb.dat_ini_vig, 'dd')) + 1
                 else
                        30
              end)) / 30 / 100)   ,
              (case
                 when rb.dat_fim_vig is null and rb.dat_ini_vig <= PAR_PER_PRO then
                        30
                 when rb.dat_fim_vig is not null and rb.dat_ini_vig <= PAR_PER_PRO and
                      rb.dat_fim_vig = add_months(PAR_PER_PRO, 1) - 1 then
                        30
                 when rb.dat_fim_vig is not null and rb.dat_ini_vig > PAR_PER_PRO and rb.dat_ini_vig <= add_months(PAR_PER_PRO, 1) - 1 and
                      rb.dat_fim_vig = add_months(PAR_PER_PRO, 1) - 1 then
                        to_number(to_char(rb.dat_fim_vig, 'dd')) - to_number(to_char(rb.dat_ini_vig, 'dd'))
                 when rb.dat_fim_vig is not null and rb.dat_ini_vig <= PAR_PER_PRO and
                      rb.dat_fim_vig < add_months(PAR_PER_PRO, 1) - 1 then
                        to_number(to_char(rb.dat_fim_vig, 'dd'))
                 when rb.dat_fim_vig is not null
                      and to_number(to_char(rb.dat_fim_vig, 'dd')) = 31 then
                        30
                 when to_char(rb.dat_ini_vig, 'YYYYMM') = to_char(PAR_PER_PRO, 'YYYYMM') then
                        30 - to_number(to_char(rb.dat_ini_vig, 'dd')) + 1
                 else
                        30
              end)

            INTO vi_val_prop_calc, qtd_dias
            FROM TB_RATEIO_BENEFICIO RB
           WHERE RB.COD_INS = PAR_COD_INS
             AND RB.COD_IDE_CLI_BEN = BEN_IDE_CLI
             AND RB.COD_BENEFICIO = COM_COD_BENEFICIO
             AND  NVL(RB.flg_STATUS,'A') = 'A'
             AND nvl(RB.DAT_FIM_VIG, add_months(PAR_PER_PRO, 1) - 1) > PAR_PER_PRO
             and RB.DAT_INI_VIG < add_months(PAR_PER_PRO, 1) - 1
             and rownum = 1
           group by
               to_number(
              (case
                 when rb.dat_fim_vig is null and rb.dat_ini_vig <= PAR_PER_PRO then
                        30
                 when rb.dat_fim_vig is not null and rb.dat_ini_vig <= PAR_PER_PRO and
                      rb.dat_fim_vig = add_months(PAR_PER_PRO, 1) - 1 then
                        30
                 when rb.dat_fim_vig is not null and rb.dat_ini_vig > PAR_PER_PRO and rb.dat_ini_vig <= add_months(PAR_PER_PRO, 1) - 1 and
                      rb.dat_fim_vig = add_months(PAR_PER_PRO, 1) - 1 then
                        to_number(to_char(rb.dat_fim_vig, 'dd')) - to_number(to_char(rb.dat_ini_vig, 'dd'))
                 when rb.dat_fim_vig is not null and rb.dat_ini_vig <= PAR_PER_PRO and
                      rb.dat_fim_vig < add_months(PAR_PER_PRO, 1) - 1 then
                        to_number(to_char(rb.dat_fim_vig, 'dd'))
                 when rb.dat_fim_vig is not null
                      and to_number(to_char(rb.dat_fim_vig, 'dd')) = 31 then
                        30
                 when to_char(rb.dat_ini_vig, 'YYYYMM') = to_char(PAR_PER_PRO, 'YYYYMM') then
                        30 - to_number(to_char(rb.dat_ini_vig, 'dd')) + 1
                 else
                        30
              end)) / 30 / 100   ,
              (case
                 when rb.dat_fim_vig is null and rb.dat_ini_vig <= PAR_PER_PRO then
                        30
                 when rb.dat_fim_vig is not null and rb.dat_ini_vig <= PAR_PER_PRO and
                      rb.dat_fim_vig = add_months(PAR_PER_PRO, 1) - 1 then
                        30
                 when rb.dat_fim_vig is not null and rb.dat_ini_vig > PAR_PER_PRO and rb.dat_ini_vig <= add_months(PAR_PER_PRO, 1) - 1 and
                      rb.dat_fim_vig = add_months(PAR_PER_PRO, 1) - 1 then
                        to_number(to_char(rb.dat_fim_vig, 'dd')) - to_number(to_char(rb.dat_ini_vig, 'dd'))
                 when rb.dat_fim_vig is not null and rb.dat_ini_vig <= PAR_PER_PRO and
                      rb.dat_fim_vig < add_months(PAR_PER_PRO, 1) - 1 then
                        to_number(to_char(rb.dat_fim_vig, 'dd'))
                 when rb.dat_fim_vig is not null
                      and to_number(to_char(rb.dat_fim_vig, 'dd')) = 31 then
                        30
                 when to_char(rb.dat_ini_vig, 'YYYYMM') = to_char(PAR_PER_PRO, 'YYYYMM') then
                        30 - to_number(to_char(rb.dat_ini_vig, 'dd')) + 1
                 else
                        30
              end);


        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            vi_val_prop_calc     := 0;
            APLICAR_DEC_TERCEIRO := FALSE;
          WHEN OTHERS THEN
            p_sub_proc_erro := 'SP_OBTEM_PROP_SAIDA';
            p_coderro       := SQLCODE;
            P_MSGERRO       := 'Erro ao obter o percentual de rateio beneficio';
            INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                  p_coderro,
                                  'Calcula Folha',
                                  sysdate,
                                  p_msgerro,
                                  p_sub_proc_erro,
                                  BEN_IDE_CLI,
                                  COM_COD_FCRUBRICA);

            --                    RAISE ERRO;
            VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
        END;
      END IF;

      IF (COM_NAT_RUB = 'C' AND COM_FLG_PROCESSA = 'S') THEN
        IF (VI_TEM_SAIDA OR APLICAR_ENTRADA = FALSE) AND
           vi_val_prop_calc < 1 AND v_qtd_meses > 0 THEN
          --                  vi_val_prop =  vi_val_prop_calc
          i_valor    := vi_val_prop; --+ vi_val_prop_calc;  continuar analise
          i_valor_13 := vi_val_prop; --+ vi_val_prop_calc;
        ELSE
          i_valor    := vi_val_prop;
          i_valor_13 := vi_val_prop;
        END IF;
      ELSE
        i_valor_13 := vi_val_prop + vi_val_prop_calc;
        i_valor    := VI_PROP_SAIDA + vi_val_prop_calc;
      END IF;

    ELSE
      if APLICAR_DEC_TERCEIRO then
        null;
      else
        i_valor    := 1;
        i_valor_13 := 1;
      end if;
      null;
    END IF;

  END SP_OBTEM_PROP_SAIDA;
  ----------------------------------------------------------------------------------
  PROCEDURE SP_RATEIO_BENEFICIO(P_COD_BENEFICIO IN NUMBER,
                                COD_CLI         IN VARCHAR2,
                                MON_VALOR       IN NUMBER,
                                I_VALOR         OUT NUMBER,
                                I_PERC_RATEIO   OUT NUMBER) AS

    v_percent_rateio number(7, 4) := 0;

  BEGIN

    IF COM_TIP_BENEFICIO = 'PENSIONISTA' THEN

      IF (RAT_COD_BENEFICIO_ANT = P_COD_BENEFICIO AND
         RAT_IDE_CLI_ANT = COD_CLI) AND VI_PERCENTUAL_RATEIO IS NOT NULL THEN
        VI_PERCENTUAL_RATEIO := RAT_PERCENTUAL_RATEIO / 100;
        I_PERC_RATEIO        := VI_PERCENTUAL_RATEIO;
        I_VALOR              := (MON_VALOR * RAT_PERCENTUAL_RATEIO) / 100;
      ELSE
        BEGIN

/*          SELECT trunc(sum(val_percent_rateio * (case
                             when dat_fim_vig is not null and
                                  dat_fim_vig = dat_ini_vig then
                              1
                             when dat_fim_vig is not null and
                                  dat_fim_vig <= add_months(par_per_pro, 1) - 1
                                --  AND to_number(to_char(dat_fim_vig, 'dd'))< 31 then
                                  AND to_number(to_char(dat_fim_vig, 'dd'))< to_number(to_char(last_day(par_per_pro),'dd'))
                        ------------------- Incluido 27/04/2015------------------
                                  AND  dat_ini_vig <= par_per_pro then --- Incluido 27/04/2015

                                  to_number(to_char(dat_fim_vig, 'dd'))
                       ------------------- Incluido 27/04/2015------------------
                             when dat_fim_vig is not null and
                                  dat_fim_vig <= add_months(par_per_pro, 1) - 1
                                --  AND to_number(to_char(dat_fim_vig, 'dd'))< 31 then
                                  AND to_number(to_char(dat_fim_vig, 'dd'))< to_number(to_char(last_day(par_per_pro),'dd'))
                                  AND  dat_ini_vig > par_per_pro then
                                  to_number(to_char(dat_fim_vig, 'dd')) -   to_number(to_char(dat_ini_vig, 'dd')) +1

                       ------------------- Incluido 27/04/2015------------------

                             when dat_fim_vig is null and dat_ini_vig < par_per_pro then
                              30
                             when to_char(dat_ini_vig, 'YYYYMM') <
                                  to_char(PAR_PER_PRO, 'YYYYMM') then
                              30
                             when to_number(to_char(dat_ini_vig, 'dd'))=31
                               and to_number(to_char(dat_ini_vig, 'mm'))= to_number(to_char(par_per_pro, 'mm')) then
                              1
                             else
                              30 - to_number(to_char(dat_ini_vig, 'dd')) + 1
                           end) / 30),
                       4)
            INTO v_percent_rateio
            FROM tb_rateio_beneficio
           WHERE cod_ins = PAR_COD_INS
             AND cod_beneficio = P_COD_BENEFICIO
             AND cod_ide_cli_ben = COD_CLI
             AND  NVL(flg_STATUS,'A') = 'A'
             AND (to_char(par_per_pro, 'YYYYMM') >=
                 to_char(DAT_INI_VIG, 'YYYYMM') AND
                 (par_per_pro <= DAT_FIM_VIG OR DAT_FIM_VIG is null))*/
                 
                 
          ------------------ 14/09/2018 -----------------       
         ----  TASK 2961 (número do VTiger) / 27786 (        
           SELECT trunc(sum(val_percent_rateio * (case
                              when rb.dat_fim_vig is not null and
                                   rb.dat_fim_vig = rb.dat_ini_vig and
                                  --TASK2961 DALVES 14/06/2017
                                   to_number(to_char(rb.dat_fim_vig, 'dd')) <> 31 then
                               1
                              when rb.dat_fim_vig is not null and
                                   rb.dat_fim_vig <= add_months(par_per_pro, 1) - 1
                                 --  AND to_number(to_char(dat_fim_vig, 'dd'))< 31 then
                                  
                                   AND to_number(to_char(rb.dat_fim_vig, 'dd')) <
                                   to_number(to_char(last_day(par_per_pro), 'dd'))
                                  
                                  ------------------- Incluido 27/04/2015------------------
                                  
                                   AND rb.dat_ini_vig <= par_per_pro then --- Incluido 27/04/2015
                               to_number(to_char(rb.dat_fim_vig, 'dd'))
                            ------------------- Incluido 27/04/2015------------------
                            
                              when rb.dat_fim_vig is not null and
                                   rb.dat_fim_vig <= add_months(par_per_pro, 1) - 1
                                  
                                  --  AND to_number(to_char(dat_fim_vig, 'dd'))< 31 then
                                  
                                   AND to_number(to_char(rb.dat_fim_vig, 'dd')) <
                                   to_number(to_char(last_day(par_per_pro), 'dd'))
                                   AND rb.dat_ini_vig > par_per_pro then
                               to_number(to_char(rb.dat_fim_vig, 'dd')) -
                               to_number(to_char(rb.dat_ini_vig, 'dd')) + 1
                            
                            ------------------- Incluido 27/04/2015------------------                                      
                            
                              when rb.dat_fim_vig is null and
                                   rb.dat_ini_vig < par_per_pro then
                               30
                              when to_char(rb.dat_ini_vig, 'YYYYMM') <
                                   to_char(PAR_PER_PRO, 'YYYYMM') then
                               30
                              when to_number(to_char(rb.dat_ini_vig, 'dd')) = 31
                                   and to_number(to_char(rb.dat_ini_vig, 'mm')) =
                                   to_number(to_char(par_per_pro, 'mm'))
                                  --TASK2961 DALVES 14/06/2017 
                                   and not exists
                               (select 1
                                      from tb_rateio_beneficio r
                                     where r.cod_ins = rb.cod_ins
                                       and r.cod_beneficio = rb.cod_beneficio
                                       and r.cod_ide_cli_ben = rb.cod_ide_cli_ben
                                       and nvl(r.flg_status, 'A') =
                                           nvl(rb.flg_status, 'A')
                                       and r.dat_fim_vig = rb.dat_ini_vig - 1) then
                              --FIM TASK2961                    
                               1
                              else
                               30 - to_number(to_char(rb.dat_ini_vig, 'dd')) + 1
                            end) / 30),
                        4)
           
             INTO v_percent_rateio
             FROM tb_rateio_beneficio rb
            WHERE rb.cod_ins = PAR_COD_INS
              AND rb.cod_beneficio = P_COD_BENEFICIO
              AND rb.cod_ide_cli_ben = COD_CLI
              AND NVL(rb.flg_STATUS, 'A') = 'A'
              AND (to_char(par_per_pro, 'YYYYMM') >=
                  to_char(rb.DAT_INI_VIG, 'YYYYMM') AND
                  (par_per_pro <= rb.DAT_FIM_VIG OR rb.DAT_FIM_VIG is null));
           
           

        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            v_percent_rateio := 100;
          WHEN OTHERS THEN
            p_sub_proc_erro := 'SP_RATEIO_BENEFICIO';
            p_coderro       := SQLCODE;
            P_MSGERRO       := 'Erro ao obter o valor do percentual de rateio';
            INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                  p_coderro,
                                  'Calcula Folha',
                                  sysdate,
                                  p_msgerro,
                                  p_sub_proc_erro,
                                  COD_CLI,
                                  COM_COD_FCRUBRICA);

            --            RAISE ERRO;
            v_percent_rateio := 100;
            VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
        END;

        RAT_COD_BENEFICIO_ANT := P_COD_BENEFICIO;
        RAT_IDE_CLI_ANT       := COD_CLI;
        RAT_PERCENTUAL_RATEIO := v_percent_rateio;

        VI_PERCENTUAL_RATEIO := v_percent_rateio / 100;
        I_PERC_RATEIO        := VI_PERCENTUAL_RATEIO;
        I_VALOR              := (MON_VALOR * v_percent_rateio) / 100;
      END IF;

    ELSE
      IF COM_TIP_BENEFICIO = 'APOSENTADO' THEN

          ---I_PERC_RATEIO := 1;   -- jts 29-092010 jts
          -- jts 29-092010 jts

          --comente agora 30092010 antes do termino
           IF (V_QTD_DIAS / V_DIAS_MES)<1 THEN
              I_PERC_RATEIO := (V_QTD_DIAS / V_DIAS_MES);
           ELSE
             I_PERC_RATEIO := 1;
          END IF;

      END IF;
    END IF;

  END SP_RATEIO_BENEFICIO;
  ----------------------------------------------------------------------------------
  PROCEDURE SP_GRAVA_MASTER_PAG AS

    i                number := 0;
    j                number := 0;
    valor            number := 0;
    variavel         VARCHAR2(30) := null;
    val_rubrica_supl number(18, 4) := 0;
    v_fol            number;
    v_resumo         Varchar2(50) := '';

    ----- Acumula Rubricas
    V_VAL_RUBRICA          NUMBER(18, 4) := 0;
    dat_ini_ref_ant        date;
    dat_fim_ref_ant        date;
    chave_ant              VARCHAR2(50);
    RUBRICA_ANT            NUMBER;
    COD_IDE_CLI_BEN_ANT    TB_DET_CALCUlADO_ESTRUC.COD_IDE_CLI_BEN%type;
    ind                    NUMBER := 0;
    k                      number := 0;
    m                      number := 0;
    conta                  number(4) := 0;
  BEGIN

     IF vi_suplementar THEN
      --IF SUPL_OK = 'N' THEN
    -----------INICIO DE ACUMULAC?O--------------

         j:=0;
          TDCT.delete;
          V_VAL_RUBRICA := 0;
      BEGIN
           FOR I IN 1 .. TDCN.COUNT LOOP
             ------ Correção de Retroativo --- 20180411
             TDCN(i).cod_conceito:=trunc(TDCN(i).cod_fcrubrica/100);

            IF (TDCN(i).val_rubrica > 0 or TDCN(i).val_rubrica is not null )/* and
               TDCN(i).cod_fcrubrica  not in (1860150,1860151,1860155,1860156)*/
               -- Comentado a solic. de Caroline Yumie 11-10-2013
               then
              IF I = 1 THEN
                dat_ini_ref_ant:=TDCN(i).dat_ini_ref;
                dat_fim_ref_ant:=TDCN(i).dat_fim_ref;
                ------ Correção de Retroativo --- 20180411
                TDCN(i).cod_conceito:=trunc(TDCN(i).cod_fcrubrica)/100;
                chave_ant           := lpad(ltrim(to_char(TDCN(i).cod_beneficio)),
                                            8,
                                            0) ||
                                       ------ Correção de Retroativo --- 20180411
                                       --lpad(ltrim(to_char(TDCN(i).cod_fcrubrica)),
                                        lpad(ltrim(to_char(TDCN(i).cod_conceito)),
                                             7,
                                             0)
                                           ||  nvl(TDCN(i).cod_ide_cli_ben, '')
                                               ||  nvl(TDCN(i).dat_ini_ref,PAR_PER_PRO);
                RUBRICA_ANT         := TDCN(i).cod_fcrubrica;
                COD_IDE_CLI_BEN_ANT := TDCN(i).cod_ide_cli_ben;
                V_VAL_RUBRICA       := TDCN(i).val_rubrica;
                TDCT.extend;
                j := j + 1;
                TDCT(i) := TDCN(i);
                ind := i;
              ELSE
                IF chave_ant <>
                   lpad(ltrim(to_char(nvl(TDCN(i).cod_beneficio, 0))), 8, 0) ||
                      ------ Correção de Retroativo --- 20180411
                   --lpad(ltrim(to_char(nvl(TDCN(i).cod_fcrubrica, 0))), 7, 0) ||
                    lpad(ltrim(to_char(nvl(TDCN(i).cod_conceito, 0))), 7, 0) ||
                   nvl(TDCN(i).cod_ide_cli_ben, '')                          ||
                   nvl(TDCN(i).dat_ini_ref,PAR_PER_PRO)
                  then
                  dat_ini_ref_ant:=TDCN(i).dat_ini_ref;
                  dat_fim_ref_ant:=TDCN(i).dat_fim_ref;
                  chave_ant := lpad(ltrim(to_char(TDCN(i).cod_beneficio)), 8, 0) ||
                      ------ Correção de Retroativo --- 20180411
                   --lpad(ltrim(to_char(nvl(TDCN(i).cod_fcrubrica, 0))), 7, 0) ||
                    lpad(ltrim(to_char(nvl(TDCN(i).cod_conceito, 0))), 7, 0) ||
                               TDCN(i).cod_ide_cli_ben  ||
                               nvl(TDCN(i).dat_ini_ref,PAR_PER_PRO);
                  RUBRICA_ANT := TDCN(i).cod_fcrubrica;
                  COD_IDE_CLI_BEN_ANT := TDCN(i).cod_ide_cli_ben;
                  j := j + 1;
                  TDCT(j - 1).val_rubrica := V_VAL_RUBRICA;
                  --TDCT(j - 1).dat_ini_ref := PAR_PER_PRO;
                  V_VAL_RUBRICA := trunc(TDCN(i).val_rubrica,2);
                  TDCT.extend;
                  TDCT(j) := TDCN(i);
                  ind := i;
                ELSE  --  trunc(rdcn.val_rubrica_cheio, 2
                  V_VAL_RUBRICA := V_VAL_RUBRICA + trunc(nvl(TDCN(i).val_rubrica, 0),2);
                  TDCT(j).val_rubrica := V_VAL_RUBRICA;
                END IF;
              END IF;
            END IF;
          END LOOP;
          EXCEPTION
          when others then
                  p_sub_proc_erro := 'SP_GRAVA_MASTER_PAG ';
                  p_coderro       := SQLCODE;
                  P_MSGERRO       := SQLERRM;
                  INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                        p_coderro,
                                        'Calcula Folha',
                                        sysdate,
                                        p_msgerro,
                                        p_sub_proc_erro,
                                        RDCN.COD_IDE_CLI,
                                        RDCN.COD_FCRUBRICA);
       END;
          conta := tdcn.count;

          TDCN.delete;
          FOR I IN 1 .. TDCT.COUNT LOOP
            TDCN.extend;
            TDCN(I) := TDCT(I);
          END LOOP;
          j:=0;


    -----------FIM DE ACUMULAC?O--------------
       FOR i in 1 .. tdcn.count LOOP
          rdcn := tdcn(i);

          if rdcn.cod_fcrubrica is not null
           -- Modificac?o Temporal 28-12-2012 para tirar e trata as rubrica
           -- com + de lancamento
           --  and rdcn.cod_fcrubrica not  in (300704,302304)
           then

            ------- Task 37101 Contribuição previdencia ....
           IF RDCN.COD_BENEFICIO_ASSOC IS NULL  THEN
            val_rubrica_supl := sp_valor_suplementar(rdcn.cod_ide_cli,
                                                     rdcn.cod_beneficio,
                                                     rdcn.cod_fcrubrica,
                                                     rdcn.flg_natureza,
                                                     rdcn.val_rubrica,
                                                     rdcn.dat_ini_ref,
                                                     rdcn.cod_ide_cli_ben);


           ELSE
             val_rubrica_supl := sp_valor_suplementar(rdcn.cod_ide_cli,
                                                     rdcn.cod_beneficio_assoc,
                                                     rdcn.cod_fcrubrica_assoc,
                                                     rdcn.flg_natureza,
                                                     rdcn.val_rubrica,
                                                     rdcn.dat_ini_ref,
                                                     rdcn.cod_ide_cli_ben);

           END IF;

            IF val_rubrica_supl < 0 THEN
              RDCN.val_rubrica := RDCN.val_rubrica * -1;
              val_rubrica_supl := val_rubrica_supl * -1;
              IF RDCN.FLG_NATUREZA = 'C' THEN
                RDCN.FLG_NATUREZA := 'D';
              ELSE
                RDCN.FLG_NATUREZA := 'C';
              END IF;
            END IF;

            IF trunc(val_rubrica_supl,2) > 0 THEN
              begin

                 FOR i2 IN 1 .. vfolha.count LOOP
                       rfol := vfolha(i2);
                       COM_COD_ENTIDADE:=rdcn.COD_ENTIDADE;
                      EXIT WHEN   RFOL.COD_BENEFICIO=rdcn.cod_beneficio;
                 END LOOP;


                SELECT COD_RUBRICA
                  INTO RDCN.COD_FCRUBRICA
                  FROM TB_RUBRICAS
                 WHERE COD_CONCEITO = trunc(RDCN.COD_FCRUBRICA / 100, 000)
                   AND FLG_NATUREZA = RDCN.FLG_NATUREZA
                   AND COD_ENTIDADE = COM_COD_ENTIDADE
                      --  AND SUBSTR(lpad(ltrim(to_char(COD_RUBRICA)),5,0),4,2) <> '00';
                      --  AND SUBSTR(lpad(ltrim(to_char(COD_RUBRICA)),6,0),5,2) <> '00'; -- alt ffranco 5/12/2006
                   AND SUBSTR(lpad(ltrim(to_char(COD_RUBRICA)), 7, 0), 6, 2) IN ('50', '51');

              exception
                when no_data_found then
                  p_sub_proc_erro := 'SP_GRAVA_MASTER_PAG A1';
                  p_coderro       := SQLCODE;
                  P_MSGERRO       := 'Erro ao obter a rubrica para gravar o resumo';
                  INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                        p_coderro,
                                        'Calcula Folha',
                                        sysdate,
                                        p_msgerro,
                                        p_sub_proc_erro,
                                        RDCN.COD_IDE_CLI,
                                        RDCN.COD_FCRUBRICA);
                  VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
                when others then
                  p_sub_proc_erro := 'SP_GRAVA_DETALHE_RET ERRO';
                  p_coderro       := SQLCODE;
                  P_MSGERRO       := SQLERRM;
                  INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                        p_coderro,
                                        'Calcula Folha',
                                        sysdate,
                                        p_msgerro,
                                        p_sub_proc_erro,
                                        RDCN.COD_IDE_CLI,
                                        RDCN.COD_FCRUBRICA);

                  VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
              end;
            END IF;
            tdcn(i).COD_FCRUBRICA := RDCN.COD_FCRUBRICA;
            tdcn(i).val_rubrica   := val_rubrica_supl;
            tdcn(i).flg_natureza := RDCN.FLG_NATUREZA;
          ELSE
            tdcn(i).val_rubrica := 0;
          END IF;
        END LOOP;
        --- Calculo de IR Da Suplementar ---
        --- Aqui Verificiar tipo de Ir
         VI_IR_EXTERIOR:=FALSE;
         VI_IR_EXTERIOR:=SP_IRRF_EXT(ANT_IDE_CLI);
         IF  NOT VI_IR_EXTERIOR  THEN

                BEGIN
                  SP_SEPARA_IRRF_SUP(IDX_IRRF,IDX_IRRF_RETRO ,IDX_IRRF_HISTO) ;
                  SP_OBTEM_IRRF(ant_ide_cli,
                                        IDX_IRRF,
                                        'N',
                                        V_VAL_IR,
                                        V_VAL_IR_13);
                   IF V_VAL_IR > 0 OR V_VAL_IR_13 > 0 THEN
                            COM_TIPO_EVENTO_ESPECIAL:='I';
                              Idx_caln  :=tdcn.COUNT;
                              tdcn.extend;
                              idx_caln        := nvl(idx_caln, 0) + 1;
                              idx_seq_detalhe := nvl(idx_seq_detalhe, 0) + 1;

                            SP_OBTEM_DETALHE_PAG(ANT_IDE_CLI, 'N', 'I', 'N');

                   ELSE
                          vi_ir_ret.extend;
                          -- Inicializacao da variavel do ir retido, recebendo o valor do ir calculado
                          vi_ir_ret(1) := V_VAL_IR;
                          -- nao existindo IR , o valor da variavel ir retido ficara com zero.
                  END IF;
                 V_VAL_IR:=V_VAL_IR_RETRO;
                 SP_OBTEM_IRRF_RETRO(ant_ide_cli   ,
                               IDX_IRRF_RETRO      , -- IDX_CALN, -- Novo Calculo
                               'R'                 ,
                               V_VAL_IR_RETRO      ,
                               V_VAL_IR_13         ,
                               V_BASE_BRUTA_IRRF   ,
                               V_BASE_BRUTA_13_IRRF,
                               QTA_MESES);

                  V_VAL_IR:=V_VAL_IR_RETRO;
                  IF V_VAL_IR_RETRO > 0 OR V_VAL_IR_13 > 0 THEN
                      Idx_caln  :=tdcn.COUNT;
                      tdcn.extend;
                      idx_caln        := nvl(idx_caln, 0) + 1;
                      idx_seq_detalhe := nvl(idx_seq_detalhe, 0) + 1;
                     COM_TIPO_EVENTO_ESPECIAL:='J';

                     SP_OBTEM_DETALHE_PAG_IRRF(ANT_IDE_CLI, 'R', 'J', 'N','R',V_BASE_BRUTA_IRRF,V_BASE_BRUTA_13_IRRF);
                  ELSE
                            vi_ir_ret.extend;
                            vi_ir_ret(1) := V_VAL_IR_RETRO;
                  END IF;
                  EXCEPTION
                  WHEN others then
                          p_sub_proc_erro := 'SP_GRAVA_DETALHE_RET IR';
                          p_coderro       := SQLCODE;
                          P_MSGERRO       := SQLERRM;
                          INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                                p_coderro,
                                                'ERRO Folha',
                                                sysdate,
                                                p_msgerro,
                                                p_sub_proc_erro,
                                                RDCN.COD_IDE_CLI,
                                                RDCN.COD_FCRUBRICA);

                          VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
                   END;
         ELSE --- Calculo de IR Exterior --
            BEGIN
                IDX_IRRF:=0;
                V_VAL_IR:=0;
                IDX_IRRF:=0;
                V_VAL_IR_13 :=0;
                SP_SEPARA_IRRF_SUP(IDX_IRRF,IDX_IRRF_RETRO ,IDX_IRRF_HISTO) ;
                IDX_CALN    :=tdcn.count;
                              SP_OBTEM_IRRF(ant_ide_cli,
                              IDX_IRRF,
                              'E',  ----Alterado em N->E 09/05/2018
                              V_VAL_IR,
                              V_VAL_IR_13);
                  IF V_VAL_IR > 0 OR V_VAL_IR_13 > 0 THEN
                    COM_TIPO_EVENTO_ESPECIAL:='I';
                    IF PAR_TIP_PRO = 'T' THEN
                      -- Incluir a Rubrica do IR no ARRAY
                      SP_OBTEM_DETALHE_PAG(ANT_IDE_CLI, 'N', 'I', 'T');
                    ELSE
                      SP_OBTEM_DETALHE_PAG(ANT_IDE_CLI, 'N', 'I', 'N');
                    END IF;
                  ELSE
                    vi_ir_ret.extend;
                    -- Inicializacao da variavel do ir retido, recebendo o valor do ir calculado
                    vi_ir_ret(1) := V_VAL_IR;
                    -- nao existindo IR , o valor da variavel ir retido ficara com zero.
                  END IF;
               EXCEPTION
               WHEN OTHERS THEN
                         p_coderro       := sqlcode;
                         p_sub_proc_erro := 'SP_FOLHA_CALCULADA -Calculo IR';
                         p_msgerro       := sqlerrm;
                         INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                                p_coderro,
                                                'Calcula Folha',
                                                sysdate,
                                                p_msgerro,
                                                p_sub_proc_erro,
                                                ant_ide_cli,
                                                0);

                          VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
               END;

         END IF;

          FOR i in 1 .. tdcn.count LOOP
          rdcn := tdcn(i);

          if rdcn.cod_fcrubrica is not null and
            (rdcn.tip_evento_especial in ('I','J') /*and  NOT VI_IR_EXTERIOR*/ ) then

            val_rubrica_supl := sp_valor_suplementar(rdcn.cod_ide_cli,
                                                     rdcn.cod_beneficio,
                                                     rdcn.cod_fcrubrica,
                                                     rdcn.flg_natureza,
                                                     rdcn.val_rubrica,
                                                     rdcn.dat_ini_ref,
                                                     rdcn.cod_ide_cli_ben);

            IF val_rubrica_supl < 0 THEN
              RDCN.val_rubrica := RDCN.val_rubrica * -1;
              val_rubrica_supl := val_rubrica_supl * -1;
              IF RDCN.FLG_NATUREZA = 'C' THEN
                RDCN.FLG_NATUREZA := 'D';
              ELSE
                RDCN.FLG_NATUREZA := 'C';
              END IF;
            END IF;

            IF trunc(val_rubrica_supl,2) > 0 THEN
              begin
                SELECT COD_RUBRICA
                  INTO RDCN.COD_FCRUBRICA
                  FROM TB_RUBRICAS
                 WHERE COD_CONCEITO = trunc(RDCN.COD_FCRUBRICA / 100, 000)
                   AND FLG_NATUREZA = RDCN.FLG_NATUREZA
                   AND COD_ENTIDADE = COM_COD_ENTIDADE
                      --  AND SUBSTR(lpad(ltrim(to_char(COD_RUBRICA)),5,0),4,2) <> '00';
                      --  AND SUBSTR(lpad(ltrim(to_char(COD_RUBRICA)),6,0),5,2) <> '00'; -- alt ffranco 5/12/2006
                   AND SUBSTR(lpad(ltrim(to_char(COD_RUBRICA)), 7, 0), 6, 2) IN ('50', '51');

              exception
                when no_data_found then
                  p_sub_proc_erro := 'SP_GRAVA_MASTER_PAG A1';
                  p_coderro       := SQLCODE;
                  P_MSGERRO       := 'Erro ao obter a rubrica para gravar o resumo';
                  INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                        p_coderro,
                                        'Calcula Folha',
                                        sysdate,
                                        p_msgerro,
                                        p_sub_proc_erro,
                                        RDCN.COD_IDE_CLI,
                                        RDCN.COD_FCRUBRICA);
                  VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
                when others then
                  p_sub_proc_erro := 'SP_GRAVA_DETALHE_RET ERRO';
                  p_coderro       := SQLCODE;
                  P_MSGERRO       := SQLERRM;
                  INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                        p_coderro,
                                        'Calcula Folha',
                                        sysdate,
                                        p_msgerro,
                                        p_sub_proc_erro,
                                        RDCN.COD_IDE_CLI,
                                        RDCN.COD_FCRUBRICA);

                  VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
              end;
            END IF;
            tdcn(i).COD_FCRUBRICA := RDCN.COD_FCRUBRICA;
            tdcn(i).val_rubrica := val_rubrica_supl;
            tdcn(i).flg_natureza := RDCN.FLG_NATUREZA;
          END IF;
        END LOOP;
        --------------- Fim de Calculo ---------
     --   SP_VERIF_RUBRICA_NPAGA_MES_SUP;  --continuar em retroativo comentado ROD em 5.out
     -- END IF;
    END IF;

    --SUPL_OK := 'S';

    if par_tip_pro = 'T' and vi_seq_pagamento > 1 THEN

      FOR i in 1 .. tdcn.count LOOP
        rdcn := tdcn(i);

        if rdcn.cod_fcrubrica is not null then

          val_rubrica_supl := sp_valor_suplementar_decimo(rdcn.cod_ide_cli,
                                                          rdcn.cod_beneficio,
                                                          rdcn.cod_fcrubrica,
                                                          rdcn.flg_natureza,
                                                          rdcn.val_rubrica);

          IF RDCN.val_rubrica < 0 THEN
            RDCN.val_rubrica := RDCN.val_rubrica * -1;
            IF RDCN.FLG_NATUREZA = 'C' THEN
              RDCN.FLG_NATUREZA := 'D';
            ELSE
              RDCN.FLG_NATUREZA := 'C';
            END IF;
          END IF;

          begin
            SELECT COD_RUBRICA
              INTO RDCN.COD_FCRUBRICA
              FROM TB_RUBRICAS
             WHERE COD_CONCEITO = trunc(RDCN.COD_FCRUBRICA / 100, 000)
               AND FLG_NATUREZA = RDCN.FLG_NATUREZA
               AND COD_ENTIDADE = COM_COD_ENTIDADE
               AND SUBSTR(lpad(ltrim(to_char(COD_RUBRICA)), 7, 0), 6, 2) <> '00';
          exception
            when no_data_found then
              p_sub_proc_erro := 'SP_GRAVA_MASTER_PAG A1';
              p_coderro       := SQLCODE;
              P_MSGERRO       := 'Erro ao obter a rubrica para gravar o resumo';
              INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                    p_coderro,
                                    'Calcula Folha',
                                    sysdate,
                                    p_msgerro,
                                    p_sub_proc_erro,
                                    RDCN.COD_IDE_CLI,
                                    RDCN.COD_FCRUBRICA);
              VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
            when others then
              p_sub_proc_erro := 'SP_GRAVA_DETALHE_RET ERRO2';
              p_coderro       := SQLCODE;
              P_MSGERRO       := SQLERRM;
              INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                    p_coderro,
                                    'Calcula Folha',
                                    sysdate,
                                    p_msgerro,
                                    p_sub_proc_erro,
                                    RDCN.COD_IDE_CLI,
                                    RDCN.COD_FCRUBRICA);
              VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;

          end;
          tdcn(i).COD_FCRUBRICA := RDCN.COD_FCRUBRICA;
          tdcn(i).val_rubrica := val_rubrica_supl;
          tdcn(i).flg_natureza := RDCN.FLG_NATUREZA;
        END IF;
      END LOOP;

    end if;

    v_fol := vfolha.count;

    FOR i IN 1 .. vfolha.count LOOP

      rfol := vfolha(i);

      IF rfol.TIP_PROCESSO = PAR_TIP_PRO THEN

        rfol.val_base_ir            := (VI_BASE_IR *
                                       VI_PERC_IR(rfol.cod_beneficio) (1)) / 100;
        rfol.val_base_ir_pag        := rfol.val_base_ir;
        
       ------- Task 47697  Imposto da Renda Cumulativo ....
        vfolha(i).val_base_ir_pag   :=rfol.val_base_ir;
        vfolha(i).val_base_ir       :=rfol.val_base_ir;
        
        rfol.val_base_ir_13         := (VI_BASE_IR_13 *
                                       VI_PERC_IR13(rfol.cod_beneficio) (1)) / 100;
        rfol.val_ir_13_ret          := V_VAL_IR_13;
        rfol.val_base_ir_13_pag     := (rfol.val_base_ir_13 *
                                       VI_PERC_IR13(rfol.cod_beneficio) (1)) / 100;
        rfol.val_base_ir_13_ret_pag := V_VAL_IR_13 *
                                       VI_PERC_IR13(rfol.cod_beneficio) (1);
        IF RFOL.TIP_BENEFICIO='PENSIONISTA' THEN
                  rfol.tot_cred := 0;
                  SP_OBTEM_VALORES_TOTAIS('TOT_CRED',
                                        rfol.cod_beneficio,
                                        0,
                                        'N',
                                        rfol.tot_cred);
                    rfol.tot_deb := 0;
                    SP_OBTEM_VALORES_TOTAIS('TOT_DEBIT',
                                            rfol.cod_beneficio,
                                            0,
                                            'N',
                                            rfol.tot_deb);



        ELSE
                  rfol.tot_cred := 0;
                  SP_OBTEM_VALORES_TOTAIS('TOT_CRED_A',
                                        rfol.cod_beneficio,
                                        0,
                                        'N',
                                        rfol.tot_cred);
                     rfol.tot_deb := 0;
                    SP_OBTEM_VALORES_TOTAIS('TOT_DEBIT_A',
                                            rfol.cod_beneficio,
                                            0,
                                            'N',
                                            rfol.tot_deb);
         END IF;
         begin
          rfol.val_base_prev := v_base_prev(rfol.cod_beneficio) (1);
          --        rfol.val_base_prev   :=   VI_BASE_PREV; -- FFRANCO 03/2007
        exception
          when no_data_found then
            rfol.val_base_prev := 0;
        end;
        --Agregado em 20102010 JTS
        IF rfol.val_base_prev <0 THEN
           rfol.val_base_prev:=0;
        END IF;

        if rfol.tot_deb < 0 then
          rfol.tot_deb := rfol.tot_deb * -1;
        end if;
        rfol.val_liquido := 0;
         -- trunc(rdcn.val_rubrica, 2)
         rfol.val_liquido := Round( rfol.tot_cred - rfol.tot_deb,2);

        IF v_cod_beneficio.count > 1 THEN
          IF rfol.tot_deb > 0 AND rfol.val_base_ir > 0 THEN
            begin
              rfol.val_ir_ret := vi_ir_ret(1);
            EXCEPTION
              WHEN OTHERS THEN
                p_sub_proc_erro := 'SP_GRAVA_MASTER_PAG';
                p_coderro       := SQLCODE;
                P_MSGERRO       := 'Erro ao obter o valor de IR retido no resumo';
                INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                      p_coderro,
                                      'Calcula Folha',
                                      sysdate,
                                      p_msgerro,
                                      p_sub_proc_erro,
                                      BEN_IDE_CLI,
                                      COM_COD_FCRUBRICA);

                --            RAISE ERRO;
                VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
            END;

          ELSE
            rfol.val_ir_ret := 0;
          END IF;
        ELSIF V_VAL_IR > 0 THEN
          IF rfol.tot_deb > 0 THEN
            rfol.val_ir_ret := vi_ir_ret(i);
          ELSE
            rfol.val_ir_ret := 0;
          END IF;
        ELSE
          rfol.val_ir_ret := 0;
        END IF;

        rfol.ded_base_ir      := VI_TOT_DED;
        rfol.val_ir_ret_pag   := rfol.val_ir_ret;
        rfol.ded_ir_pa        := V_DED_IR_PA;
        rfol.ded_ir_doenca    := V_DED_IR_DOENCA;
        rfol.val_base_isencao := V_BASE_ISENCAO;

        BEGIN
          IF RFOL.FLG_PAG <> 'S' THEN
            ---> FFRANCO 03/2007
            IF PAR_IND_PROC_ENQUADRAMENTO = 1 THEN
              v_resumo := 'Folha_enquadramento';
              INSERT /*+ append */
              INTO TB_FOLHA_ENQUADRAMENTO
                (cod_ins,
                 tip_processo,
                 per_processo,
                 seq_pagamento,
                 cod_ide_cli,
                 cod_beneficio,
                 num_grp,
                 num_seq_benef,
                 cod_ide_cli_ben,
                 cod_ide_serv,
                 nom_serv,
                 cod_ide_ben,
                 nom_ben,
                 cod_ide_tut,
                 nom_tut,
                 dat_processo,
                 val_sal_base,
                 tot_cred,
                 tot_deb,
                 val_liquido,
                 val_base_ir,
                 val_ir_ret,
                 ded_base_ir,
                 ded_ir_oj,
                 ded_ir_doenca,
                 ded_ir_pa,
                 flg_pag,
                 flg_ind_pago,
                 flg_ind_ultimo_pag,
                 tot_cred_pag,
                 tot_deb_pag,
                 val_liquido_pag,
                 val_base_ir_pag,
                 val_ir_ret_pag,
                 val_base_ir_13,
                 VAL_IR_13_RET,
                 val_base_ir_13_pag,
                 VAL_BASE_IR_13_RET_PAG,
                 val_base_isencao,
                 IND_PROCESSO,
                 val_base_prev
                 )
              VALUES
                (rfol.COD_INS,
                 rfol.TIP_PROCESSO,
                 rfol.PER_PROCESSO,
                 rfol.SEQ_PAGAMENTO,
                 rfol.COD_IDE_CLI,
                 rfol.COD_BENEFICIO,
                 rfol.NUM_GRP,
                 rfol.NUM_SEQ_BENEF,
                 rfol.cod_ide_cli_ben,
                 rfol.cod_ide_serv,
                 rfol.nom_serv,
                 rfol.cod_ide_ben,
                 rfol.nom_ben,
                 rfol.cod_ide_tut,
                 rfol.nom_tut,
                 rfol.dat_processo,
                 trunc(rfol.val_sal_base, 2),
                 trunc(rfol.tot_cred, 2),
                 trunc(rfol.tot_deb, 2),
                 trunc(rfol.val_liquido, 2),
                 trunc(rfol.val_base_ir, 2),
                 trunc(rfol.val_ir_ret, 2),
                 trunc(rfol.ded_base_ir, 2),
                 trunc(rfol.ded_ir_oj, 2),
                 trunc(rfol.ded_ir_doenca, 2),
                 trunc(rfol.ded_ir_pa, 2),
                 rfol.flg_pag,
                 rfol.flg_ind_pago,
                 rfol.flg_ind_ultimo_pag,
                 trunc(rfol.tot_cred_pag, 2),
                 trunc(rfol.tot_deb_pag, 2),
                 trunc(rfol.val_liquido_pag, 2),
                 trunc(rfol.val_base_ir_pag, 2),
                 trunc(rfol.val_ir_ret_pag, 2),
                 trunc(rfol.val_base_ir_13, 2),
                 trunc(rfol.val_ir_13_ret, 2),
                 trunc(rfol.val_base_ir_13_pag, 2),
                 trunc(rfol.val_base_ir_13_ret_pag, 2),
                 trunc(rfol.val_base_isencao, 2),
                 rfol.ind_processo,
                 trunc(rfol.val_base_prev, 2));
            ELSE
               BEGIN
                        v_resumo := 'TB_Folha';
                        INSERT /*+ append */
                        INTO TB_FOLHA
                          (cod_ins,
                           tip_processo,
                           per_processo,
                           seq_pagamento,
                           cod_ide_cli,
                           cod_beneficio,
                           num_grp,
                           num_seq_benef,
                           cod_ide_cli_ben,
                           cod_ide_serv,
                           nom_serv,
                           cod_ide_ben,
                           nom_ben,
                           cod_ide_tut,
                           nom_tut,
                           dat_processo,
                           val_sal_base,
                           tot_cred,
                           tot_deb,
                           val_liquido,
                           val_base_ir,
                           val_ir_ret,
                           ded_base_ir,
                           ded_ir_oj,
                           ded_ir_doenca,
                           ded_ir_pa,
                           flg_pag,
                           flg_ind_pago,
                           flg_ind_ultimo_pag,
                           tot_cred_pag,
                           tot_deb_pag,
                           val_liquido_pag,
                           val_base_ir_pag,
                           val_ir_ret_pag,
                           val_base_ir_13,
                           VAL_IR_13_RET,
                           val_base_ir_13_pag,
                           VAL_BASE_IR_13_RET_PAG,
                           val_base_isencao,
                           IND_PROCESSO,
                           val_base_prev,
                           margem_consig,
                           --- JTS 07-20010
                           DAT_PAGAMENTO,
                           TIP_BENEFICIO,
                           COD_ENTIDADE ,
                           per_rateio   ,
                           dat_ingresso ,
                           VAL_BASE_IR_ACUM,
                            ----- TASK 3359-----
                             VAL_BASE_REDUTOR
                           )

                        VALUES
                          (rfol.COD_INS,
                           rfol.TIP_PROCESSO,
                           rfol.PER_PROCESSO,
                           rfol.SEQ_PAGAMENTO,
                           rfol.COD_IDE_CLI,
                           rfol.COD_BENEFICIO,
                           rfol.NUM_GRP,
                           rfol.NUM_SEQ_BENEF,
                           rfol.cod_ide_cli_ben,
                           rfol.cod_ide_serv,
                           rfol.nom_serv,
                           rfol.cod_ide_ben,
                           rfol.nom_ben,
                           rfol.cod_ide_tut,
                           rfol.nom_tut,
                           rfol.dat_processo,
                           trunc(rfol.val_sal_base, 2),
                           trunc(rfol.tot_cred, 2),
                           trunc(rfol.tot_deb, 2),
                           trunc(rfol.val_liquido, 2),
                           trunc(rfol.val_base_ir, 2),
                           trunc(rfol.val_ir_ret, 2),
                           trunc(rfol.ded_base_ir, 2),
                           trunc(rfol.ded_ir_oj, 2),
                           trunc(rfol.ded_ir_doenca, 2),
                           trunc(rfol.ded_ir_pa, 2),
                           rfol.flg_pag,
                           rfol.flg_ind_pago,
                           rfol.flg_ind_ultimo_pag,
                           trunc(rfol.tot_cred_pag, 2),
                           trunc(rfol.tot_deb_pag, 2),
                           trunc(rfol.val_liquido_pag, 2),
                           trunc(rfol.val_base_ir_pag, 2),
                           trunc(rfol.val_ir_ret_pag, 2),
                           trunc(rfol.val_base_ir_13, 2),
                           trunc(rfol.val_ir_13_ret, 2),
                           trunc(rfol.val_base_ir_13_pag, 2),
                           trunc(rfol.val_base_ir_13_ret_pag, 2),
                           trunc(rfol.val_base_isencao, 2),
                           rfol.ind_processo,
                           trunc(rfol.val_base_prev, 2),
                           0, -- ZERO NO VALOR DO MARGEM
                           NULL              ,
                           rfol.TIP_BENEFICIO,
                           RFOL.COD_ENTIDADE ,
                           rfol.per_rateio   ,
                           rfol.dat_ingresso ,
                           trunc(rfol.VAL_BASE_IR_ACUM, 2),
                            ---- TASK 3359 ----
                           rfol.val_base_redutor
                           );
                    EXCEPTION
                    WHEN OTHERS THEN
                      p_sub_proc_erro := 'SP_GRAVA_MASTER_PAG';
                      p_coderro       := SQLCODE;
                      p_msgerro       := sqlerrm;
                      P_MSGERRO       := 'Erro do resumo:' ||
                                         sqlerrm;
                      INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                            p_coderro,
                                            'Calcula Folha',
                                            sysdate,
                                            p_msgerro,
                                            p_sub_proc_erro,
                                            rfol.COD_IDE_CLI,
                                            NULL);
                      VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
                   END;
            END IF;
          ELSE
            v_resumo := 'delete tb_det_calculado_suspenso';

            delete tb_det_calculado_suspenso --->FFRANCO 03/2007
             where cod_ins = rfol.cod_ins
               and per_processo = rfol.per_processo
               and cod_ide_cli = rfol.cod_ide_cli
               and tip_processo = rfol.tip_processo;

            v_resumo := 'delete tb_folha_suspenso';
            delete tb_folha_suspenso --->FFRANCO 03/2007
             where cod_ins = rfol.cod_ins
               and per_processo = rfol.per_processo
               and cod_ide_cli = rfol.cod_ide_cli
               and tip_processo = rfol.tip_processo;
            commit;

            v_resumo := 'insert tb_folha_suspenso';
            INSERT /*+ append */
            INTO TB_FOLHA_SUSPENSO
              ( --->FFRANCO 03/2007
               cod_ins,
               tip_processo,
               per_processo,
               seq_pagamento,
               cod_ide_cli,
               cod_beneficio,
               num_grp,
               num_seq_benef,
               cod_ide_cli_ben,
               cod_ide_serv,
               nom_serv,
               cod_ide_ben,
               nom_ben,
               cod_ide_tut,
               nom_tut,
               dat_processo,
               val_sal_base,
               tot_cred,
               tot_deb,
               val_liquido,
               val_base_ir,
               val_ir_ret,
               ded_base_ir,
               ded_ir_oj,
               ded_ir_doenca,
               ded_ir_pa,
               flg_pag,
               flg_ind_pago,
               flg_ind_ultimo_pag,
               tot_cred_pag,
               tot_deb_pag,
               val_liquido_pag,
               val_base_ir_pag,
               val_ir_ret_pag,
               val_base_ir_13,
               VAL_IR_13_RET,
               val_base_ir_13_pag,
               VAL_BASE_IR_13_RET_PAG,
               val_base_isencao,
               IND_PROCESSO,
               val_base_prev,
               FLG_ENVIO_PAGAMENTO,
               DAT_ENVIO_PAGAMENTO,
               TIP_BENEFICIO)

            VALUES
              (rfol.COD_INS,
               rfol.TIP_PROCESSO,
               rfol.PER_PROCESSO,
               rfol.SEQ_PAGAMENTO,
               rfol.COD_IDE_CLI,
               rfol.COD_BENEFICIO,
               rfol.NUM_GRP,
               rfol.NUM_SEQ_BENEF,
               rfol.cod_ide_cli_ben,
               rfol.cod_ide_serv,
               rfol.nom_serv,
               rfol.cod_ide_ben,
               rfol.nom_ben,
               rfol.cod_ide_tut,
               rfol.nom_tut,
               rfol.dat_processo,
               trunc(rfol.val_sal_base, 2),
               trunc(rfol.tot_cred, 2),
               trunc(rfol.tot_deb, 2),
               trunc(rfol.val_liquido, 2),
               trunc(rfol.val_base_ir, 2),
               trunc(rfol.val_ir_ret, 2),
               trunc(rfol.ded_base_ir, 2),
               trunc(rfol.ded_ir_oj, 2),
               trunc(rfol.ded_ir_doenca, 2),
               trunc(rfol.ded_ir_pa, 2),
               rfol.flg_pag,
               rfol.flg_ind_pago,
               rfol.flg_ind_ultimo_pag,
               trunc(rfol.tot_cred_pag, 2),
               trunc(rfol.tot_deb_pag, 2),
               trunc(rfol.val_liquido_pag, 2),
               trunc(rfol.val_base_ir_pag, 2),
               trunc(rfol.val_ir_ret_pag, 2),
               trunc(rfol.val_base_ir_13, 2),
               trunc(rfol.val_ir_13_ret, 2),
               trunc(rfol.val_base_ir_13_pag, 2),
               trunc(rfol.val_base_ir_13_ret_pag, 2),
               trunc(rfol.val_base_isencao, 2),
               rfol.ind_processo,
               trunc(rfol.val_base_prev, 2),
               'N',
               null,
               rfol.TIP_BENEFICIO);
          END IF;
        EXCEPTION
          WHEN OTHERS THEN
            p_sub_proc_erro := 'SP_GRAVA_MASTER_PAG';
            p_coderro       := SQLCODE;
            p_msgerro       := sqlerrm;
            P_MSGERRO       := 'Erro do resumo:' ||
                               sqlerrm;
            INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                  p_coderro,
                                  'Calcula Folha',
                                  sysdate,
                                  p_msgerro,
                                  p_sub_proc_erro,
                                  rfol.COD_IDE_CLI,
                                  NULL);
            VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
        END;
        valor := rfol.val_base_ir + rfol.ded_base_ir + rfol.ded_ir_oj +
                 rfol.ded_ir_pa + rfol.ded_ir_doenca;


      END IF;

    END LOOP;
    COMMIT;
  END SP_GRAVA_MASTER_PAG;
  ----------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_DADOS_PF(IDE_CLI IN VARCHAR2,
                              I_TIPO  IN CHAR,
                              I_CPF   OUT VARCHAR2,
                              I_NOME  OUT VARCHAR2) AS
    --V_COUNT NUMBER;
  BEGIN
    IF I_TIPO = 'S' THEN
      BEGIN
        /*          SELECT PF.NUM_CPF, substr(PF.NOM_PESSOA_FISICA,1,50)
                    INTO  I_CPF, I_NOME
                    FROM TB_PESSOA_FISICA PF,
                         TB_CONCESSAO_BENEFICIO CB
                   WHERE PF.COD_INS = PAR_COD_INS
                     AND CB.COD_INS = PAR_COD_INS
                     AND CB.COD_IDE_CLI_SERV = PF.COD_IDE_CLI
                     AND CB.COD_BENEFICIO = ANT_COD_BENEFICIO;
        */
        SELECT PF.NUM_CPF, substr(PF.NOM_PESSOA_FISICA, 1, 50)
          INTO I_CPF, I_NOME
          from tb_pessoa_fisica pf
         where pf.cod_ide_cli =
               (select cod_ide_cli_serv
                  from tb_concessao_beneficio
                 where cod_beneficio = ANT_COD_BENEFICIO
                   and cod_ins = PAR_COD_INS
                   and cod_entidade = ANT_ENTIDADE)
           and pf.cod_ins = PAR_COD_INS;

      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          I_CPF  := null;
          I_NOME := null;
        WHEN OTHERS THEN
          p_sub_proc_erro := 'SP_OBTEM_DADOS_PF';
          p_coderro       := SQLCODE;
          P_MSGERRO       := 'Erro ao obter dados da pessoa fisica servidor';
          INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                p_coderro,
                                'Calcula Folha',
                                sysdate,
                                p_msgerro,
                                p_sub_proc_erro,
                                IDE_CLI,
                                0);

          --          RAISE ERRO;
          VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
      END;
    ELSIF I_TIPO = 'T' THEN
      -- Quem recebe e o representante
      BEGIN

        SELECT PF.NUM_CPF, substr(PF.NOM_PESSOA_FISICA, 1, 50)
          INTO I_CPF, I_NOME
          FROM TB_PESSOA_FISICA PF
         WHERE PF.COD_INS = PAR_COD_INS
           AND PF.COD_IDE_CLI =
               (select RL.COD_IDE_CLI_REP
                  from TB_REPRESENTACAO_LEGAL RL
                 where rl.cod_ins = PAR_COD_INS
                   AND RL.COD_IDE_CLI = IDE_CLI
                   AND RL.DAT_INI_VIG <= PAR_PER_PRO
                   AND nvl(RL.DAT_FIM_VIG, '01/01/2055') >= PAR_PER_PRO);

        /*
              SELECT PF.NUM_CPF, substr(PF.NOM_PESSOA_FISICA, 1, 50)
                INTO I_CPF, I_NOME
                FROM TB_PESSOA_FISICA PF, TB_REPRESENTACAO_LEGAL RL
               WHERE PF.COD_INS = PAR_COD_INS
                 AND RL.COD_INS(+) = PF.COD_INS
                 AND RL.COD_IDE_CLI = IDE_CLI
                 AND RL.DAT_INI_VIG(+) <= PAR_PER_PRO
                 AND (RL.DAT_FIM_VIG >= PAR_PER_PRO or RL.DAT_FIM_VIG is null)
                 AND PF.COD_IDE_CLI = RL.COD_IDE_CLI_REP(+);
        */
      exception
        when no_data_found then
          I_CPF  := null;
          I_NOME := null;
        when too_many_rows then
          p_sub_proc_erro := 'SP_OBTEM_DADOS_PF';
          p_coderro       := SQLCODE;
          P_MSGERRO       := 'Aviso - Mais de uma pessoa fisica com o mesmo CPF';
          INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                p_coderro,
                                'Calcula Folha',
                                sysdate,
                                p_msgerro,
                                p_sub_proc_erro,
                                IDE_CLI,
                                0);

          --          RAISE ERRO;
          VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;

        when others then
          p_sub_proc_erro := 'SP_OBTEM_DADOS_PF';
          p_coderro       := SQLCODE;
          P_MSGERRO       := 'Erro ao obter dados da pessoa fisica';
          INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                p_coderro,
                                'Calcula Folha',
                                sysdate,
                                p_msgerro,
                                p_sub_proc_erro,
                                IDE_CLI,
                                0);

          --          RAISE ERRO;
          VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
      end;
      -- MVL 8
    ELSIF I_TIPO = 'B' THEN
      -- Pensao Alimenticia
       BEGIN
        SELECT DISTINCT PF.NUM_CPF, substr(PF.NOM_PESSOA_FISICA, 1, 50)
          INTO I_CPF, I_NOME
          FROM TB_PESSOA_FISICA PF
         WHERE PF.COD_INS = PAR_COD_INS
         AND PF.COD_IDE_CLI = IDE_CLI;
       exception
        when no_data_found then
          I_CPF  := null;
          I_NOME := null;
       when others then
          p_sub_proc_erro := 'SP_OBTEM_DADOS_PF';
          p_coderro       := SQLCODE;
          P_MSGERRO       := 'Erro ao obter dados da pessoa fisica';
          INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                p_coderro,
                                'Calcula Folha',
                                sysdate,
                                p_msgerro,
                                p_sub_proc_erro,
                                IDE_CLI,
                                0);

          --          RAISE ERRO;
          VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
       END ;
      -- MVL 8

    END IF;

  END SP_OBTEM_DADOS_PF;
  ----------------------------------------------------------------------------------
  PROCEDURE SP_GRAVA_DETALHE_PAG AS
     V_RUBRICA_SUPL   NUMBER(8) := 0;
    val_rubrica_supl number(18, 4) := 0;
    cont_detalhe     number := 0;
    i                integer := 0;
    PER_PRO_RET      date;
    i3               integer :=0;
    o number          := 0;



------- Task 37101 Contribuição previdencia ....
   ws_id_pagamento              number := 0;
   ws_cod_beneficio_assoc       number;
   ws_num_grupo                 number;
   ws_existem_mais_beneficiario number;
   ws_val_rubrica_supl          number;
   vi_rubrica_prev              number;
   vi_seq_vig_prev              number;
   
  
------- Task 47697  Imposto da Renda Cumulativo .... 
   vi_rubrica_ir_acum              number;
   vi_seq_vig_ir_acum              number; 
   vi_base_ir_Acum_mes             number(18,4); 

 
  BEGIN

    cont_detalhe := 0;

     ------- Task 37101 Contribuição previdencia ....
     -----  Controle de Saldo de contribuição ------
     ------------------------------------------------
     ---- Identifica Benerficiario com + de 1 Beneficio
     ---- e marca o beneficio já pago na folha do mês

     ws_cod_beneficio_assoc:=NULL;
     
     ------- Task 47697  Imposto da Renda Cumulativo ....     
     vi_base_ir_Acum_mes   :=0;
     
     IF  vfolha.count >  1 THEN
          WS_EXISTEM_MAIS_BENEFICIARIO :=vfolha.count;

              FOR ws_id_pagamento IN 1 .. vfolha.count LOOP
                   rfol := vfolha(ws_id_pagamento);
                   --- Veririfa se tem um pagamento Normal no mês atual
                    ws_num_grupo:=SP_VERIFICA_PAG_PERIODOS
                     (
                       PAR_PER_PRO       ,
                       PAR_TIP_PRO       ,
                       PAR_SEQ_PAGAMENTO ,
                       RFOL.COD_BENEFICIO,
                       RFOL.COD_IDE_CLI
                      );
                       vfolha(ws_id_pagamento).num_grp := ws_num_grupo;
                       IF NVL(ws_cod_beneficio_assoc,0)= 0 AND
                           ws_num_grupo               != -1 THEN
                           ws_cod_beneficio_assoc:=RFOL.COD_BENEFICIO;

                       END IF;
                         ------- Task 47697  Imposto da Renda Cumulativo .... 
                       IF  ws_num_grupo               = -1 THEN
                            vi_base_ir_Acum_mes:=rfol.val_base_ir+ vi_base_ir_Acum_mes;
                       END IF;
  
             END LOOP;
             ------- Task 47697  Imposto da Renda Cumulativo ....
             IF   vi_base_ir_Acum_mes > 0  THEN
               SP_ATUALIZA_BASE_IR_ACUM_MES (
                     RFOL.COD_INS       ,
                     RFOL.TIP_PROCESSO  ,
                     RFOL.PER_PROCESSO  ,
                     RFOL.SEQ_PAGAMENTO ,
                     RFOL.COD_IDE_CLI   , 
                     ws_cod_beneficio_assoc,
                     vi_base_ir_Acum_mes
               );
             END IF;
     ELSE
        WS_EXISTEM_MAIS_BENEFICIARIO:=1;
     END IF;
      ------- Task 37101 Contribuição previdencia ....  Fim de Bloco


    -- Retirar rubricas calculadas com ind_grava_detalhe = 'N'
    Rfol.cod_beneficio:=0;

    FOR i in 1 .. tdcn.count LOOP

      rdcn := tdcn(i);

      IF NOT( Rfol.cod_beneficio=rdcn.cod_beneficio and
             ANT_ENTIDADE=RFOL.COD_ENTIDADE )
      then
            FOR i3 IN 1 .. vfolha.count LOOP
              rfol := vfolha(i3);
              EXIT WHEN   RFOL.COD_BENEFICIO=rdcn.cod_beneficio;
            END LOOP;
            ANT_ENTIDADE:=RFOL.COD_ENTIDADE ;
      End If;

      FOR j in 1 .. cod_rub.count LOOP

        IF cod_rub(j) = rdcn.cod_fcrubrica AND ind_grava_detalhe(J) = 'N' AND
           cod_entidade(j) = ANT_ENTIDADE THEN

          tdcn(i).val_rubrica := 0;

        END IF;

      END LOOP;
    END LOOP;

    o := tdcn.count;

    -- Folha Normal
    FOR i in 1 .. tdcn.count LOOP
      rdcn := tdcn(i);

      IF rdcn.tip_processo = PAR_TIP_PRO THEN
         IF rdcn.des_complemento != 'Ret.M' THEN
            IF rdcn.dat_ini_ref = rdcn.per_processo and
              rdcn.nom_pro_ult_atu!='FOLHA CONSIG' then
             rdcn.des_complemento := null;
           end if;
         END IF;

        IF rdcn.per_processo = PAR_PER_PRO THEN
              -- Inclue em Folha só Rubricas com valor maior a Zero
              IF rdcn.val_rubrica > 0 THEN
                IF rdcn.val_rubrica_cheio is null THEN --solucao temporaria para casos com val_cheio nulo ... continuar
                  rdcn.val_rubrica_cheio := rdcn.val_rubrica;
                END IF;

                cont_detalhe := cont_detalhe + 1;
                BEGIN
                    IF RFOL.COD_BENEFICIO !=RDCN.COD_BENEFICIO THEN
                       FOR i2 IN 1 .. vfolha.count LOOP
                         rfol        := vfolha(i2);
                        EXIT WHEN   RFOL.COD_BENEFICIO=RDCN.COD_BENEFICIO;
                        END LOOP;
                     END IF;
                     tdcn(i).flg_status:=RFOL.FLG_PAG;

                    ------- Task 37101 Contribuição previdencia ....
                    -----  Controle de Saldo de contribuição ------
                    ------------------------------------------------
                      IF RDCN.TIP_EVENTO_ESPECIAL IN ('R','T','M','9')  AND
                         RFOL.NUM_GRP = -1   --- (-1)  Indica que já foi pago no mês.

                      THEN
                         IF PAR_TIP_PRO ='S' THEN
                                   ws_val_rubrica_supl :=rdcn.val_rubrica;
                         ELSE
                           IF RDCN.TIP_EVENTO_ESPECIAL IN ('M','9')  THEN
                            ---- SE não processo Suplementar aplica diferença
                                      ws_val_rubrica_supl := sp_valor_suplementar(rdcn.cod_ide_cli,
                                                                              rdcn.cod_beneficio_assoc,
                                                                              rdcn.cod_fcrubrica_assoc,
                                                                              rdcn.flg_natureza,
                                                                              rdcn.val_rubrica,
                                                                              rdcn.dat_ini_ref,
                                                                              rdcn.cod_ide_cli_ben);
                                  ELSE
                                      ws_val_rubrica_supl := sp_valor_suplementar(rdcn.cod_ide_cli,
                                                                              rdcn.cod_beneficio,
                                                                              rdcn.cod_fcrubrica,
                                                                              rdcn.flg_natureza,
                                                                              rdcn.val_rubrica,
                                                                              rdcn.dat_ini_ref,
                                                                              rdcn.cod_ide_cli_ben);
                                   END IF;
                           END IF;
                           IF  ws_val_rubrica_supl  > 0 THEN

                                 ws_val_rubrica_supl := ws_val_rubrica_supl ;

                                 RDCN.VAL_RUBRICA         := ws_val_rubrica_supl;
                                 IF  RDCN.TIP_EVENTO_ESPECIAL IN ('R','T') THEN
                                                   SP_OBTEM_RUBRICA_EVENTO_ESPEC('M',
                                                                                 RFOL.COD_ENTIDADE,
                                                                                 'D',
                                                                                  VI_RUBRICA_PREV ,
                                                                                  VI_SEQ_VIG_PREV);

                                 END IF;

                                 RDCN.COD_FCRUBRICA_ASSOC := RDCN.COD_FCRUBRICA;
                                 RDCN.COD_FCRUBRICA       := VI_RUBRICA_PREV ;
                                 RDCN.COD_BENEFICIO_ASSOC := RDCN.COD_BENEFICIO;
                                 RDCN.COD_BENEFICIO       := ws_cod_beneficio_assoc;
                          END IF;
                     ---------------------------------------------------------------
                     ------------------------ TASK 47697 --------------------------
                     ELSE     
                        IF RDCN.TIP_EVENTO_ESPECIAL IN ('I','O','K','J','i','o','k','j')  AND
                         RFOL.NUM_GRP = -1   --- (-1)  Indica que já foi pago no mês.
                         THEN
                          IF PAR_TIP_PRO ='S' THEN
                                   ws_val_rubrica_supl :=rdcn.val_rubrica;
                         ELSE
                           IF RDCN.TIP_EVENTO_ESPECIAL IN ('i','o','k','j')  THEN
                            ---- SE não processo Suplementar aplica diferença
                                      ws_val_rubrica_supl := sp_valor_suplementar(rdcn.cod_ide_cli,
                                                                              rdcn.cod_beneficio_assoc,
                                                                              rdcn.cod_fcrubrica_assoc,
                                                                              rdcn.flg_natureza,
                                                                              rdcn.val_rubrica,
                                                                              rdcn.dat_ini_ref,
                                                                              rdcn.cod_ide_cli_ben);
                                  ELSE
                                      ws_val_rubrica_supl := sp_valor_suplementar(rdcn.cod_ide_cli,
                                                                              rdcn.cod_beneficio,
                                                                              rdcn.cod_fcrubrica,
                                                                              rdcn.flg_natureza,
                                                                              rdcn.val_rubrica,
                                                                              rdcn.dat_ini_ref,
                                                                              rdcn.cod_ide_cli_ben);
                                   END IF;
                           END IF;                            
                             IF  ws_val_rubrica_supl  > 0 THEN

                                 ws_val_rubrica_supl := ws_val_rubrica_supl ;

                                 RDCN.VAL_RUBRICA         := ws_val_rubrica_supl;
                                 IF  RDCN.TIP_EVENTO_ESPECIAL IN ('I','O','K') THEN
                                         CASE 
                                           WHEN RDCN.TIP_EVENTO_ESPECIAL IN ('I','i' ) THEN
                                                    SP_OBTEM_RUBRICA_EVENTO_ESPEC('i',
                                                                                 RFOL.COD_ENTIDADE,
                                                                                 'D',
                                                                                  VI_RUBRICA_IR_ACUM ,
                                                                                  VI_SEQ_VIG_IR_ACUM);
 
                                           WHEN RDCN.TIP_EVENTO_ESPECIAL IN ('O','o' ) THEN
                                                    SP_OBTEM_RUBRICA_EVENTO_ESPEC('o',
                                                                                 RFOL.COD_ENTIDADE,
                                                                                 'D',
                                                                                  VI_RUBRICA_IR_ACUM ,
                                                                                  VI_SEQ_VIG_IR_ACUM); 
                                          WHEN RDCN.TIP_EVENTO_ESPECIAL IN ('J','j' ) THEN
                                                    SP_OBTEM_RUBRICA_EVENTO_ESPEC('j',
                                                                                 RFOL.COD_ENTIDADE,
                                                                                 'D',
                                                                                  VI_RUBRICA_IR_ACUM ,
                                                                                  VI_SEQ_VIG_IR_ACUM);                                             
                                           ELSE
                                                      SP_OBTEM_RUBRICA_EVENTO_ESPEC('k',
                                                                                 RFOL.COD_ENTIDADE,
                                                                                 'D',
                                                                                  VI_RUBRICA_IR_ACUM ,
                                                                                  VI_SEQ_VIG_IR_ACUM);                                                         
                                           END CASE;

                                 END IF;

                                 RDCN.COD_FCRUBRICA_ASSOC := RDCN.COD_FCRUBRICA;
                                 RDCN.COD_FCRUBRICA       := VI_RUBRICA_IR_ACUM ;
                                 RDCN.COD_BENEFICIO_ASSOC := RDCN.COD_BENEFICIO;
                                 RDCN.COD_BENEFICIO       := ws_cod_beneficio_assoc;
                          END IF; 
                           
                         END IF;
 
                     END IF;



                     ----- Verifica de Beneficio está suspenso...
                     IF RFOL.FLG_PAG <> 'S' THEN

                        INSERT /*+ append */
                        INTO TB_DET_CALCULADO
                        VALUES
                          (rdcn.cod_ins               ,
                           rdcn.tip_processo          ,
                           rdcn.per_processo          ,
                           rdcn.cod_ide_cli           ,
                           rdcn.cod_beneficio         ,
                           rdcn.seq_pagamento         ,
                           rdcn.cod_fcrubrica         ,
                           rdcn.seq_vig               ,
                           trunc(rdcn.val_rubrica, 2) ,
                           rdcn.num_quota             ,
                           rdcn.flg_natureza          ,
                           rdcn.tot_quota             ,
                           rdcn.dat_ini_ref           ,
                           rdcn.dat_fim_ref           ,
                           rdcn.cod_ide_cli_ben       ,
                           rdcn.num_ord_jud           ,
                           rdcn.dat_ing               ,
                           rdcn.dat_ult_atu           ,
                           rdcn.nom_usu_ult_atu       ,
                           rdcn.nom_pro_ult_atu       ,
                           rdcn.seq_detalhe           ,
                           rdcn.des_informacao        ,
                           rdcn.des_complemento       ,
                           trunc(rdcn.val_rubrica_cheio, 2),
                           rdcn.val_inidade           ,
                           rdcn.val_porc              ,
                           rdcn.num_carga             ,
                           rdcn.num_seq_controle_carga,
                           rdcn.flg_ir_acumulado      ,

                           ------- Apoio de Calculo 26/06/2017 ----
                           rdcn.cod_beneficio_assoc ,
                           rdcn.cod_fcrubrica_assoc
                         );



                    ELSE
                      INSERT /*+ append */
                      INTO TB_DET_CALCULADO_SUSPENSO ---> FFRANCO 03/2007
                      VALUES
                        (rdcn.cod_ins,
                         rdcn.tip_processo,
                         rdcn.per_processo,
                         rdcn.cod_ide_cli,
                         rdcn.cod_beneficio,
                         rdcn.seq_pagamento,
                         rdcn.cod_fcrubrica,
                         rdcn.seq_vig,
                         trunc(rdcn.val_rubrica, 2),
                         rdcn.num_quota,
                         rdcn.flg_natureza,
                         rdcn.tot_quota,
                         rdcn.dat_ini_ref,
                         rdcn.dat_fim_ref,
                         rdcn.cod_ide_cli_ben,
                         rdcn.num_ord_jud,
                         rdcn.dat_ing,
                         rdcn.dat_ult_atu,
                         rdcn.nom_usu_ult_atu,
                         rdcn.nom_pro_ult_atu,
                         rdcn.seq_detalhe,
                         rdcn.des_informacao,
                         rdcn.des_complemento,
                         trunc(rdcn.val_rubrica_cheio, 2));
                    END IF;
                EXCEPTION
                  WHEN OTHERS THEN
                    p_sub_proc_erro := 'SP_GRAVA_DETALHE_PAG';
                    p_coderro       := SQLCODE;
                    P_MSGERRO       := 'Erro na gravacao: '||sqlerrm;
                    INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                          p_coderro,
                                          'Calcula Folha',
                                          sysdate,
                                          p_msgerro,
                                          p_sub_proc_erro,
                                          rdcn.cod_ide_cli,
                                          --                         rdcn.cod_fcrubrica);
                                          NVL(rdcn.cod_fcrubrica, 0)); -- FFRANCO - 06052009
                    VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
                    --       RAISE ERRO;
                END;

              END IF;
        ELSE
          -- parcelamento MVL
          IF rdcn.val_rubrica > 0 THEN
            cont_detalhe := cont_detalhe + 1;
            BEGIN
              INSERT /*+ append */
              INTO TB_DET_CALCULADO_PARC
              VALUES
                (rdcn.cod_ins,
                 rdcn.tip_processo,
                 rdcn.per_processo,
                 rdcn.cod_ide_cli,
                 rdcn.cod_beneficio,
                 rdcn.seq_pagamento,
                 rdcn.cod_fcrubrica,
                 rdcn.seq_vig,
                 trunc(rdcn.val_rubrica, 2),
                 rdcn.num_quota,
                 rdcn.flg_natureza,
                 rdcn.tot_quota,
                 rdcn.dat_ini_ref,
                 rdcn.dat_fim_ref,
                 rdcn.cod_ide_cli_ben,
                 rdcn.num_ord_jud,
                 rdcn.dat_ing,
                 rdcn.dat_ult_atu,
                 rdcn.nom_usu_ult_atu,
                 rdcn.nom_pro_ult_atu,
                 rdcn.seq_detalhe,
                 rdcn.des_informacao,
                 rdcn.des_complemento,
                 PAR_PER_REAL);
            EXCEPTION
              WHEN OTHERS THEN
                p_sub_proc_erro := 'SP_GRAVA_DETALHE_PAG_PARC';
                p_coderro       := SQLCODE;
                P_MSGERRO       := 'Erro na inclusao dos detalhes parcelados';
                INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                      p_coderro,
                                      'Calcula Folha',
                                      sysdate,
                                      p_msgerro,
                                      p_sub_proc_erro,
                                      BEN_IDE_CLI,
                                      COM_COD_FCRUBRICA);
                VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
                --       RAISE ERRO;
            END;

          END IF;

        END IF;

      END IF;

    END LOOP;

    if cont_detalhe = 0 then
      -- utilizando rolback para que nao grave o registro da folha --
      rollback;
    
    -------- Aplica ajuste de Totais Folha 16-08-2018 -----
       ---- Task 37101 Contribuição previdencia ---------
    Else
         IF ws_cod_beneficio_assoc IS NOT NULL THEN
 
                 SP_ATUALIZA_TOTAIS_FOLHA_ACUM   (
                       RFOL.COD_INS       ,
                       RFOL.TIP_PROCESSO  ,
                       RFOL.PER_PROCESSO  ,
                       RFOL.SEQ_PAGAMENTO ,
                       RFOL.COD_IDE_CLI   , 
                       ws_cod_beneficio_assoc 
                 );             
           
         END IF; 
            
    
    end if;

    -- Folha Terceiros
  END SP_GRAVA_DETALHE_PAG;
  -----------------------------------------------------------------------------------
   ------- Task 47697  Imposto da Renda Cumulativo .... 
 PROCEDURE  SP_ATUALIZA_BASE_IR_ACUM_MES ( 
                     I_COD_INS       IN NUMBER,
                     I_TIP_PROCESSO  IN VARCHAR,
                     I_PER_PROCESSO  IN DATE,
                     I_SEQ_PAGAMENTO IN NUMBER,
                     I_COD_IDE_CLI   IN VARCHAR, 
                     I_COD_BENEFICIO IN NUMBER ,
                     I_BASE_IR_ACUM_MES IN NUMBER   
  
  ) AS
  BEGIN
      BEGIN
        
       UPDATE TB_FOLHA  FL
         SET FL.VAL_BASE_IR_ACUM_MES=I_BASE_IR_ACUM_MES
         WHERE FL.COD_INS        = I_COD_INS       AND
               FL.TIP_PROCESSO   = I_TIP_PROCESSO  AND
               FL.PER_PROCESSO   = I_PER_PROCESSO  AND
               FL.SEQ_PAGAMENTO  = I_SEQ_PAGAMENTO AND
               FL.COD_IDE_CLI    = I_COD_IDE_CLI   AND
               FL.COD_BENEFICIO  =  I_COD_BENEFICIO;
       
      EXCEPTION
      WHEN OTHERS THEN
        p_sub_proc_erro := 'SP_ATUALIZA_TB_FOLHA';
        p_coderro       := SQLCODE;
        P_MSGERRO       := 'Erro :'||sqlerrm;
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Atualiza base Ir Acumulada Mes',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              I_COD_IDE_CLI ,
                              NULL);
        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
    END;
  END;
  ----------------------------------------------------------------------------------
  FUNCTION SP_VALOR_SUPLEMENTAR(I_COD_IDE_CLI   VARCHAR2,
                                I_COD_BENEFICIO VARCHAR2,
                                I_COD_FCRUBRICA NUMBER,
                                I_FLG_NATUREZA  VARCHAR2,
                                I_VAL_RUBRICA   NUMBER,
                                I_DAT_INI_REF   DATE,
                                I_IDE_CLI_BEN   VARCHAR2) RETURN NUMBER IS

    -- vi_agrega_sup_true boolean := true;
    vi_existe_normal number;
    vi_valor_n       number(18, 4);
    vi_valor_rub     number(18, 4);
    V_VAL_SUPL       NUMBER(18, 4);
  BEGIN
    vi_valor_n       := 0;
    vi_existe_normal := 0;
    V_VAL_SUPL       := 0;

    IF cont_benef = 1 AND VI_SUPLEMENTAR AND
       I_COD_FCRUBRICA in (65800, 65100, 38500, 47201, 35800, 49900) THEN
      begin
        SELECT nvl(sum(DECODE(FLG_NATUREZA,
                              'C',
                              DC.VAL_RUBRICA,
                              DC.VAL_RUBRICA)),
                   0)
          INTO vi_valor_n
          FROM tb_hdet_calculado DC -- tabela temporaria 24/06/2008 mvl
         WHERE DC.COD_INS = PAR_COD_INS
           AND DC.COD_IDE_CLI = I_COD_IDE_CLI
           AND DC.TIP_PROCESSO = 'N'
           AND DC.PER_PROCESSO = PAR_PER_PRO
           AND DC.COD_FCRUBRICA = I_COD_FCRUBRICA
           AND DC.DAT_INI_REF = I_DAT_INI_REF
           AND NVL(DC.COD_IDE_CLI_BEN,0)=NVL(I_IDE_CLI_BEN,0)
           ------- TASK 47697 ------------------
           AND DC.COD_BENEFICIO         =  I_COD_BENEFICIO;
           
      exception
        when no_data_found then
          vi_valor_n := 0;
          --          I_VAL_RUBRICA := 0;
        when others then
          p_sub_proc_erro := 'SP_VALOR_SUPLEMENTAR';
          p_coderro       := SQLCODE;
          P_MSGERRO       := 'Erro ao obter o valor suplementar';
          INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                p_coderro,
                                'Calcula Folha',
                                sysdate,
                                p_msgerro,
                                p_sub_proc_erro,
                                I_COD_IDE_CLI,
                                I_COD_FCRUBRICA);
          VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
          --           RAISE ERRO;
      end;

    ELSE

     BEGIN
        SELECT sum(DECODE(FLG_NATUREZA, 'C', DC.VAL_RUBRICA, DC.VAL_RUBRICA))
          INTO vi_valor_n
          FROM TB_HDET_CALCULADO DC
         WHERE DC.COD_INS                                    = PAR_COD_INS
           AND DC.COD_IDE_CLI                                = I_COD_IDE_CLI
           AND DC.TIP_PROCESSO                               = 'N'
           ---------------- Task 37101 Contribuição previdencia ..............
           AND NVL(DC.COD_BENEFICIO_ASSOC,DC.COD_BENEFICIO)  = I_COD_BENEFICIO
           AND NVL(DC.COD_FCRUBRICA_ASSOC,DC.COD_FCRUBRICA)  = I_COD_FCRUBRICA
           -------------------------------------------------------------------
           AND DC.PER_PROCESSO = PAR_PER_PRO
           AND DC.DAT_INI_REF = I_DAT_INI_REF


           AND NVL(DC.COD_IDE_CLI_BEN,0)=NVL(I_IDE_CLI_BEN,0);

      exception
        when no_data_found then
          vi_valor_n := 0;
          --          I_VAL_RUBRICA := 0;
        when others then
          p_sub_proc_erro := 'SP_VALOR_SUPLEMENTAR';
          p_coderro       := SQLCODE;
          P_MSGERRO       := 'Aviso valor suplementar n?o encontrado';
          INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                p_coderro,
                                'Calcula Folha',
                                sysdate,
                                p_msgerro,
                                p_sub_proc_erro,
                                I_COD_IDE_CLI,
                                I_COD_FCRUBRICA);
          VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
          vi_valor_n := 0;
          --           RAISE ERRO;
      end;
    END IF;

    IF vi_valor_n is null THEN
       vi_valor_n :=0;
    END IF;
    IF trunc(I_VAL_RUBRICA,2) <> vi_valor_n THEN

      V_VAL_SUPL := I_VAL_RUBRICA - vi_valor_n;

      --         IF V_VAL_SUPL < 0 THEN
      --            V_VAL_SUPL := V_VAL_SUPL * -1;
      --         END IF;
    ELSE
      V_VAL_SUPL := 0;
    END IF;

    RETURN(V_VAL_SUPL);

  END SP_VALOR_SUPLEMENTAR;
  ----------------------------------------------------------------------------------
  FUNCTION SP_VALOR_SUPLEMENTAR_DECIMO(I_COD_IDE_CLI   VARCHAR2,
                                       I_COD_BENEFICIO VARCHAR2,
                                       I_COD_FCRUBRICA NUMBER,
                                       I_FLG_NATUREZA  VARCHAR2,
                                       I_VAL_RUBRICA   NUMBER) RETURN NUMBER IS

    -- vi_agrega_sup_true boolean := true;
    vi_existe_normal number;
    vi_valor_n       number(18, 4);
    vi_valor_rub     number(18, 4);
    V_VAL_SUPL       NUMBER(18, 4);
  BEGIN

    vi_existe_normal := 0;
    V_VAL_SUPL       := 0;

    IF cont_benef = 1 then
      --       VI_SUPLEMENTAR AND -- 65800, , 49900
      --       I_COD_FCRUBRICA in (  65800, 65100, 38500, 47201, 35800, 49900) THEN
      begin
        SELECT nvl(sum(DECODE(FLG_NATUREZA,
                              'C',
                              DC.VAL_RUBRICA,
                              DC.VAL_RUBRICA)),
                   0)
          INTO vi_valor_n
          FROM TB_DET_CALCULADO DC
         WHERE DC.COD_INS = PAR_COD_INS
           AND DC.COD_IDE_CLI = I_COD_IDE_CLI
           AND DC.TIP_PROCESSO = 'T'
           AND DC.PER_PROCESSO = PAR_PER_PRO
           AND DC.COD_FCRUBRICA = I_COD_FCRUBRICA
           AND DC.DAT_INI_REF = PAR_PER_PRO
        --       AND DC.DAT_INI_REF  = PAR_PER_PRO;   --RAO:20060504
        ;
      exception
        when no_data_found then
          vi_valor_n := 0;
          --          I_VAL_RUBRICA := 0;
        when others then
          p_sub_proc_erro := 'SP_VALOR_SUPLEMENTAR';
          p_coderro       := SQLCODE;
          P_MSGERRO       := 'Erro ao obter o valor suplementar do 13?';
          INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                p_coderro,
                                'Calcula Folha',
                                sysdate,
                                p_msgerro,
                                p_sub_proc_erro,
                                BEN_IDE_CLI,
                                COM_COD_FCRUBRICA);
          VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
          --           RAISE ERRO;
      end;

    ELSE

      begin
        SELECT DECODE(FLG_NATUREZA, 'C', DC.VAL_RUBRICA, DC.VAL_RUBRICA)
          INTO vi_valor_n
          FROM TB_DET_CALCULADO DC
         WHERE DC.COD_INS = PAR_COD_INS
           AND DC.COD_IDE_CLI = I_COD_IDE_CLI
           AND DC.TIP_PROCESSO = 'T'
           AND DC.COD_BENEFICIO = I_COD_BENEFICIO
           AND DC.PER_PROCESSO = PAR_PER_PRO
           AND DC.COD_FCRUBRICA = I_COD_FCRUBRICA
           AND DC.DAT_INI_REF = PAR_PER_PRO
        --       AND DC.DAT_INI_REF  = PAR_PER_PRO;   --RAO:20060504
        ;
      exception
        when no_data_found then
          vi_valor_n := 0;
          --          I_VAL_RUBRICA := 0;
        when others then
          p_sub_proc_erro := 'SP_VALOR_SUPLEMENTAR';
          p_coderro       := SQLCODE;
          P_MSGERRO       := 'Erro ao obter o valor suplementar do 13?';
          INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                p_coderro,
                                'Calcula Folha',
                                sysdate,
                                p_msgerro,
                                p_sub_proc_erro,
                                BEN_IDE_CLI,
                                COM_COD_FCRUBRICA);
          VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
          --           RAISE ERRO;
      end;
    END IF;

    IF I_VAL_RUBRICA <> vi_valor_n THEN

      V_VAL_SUPL := I_VAL_RUBRICA - vi_valor_n;

      --         IF V_VAL_SUPL < 0 THEN
      --            V_VAL_SUPL := V_VAL_SUPL * -1;
      --         END IF;
    ELSE
      V_VAL_SUPL := 0;
    END IF;

    /*    IF I_VAL_RUBRICA <> vi_valor_n THEN
           IF I_FLG_NATUREZA = 'D' THEN
              vi_valor_rub := I_VAL_RUBRICA * -1;
           ELSE
              vi_valor_rub := I_VAL_RUBRICA;
           END IF;

           V_VAL_SUPL := I_VAL_RUBRICA - vi_valor_n;

           IF V_VAL_SUPL < 0 THEN
              V_VAL_SUPL := V_VAL_SUPL * -1;
           END IF;

        ELSE
           V_VAL_SUPL:=0;
        END IF;
    */
    /*
          IF I_VAL_RUBRICA <> vi_valor_n
            and vi_valor_n < I_VAL_RUBRICA then
    --        and vi_valor_n <> 0 THEN
             V_VAL_SUPL := I_VAL_RUBRICA - vi_valor_n;
    --         vi_agrega_sup := vi_agrega_sup_true;
          ELSE
              V_VAL_SUPL:=0;                -- RAO 20060504
              --  V_VAL_SUPL:= I_VAL_RUBRICA;  RAO 20060504
          END IF;
    */
    RETURN(V_VAL_SUPL);

  END SP_VALOR_SUPLEMENTAR_DECIMO;
  ----------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_VALORES_TOTAIS(I_COD_VARIAVEL  in VARCHAR2,
                                    I_COD_BENEFICIO IN NUMBER,
                                    I_COD_RUBRICA   NUMBER,
                                    i_ind_val_cheio in varchar2,
                                    I_VALOR         OUT NUMBER) AS
    c_comp     curform;
    vi_valor   number(18, 5);
    VI_RUBRICA NUMBER;
    NF_RUBRICA number;
    valor_temp number(18,4);

  BEGIN
    I_VALOR  := 0;
    VI_VALOR := 0;
    valor_temp :=0;

    SP_OBTEM_PARVAL_FOLHA2('TASCO', 2000, 'DESC_CONTR', desc_prev); --$3218,90

    SELECT cb.cod_entidade
      INTO ANT_ENTIDADE
      FROM tb_concessao_beneficio cb
     where cb.cod_beneficio=I_COD_BENEFICIO ;

    --- Obtem rubricas por cod_elemento
    --     Open c_comp for
    IF PAR_TIP_PRO = 'T' THEN
      begin
        SELECT cd.cod_fcrubrica_composta
          INTO NF_RUBRICA
          FROM tb_composicao_rub cd
         WHERE cd.cod_variavel = I_COD_VARIAVEL
           AND cd.cod_ins = PAR_COD_INS
           AND cd.cod_entidade = ANT_ENTIDADE
           AND cd.cod_fcrubrica_composta =
               DECODE(I_COD_RUBRICA,
                      0,
                      cod_fcrubrica_composta,
                      I_COD_RUBRICA)
           AND cd.dat_ini_vig <= PAR_PER_PRO
           AND (cd.dat_fim_vig >= PAR_PER_PRO or cd.dat_fim_vig is null);
      exception
        when others then
          nf_rubrica      := null;
          p_sub_proc_erro := 'SP_OBTEM_VALORES_TOTAIS';
          p_coderro       := SQLCODE;
          P_MSGERRO       := 'Erro ao obter a rubrica composta para o 13?';
          INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                p_coderro,
                                'Calcula Folha',
                                sysdate,
                                p_msgerro,
                                p_sub_proc_erro,
                                BEN_IDE_CLI,
                                I_COD_RUBRICA);
          VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
      end;
    ELSE
      begin
        SELECT cd.cod_fcrubrica_composta
          INTO NF_RUBRICA
          FROM tb_composicao_rub cd, tb_rubricas rp, tb_formula_calculo fc
         WHERE cd.cod_variavel = I_COD_VARIAVEL
           AND cd.cod_ins = PAR_COD_INS
           AND cd.dat_ini_vig <= PAR_PER_PRO
           AND (cd.dat_fim_vig >= PAR_PER_PRO or cd.dat_fim_vig is null)
           and rp.cod_ins = cd.cod_ins
              --        and rp.cod_rubrica = cd.cod_fcrubrica_composta
           AND cd.cod_entidade = ANT_ENTIDADE
           AND rp.cod_entidade = cd.cod_entidade
           and fc.cod_entidade = cd.cod_entidade
           and rp.tip_evento <> 'T'
           and fc.cod_ins = rp.cod_ins
           and fc.cod_rubrica = rp.cod_rubrica
           and cd.cod_fcrubrica_composta = fc.cod_fcrubrica
           --- agregado por PEP 26012011
           AND ( (cd.cod_variavel  = 'BASE_PREV' and RP.COD_RUBRICA=7060300 )
            OR   (cd.cod_variavel != 'BASE_PREV')
                );
      exception
        when others then
          nf_rubrica      := null;
          p_sub_proc_erro := 'SP_OBTEM_VALORES_TOTAIS';
          p_coderro       := SQLCODE;
          P_MSGERRO       := 'Erro ao obter a rubrica composta para totalizacao';
          INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                p_coderro,
                                'Calcula Folha',
                                sysdate,
                                p_msgerro,
                                p_sub_proc_erro,
                                BEN_IDE_CLI,
                                I_COD_RUBRICA);
          VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
      end;
    END IF;

    --- Obtem rubricas da composicao
    Open c_comp for
      select cd.cod_fcrubrica_compoe
        from tb_compoe_det cd
       where cd.cod_ins = PAR_COD_INS
         and cd.cod_fcrubrica_composta = nf_rubrica
         and cd.cod_entidade_composta = ANT_ENTIDADE
         and cd.dat_ini_vig <= PAR_PER_PRO
         and (cd.dat_fim_vig >= PAR_PER_PRO or cd.dat_fim_vig is null);
    FETCH c_comp
      into vi_rubrica;
    WHILE C_COMP%FOUND LOOP
      if vi_rubrica in (
          100102,
          400102,
          805102,
          805151,
          808702,
          808751,
          815002,
          900150,
          1000150,
          1000902,
          1200502,
          1207502,
          1207550,
          1207551,
          1207750,
          1207751,
          1860100,
          1860151,
          7001200,
          7001802,
          7001850,
          7060300,
          7060350,
          9702202,
          9710102,
          9712802,
          9718500,
9728402
      )
        then
         null;
        end if;
      SP_VALOR_CALCULADO(VI_RUBRICA,
                         I_COD_BENEFICIO,
                         I_COD_VARIAVEL,
                         ANT_ENTIDADE,
                         i_ind_val_cheio,
                         vi_valor);
      IF   vi_valor <> 0 THEN

                ---- Altera variavel AD Contribuic?o 27941 (Inclus?o de variavel em codic?o)
               IF I_COD_VARIAVEL IN ( 'BASE_PREV','BASE_PREV_AD') THEN
            --  IF I_COD_VARIAVEL = 'BASE_PREV' THEN
                   IF VI_RUBRICA = 2100600 THEN
                     IF VI_PERCENTUAL_RATEIO IS NULL THEN
                       SP_RATEIO_BENEFICIO(I_COD_BENEFICIO,
                                        ANT_IDE_CLI,
                                        valor_temp,
                                        valor_temp,
                                        VI_PERCENTUAL_RATEIO);
                     END IF;
                     I_VALOR := I_VALOR + (VI_VALOR / VI_PERCENTUAL_RATEIO);
                  ELSE
                    IF VI_PERCENTUAL_RATEIO IS NULL THEN
                       SP_RATEIO_BENEFICIO(I_COD_BENEFICIO,
                                        ANT_IDE_CLI,
                                        valor_temp,
                                        valor_temp,
                                        VI_PERCENTUAL_RATEIO);
                     END IF;
                        --- Agregado o 20-10-2010 para N?o des-Proprocionalizar
                        -- O total do beneficio por dias do mes.
                       IF  COM_TIP_BENEFICIO='APOSENTADO' THEN
                          ---- 22-10 AGREGAMOS A DIV POR RATEIO % A  FORMULA JA PROPORCIONALIZA
                         I_VALOR := I_VALOR + (VI_VALOR / VI_PERCENTUAL_RATEIO);
                       ELSE
                         I_VALOR := I_VALOR + (VI_VALOR / VI_PERCENTUAL_RATEIO);
                       END IF;
                  END IF;
                --END IF;
              ELSE
                I_VALOR := I_VALOR + VI_VALOR;
              END IF;
       END IF;
      FETCH c_comp
        into vi_rubrica;
    END LOOP;
    CLOSE C_COMP;

  END SP_OBTEM_VALORES_TOTAIS;
  ----------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_DETALHE_PAG(IDE_CLI            IN VARCHAR2,
                                 FLG_PA             IN VARCHAR2,
                                 TP_EVENTO_ESPECIAL IN VARCHAR2,
                                 TP_EVENTO          IN VARCHAR2) as

    vi_rubrica      number := 0;
    vi_val_rubrica  number(18, 2) := 0;
    vi_seq_vig      number := 0;
    i_perc          number(18, 6) := 0;
    i               number := 0;
    cod_benef       number := 0;
    vi_flg_natureza varchar2(1) := null;
    val_13          number(18, 2) := 0;
    v_erro          varchar2(500) := null;
    -- variavel para diferenca havendo pagamento especial
    v_val_rub_dif number(18, 4) := 0;
    -- variavel para obter o ir do pagamento normal
    v_val_rub_pgto_normal number(18, 4) := 0;
    -- utilizar o processo para inclus?o de mais rubricas, 13?
   AA NUMBER;
   BB NUMBER;
  BEGIN

    IF (PAR_TIP_PRO = 'N' OR PAR_TIP_PRO = 'S' OR PAR_TIP_PRO = 'E') AND
       ((TP_EVENTO_ESPECIAL = 'I' AND TP_EVENTO = 'N') OR
       TP_EVENTO_ESPECIAL = 'S' OR
       ------- Calculo de Ir Externo----------
         TP_EVENTO_ESPECIAL = 'O') THEN

      SELECT rr.cod_rubrica, rr.seq_vig
        INTO vi_rubrica, vi_seq_vig
        FROM tb_rubricas rr
       WHERE rr.cod_ins = PAR_COD_INS
         AND rr.tip_evento_especial = TP_EVENTO_ESPECIAL --Fixo
         AND rr.cod_entidade = COM_ENTIDADE
         AND rr.tip_evento = decode(par_tip_pro, 'S', 'N', tp_evento) --Tip_processo
         AND RR.DAT_INI_VIG <= PAR_PER_PRO
         AND (RR.DAT_FIM_VIG >= PAR_PER_PRO OR RR.DAT_FIM_VIG IS NULL);
    ELSIF (TP_EVENTO_ESPECIAL = 'I' AND TP_EVENTO = 'T') THEN
      BEGIN
        SELECT rr.cod_rubrica, rr.seq_vig
          INTO vi_rubrica, vi_seq_vig
          FROM tb_rubricas rr
         WHERE rr.cod_ins = PAR_COD_INS
           AND rr.tip_evento_especial = TP_EVENTO_ESPECIAL --Fixo
           AND rr.tip_evento = decode(par_tip_pro, 'S', 'N', tp_evento) --Tip_processo
           AND rr.cod_entidade = COM_ENTIDADE
           AND RR.DAT_INI_VIG <= PAR_PER_PRO
           AND (RR.DAT_FIM_VIG >= PAR_PER_PRO OR RR.DAT_FIM_VIG IS NULL);
      EXCEPTION
        WHEN OTHERS THEN

          return;

      END;
    END IF;

    IF TP_EVENTO_ESPECIAL = 'I' OR TP_EVENTO_ESPECIAL = 'A' OR
       TP_EVENTO_ESPECIAL = 'T' OR TP_EVENTO_ESPECIAL = 'S' OR
           ------- Calculo de Ir Externo----------
        TP_EVENTO_ESPECIAL = 'O'
    THEN
      vi_flg_natureza := 'D';
    ELSE
      vi_flg_natureza := 'C';
    END IF;

    COM_VAL_RUBRICA_CHEIO := 0;

    FOR i IN 1 .. v_cod_beneficio.count LOOP

      IF FLG_PA = 'S' THEN
        tdcn_pa.extend;
        vi_ir_ret.extend;
        idx_caln_pa     := nvl(idx_caln_pa, 0) + 1;
        idx_seq_detalhe := nvl(idx_seq_detalhe, 0) + 1;

      ELSE
        tdcn.extend;
        vi_ir_ret.extend;

        idx_caln        := nvl(idx_caln, 0) + 1;
        idx_seq_detalhe := nvl(idx_seq_detalhe, 0) + 1;
      END IF;
      -- Inicializacao da variavel do ir retido, recebendo o valor do ir calculado
      vi_ir_ret(i) := V_VAL_IR;
      -- n?o existindo IR , o valor da variavel ir retido ficara com zero.

      cod_benef := v_cod_beneficio(i);
      ------- Calculo de Ir Externo----------
      IF TP_EVENTO_ESPECIAL IN ( 'I','O')  AND TP_EVENTO = 'T' THEN
        --          VI_BASE_BRUTA := V_VAL_IR_13;
        val_13 := VI_BASE_IR_ARR_13(cod_benef) (1);

        IF nvl(VI_BASE_BRUTA_13,0)=0 AND PAR_TIP_PRO = 'T' THEN
           i_perc := 100;
        ELSE
           i_perc := (VI_BASE_IR_ARR_13(cod_benef) (1) / VI_BASE_BRUTA_13) * 100;
        END IF;

        VI_PERC_IR(cod_benef)(1) := i_perc;
        rdcn.val_rubrica := (V_VAL_IR_13 * i_perc) / 100;
        vi_val_rubrica := rdcn.val_rubrica;
        --          vi_val_rubrica := V_VAL_IR_13;
      ELSIF TP_EVENTO_ESPECIAL IN ( 'I','O') then
        if flg_pa = 'S' then
          i_perc := 100;
          VI_PERC_IR(cod_benef)(1) := i_perc;
        else
          AA:=VI_BASE_IR_ARR(cod_benef)(1) ;
          BB:=VI_BASE_IR_ARR_DED(cod_benef) (1) ;
          i_perc := ((VI_BASE_IR_ARR(cod_benef) (1)-VI_BASE_IR_ARR_DED(cod_benef) (1)  )/ ( VI_BASE_BRUTA- VI_TOT_DED_RUB)) * 100 ;
          IF i_perc > 100 THEN
            i_perc:=100;
          END IF;
          IF i_perc < 0 THEN
            i_perc:=0;
          END IF;

          VI_PERC_IR(cod_benef)(1) := i_perc;
        end if;
        IF VI_BASE_IR_ARR(cod_benef) (1) <> 0 THEN
          IF VI_SUPLEMENTAR AND cont_benef > 1 THEN
            i_perc := ((VI_BASE_IR_ARR(cod_benef) (1)-VI_BASE_IR_ARR_DED(cod_benef) (1)  )/ ( VI_BASE_BRUTA- VI_TOT_DED_RUB)) * 100 ;
             IF i_perc > 100 THEN
                i_perc:=100;
             END IF;
             IF i_perc < 0 THEN
                i_perc:=0;
             END IF;
             VI_PERC_IR(cod_benef)(1) := i_perc;
          ELSE
            IF cont_benef = 1 AND VI_SUPLEMENTAR THEN
              i_perc := 100;
              VI_PERC_IR(cod_benef)(1) := 100;
            ELSE
              i_perc := ((VI_BASE_IR_ARR(cod_benef) (1)-VI_BASE_IR_ARR_DED(cod_benef) (1)  )/ ( VI_BASE_BRUTA- VI_TOT_DED_RUB)) * 100 ;
               IF i_perc > 100 THEN
                 i_perc:=100;
               END IF;
               IF i_perc < 0 THEN
                 i_perc:=0;
               END IF;
              VI_PERC_IR(cod_benef)(1) := i_perc;
            END IF;
          END IF;
          rdcn.val_rubrica := (V_VAL_IR * i_perc) / 100;
          vi_ir_ret(i) := rdcn.val_rubrica;
          vi_val_rubrica := rdcn.val_rubrica;
          COM_VAL_RUBRICA_CHEIO := COM_VAL_RUBRICA_CHEIO + vi_val_rubrica;
        ELSE
          vi_val_rubrica := 0;
        END IF;
      ELSIF TP_EVENTO_ESPECIAL = 'A' AND TP_EVENTO = 'T' THEN
        SP_OBTEM_ANTECIPACAO(cod_benef,
                             tp_evento_especial,
                             vi_rubrica,
                             vi_val_rubrica,
                             vi_seq_vig);
        IF HOUVE_RATEIO = TRUE then
          SP_RATEIO_BENEFICIO(cod_benef,
                              ANT_IDE_CLI,
                              vi_val_rubrica,
                              vi_val_rubrica,
                              VI_PERCENTUAL_RATEIO);
        END IF;
        rdcn.val_rubrica := vi_val_rubrica;
      ELSIF TP_EVENTO_ESPECIAL = 'T' AND TP_EVENTO = 'T' THEN
        SP_OBTEM_13_SAIDA(cod_benef,
                          vi_rubrica,
                          vi_val_rubrica,
                          vi_seq_vig);
        if vi_rubrica > 0 then
          SP_RATEIO_BENEFICIO(cod_benef,
                              ANT_IDE_CLI,
                              vi_val_rubrica,
                              vi_val_rubrica,
                              VI_PERCENTUAL_RATEIO);
          rdcn.val_rubrica := vi_val_rubrica;
        end if;
      ELSIF (TP_EVENTO_ESPECIAL = 'S' OR TP_EVENTO_ESPECIAL = 'A') AND
            TP_EVENTO = 'N' THEN
        SP_OBTEM_ANTECIPACAO(cod_benef,
                             tp_evento_especial,
                             vi_rubrica,
                             vi_val_rubrica,
                             vi_seq_vig);
        IF HOUVE_RATEIO = TRUE then
          SP_RATEIO_BENEFICIO(cod_benef,
                              ANT_IDE_CLI,
                              vi_val_rubrica,
                              vi_val_rubrica,
                              VI_PERCENTUAL_RATEIO);
        END IF;
        rdcn.val_rubrica := vi_val_rubrica;
      END IF;

      IF vi_rubrica > 0 THEN
        IF FLG_PA <> 'S' THEN
          begin
            IF VI_SUPLEMENTAR and tp_evento_especial <> 'I' THEN
              IF v_base_prev(cod_benef) (1) = 0 THEN
                null;
              ELSE
                COM_VAL_RUBRICA_CHEIO := vi_val_rubrica;
                SP_INCLUI_DETALHE_PAG(cod_benef,
                                      vi_rubrica,
                                      vi_val_rubrica,
                                      vi_seq_vig,
                                      vi_flg_natureza);
              END IF;
            ELSE
              COM_VAL_RUBRICA_CHEIO := vi_val_rubrica;
              SP_INCLUI_DETALHE_PAG(cod_benef,
                                    vi_rubrica,
                                    vi_val_rubrica,
                                    vi_seq_vig,
                                    vi_flg_natureza);
            END IF;

          exception
            when no_data_found then
              v_erro := sqlerrm;
          end;

        ELSE
          COM_VAL_RUBRICA_CHEIO := vi_val_rubrica;
          SP_INCLUI_DETALHE_PAG_PA(ide_cli,
                                   cod_benef,
                                   vi_rubrica,
                                   vi_val_rubrica,
                                   vi_seq_vig,
                                   vi_flg_natureza);
        END IF;
      END IF;

    END LOOP;

    --  verifica se houve pagamento especial e efetua a diferenca do IR

    For w in 1 .. tdcn.count LOOP

      rdcn := tdcn(w);

      if rdcn.cod_fcrubrica = vi_rubrica and rdcn.tip_processo = 'E' then
        v_val_rub_dif := rdcn.val_rubrica;
      elsif rdcn.cod_fcrubrica = vi_rubrica and rdcn.tip_processo = 'N' then
        v_val_rub_pgto_normal := rdcn.val_rubrica;

        IF v_val_rub_dif > 0 and v_val_rub_pgto_normal > 0 then
          rdcn.val_rubrica := v_val_rub_pgto_normal - v_val_rub_dif;
          tdcn(w).val_rubrica := rdcn.val_rubrica;
          exit;
        END IF;

      end if;

    End Loop;

  END SP_OBTEM_DETALHE_PAG;
  ----------------------------------------------------------------------------------
  PROCEDURE SP_INCLUI_DETALHE_PAG(TP_COD_BENEFICIO IN NUMBER,
                                  TP_RUBRICA       IN NUMBER,
                                  TP_VAL_RUBRICA   IN NUMBER,
                                  TP_SEQ_VIG       IN NUMBER,
                                  TP_FLG_NATUREZA  IN VARCHAR2) as

  BEGIN

   ----- Pasagem de Task 37101 Contribuição previdencia ...
     rdcn.tip_evento_especial        := null;

    rdcn.cod_ins         := PAR_COD_INS;
    rdcn.tip_processo    := PAR_TIP_PRO;
    rdcn.per_processo    := PAR_PER_PRO;
    rdcn.cod_ide_cli     := ANT_IDE_CLI;
    rdcn.cod_beneficio   := TP_COD_BENEFICIO;
    rdcn.seq_pagamento   := vi_seq_pagamento;
    rdcn.seq_detalhe     := idx_seq_detalhe;
    rdcn.cod_fcrubrica   := tp_rubrica;
    rdcn.val_rubrica     := tp_val_rubrica;
    rdcn.seq_vig         := tp_seq_vig;
    rdcn.num_quota       := 0;
    rdcn.flg_natureza    := tp_flg_natureza;
    rdcn.tot_quota       := 0;
    rdcn.dat_ini_ref     := PAR_PER_PRO;
    rdcn.dat_fim_ref     := NULL;
    rdcn.cod_ide_cli_ben := NULL; --verificar
    rdcn.num_ord_jud     := NULL; --varificar
    rdcn.dat_ing         := sysdate;
    rdcn.dat_ult_atu     := sysdate;
    rdcn.nom_usu_ult_atu := PAR_COD_USU;
    rdcn.nom_pro_ult_atu := 'FOLHA CALCULADA';
    rdcn.des_informacao  :=null;
    FOR i IN 1 .. vfolha.count LOOP
      rfol := vfolha(i);
      IF RFOL.COD_BENEFICIO=rdcn.cod_beneficio   THEN
         rdcn.cod_entidade := RFOL.COD_ENTIDADE;
      END IF;
    END LOOP;

    rdcn.des_complemento := null;

    rdcn.val_rubrica_cheio := COM_VAL_RUBRICA_CHEIO;

    IF trunc(tp_rubrica / 100, 000) in (70012,70014) THEN
      IF  VI_NUM_DEP_ECO > 0  THEN
         rdcn.des_informacao := to_char(VI_NUM_DEP_ECO, '09') || ' Dep.';
      ELSE
        IF  VI_IR_EXTERIOR    THEN
           rdcn.des_informacao :=  'Res. Ext.';
        END IF;
     END IF;
    END IF;
    --- Controle de Carga de consignataria 20-01-2011
    rdcn.num_carga              :=COM_NUM_CARGA;
    rdcn.num_seq_controle_carga :=COM_NUM_SEQ_CONTROLE_CARGA;  --NUM_SEQ_CONTROLE_CARGA
    rdcn.TIP_EVENTO_ESPECIAL    :=COM_TIPO_EVENTO_ESPECIAL;
    tdcn(idx_caln) := rdcn;

  END SP_INCLUI_DETALHE_PAG;
  ----------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_ANTECIPACAO(V_COD_BENEF           IN NUMBER,
                                 V_TIP_EVENTO_ESPECIAL IN VARCHAR2,
                                 V_COD_RUBRICA         OUT NUMBER,
                                 V_VAL_RUBRICA         OUT NUMBER,
                                 V_SEQ_VIG             OUT NUMBER) AS

  BEGIN

    v_val_rubrica := 0;
    v_cod_rubrica := 0;
    v_seq_vig     := 0;

    --   BEGIN
    --     SELECT /*+ RULE */ sum(dc.val_rubrica), RU.COD_RUBRICA_CONTRARIA, 1 -- RU.SEQ_VIG
    --       INTO v_val_rubrica, v_cod_rubrica, v_seq_vig
    --       FROM tb_det_calculado dc,
    --            tb_rubricas ru
    --      WHERE DC.COD_INS =  PAR_COD_INS
    --        AND DC.COD_BENEFICIO = V_COD_BENEF
    --        AND DC.FLG_NATUREZA = 'C'
    --        AND DC.TIP_PROCESSO = 'N'
    --        AND DC.COD_INS = RU.COD_INS
    --        AND DC.COD_FCRUBRICA = RU.COD_RUBRICA
    --        AND RU.COD_RUBRICA_CONTRARIA IS NOT NULL
    --        AND RU.TIP_EVENTO = 'N'
    --        AND DC.SEQ_VIG = RU.SEQ_VIG
    --        AND RU.TIP_EVENTO_ESPECIAL = V_TIP_EVENTO_ESPECIAL
    --        AND RU.DAT_INI_VIG <= PAR_PER_PRO
    --        AND to_char(RU.DAT_INI_VIG,'YYYY') = to_char(PAR_PER_PRO,'YYYY')
    --        AND DC.PER_PROCESSO between to_date('0101'||to_char(par_per_pro,'YYYY'),'ddmmyyyy') and add_months(par_per_pro,-1)
    --        GROUP BY RU.COD_RUBRICA_CONTRARIA, 1;
    --    EXCEPTION
    --       WHEN NO_DATA_FOUND THEN
    --         v_val_rubrica := 0;
    --         v_cod_rubrica := 0;
    --         v_seq_vig := 0;
    --       WHEN OTHERS THEN
    --        p_sub_proc_erro:= 'SP_OBTEM_ANTECIPACAO';
    --        p_coderro := SQLCODE;
    --        P_MSGERRO := SQLERRM;
    --                         INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
    --                           p_coderro,
    --                          'Calcula Folha',
    --                           sysdate,
    --                           p_msgerro,
    --                           p_sub_proc_erro,
    --                           BEN_IDE_CLI,
    --                           COM_COD_FCRUBRICA);

    --    RAISE ERRO;
    --    END;

  END SP_OBTEM_ANTECIPACAO;
  ----------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_13_SAIDA(V_COD_BENEFICIO IN NUMBER,
                              V_COD_RUBRICA   OUT NUMBER,
                              V_VAL_RUBRICA   OUT NUMBER,
                              V_SEQ_VIG       OUT NUMBER) AS
  BEGIN
    BEGIN
      select /*+ RULE */
       sum(dc.val_rubrica), r.cod_rubrica_contraria, r.seq_vig
        into V_VAL_RUBRICA, V_COD_RUBRICA, V_SEQ_VIG
        from tb_det_calculado dc, tb_rateio_beneficio rb, tb_rubricas r
       where dc.cod_ins = rb.cod_ins
         and rb.cod_ins = PAR_COD_INS
         and rb.cod_beneficio = V_COD_BENEFICIO
         and dc.cod_beneficio = rb.cod_beneficio
         and dc.cod_ide_cli = rb.cod_ide_cli_ben
         and dc.cod_fcrubrica = r.cod_rubrica
         and r.cod_entidade = COM_ENTIDADE
         and rb.cod_ins = r.cod_ins
         and r.cod_rubrica_contraria is not null
         and r.tip_evento_especial <> 'P' --ROD incluido em ago09
         and rb.dat_fim_vig is not null
         AND  NVL(RB.flg_STATUS,'A') = 'A'
         and rb.dat_ini_vig <= PAR_PER_PRO --efv 11112007
         and to_char(rb.dat_fim_vig, 'YYYYMM') <>
             to_char(PAR_PER_PRO, 'YYYYMM')
         and not exists
       (select 'S'
                from tb_rateio_beneficio rbe
               where rbe.cod_ins = rb.cod_ins
                 and rbe.cod_beneficio = rb.cod_beneficio
                 and dat_fim_vig is null
                 AND  NVL(RBE.flg_STATUS,'A') = 'A'
                 and rbe.cod_ide_cli_ben = rb.cod_ide_cli_ben)
       group by r.cod_rubrica_contraria, r.seq_vig;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        v_val_rubrica := 0;
        v_cod_rubrica := 0;
        v_seq_vig     := 0;
      WHEN OTHERS THEN
        p_sub_proc_erro := 'SP_OBTEM_13_SAIDA';
        p_coderro       := SQLCODE;
        P_MSGERRO       := 'Erro ao obter o 13? saida';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              BEN_IDE_CLI,
                              COM_COD_FCRUBRICA);
        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
        --    RAISE ERRO;
    END;

  END SP_OBTEM_13_SAIDA;
  ----------------------------------------------------------------------------------
  PROCEDURE SP_INC_DET_RETROATIVO_INICIAL AS
    --Rod 30/09/2009
    --Calcula Retroativo para novos Benef
    v_seq_rubrica          number := 0;
    v_des_motivo           varchar2(200) := null;
    v_val_credito          number(18, 4) := 0;
    v_val_debito           number(18, 4) := 0;
    v_val_dif              number(18, 4) := 0;
    v_ant_cod_benef        number := 0;
    v_val_rubrica          number(18, 4) := 0;
    conta_ret              number := 0;
    v_qtd_dias             number := 0;
    v_qtd_meses            number := 0;
    v_Vlr18601             number(18, 4) := 0;
    v_Vlr18613             number(18, 4) := 0;
    v_val_exclui607        number(18, 4) := 0;
    v_val_inclui607        number(18, 4) := 0;

    rdcn_temp              TB_DET_CALCULADO_ESTRUC%rowtype;
    contaa                 number(3);
    v_dat_concessaoben     date;
    v_Vlr2160300           number(18, 4) := 0;
    v_Vlr7000600           number(18, 4) := 0;
    v_Vlr7060300           number(18, 4) := 0;
    v_rub1860500           number(18, 4) := 0;
    v_Vlr18607             number(18, 4) := 0;
    v_val_exclui2100500    number(18, 4) := 0;
    v_val_inclui21006      number(18, 4) := 0;
    possui_18607           number;
    v_Vlr2160350           number(18, 4) := 0;
    v_CALCULA_RET_ESPECIAL boolean;
    possui_7060600         boolean := false;
    cod_benef              number;

    DAT_INICIO_BENEFICIO   date;
    FATORP13               number(18, 8) := 0;
    v_rubantecip13         number(08);

    v_seq_pag              number(5);
    tmp_entidade           number(2):=1;
    w_qtd_beneficios       number(2):= 0;
 BEGIN
    Begin

      --------------------- APLICA RUBRICA 1860500 ATRASADOS INICIAIS
      --------------------- Pega o valor atual da 1860100
      contaa := tdcn.count;
      w_qtd_beneficios:=0; ---- Controle de Adiantamento de previdencia 21-03-2017
      IF contaa > 0 then
        FOR B IN 1 .. v_cod_beneficio.count LOOP
          cod_benef      := v_cod_beneficio(B);
          v_Vlr18601     := 0;
          v_Vlr18613     := 0;
          v_Vlr18607     := 0;
          v_Vlr2160300   := 0;
          v_Vlr7060300   := 0;
          v_Vlr7000600   := 0;
          v_val_exclui2100500 :=0;
          possui_7060600 := false;

          FOR I IN 1 .. contaa LOOP
            rdcn_temp := tdcn(I);
            IF rdcn_temp.COD_FCRUBRICA = 1860100 AND
               rdcn_temp.cod_beneficio = cod_benef THEN
              v_Vlr18601 := v_Vlr18601 + rdcn_temp.val_rubrica;
            END IF;
            IF rdcn_temp.COD_FCRUBRICA = 1861300 AND
               rdcn_temp.cod_beneficio = cod_benef THEN
              v_Vlr18613 := v_Vlr18613 + rdcn_temp.val_rubrica;
            END IF;
            IF rdcn_temp.COD_FCRUBRICA = 2160300 AND
               rdcn_temp.cod_beneficio = cod_benef THEN
               v_Vlr2160300 := v_Vlr2160300 + rdcn_temp.val_rubrica;
            END IF;
            IF (rdcn_temp.COD_FCRUBRICA = 7060300 OR rdcn_temp.COD_FCRUBRICA = 7060500
                OR rdcn_temp.COD_FCRUBRICA = 7005600 ) AND rdcn_temp.cod_beneficio = cod_benef THEN
              v_Vlr7060300 := v_Vlr7060300 + rdcn_temp.val_rubrica;
            END IF;
            IF rdcn_temp.COD_FCRUBRICA = 7000600 AND
               rdcn_temp.cod_beneficio = cod_benef THEN
              v_Vlr7000600 := v_Vlr7000600 + rdcn_temp.val_rubrica;
            END IF;
            IF rdcn_temp.COD_FCRUBRICA = 7060600 AND
               rdcn_temp.cod_beneficio = cod_benef THEN
              possui_7060600 := true;
            END IF;
            IF rdcn_temp.COD_FCRUBRICA = 1860700 AND
               rdcn_temp.cod_beneficio = cod_benef THEN
              v_Vlr18607 := v_Vlr18607 + rdcn_temp.val_rubrica;
            END IF;
          END LOOP;

          v_CALCULA_RET_ESPECIAL := FALSE;
          For retroativo in (Select *
                               From TB_CASOS_RET_ESPECIAL re
                              where cod_ins = PAR_COD_INS
                                and dat_proc = PAR_PER_PRO
                                and cod_ide_cli = ANT_IDE_CLI
                                AND exists
                              (select cb.dat_concessao
                                       from tb_concessao_beneficio cb
                                      where cod_ins = 1
                                        and re.cod_ins = cb.cod_ins
                                        and re.cod_beneficio = cod_benef
                                        and re.cod_beneficio =
                                            cb.cod_beneficio)) loop

            conta_ret := nvl(conta_ret, 0) + 1;

            v_CALCULA_RET_ESPECIAL := TRUE;

            -----------------------OBTEM DATA DE CONCESSAO DO BENEFICIO
/*            select cb.dat_concessao
              into v_dat_concessaoben
              from tb_concessao_beneficio cb
             where cod_beneficio = retroativo.cod_beneficio
               and cod_ins = PAR_COD_INS
               and cod_entidade = COM_COD_ENTIDADE;
*/            ------------------------Alterado forma de obter a data de inicio do beneficio em 30.10.2009
              select b.dat_ini_ben
                into v_dat_concessaoben
                from tb_beneficiario b
                where b.cod_beneficio = retroativo.cod_beneficio
                 and b.cod_ins = PAR_COD_INS
                 and b.cod_ide_cli_ben = ANT_IDE_CLI
                 and (b.dat_fim_ben is null or b.dat_fim_ben >= PAR_PER_PRO);
              ---------------------------------------------

            --Calcula Rubrica 1860500
            --v_qtd_dias := (o_number(to_char(PAR_PER_PRO,'MM'))*30 - to_number(to_char(v_date_obito_char,'MM')*30 + to_number(to_char(v_date_obito_char,'DD'));

            --Alterado ROD em 09.set.2009 ...(abaixo)
            v_val_rubrica := 0;

            IF PAR_PER_PRO < v_dat_concessaoben or v_dat_concessaoben is null THEN
               v_qtd_meses := 0;
               v_qtd_dias  := 0;
            ELSE
              select ((to_number(to_char(PAR_PER_PRO, 'MM')) -
                     to_number(to_char(v_dat_concessaoben, 'MM'))) - 1 ) +
                     ( 12 * (to_number(to_char(PAR_PER_PRO, 'yyyy')) -  to_number(to_char(v_dat_concessaoben, 'yyyy'))))
                into v_qtd_meses
                from DUAL;
              select 30 - to_number(to_char(v_dat_concessaoben, 'DD')) + 1
                into v_qtd_dias
                from DUAL;
              IF v_qtd_dias < 0 then
                 v_qtd_dias := 0;
              END IF;
              IF v_qtd_dias > 30 then
                 v_qtd_dias := 30;
              END IF;

              v_val_rubrica := ((v_Vlr18601+v_Vlr18613) * v_qtd_dias / 30) +
                             (v_Vlr18601+v_Vlr18613) * v_qtd_meses;
            END IF;
            --Alterado ROD em 09.set.2009 ...(acima)

            IF v_val_rubrica > 0 AND NOT v_dat_concessaoben is null THEN
              --tdcd.extend;
              idx_cald := nvl(idx_cald, 0) + 1;

              rdcd.cod_ins           := PAR_COD_INS;
              rdcd.tip_processo      := PAR_TIP_PRO;
              rdcd.per_processo      := PAR_PER_PRO;
              rdcd.cod_ide_cli       := retroativo.cod_ide_cli;
              rdcd.cod_beneficio     := retroativo.cod_beneficio;
              rdcd.seq_pagamento     := vi_seq_pagamento;
              rdcd.seq_detalhe       := idx_cald;
              rdcd.cod_fcrubrica     := '1860500';
              rdcd.seq_vig           := 1;
              rdcd.val_rubrica       := v_val_rubrica;
              rdcd.num_quota         := 1;
              rdcd.flg_natureza      := 'C';
              rdcd.tot_quota         := 1;
              rdcd.dat_ini_ref       := v_dat_concessaoben;
              rdcd.dat_fim_ref       := par_per_pro;
              rdcd.num_ord_jud       := null;
              rdcd.dat_ing           := sysdate;
              rdcd.dat_ult_atu       := sysdate;
              rdcd.nom_usu_ult_atu   := 'RETROESP';
              rdcd.nom_pro_ult_atu   := 'FOLHA ENVIO';
              rdcd.val_rubrica_cheio := v_val_rubrica;


                FOR i IN 1 .. vfolha.count LOOP
                  rfol := vfolha(i);
                  IF RFOL.COD_BENEFICIO=rdcn.cod_beneficio   THEN
                     rdcn.cod_entidade := RFOL.COD_ENTIDADE;
                  END IF;
                END LOOP;




              v_rub1860500 := v_val_rubrica;

              IF rdcd.val_rubrica > 0 THEN
                tdcn.extend;
                idx_caln              := nvl(idx_caln, 0) + 1;
                idx_seq_detalhe       := nvl(idx_seq_detalhe, 0) + 1;
                COM_VAL_RUBRICA_CHEIO := rdcd.val_rubrica;

                SP_INCLUI_DETALHE_PAG(rdcd.cod_beneficio,
                                      rdcd.cod_fcrubrica,
                                      rdcd.val_rubrica,
                                      rdcd.seq_vig,
                                      rdcd.flg_natureza);
              END IF;

              -- Gerar rubrica 2160350 Redutor mensal ----------------------------------------
              v_val_rubrica := 0;
              IF v_Vlr2160300 > 0 THEN
                v_val_rubrica := (v_Vlr2160300 * v_qtd_dias / 30) +
                                 v_Vlr2160300 * v_qtd_meses;
                v_Vlr2160350  := v_val_rubrica;
              END IF;
              IF v_val_rubrica > 0 THEN
                idx_cald               := nvl(idx_cald, 0) + 1;
                rdcd.cod_ins           := PAR_COD_INS;
                rdcd.tip_processo      := PAR_TIP_PRO;
                rdcd.per_processo      := PAR_PER_PRO;
                rdcd.cod_ide_cli       := retroativo.cod_ide_cli;
                rdcd.cod_beneficio     := retroativo.cod_beneficio;
                rdcd.seq_pagamento     := vi_seq_pagamento;
                rdcd.seq_detalhe       := idx_cald;
                rdcd.cod_fcrubrica     := '2160350';
                rdcd.seq_vig           := 1;
                rdcd.val_rubrica       := v_val_rubrica;
                rdcd.num_quota         := 1;
                rdcd.flg_natureza      := 'D';
                rdcd.tot_quota         := 1;
                rdcd.dat_ini_ref       := v_dat_concessaoben;
                rdcd.dat_fim_ref       := par_per_pro;
                rdcd.num_ord_jud       := null;
                rdcd.dat_ing           := sysdate;
                rdcd.dat_ult_atu       := sysdate;
                rdcd.nom_usu_ult_atu   := 'RETROESP';
                rdcd.nom_pro_ult_atu   := 'FOLHA ENVIO';
                rdcd.val_rubrica_cheio := v_val_rubrica;

                tdcn.extend;
                idx_caln        := nvl(idx_caln, 0) + 1;
                idx_seq_detalhe := nvl(idx_seq_detalhe, 0) + 1;
                SP_INCLUI_DETALHE_PAG(rdcd.cod_beneficio,
                                      rdcd.cod_fcrubrica,
                                      rdcd.val_rubrica,
                                      rdcd.seq_vig,
                                      rdcd.flg_natureza);
              END IF;
            END IF;

            -- Gerar rubrica 7000650 Redutor mensal ----------------------------------------
            v_val_rubrica := 0;
            IF v_Vlr7000600 > 0 THEN
              --v_val_rubrica := (v_Vlr7000600 * v_qtd_dias/30) + v_Vlr7000600 * v_qtd_meses;
              v_val_rubrica := (v_rub1860500 - v_Vlr2160350) / 100;
            END IF;
            IF v_val_rubrica > 0 THEN

              idx_cald               := nvl(idx_cald, 0) + 1;
              rdcd.cod_ins           := PAR_COD_INS;
              rdcd.tip_processo      := PAR_TIP_PRO;
              rdcd.per_processo      := PAR_PER_PRO;
              rdcd.cod_ide_cli       := retroativo.cod_ide_cli;
              rdcd.cod_beneficio     := retroativo.cod_beneficio;
              rdcd.seq_pagamento     := vi_seq_pagamento;
              rdcd.seq_detalhe       := idx_cald;
              rdcd.cod_fcrubrica     := '7000650';
              rdcd.seq_vig           := 1;
              rdcd.val_rubrica       := v_val_rubrica;
              rdcd.num_quota         := 1;
              rdcd.flg_natureza      := 'D';
              rdcd.tot_quota         := 1;
              rdcd.dat_ini_ref       := v_dat_concessaoben;
              rdcd.dat_fim_ref       := par_per_pro;
              rdcd.num_ord_jud       := null;
              rdcd.dat_ing           := sysdate;
              rdcd.dat_ult_atu       := sysdate;
              rdcd.nom_usu_ult_atu   := 'RETROESP';
              rdcd.nom_pro_ult_atu   := 'FOLHA ENVIO';
              rdcd.val_rubrica_cheio := v_val_rubrica;

              tdcn.extend;
              idx_caln := nvl(idx_caln, 0) + 1;
              idx_seq_detalhe := nvl(idx_seq_detalhe, 0) + 1;
              COM_VAL_RUBRICA_CHEIO := rdcd.val_rubrica;
              tdcn(idx_caln) := rdcd;

            END IF;
          END LOOP;
        END LOOP;

        -- Alterado temporariamente esta chamada para dentro desta func?o , retornar depois
        SP_CALCULA_PREV_DETALHE;

        -- Gerar rubrica 7060350 Redutor mensal ----------------------------------------

        FOR I IN 1 .. v_cod_beneficio.count LOOP
          cod_benef    := v_cod_beneficio(i);
          v_Vlr7060300 := 0;

          contaa := tdcn.count;
          FOR I IN 1 .. contaa LOOP
            rdcn_temp := tdcn(I);
            IF (rdcn_temp.COD_FCRUBRICA = 7060300 OR rdcn_temp.COD_FCRUBRICA = 7005600
                OR rdcn_temp.COD_FCRUBRICA = 7060500) and rdcn_temp.cod_beneficio = cod_benef THEN
              v_Vlr7060300 := v_Vlr7060300 + rdcn_temp.val_rubrica;
            END IF;
          END LOOP;

          v_val_rubrica := 0;
          IF v_Vlr7060300 > 0 THEN
            v_val_rubrica := (v_Vlr7060300 * v_qtd_dias / 30) +
                             v_Vlr7060300 * v_qtd_meses;
          END IF;
          IF v_val_rubrica > 0 THEN
            idx_cald               := nvl(idx_cald, 0) + 1;
            rdcd.cod_ins           := PAR_COD_INS;
            rdcd.tip_processo      := PAR_TIP_PRO;
            rdcd.per_processo      := PAR_PER_PRO;
            rdcd.cod_ide_cli       := ANT_IDE_CLI;
            rdcd.cod_beneficio     := cod_benef;
            rdcd.seq_pagamento     := vi_seq_pagamento;
            rdcd.seq_detalhe       := idx_cald;
            rdcd.cod_fcrubrica     := '7060350';
            rdcd.seq_vig           := 1;
            rdcd.val_rubrica       := v_val_rubrica;
            rdcd.num_quota         := 1;
            rdcd.flg_natureza      := 'D';
            rdcd.tot_quota         := 1;
            rdcd.dat_ini_ref       := v_dat_concessaoben;
            rdcd.dat_fim_ref       := par_per_pro;
            rdcd.num_ord_jud       := null;
            rdcd.dat_ing           := sysdate;
            rdcd.dat_ult_atu       := sysdate;
            rdcd.nom_usu_ult_atu   := 'RETROESP';
            rdcd.nom_pro_ult_atu   := 'FOLHA ENVIO';
            rdcd.val_rubrica_cheio := v_val_rubrica;

            tdcn.extend;
            idx_caln        := nvl(idx_caln, 0) + 1;
            idx_seq_detalhe := nvl(idx_seq_detalhe, 0) + 1;
            --COM_VAL_RUBRICA_CHEIO := rdcd.val_rubrica;
            --tdcn(idx_caln) := rdcd;
            SP_INCLUI_DETALHE_PAG(rdcd.cod_beneficio,
                                  rdcd.cod_fcrubrica,
                                  rdcd.val_rubrica,
                                  rdcd.seq_vig,
                                  rdcd.flg_natureza);
          END IF;

        END LOOP;

        -----------  Executa Calculo Previdencia para demais casos sem Retroativo Inicial
        /*      IF NOT v_CALCULA_RET_ESPECIAL  THEN
                 SP_CALCULA_PREV_DETALHE;
              END IF;
        */

        --  Corrige valor rubrica 1860700(civil) e 2300702(militar) antecipac?o 13o
        --- CALCULO DA RUBRICA - ANTECIPACAO PARA QUE TENHA PROPORCIONALIDADE INICIAL


        FOR I IN 1 .. v_cod_beneficio.count LOOP
          cod_benef := v_cod_beneficio(i);
          SP_OBTEM_TIPO_BENEFICIO(cod_benef);
          --IF COM_TIP_BENEFICIO = 'APOSENTADO' THEN
          --   v_rubantecip13 := 2300700;
          --ELSE
          --   v_rubantecip13 := 1860700;
          --END IF;
          IF COM_TIP_BENEFICIO = 'APOSENTADO' THEN
                 SP_OBTEM_RUBRICA_EVENTO_ESPEC('G',
                                         ANT_ENTIDADE,
                                         'C',
                                         v_rubantecip13,
                                         v_seq_pag);
          ELSE
                 SP_OBTEM_RUBRICA_EVENTO_ESPEC('D',
                                         ANT_ENTIDADE,
                                         'C',
                                         v_rubantecip13,
                                         v_seq_pag);
          END IF;

          possui_18607      :=0;
          v_val_exclui607   :=0;
          v_val_exclui2100500 :=0;
          v_val_inclui607   :=0;
          v_val_inclui21006 :=0;
          --- Agreagado por Aposentados JTS
              v_val_exclui2100500  :=0;
              FOR X IN 1 .. contaa LOOP
                rdcn_temp := tdcn(X);

                --IF  --rdcn_temp.COD_FCRUBRICA = 500151 OR rdcn_temp.COD_FCRUBRICA = 500251 OR
                     --rdcn_temp.COD_FCRUBRICA = 500451 OR rdcn_temp.COD_FCRUBRICA = 501451 OR
                     --rdcn_temp.COD_FCRUBRICA = 900251 OR rdcn_temp.COD_FCRUBRICA = 1000251 OR

                   --  AND rdcn_temp.cod_beneficio = cod_benef THEN
                   --v_val_exclui607 := v_val_exclui607 + rdcn_temp.val_rubrica;

                --END IF;

                  IF RDCN_TEMP.COD_BENEFICIO =cod_benef  THEN

                        IF v_rubantecip13= 2300700 AND COM_TIP_BENEFICIO = 'APOSENTADO' AND
                           rdcn_temp.COD_FCRUBRICA = 2100500  THEN
                            v_val_exclui2100500 := v_val_exclui2100500  + rdcn_temp.val_rubrica_cheio;
                        END IF;
                        IF    rdcn_temp.COD_FCRUBRICA = 2100600  THEN
                            v_val_inclui21006  := v_val_inclui21006  + rdcn_temp.val_rubrica;
                         END IF;
                        IF --( rdcn_temp.COD_FCRUBRICA = 500150 OR rdcn_temp.COD_FCRUBRICA = 500250 OR
                           --  rdcn_temp.COD_FCRUBRICA = 500450 OR rdcn_temp.COD_FCRUBRICA = 501450 OR
                           --  rdcn_temp.COD_FCRUBRICA = 900250 OR rdcn_temp.COD_FCRUBRICA = 1000250 )
                             rdcn_temp.COD_FCRUBRICA = 1861300 AND
                             rdcn_temp.cod_beneficio = cod_benef THEN
                           v_val_inclui607 := v_val_inclui607 + rdcn_temp.val_rubrica;
                        END IF;
                        IF rdcn_temp.COD_FCRUBRICA = v_rubantecip13 AND
                           rdcn_temp.cod_beneficio = cod_benef THEN
                          possui_18607 := X;
                          v_vlr18607   := rdcn_temp.val_rubrica;
                        END IF;
                        IF rdcn_temp.COD_FCRUBRICA = 1860100 AND
                           rdcn_temp.cod_beneficio = cod_benef THEN
                          v_vlr18601 := rdcn_temp.val_rubrica;
                        END IF;
                    END IF;
                END LOOP;

                    IF possui_18607 <> 0 THEN
                      rdcn_temp := tdcn(possui_18607);
                      --- Calculo do fator de proporcionalidade de antecipac?o 13o
                      FATORP13:=1;
                      IF COM_TIP_BENEFICIO = 'APOSENTADO' THEN
                         IF rdcn_temp.val_porc <> 1 THEN
                             FATORP13:=rdcn_temp.val_porc;
                         ELSE
                             FATORP13:=1;
                         END IF;

                         rdcn_temp.val_rubrica := trunc((((v_Vlr18607/FATORP13) - (v_val_exclui2100500   +v_val_inclui607+v_val_inclui21006 )/2) ),2);
                         rdcn_temp.val_rubrica_cheio :=trunc( (((v_Vlr18607/FATORP13)- (v_val_exclui2100500  +v_val_inclui607+v_val_inclui21006 )/2)),2  );
                         tdcn(possui_18607) := rdcn_temp;
                      ELSE
                          FATORP13:=SP_VALOR_PORCENTUAL13(cod_benef);
                         rdcn_temp.val_rubrica := (v_Vlr18601 - v_val_exclui607 +v_val_inclui607-v_val_inclui21006 )*FATORP13 / 2;
                         rdcn_temp.val_rubrica_cheio := (v_Vlr18601- v_val_exclui607 +v_val_inclui607-v_val_inclui21006 )*FATORP13 / 2;
                         tdcn(possui_18607) := rdcn_temp;
                      END IF;
                       IF w_qtd_beneficios =0 THEN -- Controle para acessar so uma vez por Id_cli 21-03-2016
                          SP_CALCULA_PREV_DETALHE_AD;
                       END IF;
                       w_qtd_beneficios:=1;
                    END IF;
                   ------ FIM POR BENEFICIO ----

        END LOOP;

      END IF;
    exception
      when others then
        null;
    end;


  END SP_INC_DET_RETROATIVO_INICIAL;

  ----------------------------------------------------------------------------------
  PROCEDURE SP_INCLUI_DET_SUSPENSO AS

    v_seq_rubrica      number := 0;
    v_des_motivo       varchar2(200) := null;
    v_val_credito      number(18, 4) := 0;
    v_val_debito       number(18, 4) := 0;
    v_val_dif          number(18, 4) := 0;
    v_val_dif2         number(18, 4) := 0;
    v_val_consignado   number(18, 4) := 0;
    v_ant_cod_benef    number := 0;
    v_val_rubrica_desc number(18, 4) := 0;
    -------------------------------------------
     v_val_rubrica_TESTE number(18, 4) := 0;
     i_controle         number;
     i_detalhe          number;

    -- Controle de Consignatarias TASK 27904
     v_val_dif3         number(18, 4) := 0;
      -------------------------------------------
    -- Controle de Consignatarias TASK 30993
     v_val_dif5         number(18, 4) := 0;

 BEGIN
    ---- Novo  controle de consignatarias ----
    ------------------------------------------
    FOR  i_controle IN 1 .. vfolha.count LOOP
             v_val_consignado:=0 ;
             v_val_dif       :=0 ;
             v_val_dif2      :=0 ;
             v_val_dif3      :=0;
             v_val_dif5      :=0;

             rfol := vfolha(i_controle);


            IF RFOL.TIP_BENEFICIO='PENSIONISTA' THEN

                    SP_OBTEM_VALORES_TOTAIS('TOT_CRED_CP',
                                            rfol.cod_beneficio,
                                            0,
                                            'N',
                                            v_val_credito);
                    -- obtem valor total de debito
                    v_val_debito := 0;
                    SP_OBTEM_VALORES_TOTAIS('TOT_DEBIT_CP',
                                            rfol.cod_beneficio,
                                            0,
                                            'N',
                                            v_val_debito);

                  IF  RFOL.COD_ENTIDADE =05 THEN
                      --- Margem Militar
                      v_val_dif       :=  ( v_val_credito*  V_ISMAX ) - abs(v_val_debito);
                      v_val_dif2      :=  ( v_val_credito - abs(v_val_debito)) * V_ISMAX_2;
                          -- Controle de Consignatarias TASK 27904
                      v_val_dif3      :=  ( v_val_credito - abs(v_val_debito)) * V_ISMAX_3;

                      -- Controle de Consignatarias TASK 30993
                       v_val_dif5      :=( v_val_credito - abs(v_val_debito)) * V_ISMAX_5;


                  ELSE
                      v_val_dif       :=  ( v_val_credito*  V_ISMAX ) - abs(v_val_debito);
                      v_val_dif2      :=  ( v_val_credito - abs(v_val_debito)) * V_ISMAX_2;
                          -- Controle de Consignatarias TASK 27904
                      v_val_dif3      :=  ( v_val_credito - abs(v_val_debito)) * V_ISMAX_3;

                      -- Controle de Consignatarias TASK 30993
                       v_val_dif5      :=( v_val_credito - abs(v_val_debito)) * V_ISMAX_5;



                  END IF;


              ELSE
                   SP_OBTEM_VALORES_TOTAIS('TOT_CRED_CA',
                                            rfol.cod_beneficio,
                                            0,
                                            'N',
                                            v_val_credito);
                    -- obtem valor total de debito
                    v_val_debito := 0;
                    SP_OBTEM_VALORES_TOTAIS('TOT_DEBIT_CA',
                                            rfol.cod_beneficio,
                                            0,
                                            'N',
                                            v_val_debito);
                      v_val_dif       :=  ( v_val_credito*  V_ISMAX ) - abs(v_val_debito) ;
                      v_val_dif2      :=  ( v_val_credito - abs(v_val_debito)) * V_ISMAX_2;
                          -- Controle de Consignatarias TASK 27904
                      v_val_dif3      :=  ( v_val_credito - abs(v_val_debito)) * V_ISMAX_3;

                      -- Controle de Consignatarias TASK 30993
                       v_val_dif5      :=( v_val_credito - abs(v_val_debito)) * V_ISMAX_5;

            END IF;

            FOR i_detalhe in 1 .. tdcd.count LOOP
               rdcd                  :=null;
               rdcd                  := tdcd(i_detalhe);
               rdcd.des_informacao   :=null;

               IF rfol.cod_beneficio= rdcd.cod_beneficio and
                  rdcd.flg_modalidade='A'
               THEN
                   IF rdcd.val_rubrica > 0 THEN --1
                          COM_VAL_RUBRICA_CHEIO   := rdcd.val_rubrica;
                          IF v_val_dif >= rdcd.val_rubrica  --2
                            OR INSTRB(NVL(rdcd.des_complemento,' '),'- S/CM') >0
                            OR ( rdcd.flg_desc_parcial='S' and v_val_dif > 0 )
                          THEN
                              IF (rdcd.flg_desc_parcial='S' and v_val_dif >0)
                                 AND  NOT INSTRB(NVL(rdcd.des_complemento,' '),'- S/CM') >0
                                 AND v_val_dif <=rdcd.val_rubrica
                              THEN
                                  rdcd.val_rubrica_cheio:=rdcd.val_rubrica;
                                  rdcd.val_rubrica      :=v_val_dif;
                                  v_val_dif             :=0;
                                  rdcd.des_informacao   :='DESC. PARC';
                              ELSE
                                 IF NOT INSTRB(NVL(rdcd.des_complemento,' '),'- S/CM') >0 THEN  --3
                                   v_val_dif          := v_val_dif - rdcd.val_rubrica;
                                 END IF;
                              END IF;

                            rdcd.dat_ini_ref   := nvl(rdcd.dat_ini_ref  ,PAR_PER_PRO);
                            v_val_rubrica_desc := rdcd.val_rubrica;


                            IF PAR_TIP_PRO = 'S' THEN  --- 4
                              v_val_rubrica_desc := sp_valor_suplementar(rdcd.cod_ide_cli,
                                                                         rdcd.cod_beneficio,
                                                                         rdcd.cod_fcrubrica,
                                                                         rdcd.flg_natureza,
                                                                         rdcd.val_rubrica,
                                                                         rdcd.dat_ini_ref,
                                                                         rdcd.cod_ide_cli_ben);

                               IF v_val_rubrica_desc < 0 THEN -- 5
                                 v_val_rubrica_desc := v_val_rubrica_desc * -1;
                               END IF; -- End 5

                            END IF; -- End 4

                            IF v_val_rubrica_desc > 0 THEN  -- 6
                              ----------- Control de Valor Consignado -----------------
                              v_val_consignado   := v_val_consignado+v_val_rubrica_desc;
                              ----------------------------------------------------------
                               RDCD.VAL_RUBRICA := v_val_rubrica_desc;
                              tdcn.extend;
                              idx_caln := nvl(idx_caln, 0) + 1;
                              idx_seq_detalhe := nvl(idx_seq_detalhe, 0) + 1;
                              tdcd(i_detalhe).val_rubrica := 0;
                              COM_NUM_CARGA             := rdcd.num_carga;
                              COM_NUM_SEQ_CONTROLE_CARGA:= rdcd.num_seq_controle_carga;
                              SP_INCLUI_DETALHE_PAG_CONSIG(rfol.cod_beneficio,
                                                    rdcd.cod_fcrubrica,
                                                    rdcd.val_rubrica,
                                                    rdcd.seq_vig,
                                                    rdcd.flg_natureza,
                                                    rdcd.dat_ini_ref,
                                                    rdcd.dat_fim_ref,
                                                    rdcd.des_complemento,
                                                    rdcd.des_informacao);

                            ELSE  -- 6
                              tdcd(i_detalhe).val_rubrica := 0;
                            END IF; -- End 6

                          ELSE
                            v_des_motivo := 'Percentual de desconto maior que o permitido';
                            v_seq_rubrica := v_seq_rubrica + 1;
                            tdcd(i_detalhe).val_rubrica := 0;
                            BEGIN
                              INSERT /*+ append */
                              INTO TB_DET_SUSPENSO
                              VALUES
                                (rdcd.cod_ins,
                                 rdcd.tip_processo,
                                 rdcd.per_processo,
                                 rdcd.seq_pagamento,
                                 rdcd.cod_ide_cli,
                                 rdcd.cod_beneficio,
                                 rdcd.cod_fcrubrica,
                                 rdcd.seq_vig,
                                 v_seq_rubrica,
                                 trunc(rdcd.val_rubrica, 2),
                                 v_des_motivo,
                                 'N',
                                 null,
                                 trunc(rdcd.val_rubrica_cheio, 2),
                                 rdcd.num_carga,
                                 rdcd.num_seq_controle_carga);
                            EXCEPTION
                              WHEN OTHERS THEN
                                p_sub_proc_erro := 'SP_INCLUI_DET_SUSPENSO';
                                p_coderro       := SQLCODE;
                                P_MSGERRO       := 'Erro ao incluir a rubrica em suspensao';
                                INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                                      p_coderro,
                                                      'Calcula Folha',
                                                      sysdate,
                                                      p_msgerro,
                                                      p_sub_proc_erro,
                                                      BEN_IDE_CLI,
                                                      COM_COD_FCRUBRICA);
                                VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
                                --         RAISE ERRO;

                            END;
                          END IF; --- 2
                        ELSE   -- 1
                          tdcd(i_detalhe).val_rubrica := 0;
                        END IF;-- 1
                    END IF;
             END LOOP;
         ------ Controle de Consignac?o Nova Modalidade ----
         ---------------------------------------------------
           v_val_dif2  :=  v_val_dif2 - v_val_consignado;
          FOR i_detalhe in 1 .. tdcd.count LOOP
               rdcd                  :=null;
               rdcd                  := tdcd(i_detalhe);
               rdcd.des_informacao   :=null;
               IF rfol.cod_beneficio= rdcd.cod_beneficio and
                  rdcd.flg_modalidade='N'
               THEN
                   IF rdcd.val_rubrica > 0 THEN --1
                          COM_VAL_RUBRICA_CHEIO   := rdcd.val_rubrica;
                          IF v_val_dif2 >= rdcd.val_rubrica  --2
                            OR INSTRB(NVL(rdcd.des_complemento,' '),'- S/CM') >0
                            OR ( rdcd.flg_desc_parcial='S' and v_val_dif2 > 0 )
                          THEN
                              IF (rdcd.flg_desc_parcial='S' and v_val_dif2 >0)
                                 AND  NOT INSTRB(NVL(rdcd.des_complemento,' '),'- S/CM') >0
                                 AND v_val_dif2 <=rdcd.val_rubrica
                              THEN
                                  rdcd.val_rubrica_cheio:=rdcd.val_rubrica;
                                  rdcd.val_rubrica      :=v_val_dif2;
                                  v_val_dif2            :=0;
                                  rdcd.des_informacao   :='DESC. PARC';
                              ELSE
                                 IF NOT INSTRB(NVL(rdcd.des_complemento,' '),'- S/CM') >0 THEN  --3
                                   v_val_dif2          := v_val_dif2 - rdcd.val_rubrica;
                                 END IF;
                              END IF;

                            rdcd.dat_ini_ref   := nvl(rdcd.dat_ini_ref  ,PAR_PER_PRO);
                            v_val_rubrica_desc := rdcd.val_rubrica;


                            IF PAR_TIP_PRO = 'S' THEN  --- 4
                              v_val_rubrica_desc := sp_valor_suplementar(rdcd.cod_ide_cli,
                                                                         rdcd.cod_beneficio,
                                                                         rdcd.cod_fcrubrica,
                                                                         rdcd.flg_natureza,
                                                                         rdcd.val_rubrica,
                                                                         rdcd.dat_ini_ref,
                                                                         rdcd.cod_ide_cli_ben);

                               IF v_val_rubrica_desc < 0 THEN -- 5
                                 v_val_rubrica_desc := v_val_rubrica_desc * -1;
                               END IF; -- End 5

                            END IF; -- End 4

                            IF v_val_rubrica_desc > 0 THEN  -- 6
                              ----------- Control de Valor Consignado -----------------
                              v_val_consignado   := v_val_consignado+v_val_rubrica_desc;
                              ----------------------------------------------------------
                               RDCD.VAL_RUBRICA := v_val_rubrica_desc;
                              tdcn.extend;
                              idx_caln := nvl(idx_caln, 0) + 1;
                              idx_seq_detalhe := nvl(idx_seq_detalhe, 0) + 1;
                              tdcd(i_detalhe).val_rubrica := 0;
                              COM_NUM_CARGA             := rdcd.num_carga;
                              COM_NUM_SEQ_CONTROLE_CARGA:= rdcd.num_seq_controle_carga;
                              SP_INCLUI_DETALHE_PAG_CONSIG( rfol.cod_beneficio,
                                                    rdcd.cod_fcrubrica,
                                                    rdcd.val_rubrica,
                                                    rdcd.seq_vig,
                                                    rdcd.flg_natureza,
                                                    rdcd.dat_ini_ref,
                                                    rdcd.dat_fim_ref,
                                                    rdcd.des_complemento,
                                                    rdcd.des_informacao);

                            ELSE  -- 6
                              tdcd(i_detalhe).val_rubrica := 0;
                            END IF; -- End 6

                          ELSE
                            v_des_motivo := 'Percentual de desconto maior que o permitido';
                            v_seq_rubrica := v_seq_rubrica + 1;
                            tdcd(i_detalhe).val_rubrica := 0;
                            BEGIN
                              INSERT /*+ append */
                              INTO TB_DET_SUSPENSO
                              VALUES
                                (rdcd.cod_ins,
                                 rdcd.tip_processo,
                                 rdcd.per_processo,
                                 rdcd.seq_pagamento,
                                 rdcd.cod_ide_cli,
                                 rdcd.cod_beneficio,
                                 rdcd.cod_fcrubrica,
                                 rdcd.seq_vig,
                                 v_seq_rubrica,
                                 trunc(rdcd.val_rubrica, 2),
                                 v_des_motivo,
                                 'N',
                                 null,
                                 trunc(rdcd.val_rubrica_cheio, 2),
                                 rdcd.num_carga,
                                 rdcd.num_seq_controle_carga);
                            EXCEPTION
                              WHEN OTHERS THEN
                                p_sub_proc_erro := 'SP_INCLUI_DET_SUSPENSO';
                                p_coderro       := SQLCODE;
                                P_MSGERRO       := 'Erro ao incluir a rubrica em suspensao';
                                INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                                      p_coderro,
                                                      'Calcula Folha',
                                                      sysdate,
                                                      p_msgerro,
                                                      p_sub_proc_erro,
                                                      BEN_IDE_CLI,
                                                      COM_COD_FCRUBRICA);
                                VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
                                --         RAISE ERRO;

                            END;
                          END IF; --- 2
                        ELSE   -- 1
                          tdcd(i_detalhe).val_rubrica := 0;
                        END IF;-- 1
                    END IF;
             END LOOP;
          ------ Controle de Consignac?o Nova Modalidade ----
         -- Controle de Consignatarias TASK 27904
         ---------------------------------------------------
          v_val_dif3  :=  v_val_dif3 - v_val_consignado;
          FOR i_detalhe in 1 .. tdcd.count LOOP
               rdcd                  :=null;
               rdcd                  := tdcd(i_detalhe);
               rdcd.des_informacao   :=null;
               IF rfol.cod_beneficio= rdcd.cod_beneficio and
                  rdcd.flg_modalidade='N'
                     -- Controle de Consignatarias TASK 27904
                 and NVL(rdcd.dat_contrato_consig,TO_DATE('01/01/1901','DD/MM/YYYY')) >NVL(DAT_CONSIG,TO_DATE('01/01/1901','DD/MM/YYYY'))
               THEN
                   IF rdcd.val_rubrica > 0 THEN --1
                          COM_VAL_RUBRICA_CHEIO   := rdcd.val_rubrica;
                          IF v_val_dif3 >= rdcd.val_rubrica  --2
                            OR INSTRB(NVL(rdcd.des_complemento,' '),'- S/CM') >0
                            OR ( rdcd.flg_desc_parcial='S' and v_val_dif3 > 0 )
                          THEN
                              IF (rdcd.flg_desc_parcial='S' and v_val_dif3 >0)
                                 AND  NOT INSTRB(NVL(rdcd.des_complemento,' '),'- S/CM') >0
                                 AND v_val_dif3 <=rdcd.val_rubrica
                              THEN
                                  rdcd.val_rubrica_cheio:=rdcd.val_rubrica;
                                  rdcd.val_rubrica      :=v_val_dif3;
                                  v_val_dif3            :=0;
                                  rdcd.des_informacao   :='DESC. PARC';
                              ELSE
                                 IF NOT INSTRB(NVL(rdcd.des_complemento,' '),'- S/CM') >0 THEN  --3
                                   v_val_dif3          := v_val_dif3 - rdcd.val_rubrica;
                                 END IF;
                              END IF;

                            rdcd.dat_ini_ref   := nvl(rdcd.dat_ini_ref  ,PAR_PER_PRO);
                            v_val_rubrica_desc := rdcd.val_rubrica;


                            IF PAR_TIP_PRO = 'S' THEN  --- 4
                              v_val_rubrica_desc := sp_valor_suplementar(rdcd.cod_ide_cli,
                                                                         rdcd.cod_beneficio,
                                                                         rdcd.cod_fcrubrica,
                                                                         rdcd.flg_natureza,
                                                                         rdcd.val_rubrica,
                                                                         rdcd.dat_ini_ref,
                                                                         rdcd.cod_ide_cli_ben);

                               IF v_val_rubrica_desc < 0 THEN -- 5
                                 v_val_rubrica_desc := v_val_rubrica_desc * -1;
                               END IF; -- End 5

                            END IF; -- End 4

                            IF v_val_rubrica_desc > 0 THEN  -- 6
                              ----------- Control de Valor Consignado -----------------
                              v_val_consignado   := v_val_consignado+v_val_rubrica_desc;
                              ----------------------------------------------------------
                               RDCD.VAL_RUBRICA := v_val_rubrica_desc;
                              tdcn.extend;
                              idx_caln := nvl(idx_caln, 0) + 1;
                              idx_seq_detalhe := nvl(idx_seq_detalhe, 0) + 1;
                              tdcd(i_detalhe).val_rubrica := 0;
                              COM_NUM_CARGA             := rdcd.num_carga;
                              COM_NUM_SEQ_CONTROLE_CARGA:= rdcd.num_seq_controle_carga;
                              SP_INCLUI_DETALHE_PAG_CONSIG( rfol.cod_beneficio,
                                                    rdcd.cod_fcrubrica,
                                                    rdcd.val_rubrica,
                                                    rdcd.seq_vig,
                                                    rdcd.flg_natureza,
                                                    rdcd.dat_ini_ref,
                                                    rdcd.dat_fim_ref,
                                                    rdcd.des_complemento,
                                                    rdcd.des_informacao);

                            ELSE  -- 6
                              tdcd(i_detalhe).val_rubrica := 0;
                            END IF; -- End 6

                          ELSE
                            v_des_motivo := 'Percentual de desconto maior que o permitido';
                            v_seq_rubrica := v_seq_rubrica + 1;
                            tdcd(i_detalhe).val_rubrica := 0;
                            BEGIN
                              INSERT /*+ append */
                              INTO TB_DET_SUSPENSO
                              VALUES
                                (rdcd.cod_ins,
                                 rdcd.tip_processo,
                                 rdcd.per_processo,
                                 rdcd.seq_pagamento,
                                 rdcd.cod_ide_cli,
                                 rdcd.cod_beneficio,
                                 rdcd.cod_fcrubrica,
                                 rdcd.seq_vig,
                                 v_seq_rubrica,
                                 trunc(rdcd.val_rubrica, 2),
                                 v_des_motivo,
                                 'N',
                                 null,
                                 trunc(rdcd.val_rubrica_cheio, 2),
                                 rdcd.num_carga,
                                 rdcd.num_seq_controle_carga);
                            EXCEPTION
                              WHEN OTHERS THEN
                                p_sub_proc_erro := 'SP_INCLUI_DET_SUSPENSO';
                                p_coderro       := SQLCODE;
                                P_MSGERRO       := 'Erro ao incluir a rubrica em suspensao';
                                INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                                      p_coderro,
                                                      'Calcula Folha',
                                                      sysdate,
                                                      p_msgerro,
                                                      p_sub_proc_erro,
                                                      BEN_IDE_CLI,
                                                      COM_COD_FCRUBRICA);
                                VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
                                --         RAISE ERRO;

                            END;
                          END IF; --- 2
                        ELSE   -- 1
                          tdcd(i_detalhe).val_rubrica := 0;
                        END IF;-- 1
                    END IF;
             END LOOP;

              --------------------- TASK 30993 ---- ----------------
            ---------- Controle de Cartao de Credito --------------
            ------------------------------------------------------

                     ------ Controle de Cartao de Credito ----
         ---------------------------------------------------
           v_val_dif5  :=  v_val_dif5;
          FOR i_detalhe in 1 .. tdcd.count LOOP
               rdcd                  :=null;
               rdcd                  := tdcd(i_detalhe);
               rdcd.des_informacao   :=null;
               IF rfol.cod_beneficio= rdcd.cod_beneficio and
                  rdcd.flg_modalidade='C'
               THEN
                   IF rdcd.val_rubrica > 0 THEN --1
                          COM_VAL_RUBRICA_CHEIO   := rdcd.val_rubrica;
                          IF v_val_dif5 >= rdcd.val_rubrica  --2
                            OR INSTRB(NVL(rdcd.des_complemento,' '),'- S/CM') >0
                            OR ( rdcd.flg_desc_parcial='S' and v_val_dif5 > 0 )
                          THEN
                              IF (rdcd.flg_desc_parcial='S' and v_val_dif5 >0)
                                 AND  NOT INSTRB(NVL(rdcd.des_complemento,' '),'- S/CM') >0
                                 AND v_val_dif5 <rdcd.val_rubrica --- Alterado 20/09/2016 <=
                              THEN
                                  rdcd.val_rubrica_cheio:=rdcd.val_rubrica;
                                  rdcd.val_rubrica      :=v_val_dif5;
                                  v_val_dif5            :=0;
                                  rdcd.des_informacao   :='DESC. PARC';
                              ELSE
                                 IF NOT INSTRB(NVL(rdcd.des_complemento,' '),'- S/CM') >0 THEN  --3
                                   v_val_dif5          := v_val_dif5 - rdcd.val_rubrica;
                                 END IF;
                              END IF;

                            rdcd.dat_ini_ref   := nvl(rdcd.dat_ini_ref  ,PAR_PER_PRO);
                            v_val_rubrica_desc := rdcd.val_rubrica;


                            IF PAR_TIP_PRO = 'S' THEN  --- 4
                              v_val_rubrica_desc := sp_valor_suplementar(rdcd.cod_ide_cli,
                                                                         rdcd.cod_beneficio,
                                                                         rdcd.cod_fcrubrica,
                                                                         rdcd.flg_natureza,
                                                                         rdcd.val_rubrica,
                                                                         rdcd.dat_ini_ref,
                                                                         rdcd.cod_ide_cli_ben);

                               IF v_val_rubrica_desc < 0 THEN -- 5
                                 v_val_rubrica_desc := v_val_rubrica_desc * -1;
                               END IF; -- End 5

                            END IF; -- End 4

                            IF v_val_rubrica_desc > 0 THEN  -- 6
                              ----------- Control de Valor Consignado -----------------
                              v_val_consignado   := v_val_consignado+v_val_rubrica_desc;
                              ----------------------------------------------------------
                               RDCD.VAL_RUBRICA := v_val_rubrica_desc;
                              tdcn.extend;
                              idx_caln := nvl(idx_caln, 0) + 1;
                              idx_seq_detalhe := nvl(idx_seq_detalhe, 0) + 1;
                              tdcd(i_detalhe).val_rubrica := 0;
                              COM_NUM_CARGA             := rdcd.num_carga;
                              COM_NUM_SEQ_CONTROLE_CARGA:= rdcd.num_seq_controle_carga;
                              SP_INCLUI_DETALHE_PAG_CONSIG( rfol.cod_beneficio,
                                                    rdcd.cod_fcrubrica,
                                                    rdcd.val_rubrica,
                                                    rdcd.seq_vig,
                                                    rdcd.flg_natureza,
                                                    rdcd.dat_ini_ref,
                                                    rdcd.dat_fim_ref,
                                                    rdcd.des_complemento,
                                                    rdcd.des_informacao);

                            ELSE  -- 6
                              tdcd(i_detalhe).val_rubrica := 0;
                            END IF; -- End 6

                          ELSE
                            v_des_motivo := 'Percentual de desconto maior que o permitido';
                            v_seq_rubrica := v_seq_rubrica + 1;
                            tdcd(i_detalhe).val_rubrica := 0;
                            BEGIN
                              INSERT /*+ append */
                              INTO TB_DET_SUSPENSO
                              VALUES
                                (rdcd.cod_ins,
                                 rdcd.tip_processo,
                                 rdcd.per_processo,
                                 rdcd.seq_pagamento,
                                 rdcd.cod_ide_cli,
                                 rdcd.cod_beneficio,
                                 rdcd.cod_fcrubrica,
                                 rdcd.seq_vig,
                                 v_seq_rubrica,
                                 trunc(rdcd.val_rubrica, 2),
                                 v_des_motivo,
                                 'N',
                                 null,
                                 trunc(rdcd.val_rubrica_cheio, 2),
                                 rdcd.num_carga,
                                 rdcd.num_seq_controle_carga);
                            EXCEPTION
                              WHEN OTHERS THEN
                                p_sub_proc_erro := 'SP_INCLUI_DET_SUSPENSO';
                                p_coderro       := SQLCODE;
                                P_MSGERRO       := 'Erro ao incluir a rubrica em suspensao';
                                INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                                      p_coderro,
                                                      'Calcula Folha',
                                                      sysdate,
                                                      p_msgerro,
                                                      p_sub_proc_erro,
                                                      BEN_IDE_CLI,
                                                      COM_COD_FCRUBRICA);
                                VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
                                --         RAISE ERRO;

                            END;
                          END IF; --- 2
                        ELSE   -- 1
                          tdcd(i_detalhe).val_rubrica := 0;
                        END IF;-- 1
                    END IF;
             END LOOP;



    END LOOP;



  END SP_INCLUI_DET_SUSPENSO;

  ----------------------------------------------------------------------------------
  PROCEDURE SP_CALC_DATAS_PROPORCIONAL AS
    qtd_dias_inicio number := 0;
    qtd_mes_inicio  number := 0;
    qtd_dias_13     number := 0;
    qtd_mes_13      number := 0;
  BEGIN

    APLICAR_ENTRADA := FALSE;
    VI_TEM_SAIDA    := FALSE;
    vi_fator_dias   := 1;
    qtd_meses_13    := 1;
    v_qtd_dias      := 30;

    IF to_char(BEN_DAT_INICIO, 'YYYYMM') = to_char(PAR_PER_PRO, 'YYYYMM') THEN
      APLICAR_ENTRADA := TRUE;
      v_dias_mes      := 30;

      --       to_number(to_char(LAST_DAY(PAR_PER_PRO),'DD'));
      IF to_number(to_char(BEN_DAT_INICIO, 'DD')) <> 01 THEN
        v_dias_mes := 30;
        --          to_number(to_char(LAST_DAY(PAR_PER_PRO),'DD'));

        IF to_char(BEN_DAT_FIM, 'YYYYMM') = to_char(PAR_PER_PRO, 'YYYYMM') THEN

           v_qtd_dias := to_number(to_char(BEN_DAT_FIM, 'DD')) - to_number(to_char(BEN_DAT_INICIO, 'DD')) + 1;
        ELSE
           v_qtd_dias := 30 - to_number(to_char(BEN_DAT_INICIO, 'DD')) + 1;
        END IF;
       -- AGREGADO POR JTS 04-12-2010 PARA CONTORNAR PROBLEMA DO DIA 31.
        if v_qtd_dias =0  then
           v_qtd_dias:=1;
        end if;
        --           to_number(to_char(LAST_DAY(PAR_PER_PRO),'DD')) - to_number(to_char(BEN_DAT_INICIO,'DD')) + 1;
        IF to_char(BEN_DAT_INICIO, 'YYYY') = to_char(PAR_PER_PRO, 'YYYY') THEN
          qtd_mes_inicio := 12 - to_number(to_char(BEN_DAT_INICIO, 'MM'));
        ELSE
          qtd_mes_inicio := 12;
        END IF;
        VI_PROP_SAIDA     := (V_QTD_DIAS / V_DIAS_MES);
        --         to_number(to_char(LAST_DAY(PAR_PER_PRO),'DD'));
       ELSE
           VI_PROP_SAIDA     := 1;

        --         to_number(to_char(LAST_DAY(PAR_PER_PRO),'DD'));
      END IF;
    ELSIF to_char(BEN_DAT_INICIO, 'YYYYMM') < to_char(PAR_PER_PRO, 'YYYYMM') THEN
      v_dias_mes := 30;
      IF to_char(BEN_DAT_INICIO, 'YYYY') < to_char(PAR_PER_PRO, 'YYYY') THEN
        qtd_mes_13 := 12;
      ELSE
        --            qtd_dias_inicio :=  to_number(to_char(LAST_DAY(BEN_DAT_INICIO),'DD')) - to_number(to_char(BEN_DAT_INICIO,'DD')) + 1;
        qtd_dias_inicio := to_number(to_char(BEN_DAT_INICIO, 'DD')); -- + 1;
        --to_number(to_char(LAST_DAY(BEN_DAT_INICIO),'DD')) -- SUBSTITUIDO PELO 30
        --            qtd_meses_13 := to_number(to_char(BEN_DAT_FIM,'MM')) - to_number(to_char(BEN_DAT_INICIO,'MM')) -1;
        qtd_meses_13 := to_number(to_char(PAR_PER_PRO, 'MM')) -
                        to_number(to_char(BEN_DAT_INICIO, 'MM')); -- -1;
        if par_tip_pro = 'T' then
          IF qtd_dias_inicio < 15 then
            qtd_meses_13 := qtd_meses_13 + 1;
          ELSE
            VI_FATOR_DIAS := 0;
          END IF;
        else
          IF qtd_dias_inicio >30 THEN
             qtd_dias_inicio := 30;
          END IF;
          VI_FATOR_DIAS := (qtd_dias_inicio / 30);
        end if;
        APLICAR_DEC_TERCEIRO := TRUE;
        --verificar proporcao do 13
      END IF;
      IF BEN_DAT_FIM IS NOT NULL THEN
        V_FATOR_13_SAIDA := to_number(to_char(BEN_DAT_FIM, 'MM')) /
                            qtd_meses_13;
        IF to_char(BEN_DAT_FIM, 'YYYYMM') = to_char(PAR_PER_PRO, 'YYYYMM') THEN
          v_qtd_dias := to_number(to_char(BEN_DAT_FIM, 'DD'));
          IF to_number(to_char(BEN_DAT_FIM, 'DD')) = to_char(LAST_DAY(PAR_PER_PRO), 'DD') THEN
             v_qtd_dias := 30;
          END IF;
          v_dias_mes := 30;
          --                to_number(to_char(LAST_DAY(PAR_PER_PRO),'DD'));
          v_qtd_meses  := to_number(to_char(BEN_DAT_FIM, 'MM')) -
                          to_number(to_char(BEN_DAT_INICIO, 'MM')) + 1;
          qtd_meses_13 := to_number(to_char(BEN_DAT_FIM, 'MM')) -
                          to_number(to_char(BEN_DAT_INICIO, 'MM')) - 1;
          IF v_qtd_dias > v_dias_mes THEN
               v_qtd_dias := v_dias_mes;
          END IF;
          IF to_char(BEN_DAT_INICIO, 'YYYYMM') =
             to_char(PAR_PER_PRO, 'YYYYMM') THEN
               VI_FATOR_DIAS := (v_qtd_dias / v_dias_mes);
          ELSE
               VI_FATOR_DIAS_SAIDA := (v_qtd_dias / v_dias_mes);
          END IF;
          VI_PROP_SAIDA        := (V_QTD_DIAS / V_DIAS_MES);
          APLICAR_DEC_TERCEIRO := TRUE;
          VI_TEM_SAIDA         := TRUE;
        END IF;
      END IF;
    ELSIF BEN_DAT_FIM IS NOT NULL THEN
      APLICAR_ENTRADA := TRUE;
      IF to_char(BEN_DAT_FIM, 'YYYYMM') = to_char(PAR_PER_PRO, 'YYYYMM') THEN
        v_qtd_dias := to_number(to_char(BEN_DAT_FIM, 'DD'));
        IF to_number(to_char(BEN_DAT_FIM, 'DD')) = to_char(LAST_DAY(PAR_PER_PRO), 'DD') THEN
           v_qtd_dias := 30;
        END IF;
        v_dias_mes := 30;
        --          to_number(to_char(LAST_DAY(PAR_PER_PRO),'DD'));
        v_qtd_meses          := to_number(to_char(LAST_DAY(PAR_PER_PRO), 'MM'));
        APLICAR_DEC_TERCEIRO := TRUE;
        VI_TEM_SAIDA         := TRUE;
        IF V_QTD_DIAS > V_DIAS_MES THEN
           V_QTD_DIAS := V_DIAS_MES;
        END IF;
        VI_PROP_SAIDA        := (V_QTD_DIAS / V_DIAS_MES);
      END IF;
    ELSE
      APLICAR_DEC_TERCEIRO := FALSE;
    END IF;
    -- MVL
    IF PAR_TIP_PRO = 'R' AND PAR_PER_PRO <> PAR_DATA_PRIMEIRO THEN
      IF to_number(to_char(BEN_DAT_INICIO, 'DD')) <> 01 THEN
        v_qtd_dias := 30 - to_number(to_char(BEN_DAT_INICIO, 'DD')) + 1;
      ELSE
        v_qtd_dias := to_number(to_char(PAR_DATA_PRIMEIRO, 'DD'));
      END IF;
      v_dias_mes := 30;
      --      to_number(to_char(LAST_DAY(PAR_DATA_PRIMEIRO),'DD'));
      IF V_QTD_DIAS > V_DIAS_MES THEN
         V_QTD_DIAS := V_DIAS_MES;
      END IF;
      ----- VERIFICAR JTS 30092010 OJO PEPE
      iF PAR_PER_PRO >= BEN_DAT_INICIO THEN
        V_QTD_DIAS:=30;
      END IF;
      VI_PROP_SAIDA     := (V_QTD_DIAS / V_DIAS_MES);
      VI_FATOR_DIAS     := (V_QTD_DIAS / V_DIAS_MES);
      VI_FATOR_DIAS_RET := (((v_dias_mes - v_qtd_dias) + 1) / v_dias_mes);
      PAR_DATA_PRIMEIRO := PAR_PER_PRO;
    END IF;

  END SP_CALC_DATAS_PROPORCIONAL;
  ----------------------------------------------------------------------------------
  PROCEDURE SP_CALCULA_PREV_DETALHE AS

    vi_rubrica         number := 0;
    vi_val_rubrica     number(18, 2) := 0;
    vi_seq_vig         number := 0;
    i_perc             number(18, 6) := 0;
    i                  number := 0;
    i3                 number := 0;
    cod_benef          number := 0;
    valor_prev         number(18, 4) := 0;
    valor_prev_tot     number(18, 4) := 0;
    vv_sal_base        number(18, 4) := 0;
    o_str              char(1) := null;
    valor_incapacidade number(18, 4) := 0;
    --valor_prev_calc    number(18,4) := 0;
    perc_prev    number(18, 4) := 0;
    nao_tem_prev  char(1) := null;
    nao_TETO_prev char(1) :=null;

    total_suplementar   number(18, 4) := 0;
    total_folha_supl    number(18, 4) := 0;
    vs_rateio           char(1) := 'N';
    c_evento_S          curform;
    VI_IDE_CLI          TB_COMPOSICAO_INDIV.COD_IDE_CLI%TYPE;
    vi_rubrica_s        number := 0;
    vi_seq_vig_s        number := 0;
    vi_val_rubrica_prev number := 0;
    v_val_prev_externo  number := 0;
    PREV_EXTERNA        number(18, 4) := 0;
    v_possui70606       number := 0;

    --- JTS -- Agregado para Calculo proporcional 13
    PORCETUAL_13        number(10,5):=0;


  begin

    valor_prev     := 0;
    valor_prev_tot := 0;
    vv_sal_base    := 0;
    --  desc_prev      := 0;
    valor_incapacidade := 0;
    perc_prev          := 0;
    valor_prev_calc    := 0;
    begin


      -- condicao

      SP_OBTEM_TIPOS_ATRIBUTOS_prev(34,
                                    ant_matricula,
                                    ant_entidade,
                                    ant_cargo,
                                    nao_tem_prev);

      vs_rateio := 'S';

      IF nao_tem_prev = 'N' /* and
                  NOM_SUBCATEGORIA <> 'POLICIA MILITAR'  and
                  NOM_SUBCATEGORIA <> 'BOMBEIRO MILITAR' */
       THEN

        FOR i IN 1 .. v_cod_beneficio.count LOOP

          cod_benef := v_cod_beneficio(i);
          SP_OBTEM_TIPO_BENEFICIO(cod_benef);
          IF COM_TIP_BENEFICIO <> 'APOSENTADO' THEN
             SP_OBTEM_RUBRICA_EVENTO_ESPEC('R',
                                    ANT_ENTIDADE,
                                    '',
                                    vi_rubrica,
                                    vi_seq_vig);
          ELSE
             SP_OBTEM_RUBRICA_EVENTO_ESPEC('T',
                                    ANT_ENTIDADE,
                                    '',
                                    vi_rubrica,
                                    vi_seq_vig);
          END IF;

          v_base_prev(cod_benef)(1) := 0;

          IF PAR_TIP_PRO <> 'E' THEN
            begin
              vv_sal_base := v_sal_base(cod_benef) (1);
            exception
              when others then
                p_sub_proc_erro := 'SP_CALCULA_PREV_DETALHE';
                p_coderro       := SQLCODE;
                P_MSGERRO       := 'Erro ao obter o valor do salario base';
                INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                      p_coderro,
                                      'Calcula Folha',
                                      sysdate,
                                      p_msgerro,
                                      p_sub_proc_erro,
                                      BEN_IDE_CLI,
                                      COM_COD_FCRUBRICA);
                VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
            end;
          END IF;

          vs_militar := 'N';
          if vs_militar = 'N' then

            --  Verificar o total do beneficio para n?o ficar negativo
            --  em caso de folha suplementar

            total_suplementar := 0;
            total_folha_supl  := 0;
          ---------- Agregado 26-01-2011---
            FOR i3 IN 1 .. vfolha.count LOOP
                rfol := vfolha(i3);
                EXIT WHEN   RFOL.COD_BENEFICIO=cod_benef;
            END LOOP;
            VI_PERCENTUAL_RATEIO:= RFOL.PER_RATEIO;
            ------------------------------
            --- Comentado 26-01-2011 por JTS
/*            SP_RATEIO_BENEFICIO(cod_benef,
                                ant_ide_cli,
                                total_suplementar,
                                total_suplementar,
                                VI_PERCENTUAL_RATEIO); -- salario base com rateio
*/

           SP_OBTEM_VALORES_TOTAIS('BASE_PREV',
                                    cod_benef,
                                    vi_rubrica,
                                    'N',
                                    valor_prev);

           IF (PAR_TIP_PRO = 'T' ) THEN
             PORCETUAL_13:=1;
             PORCETUAL_13:=SP_VALOR_PORCENTUAL13(cod_benef);
              valor_prev:=valor_prev * PORCETUAL_13;
           END IF;


            IF VI_SUPLEMENTAR THEN
              BEGIN
                select tot_cred
                  into total_folha_supl
                  from tb_folha
                 where cod_ins = PAR_COD_INS
                   and cod_ide_cli = ANT_IDE_CLI
                   and cod_beneficio = cod_benef
                   and per_processo = PAR_PER_PRO
                   and tip_processo = 'N'
                   and seq_pagamento > 0;
              EXCEPTION
                WHEN NO_DATA_FOUND THEN
                  total_folha_supl := 0;
              END;

              SP_OBTEM_VALORES_TOTAIS('TOT_CRED',
                                      cod_benef,
                                      0,
                                      'N',
                                      total_suplementar);

              IF total_suplementar = total_folha_supl THEN
                vs_rateio := 'N';
                i_perc    := 100;
                --                       v_base_prev(cod_benef)(1) := 0;
                --                       VI_BASE_IR_ARR(cod_benef)(1) := 0;
                valor_prev_tot := valor_prev_tot + valor_prev;
                v_base_prev(cod_benef)(1) := valor_prev_tot;
                cont_benef := cont_benef + 1;
              ELSE
                vs_rateio := 'S';
                valor_prev_tot := valor_prev_tot + valor_prev;
                v_base_prev(cod_benef)(1) := valor_prev_tot;
                cont_benef := cont_benef + 1;
              END IF;
            ELSE
              vs_rateio := 'S';
              valor_prev_tot := valor_prev_tot + (valor_prev);
              v_base_prev(cod_benef)(1) := valor_prev_tot;
              cont_benef := cont_benef + 1;
            END IF;
            --
          end if;

        END LOOP;

        if valor_prev_tot > 0 THEN

          SP_OBTEM_PARVAL_FOLHA2('TASCO', 2000, 'DESC_CONTR', desc_prev); --$3218,90

          SP_OBTEM_TIPOS_ATRIBUTOS_prev(37,
                                        ant_matricula,
                                        ant_entidade,
                                        ant_cargo,
                                        o_str);

          if o_str = 'S' then
            SP_OBTEM_PARVAL_FOLHA2('TASCO',
                                   2000,
                                   'DESC_CONTR',
                                   valor_incapacidade); --$3218,90
            if valor_incapacidade is null then
              valor_incapacidade := 0;
            end if;
          else
            valor_incapacidade := 0;
          end if;

          SP_OBTEM_PARVAL_FOLHA2('TASCO', 2000, 'PERC_CONTR', perc_prev); --  0,11

          IF par_tip_pro = 'R' THEN
            W_COD_PARAM_GERAL_CORRECAO := 'IPCA';
            SP_OBTEM_FATOR_CORRECAO('', PAR_PER_PRO, VI_FATOR_MES);
          END IF;

          -- Verifica se possui rubrica 6510600 que s?o previdencias externas pagas pelo bene
          -----------------------------------------------------------------------


          BEGIN
            SELECT CI.COD_IDE_CLI, sum(val_fixo)
              INTO VI_IDE_CLI, v_val_prev_externo
              FROM  TB_COMPOSICAO_INDIV CI
             WHERE CI.COD_INS = PAR_COD_INS
               AND CI.COD_IDE_CLI = ANT_IDE_CLI
               AND CI.COD_BEN = cod_benef
               AND CI.COD_FCRUBRICA = '6510600' --vi_rubrica_s
               AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
                   to_char(CI.DAT_INI_VIG, 'YYYYMM') and
                   to_char(PAR_PER_PRO, 'YYYYMM') <=
                   to_char(nvl(CI.DAT_FIM_VIG,
                                to_date('01/01/2045', 'dd/mm/yyyy')),
                            'YYYYMM'))
               AND CI.FLG_STATUS='V'
             GROUP BY CI.COD_IDE_CLI;
          EXCEPTION
            when others then
              v_val_prev_externo := 0;
          END;

          ------------------------------------------------------- ROD19
          -- Verifica se possui rubrica 70606 se sim muda a formula de calculo prev
          -------------------------------------------------------------------------
          BEGIN
            SELECT distinct 1
              INTO v_possui70606
              FROM TB_COMPOSICAO_INDIV CI
             WHERE CI.COD_INS = PAR_COD_INS
               AND CI.COD_IDE_CLI = ANT_IDE_CLI
               AND CI.COD_BEN = cod_benef
               AND CI.COD_FCRUBRICA = '7060600'
               AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
                   to_char(CI.DAT_INI_VIG, 'YYYYMM') and
                   to_char(PAR_PER_PRO, 'YYYYMM') <=
                   to_char(nvl(CI.DAT_FIM_VIG,
                                to_date('01/01/2045', 'dd/mm/yyyy')),
                            'YYYYMM'));
          EXCEPTION
            when others then
              v_possui70606 := 0;
          END;
          ------------------------------------------------------------------

/*          IF v_val_prev_externo > 0 THEN
            IF v_val_prev_externo > DESC_PREV THEN
               PREV_EXTERNA := DESC_PREV;
            ELSE
               IF v_val_prev_externo + valor_prev_tot > DESC_PREV THEN
                  PREV_EXTERNA := v_val_prev_externo;
               END IF;
             END IF;
          ELSE
             PREV_EXTERNA := 0;
          END IF;*/

          --Calculo da Previdencia
          valor_prev_calc := 0;
          -------------------------------------------------------------------  + PREV_EXTERNA
          --valor_prev_calc := ((valor_prev_tot - DESC_PREV -
          --                   VALOR_INCAPACIDADE) * perc_prev) *
          --                   VI_FATOR_MES;
          -------------------------------------------------------------------

          -------- ratiando o desconto
          --         valor_prev_calc := valor_prev_calc * VI_PERCENTUAL_RATEIO;

          --DESC_PREV := DESC_PREV + VALOR_INCAPACIDADE;

          FOR i IN 1 .. v_cod_beneficio.count LOOP

            cod_benef := v_cod_beneficio(i);

            SP_OBTEM_TIPO_BENEFICIO(cod_benef);
            IF COM_TIP_BENEFICIO <> 'APOSENTADO' THEN
                 ------- Task 37101 Contribuição previdencia ....
               COM_TIPO_EVENTO_ESPECIAL:='R';
               SP_OBTEM_RUBRICA_EVENTO_ESPEC('R',
                                    ANT_ENTIDADE,
                                    '',
                                    vi_rubrica,
                                    vi_seq_vig);

                 -----------------------------
                   IF  valor_incapacidade=0 THEN
                           SP_OBTEM_TIPOS_ATRIBUTOS_prev(372,
                                        ant_matricula,
                                        ant_entidade,
                                        ant_cargo,
                                        o_str);

                              if o_str = 'S' then
                                SP_OBTEM_PARVAL_FOLHA2('TASCO',
                                                       2000,
                                                       'DESC_CONTR',
                                                       valor_incapacidade); --$3218,90
                                if valor_incapacidade is null then
                                  valor_incapacidade := 0;
                                end if;
                              else
                                valor_incapacidade := 0;
                              end if;
                     END IF;
                 -----------------------------
            ELSE
               ---- Agregado em 25-08-2017
                COM_TIPO_EVENTO_ESPECIAL :='T';
                SP_OBTEM_RUBRICA_EVENTO_ESPEC('T',
                                    ANT_ENTIDADE,
                                    '',
                                    vi_rubrica,
                                    vi_seq_vig);
               ---------------------------------
               IF  valor_incapacidade=0 THEN
                     SP_OBTEM_TIPOS_ATRIBUTOS_prev(371,
                                    ant_matricula,
                                    ant_entidade,
                                    ant_cargo,
                                    o_str);
                    if o_str = 'S' then
                      SP_OBTEM_PARVAL_FOLHA2('TASCO',
                                             2000,
                                             'DESC_CONTR',
                                             valor_incapacidade); --$3218,90
                      if valor_incapacidade is null then
                        valor_incapacidade := 0;
                      end if;
                    else
                      valor_incapacidade := 0;
                    end if;
               END IF;
               ----------------------------------
            END IF;

          ---------- Agregado 26-01-2011---
            FOR i3 IN 1 .. vfolha.count LOOP
                rfol := vfolha(i3);
                EXIT WHEN   RFOL.COD_BENEFICIO=cod_benef;
            END LOOP;
            VI_PERCENTUAL_RATEIO:= RFOL.PER_RATEIO;
            ------------------------------

            begin
              select 'S'
                into vs_militar
                from vis_orgao_inativos
               where cod_ide_cli = ANT_IDE_CLI
                 and cod_beneficio = cod_benef
                 and nome_orgao = 'Inativo Militar';
            exception
              when others then
                vs_militar := 'N';
            end;

            if vs_militar = 'N' then

              IF v_base_prev(cod_benef) (1) <> 0 THEN

                tdcn.extend;
                idx_caln        := nvl(idx_caln, 0) + 1;
                idx_seq_detalhe := nvl(idx_seq_detalhe, 0) + 1;
                IF PAR_TIP_PRO <> 'E' THEN
                   --- Solicitado poe Paulo Miranda 30-01-2014 control erro
                   begin
                      vv_sal_base := v_sal_base(cod_benef) (1);
                   exception
                     when others then
                        vv_sal_base:=0;
                   end;
                END IF;

                SP_OBTEM_VALORES_TOTAIS('BASE_PREV',
                                        cod_benef,
                                        vi_rubrica,
                                        'N',
                                        valor_prev);




                IF VI_SUPLEMENTAR AND cont_benef > 1 THEN
                  i_perc := (valor_prev / valor_prev_tot) * 100;
                ELSE
                  IF cont_benef = 1 AND VI_SUPLEMENTAR THEN
                    i_perc := 100;
                  ELSE
                    i_perc := ((valor_prev) / valor_prev_tot) * 100;
                  END IF;
                END IF;

                -------------- Agregado 26-01-2011 por JTS
                ---    CONTROLE DE ISENC?O DE TETO DE PREVIDENCIA
                     nao_TETO_prev:='N';
                     SP_OBTEM_TIPOS_ATRIBUTOS_prev(13,
                                          ant_matricula,
                                          ant_entidade,
                                          ant_cargo,
                                          nao_TETO_prev);

                IF nao_TETO_prev ='S' THEN
                   valor_incapacidade:=0;
                   desc_prev         :=0;
                END IF;
                ---------------------------------------------------



                  --calculo da previdencia ROD:02/10/2009 este e o calculo segundo a Prodesp --------------------------
                  --este calculo foi alterado em 02/10/2009
                  IF PAR_TIP_PRO <> 'T' or i_perc <=100 THEN
                       IF v_val_prev_externo > 0 THEN
                         if v_val_prev_externo > DESC_PREV THEN
                            v_val_prev_externo := DESC_PREV;
                         END IF;
                         vi_val_rubrica := ((((valor_prev_tot  * i_perc / 100)+ (v_val_prev_externo * i_perc /100))-
                                           ((DESC_PREV + VALOR_INCAPACIDADE ) * i_perc /100 )))
                                            * perc_prev * VI_FATOR_MES * VI_PERCENTUAL_RATEIO ;
                         valor_prev_calc := valor_prev_calc + vi_val_rubrica;
                         v_base_prev(cod_benef)(1) := (valor_prev_tot * VI_PERCENTUAL_RATEIO * i_perc / 100) +
                                                    (v_val_prev_externo * i_perc /100); -- -(DESC_PREV + VALOR_INCAPACIDADE ) * i_perc /100 ;
                       ELSE
                         vi_val_rubrica := (((valor_prev_tot * i_perc / 100) -
                                           ((DESC_PREV + VALOR_INCAPACIDADE ) * i_perc /100 )))
                                            * perc_prev * VI_FATOR_MES * VI_PERCENTUAL_RATEIO  ;
                         valor_prev_calc := valor_prev_calc + vi_val_rubrica;
                         v_base_prev(cod_benef)(1) := ((valor_prev_tot) * i_perc / 100); -- -(DESC_PREV + VALOR_INCAPACIDADE ) * i_perc /100 ;
                       END IF;
                           -- Agregado por JTS 22-10-2010 PARA AJUSTAR O VALOR
                           -- da existem dias propocionais
                          IF COM_TIP_BENEFICIO = 'APOSENTADO' AND
                            VI_PERCENTUAL_RATEIO < 1 THEN
                            v_base_prev(cod_benef)(1) := valor_prev_tot * VI_PERCENTUAL_RATEIO;
                          END IF;
                   ELSE
                       IF v_val_prev_externo > 0 THEN
                         if v_val_prev_externo > DESC_PREV THEN
                            v_val_prev_externo := DESC_PREV;
                         END IF;
                         vi_val_rubrica := ((((valor_prev_tot  * i_perc / 100)+ (v_val_prev_externo ))-
                                           ((DESC_PREV + VALOR_INCAPACIDADE ) )))
                                            * perc_prev * VI_FATOR_MES * VI_PERCENTUAL_RATEIO ;
                         valor_prev_calc := valor_prev_calc + vi_val_rubrica;
                         v_base_prev(cod_benef)(1) := (valor_prev_tot * VI_PERCENTUAL_RATEIO * i_perc / 100) +
                                                    (v_val_prev_externo ); -- -(DESC_PREV + VALOR_INCAPACIDADE ) * i_perc /100 ;
                       ELSE
                         vi_val_rubrica := (((valor_prev_tot * i_perc / 100) -
                                           ((DESC_PREV + VALOR_INCAPACIDADE ) )))
                                            * perc_prev * VI_FATOR_MES * VI_PERCENTUAL_RATEIO  ;
                         valor_prev_calc := valor_prev_calc + vi_val_rubrica;
                         v_base_prev(cod_benef)(1) := ((valor_prev_tot) * i_perc / 100); -- -(DESC_PREV + VALOR_INCAPACIDADE ) * i_perc /100 ;
                       END IF;

                  END IF;



                -- antigo comentado em 01/09/2009
                --vi_val_rubrica := ((valor_prev_calc * VI_PERCENTUAL_RATEIO) * i_perc) / 100;
                --v_base_prev(cod_benef)(1) := ((valor_prev_tot - DESC_PREV) * i_perc) / 100;

                IF vi_val_rubrica > 0 THEN
                   IF (PAR_TIP_PRO = 'T' ) THEN
                       -- CaLculo de % 13 JTS --13-06 --
                       -- N?o proprociona a Base de Previdencia
                      PORCETUAL_13:=1;
                      PORCETUAL_13:=SP_VALOR_PORCENTUAL13(cod_benef);
                      vi_val_rubrica:=vi_val_rubrica*PORCETUAL_13;
                   END IF;


                  vi_val_rubrica_prev   := vi_val_rubrica;
                  COM_VAL_RUBRICA_CHEIO := vi_val_rubrica;
                  SP_INCLUI_DETALHE_PAG(cod_benef,
                                        vi_rubrica,
                                        vi_val_rubrica,
                                        vi_seq_vig,
                                        'D');
                ELSE
                  v_base_prev(cod_benef)(1) := 0;
                END IF;

                IF vi_val_rubrica > 0 THEN

                  -----------------------------------------------------------------------
                  --7060600 Verifica se possui ordem judicial para fazer reposic?o do calculo

                  vi_val_rubrica_prev := vi_val_rubrica;
                  SP_OBTEM_RUBRICA_EVENTO_ESPEC('S',
                                                ANT_ENTIDADE,
                                                '',
                                                vi_rubrica_s,
                                                vi_seq_vig_s);

                  OPEN c_evento_S for
                    SELECT distinct CI.COD_IDE_CLI
                      FROM TB_COMPOSICAO_INDIV CI
                     WHERE CI.COD_INS = PAR_COD_INS
                       AND CI.COD_IDE_CLI = ANT_IDE_CLI
                       AND CI.COD_FCRUBRICA = vi_rubrica_s
                       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
                           to_char(CI.DAT_INI_VIG, 'YYYYMM') and
                           to_char(PAR_PER_PRO, 'YYYYMM') <=
                           to_char(nvl(CI.DAT_FIM_VIG,
                                        to_date('01/01/2045', 'dd/mm/yyyy')),
                                    'YYYYMM'));
                  FETCH c_evento_S
                    INTO VI_IDE_CLI;
                  IF C_evento_S%FOUND THEN
                    -- Possui a rubrica de credito especifica evento S
                    --calculo da 7060600
                    vi_val_rubrica := valor_prev_tot * VI_PERCENTUAL_RATEIO;

                    IF vi_val_rubrica > DESC_PREV THEN
                      vi_val_rubrica        := vi_val_rubrica_prev -
                                               (vi_val_rubrica - DESC_PREV) *
                                               perc_prev;



                       COM_VAL_RUBRICA_CHEIO := vi_val_rubrica_prev -
                                               (vi_val_rubrica - DESC_PREV) *
                                               perc_prev;

                       IF  vi_val_rubrica <0 THEN
                           vi_val_rubrica       :=0;
                           COM_VAL_RUBRICA_CHEIO:=0;

                       END IF;
                       -- Aqui....
                       IF (PAR_TIP_PRO = 'T' ) THEN
                       -- CaLculo de % 13 JTS --13-06 --
                        -- N?o proprociona a Base de Previdencia
                         PORCETUAL_13:=1;
                         PORCETUAL_13:=SP_VALOR_PORCENTUAL13(cod_benef);
                         vi_val_rubrica:=vi_val_rubrica*PORCETUAL_13;
                         COM_VAL_RUBRICA_CHEIO:=COM_VAL_RUBRICA_CHEIO*PORCETUAL_13;

                       END IF;



                   ELSE
                      vi_val_rubrica        := vi_val_rubrica_prev;
                      COM_VAL_RUBRICA_CHEIO := vi_val_rubrica_prev;
                   END IF;
                    tdcn.extend;
                    idx_caln        := nvl(idx_caln, 0) + 1;
                    idx_seq_detalhe := nvl(idx_seq_detalhe, 0) + 1;
                    SP_INCLUI_DETALHE_PAG(cod_benef,
                                          vi_rubrica_s,
                                          vi_val_rubrica,
                                          vi_seq_vig_s,
                                          'C');
                  END IF;
                  --fim 7060600
                END IF;
              END IF;
            end if;

          END LOOP;
        end if;
      ELSE
        FOR i IN 1 .. v_cod_beneficio.count LOOP

          cod_benef := v_cod_beneficio(i);

          begin
            select 'S'
              into vs_militar
              from vis_orgao_inativos
             where cod_ide_cli = ANT_IDE_CLI
               and cod_beneficio = cod_benef
               and nome_orgao = 'Inativo Militar';
          exception
            when others then
              vs_militar := 'N';
          end;
        END LOOP;
      END IF;
    END;
  END SP_CALCULA_PREV_DETALHE;
  ----------------------------------------------------------------------------------
  PROCEDURE SP_INS_DETCAL_RET AS

    val_rubrica_supl    number(18, 4) := 0;
    TOT_VAL_RUB_RET     number;
    PER_PRO_RET         date;
    CUR_COMPBEN_RET     curform;
    CUR_COMPARC_RET     curparc;
    PCOD_IDE_CLI        VARCHAR2(20);
    RET_COD_INS         NUMBER;
    RET_TIP_PROCESSO    VARCHAR2(1);
    RET_PER_PROCESSO    DATE;
    RET_COD_IDE_CLI     VARCHAR2(20);
    RET_COD_BENEFICIO   NUMBER;
    RET_SEQ_PAGAMENTO   NUMBER;
    RET_COD_FCRUBRICA   NUMBER;
    RET_COD_ENTIDADE    NUMBER(8);
    RET_TIP_EVENTO_ESPECIAL CHAR(1);
    RET_SEQ_VIG         NUMBER;
    RET_VAL_RUBRICA     NUMBER;
    RET_NUM_QUOTA       NUMBER;
    RET_FLG_NATUREZA    VARCHAR2(1);
    RET_TOT_QUOTA       NUMBER;
    RET_DAT_INI_REF     DATE;
    RET_DAT_FIM_REF     DATE;
    RET_COD_IDE_CLI_BEN VARCHAR2(20);
    RET_NUM_ORD_JUD     NUMBER;
    RET_DAT_ING         DATE;
    RET_DAT_ULT_ATU     DATE;
    RET_NOM_USU_ULT_ATU VARCHAR2(20);
    RET_NOM_PRO_ULT_ATU VARCHAR2(20);
    RET_RET_SUP         CHAR(1);
    RET_COMPLEMENTO     VARCHAR2(15);
    RET_INFORMACAO      VARCHAR2(10);

    VAL_PARC_CRED  NUMBER(18, 4);
    VAL_PARC_DEBIT NUMBER(18, 4);
    VAL_PARC       NUMBER(18, 4) := 0;

    NVEZES NUMBER := 0;

    V_DUAS_VEZES BOOLEAN;

    dat_aux date;

    rec_parc tb_det_calculado_parc%rowtype;
    i        number;
    cont_ret number;

    nvezes_credito  number := 0;
    nvezes_debito   number := 0;
    v_fato_correcao char(1) := 'N';

    v_percentual_desc      number(18, 4) := 0;
    v_valor_benef          number(18, 4) := 0;
    v_valor_bruto          number(18, 4) := 0;
    v_valor_descontos      number(18, 4) := 0;
    v_valor_total_desconto number(18, 4) := 0;

    ----- ffranco 02/2007******************************
    v_val_credito   number(18, 4) := 0;
    v_val_debito    number(18, 4) := 0;
    v_val_dif       number(18, 4) := 0;
    v_ant_cod_benef number := 0;
    --- ffranco 02/2007
    INDEX_BEN         NUMBER ;
    COD_BENEFICIO_RET NUMBER;
    -- Parcelamento -- MVL
  ------- Task 37101 Contribuição previdencia ....
    RET_RUBRICA_CONTRIB             CHAR(1);
    RET_RUBRICA_CONTRIB_TIPO        CHAR(1);
    WS_COD_BENEFICIO                NUMBER;
    WS_EXISTE_RETROATIVO_AGENDADO   CHAR(1);
    WS_EXISTE_BENEFICIO_ASSOCIADO   CHAR(1);
    COD_BENEFICIO_ASSOCIADO         NUMBER;
    COD_FCRUBRICA_ASSOCIADA         NUMBER;
    COD_BENEFICIO_ORIGINAL          NUMBER;
    INDEX_BEN_RETRO                 NUMBER ;
    VI_RUBRICA_PREV                 NUMBER;
    VI_SEQ_VIG_PREV                 NUMBER;


  begin
    PARCELA := NULL;
    parc.delete;
    idx_parcela    := 0;
    VAL_PARC_CRED  := 0;
    VAL_PARC_DEBIT := 0;
    cont_ret       := 0;

   BEGIN





    BEGIN
      COD_BENEFICIO_RET:=0;
      FOR  INDEX_BEN   IN 1 .. vfolha.count LOOP
          COD_BENEFICIO_RET := v_cod_beneficio( INDEX_BEN  );


                --  verifica quantidades para parcelamento
                begin
                  select fator_correcao,
                         nvl(qtd_parc_credito, 0),
                         nvl(qtd_parc_debito, 1) -- alt em 06/12/2006 ->ffranco eram 8 vezes
                    into v_fato_correcao, nvezes_credito, nvezes_debito
                    from tb_casos_ret_folha
                   where cod_ide_cli = ant_ide_cli
                     and dat_periodo_comp = PAR_PER_REAL
                     -- TASK 3017 -- APLICADO POR LUIZ EM 28/04/2015
                     and flg_status = 'V'
                     -- FIM TASK 3017
                     and rownum < 2;
                exception
                  when others then
                    v_fato_correcao := 'N';
                    nvezes_credito  := 1;
                    nvezes_debito   := 1;
                end;

                SUPL_OK := 'N';
                -- MVL
                OPEN CUR_COMPBEN_RET FOR

                   SELECT cod_ins,
                          TIP_processo,
                          PER_processo,
                          cod_ide_cli,
                          cod_beneficio,
                          seq_pagamento,
                          TRUNC(cod_fcrubrica / 100) cod_fcrubrica,
                          1 as seq_vig,
                          SUM(DECODE(FLG_NATUREZA,
                                     'C',
                                     val_rubrica,
                                     val_rubrica * -1)) val_rubrica,
                          num_quota,
                          ' ' flg_natureza,
                          tot_quota,
                          dat_ini_ref,
                          dat_fim_ref,
                          cod_ide_cli_ben,
                          num_ord_jud,
                          dat_ing,
                          dat_ult_atu,
                          nom_usu_ult_atu,
                          nom_pro_ult_atu,
                          'R',
                          DES_INFORMACAO,
                          DES_COMPLEMENTO,
                          COD_ENTIDADE,
                          TIP_EVENTO_ESPECIAL,
                          ------- Task 37101 Contribuição previdencia ....
                          RUBRICA_CONTRIB,
                          RUBRICA_CONTRIB_TIPO

                     INTO RET_COD_INS,
                          RET_TIP_PROCESSO,
                          RET_PER_PROCESSO,
                          RET_COD_IDE_CLI,
                          RET_COD_BENEFICIO,
                          RET_SEQ_PAGAMENTO,
                          RET_COD_FCRUBRICA,
                          RET_SEQ_VIG,
                          RET_VAL_RUBRICA,
                          RET_NUM_QUOTA,
                          RET_FLG_NATUREZA,
                          RET_TOT_QUOTA,
                          RET_DAT_INI_REF,
                          RET_DAT_FIM_REF,
                          RET_COD_IDE_CLI_BEN,
                          RET_NUM_ORD_JUD,
                          RET_DAT_ING,
                          RET_DAT_ULT_ATU,
                          RET_NOM_USU_ULT_ATU,
                          RET_NOM_PRO_ULT_ATU,
                          RET_RET_SUP,
                          RET_INFORMACAO,
                          RET_COMPLEMENTO,
                          RET_COD_ENTIDADE,
                          RET_TIP_EVENTO_ESPECIAL,
                       ------- Task 37101 Contribuição previdencia ....
                          RET_RUBRICA_CONTRIB     ,
                          RET_RUBRICA_CONTRIB_TIPO

                     FROM (

                           SELECT RET.cod_ins,
                                   tip_processo,
                                   per_processo,
                                   RET.cod_ide_cli,
                                   RET.cod_beneficio,
                                   1 seq_pagamento,
                                   RET.cod_fcrubrica,
                                   RET.seq_vig,
                                   RET.val_rubrica,
                                   RET.num_quota,
                                   RET.flg_natureza,
                                   RET.tot_quota,
                                   RET.dat_ini_ref,
                                   RET.dat_fim_ref,
                                   RET.cod_ide_cli_ben,
                                   RET.num_ord_jud,
                                   RET.dat_ing,
                                   RET.dat_ult_atu,
                                   RET.nom_usu_ult_atu,
                                   RET.nom_pro_ult_atu,
                                   'R',
                                   DES_INFORMACAO,
                                   DES_COMPLEMENTO,
                                   CC.COD_ENTIDADE,
                                   RU.TIP_EVENTO_ESPECIAL,
                                      ------- Task 37101 Contribuição previdencia ....

                                  NVL( (
                                     SELECT 'S' FROM TB_RUBRICAS   RRU
                                     WHERE RRU.COD_INS       = PAR_COD_INS
                                      AND  RRU.COD_ENTIDADE  = CC.COD_ENTIDADE
                                      AND  RRU.COD_CONCEITO  = TRUNC(RET.COD_FCRUBRICA/100)
                                      AND  RRU.TIP_EVENTO_ESPECIAL IN ( 'T','R')
                                      AND ROWNUM =1


                                   ),'N') RUBRICA_CONTRIB,
                                   NVL( (
                                     SELECT SUBSTR(TRIM(RRU.TIP_EVENTO),1,1)  FROM TB_RUBRICAS   RRU
                                     WHERE RRU.COD_INS       = PAR_COD_INS
                                      AND  RRU.COD_ENTIDADE  = CC.COD_ENTIDADE
                                      AND  RRU.COD_CONCEITO  = TRUNC(RET.COD_FCRUBRICA/100)
                                      AND  RRU.TIP_EVENTO_ESPECIAL IN ( 'T','R')
                                      AND ROWNUM =1


                                   ),'N') RUBRICA_CONTRIB_TIPO

                             FROM tb_det_ret             RET,
                                   TB_CONCESSAO_BENEFICIO CC,
                                   TB_RUBRICAS            RU
                            WHERE RET.cod_ins = PAR_COD_INS
                              AND cod_ide_cli = ANT_IDE_CLI
                              AND CC.COD_BENEFICIO = COD_BENEFICIO_RET
                                 --             AND   per_processo=PER_PRO_RET
                              AND per_processo = PAR_PER_PRO
                              AND (dat_ini_ref < PAR_PER_PRO or
                                  (dat_ini_ref <= PAR_PER_PRO and
                                  PAR_TIP_PRO IN ( 'S','N')))  -- Aqui em 13-13-20120 agregamos Tipo 'N'
                              AND tip_processo IN ('R', 'T')
                              AND RET.cod_beneficio > 0
                              AND CC.COD_INS = PAR_COD_INS
                              AND CC.COD_BENEFICIO = RET.COD_BENEFICIO
                              AND RU.COD_INS = CC.COD_INS
                              AND RU.COD_ENTIDADE = CC.COD_ENTIDADE
                              AND RU.COD_RUBRICA = RET.COD_FCRUBRICA
                           union all
                           SELECT RET.cod_ins,
                                  tip_processo,
                                  per_processo,
                                  RET.cod_ide_cli,
                                  RET.cod_beneficio,
                                  1 seq_pagamento,
                                  RET.cod_fcrubrica,
                                  RET.seq_vig,
                                  RET.val_rubrica,
                                  RET.num_quota,
                                  RET.flg_natureza,
                                  RET.tot_quota,
                                  RET.dat_ini_ref,
                                  RET.dat_fim_ref,
                                  RET.cod_ide_cli_ben,
                                  RET.num_ord_jud,
                                  RET.dat_ing,
                                  RET.dat_ult_atu,
                                  RET.nom_usu_ult_atu,
                                  RET.nom_pro_ult_atu,
                                  'S',
                                  DES_INFORMACAO,
                                  DES_COMPLEMENTO,
                                  CC.COD_ENTIDADE,
                                  RU.TIP_EVENTO_ESPECIAL,
                                 ------- Task 37101 Contribuição previdencia ....

                                  NVL( (
                                     SELECT 'S' FROM TB_RUBRICAS   RRU
                                     WHERE RRU.COD_INS       = PAR_COD_INS
                                      AND  RRU.COD_ENTIDADE  = CC.COD_ENTIDADE
                                      AND  RRU.COD_CONCEITO  = TRUNC(RET.COD_FCRUBRICA/100)
                                      AND  RRU.TIP_EVENTO_ESPECIAL IN ( 'T','R')
                                      AND ROWNUM =1


                                   ),'N') RUBRICA_CONTRIB   ,
                                   NVL( (
                                     SELECT SUBSTR(TRIM(RRU.TIP_EVENTO),1,1)  FROM TB_RUBRICAS   RRU
                                     WHERE RRU.COD_INS       = PAR_COD_INS
                                      AND  RRU.COD_ENTIDADE  = CC.COD_ENTIDADE
                                      AND  RRU.COD_CONCEITO  = TRUNC(RET.COD_FCRUBRICA/100)
                                      AND  RRU.TIP_EVENTO_ESPECIAL IN ( 'T','R')
                                      AND ROWNUM =1


                                   ),'N') RUBRICA_CONTRIB_TIPO

                             FROM tb_valor_npago_ret     RET,
                                  TB_CONCESSAO_BENEFICIO CC,
                                  USER_IPESP.TB_RUBRICAS RU
                            WHERE RET.cod_ins = PAR_COD_INS
                              AND cod_ide_cli = ANT_IDE_CLI
                              AND CC.COD_BENEFICIO = COD_BENEFICIO_RET
                              AND per_processo = PAR_PER_PRO
                              AND (dat_ini_ref < PAR_PER_PRO or
                                  (dat_ini_ref <= PAR_PER_PRO and
                                  PAR_TIP_PRO IN ( 'S','N')))
                              AND tip_processo IN ('R', 'T')
                              AND ind_processo = 'S'
                              AND ind_inclui_folha = 'S'
                              AND RET.cod_beneficio > 0
                              AND CC.COD_INS = PAR_COD_INS
                              AND CC.COD_BENEFICIO = RET.COD_BENEFICIO
                              AND RU.COD_INS = CC.COD_INS
                              AND RU.COD_ENTIDADE = CC.COD_ENTIDADE
                              AND RU.COD_RUBRICA = RET.COD_FCRUBRICA
                       ----------------- Valores prodesp  -----------
                         union all
                         select
                             PRET.cod_ins,
                             tip_processo,
                             per_processo,
                             PRET.cod_ide_cli,
                             PRET.cod_beneficio,
                             seq_pagamento,
                             PRET.cod_fcrubrica,
                             PRET.seq_vig,
                             PRET.val_rubrica,
                             PRET.num_quota,
                             PRET.flg_natureza,
                             PRET.tot_quota,
                             PRET.dat_ini_ref,
                             PRET.dat_fim_ref,
                             PRET.cod_ide_cli_ben,
                             PRET.num_ord_jud,
                             PRET.dat_ing,
                             PRET.dat_ult_atu,
                             PRET.nom_usu_ult_atu,
                             PRET.nom_pro_ult_atu,
                             'S',
                             DES_INFORMACAO,
                             'Ret.' as DES_COMPLEMENTO,
                             CC.COD_ENTIDADE,
                             RU.TIP_EVENTO_ESPECIAL,
                             ------- Task 37101 Contribuição previdencia ....

                                  NVL( (
                                     SELECT 'S' FROM TB_RUBRICAS   RRU
                                     WHERE RRU.COD_INS       = PAR_COD_INS
                                      AND  RRU.COD_ENTIDADE  = CC.COD_ENTIDADE
                                      AND  RRU.COD_CONCEITO  = TRUNC( pret.COD_FCRUBRICA/100)
                                      AND  RRU.TIP_EVENTO_ESPECIAL IN ( 'T','R')
                                      AND ROWNUM =1


                               ),'N')    RUBRICA_CONTRIB,

                               NVL( (
                                     SELECT SUBSTR(TRIM(RRU.TIP_EVENTO),1,1) FROM TB_RUBRICAS   RRU
                                     WHERE RRU.COD_INS       = PAR_COD_INS
                                      AND  RRU.COD_ENTIDADE  = CC.COD_ENTIDADE
                                      AND  RRU.COD_CONCEITO  = TRUNC(PRET.COD_FCRUBRICA/100)
                                      AND  RRU.TIP_EVENTO_ESPECIAL IN ( 'T','R')
                                      AND ROWNUM =1


                                   ),'N') RUBRICA_CONTRIB_TIPO

                  from tb_det_parcela_ret pret , TB_CONCESSAO_BENEFICIO CC,
                             USER_IPESP.TB_RUBRICAS RU
                      WHERE  PRET.cod_ins      = PAR_COD_INS
                         AND per_processo      = PAR_PER_PRO
                         AND tip_processo IN ('S', 'N')
                         AND cod_ide_cli       = ANT_IDE_CLI
                         AND CC.COD_BENEFICIO  = COD_BENEFICIO_RET
                         AND PRET.FLG_PAGTO    ='N'
                         AND PRET.cod_beneficio > 0
                         AND CC.COD_INS       = 1
                         AND CC.COD_BENEFICIO = PRET.COD_BENEFICIO
                         AND RU.COD_INS     =CC.COD_INS
                         AND RU.COD_ENTIDADE =CC.COD_ENTIDADE
                         AND RU.COD_RUBRICA  =PRET.COD_FCRUBRICA
                            )
                    GROUP BY cod_ins,
                             TIP_processo,
                             PER_processo,
                             cod_ide_cli,
                             cod_beneficio,
                             seq_pagamento,
                             TRUNC(cod_fcrubrica / 100),
                             num_quota,
                             tot_quota,
                             dat_ini_ref,
                             dat_fim_ref,
                             cod_ide_cli_ben,
                             num_ord_jud,
                             dat_ing,
                             dat_ult_atu,
                             nom_usu_ult_atu,
                             nom_pro_ult_atu,
                             'R',
                             DES_INFORMACAO,
                             DES_COMPLEMENTO,
                             COD_ENTIDADE,
                             TIP_EVENTO_ESPECIAL,
                             RUBRICA_CONTRIB,
                             RUBRICA_CONTRIB_TIPO
                   HAVING ABS(SUM(DECODE(FLG_NATUREZA, 'C', val_rubrica, val_rubrica * -1))) > 0
                   ------- Task 37101 Contribuição previdencia ....
                   ORDER BY   cod_beneficio ,
                              PER_processo;
                FETCH CUR_COMPBEN_RET
                  INTO RET_COD_INS, RET_TIP_PROCESSO, RET_PER_PROCESSO, RET_COD_IDE_CLI, RET_COD_BENEFICIO, RET_SEQ_PAGAMENTO, RET_COD_FCRUBRICA, RET_SEQ_VIG, RET_VAL_RUBRICA, RET_NUM_QUOTA, RET_FLG_NATUREZA, RET_TOT_QUOTA, RET_DAT_INI_REF, RET_DAT_FIM_REF, RET_COD_IDE_CLI_BEN, RET_NUM_ORD_JUD, RET_DAT_ING, RET_DAT_ULT_ATU, RET_NOM_USU_ULT_ATU, RET_NOM_PRO_ULT_ATU, RET_RET_SUP, RET_INFORMACAO, RET_COMPLEMENTO
                       ,ret_cod_entidade,ret_TIP_EVENTO_ESPECIAL,
                        ------- Task 37101 Contribuição previdencia ....
                       RET_RUBRICA_CONTRIB, RET_RUBRICA_CONTRIB_TIPO;



                WHILE CUR_COMPBEN_RET%FOUND LOOP
                  BEGIN
                ------- Task 37101 Contribuição previdencia ....
                    COD_BENEFICIO_ORIGINAL:=RET_COD_BENEFICIO;
                    IF NVL(WS_COD_BENEFICIO,0) != RET_COD_BENEFICIO THEN
                      --- Verifica se tem Retroativo Agendado

                        WS_EXISTE_RETROATIVO_AGENDADO :='N';
                       BEGIN
                           SELECT 'S'
                                  INTO WS_EXISTE_RETROATIVO_AGENDADO
                           FROM TB_CASOS_RET_FOLHA     CFOL ,
                                TB_CONCESSAO_BENEFICIO CBEN
                           WHERE CFOL.COD_INS                 = PAR_COD_INS       AND
                                 CBEN.COD_INS                 = CFOL.COD_INS      AND
                                 CBEN.COD_BENEFICIO           =RET_COD_BENEFICIO  AND
                                 CFOL.COD_IDE_CLI             = ANT_IDE_CLI       AND
                                 CFOL.DAT_PERIODO_COMP        =PAR_PER_PRO        AND
                                 CFOL.NUM_MATRICULA           =CBEN.NUM_MATRICULA AND
                                 NVL(CFOL.FLG_STATUS,'V')     ='V'
                                 ----- Tiket Complemento de contrinbuição previdenciaria 49431 ---
                                 AND
                                 NOT  EXISTS  (
                                     SELECT 1 FROM TB_HFOLHA FOL
                                    WHERE
                                            FOL.COD_INS       =  PAR_COD_INS         AND
                                            FOL.COD_BENEFICIO =  RET_COD_BENEFICIO  AND
                                            FOL.COD_IDE_CLI   =  RET_COD_IDE_CLI     AND
                                            FOL.PER_PROCESSO  =  PAR_PER_PRO         AND
                                            FOL.TIP_PROCESSO  =  PAR_TIP_PRO         AND
                                            FOL.SEQ_PAGAMENTO =  PAR_SEQ_PAGAMENTO   );

                             EXCEPTION
                                  WHEN NO_DATA_FOUND THEN
                                     WS_EXISTE_RETROATIVO_AGENDADO :='N'; -- FALSE
                                  WHEN OTHERS THEN
                                     WS_EXISTE_RETROATIVO_AGENDADO :='N'; -- FALSE
                              END;

                       WS_COD_BENEFICIO := RET_COD_BENEFICIO;
                    END IF;

                 IF WS_EXISTE_RETROATIVO_AGENDADO ='S'  OR RET_RUBRICA_CONTRIB='S' THEN

                            idx_parcela := idx_parcela + 1;
                            idx_seq_detalhe := nvl(idx_seq_detalhe, 0) + 1;
                            parc.extend;

                      ------- Task 37101 Contribuição previdencia ....
                        IF WS_EXISTE_RETROATIVO_AGENDADO ='N'

                        THEN

                          IF  COD_BENEFICIO_ASSOCIADO       IS NULL        THEN
                                 FOR  INDEX_BEN_RETRO      IN 1 .. vfolha.count LOOP
                                   COD_BENEFICIO_ASSOCIADO := v_cod_beneficio( INDEX_BEN_RETRO );
                                     --- Procura Beneficio a receber lançaemento do
                                    --- Beneficio não programado
                                       WS_EXISTE_BENEFICIO_ASSOCIADO :='N';
                                       BEGIN
                                         SELECT CBEN.COD_BENEFICIO
                                           INTO RET_COD_BENEFICIO
                                           FROM TB_CASOS_RET_FOLHA     CFOL,
                                                TB_CONCESSAO_BENEFICIO CBEN
                                          WHERE CFOL.COD_INS = PAR_COD_INS
                                            AND CBEN.COD_INS = CFOL.COD_INS
                                            AND CBEN.COD_BENEFICIO       = COD_BENEFICIO_ASSOCIADO
                                            AND CFOL.COD_IDE_CLI         = ANT_IDE_CLI
                                            AND CFOL.DAT_PERIODO_COMP    = PAR_PER_PRO
                                            AND CFOL.NUM_MATRICULA       = CBEN.NUM_MATRICULA
                                            AND NVL(CFOL.FLG_STATUS,'V') ='V'
                                            ----- Tiket Complemento de contrinbuição previdenciaria 49431 ---
                                           AND
                                           NOT  EXISTS  (
                                               SELECT 1 FROM TB_HFOLHA FOL
                                              WHERE
                                                      FOL.COD_INS       =  PAR_COD_INS              AND
                                                      FOL.COD_BENEFICIO =  COD_BENEFICIO_ASSOCIADO  AND
                                                      FOL.COD_IDE_CLI   =  ANT_IDE_CLI              AND
                                                      FOL.PER_PROCESSO  =  PAR_PER_PRO         AND
                                                      FOL.TIP_PROCESSO  =  PAR_TIP_PRO         AND
                                                      FOL.SEQ_PAGAMENTO =  PAR_SEQ_PAGAMENTO   );                                            

                                            RET_COD_BENEFICIO             :=COD_BENEFICIO_ASSOCIADO;
                                            WS_EXISTE_BENEFICIO_ASSOCIADO :='S';
                                            EXIT;
                                        EXCEPTION
                                         WHEN OTHERS THEN   WS_EXISTE_BENEFICIO_ASSOCIADO :='N';
                                        END;

                                   END LOOP;
                             ELSE
                               RET_COD_BENEFICIO         :=COD_BENEFICIO_ASSOCIADO;
                             END IF;

                            ----- OBTEM RUBRICA DE CONTRIBUIÇÃO ACUMULATIVA ---
                             IF  RET_RUBRICA_CONTRIB_TIPO ='N' THEN
                                SP_OBTEM_RUBRICA_EVENTO_ESPEC('M',
                                  RET_COD_ENTIDADE,
                                  'D',
                                  VI_RUBRICA_PREV ,
                                  VI_SEQ_VIG_PREV);
                                   IF    VI_RUBRICA_PREV IS NULL THEN
                                    VI_RUBRICA_PREV:=7009500;
                                  END IF;
                              ELSE
                                 SP_OBTEM_RUBRICA_EVENTO_ESPEC('9',
                                  RET_COD_ENTIDADE,
                                  'D',
                                  VI_RUBRICA_PREV ,
                                  VI_SEQ_VIG_PREV);
                                  IF    VI_RUBRICA_PREV IS NULL THEN
                                    VI_RUBRICA_PREV:=7009600;
                                  END IF;
                              END IF;
                             ---------------------------------------------------
                               COD_FCRUBRICA_ASSOCIADA:= RET_COD_FCRUBRICA;
                               RET_COD_FCRUBRICA:=TRUNC(VI_RUBRICA_PREV/100);
                           ELSE
                             COD_FCRUBRICA_ASSOCIADA:=NULL;
                            END IF;



                             IF RET_VAL_RUBRICA >0 THEN
                                   RET_COD_FCRUBRICA       := RET_COD_FCRUBRICA||'51';
                                   IF  COD_FCRUBRICA_ASSOCIADA IS NOT NULL   THEN
                                       COD_FCRUBRICA_ASSOCIADA := COD_FCRUBRICA_ASSOCIADA||'51';
                                   END IF;
                                   RET_FLG_NATUREZA  :='C';
                             ELSE
                                   RET_COD_FCRUBRICA       := RET_COD_FCRUBRICA||'50';

                                   IF  COD_FCRUBRICA_ASSOCIADA IS NOT NULL  THEN
                                       COD_FCRUBRICA_ASSOCIADA := COD_FCRUBRICA_ASSOCIADA||'50';
                                   END IF;
                                   RET_VAL_RUBRICA   := ABS(RET_VAL_RUBRICA) ;
                                   RET_FLG_NATUREZA  :='D';
                             END IF;

                             IF RET_RET_SUP <> 'S' THEN
                                IF vi_suplementar THEN
                                  SUPL_OK := 'N';
                                END IF;
                             ELSE
                                SUPL_OK := 'S';
                             END IF;

                             BEGIN

                                 IF RET_FLG_NATUREZA = 'C' THEN
                                      VAL_PARC_CRED := VAL_PARC_CRED + RET_val_rubrica;
                                 ELSE
                                      VAL_PARC_DEBIT := VAL_PARC_DEBIT + RET_val_rubrica;
                                 END IF;

                                 IF WS_EXISTE_RETROATIVO_AGENDADO ='S' OR
                                    WS_EXISTE_BENEFICIO_ASSOCIADO ='S'
                                 THEN
                                      rdcn.cod_ins            := RET_COD_INS;
                                      rdcn.tip_processo       := PAR_TIP_PRO;
                                      rdcn.per_processo       := PAR_PER_PRO;
                                      rdcn.cod_ide_cli        := RET_COD_IDE_CLI;
                                      rdcn.cod_beneficio      := RET_COD_BENEFICIO;
                                      rdcn.seq_pagamento      := vi_seq_pagamento;
                                      rdcn.seq_detalhe        := idx_seq_detalhe;
                                      rdcn.cod_fcrubrica      := RET_COD_FCRUBRICA;
                                      rdcn.seq_vig            := RET_SEQ_VIG;
                                      rdcn.val_rubrica        := RET_VAL_RUBRICA;
                                      rdcn.val_rubrica_cheio  := RET_VAL_RUBRICA;
                                      rdcn.num_quota          := RET_NUM_QUOTA;
                                      rdcn.flg_natureza       := RET_flg_natureza;
                                      rdcn.tot_quota          := RET_tot_quota;
                                      rdcn.dat_ini_ref        := nvl(RET_DAT_INI_REF, PER_PRO_RET);
                                      rdcn.dat_fim_ref        := RET_dat_fim_ref;
                                      rdcn.num_ord_jud        := RET_NUM_ORD_JUD;
                                      rdcn.cod_ide_cli_ben    := RET_COD_IDE_CLI_BEN;
                                      rdcn.dat_ing            := sysdate;
                                      rdcn.dat_ult_atu        := sysdate;
                                      rdcn.nom_usu_ult_atu    := RET_nom_usu_ult_atu;
                                      rdcn.nom_pro_ult_atu    := 'FOLHA CALCULADA';
                                      rdcn.des_informacao     := ret_informacao;
                                      rdcn.des_complemento    := ret_complemento;
                                      rdcn.cod_entidade       := ret_cod_entidade;
                                      rdcn.tip_evento_especial:= RET_TIP_EVENTO_ESPECIAL;
                                      rdcn.tip_processo_real  := RET_TIP_PROCESSO;
                                       ------- Task 37101 Contribuição previdencia ....
                                      IF  WS_EXISTE_RETROATIVO_AGENDADO='N' THEN
                                       rdcn.flg_rubrica_contrib   := RET_RUBRICA_CONTRIB;
                                       rdcn.flg_existe_retroativo := WS_EXISTE_RETROATIVO_AGENDADO;
                                       rdcn.cod_beneficio_assoc   := COD_BENEFICIO_ORIGINAL;
                                       rdcn.cod_fcrubrica_assoc   := COD_FCRUBRICA_ASSOCIADA ;
                                          IF  RET_RUBRICA_CONTRIB_TIPO ='N' THEN
                                            rdcn.tip_evento_especial:='M' ;
                                          ELSE
                                            rdcn.tip_evento_especial:='9' ;
                                          END IF;
                                      ELSE
                                        rdcn.flg_rubrica_contrib   := NULL;
                                        rdcn.flg_existe_retroativo := NULL;
                                        rdcn.cod_beneficio_assoc   := NULL;
                                        rdcn.cod_fcrubrica_assoc   := NULL;
                                      END IF;
                                      BEGIN
                                       parc(idx_parcela)          := rdcn;
                                       EXCEPTION
                                         WHEN OTHERS THEN
                                                p_sub_proc_erro := 'SP_GRAVA_RETROATIVO';
                                                p_coderro       := SQLCODE;
                                                P_MSGERRO       := 'Erro na inclusao rotroativo';
                                                INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                                                      p_coderro,
                                                                      'Calcula Folha',
                                                                      sysdate,
                                                                      p_msgerro,
                                                                      p_sub_proc_erro,
                                                                      RDCN.cod_ide_cli,
                                                                      RDCN.cod_fcrubrica);
                                                VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
                                      END;
                                 END IF;
                              END;
                     END IF;
                  END;
                  BEGIN
                     FETCH CUR_COMPBEN_RET
                      INTO RET_COD_INS, RET_TIP_PROCESSO, RET_PER_PROCESSO, RET_COD_IDE_CLI, RET_COD_BENEFICIO, RET_SEQ_PAGAMENTO, RET_COD_FCRUBRICA, RET_SEQ_VIG, RET_VAL_RUBRICA, RET_NUM_QUOTA, RET_FLG_NATUREZA, RET_TOT_QUOTA, RET_DAT_INI_REF, RET_DAT_FIM_REF, RET_COD_IDE_CLI_BEN, RET_NUM_ORD_JUD, RET_DAT_ING, RET_DAT_ULT_ATU, RET_NOM_USU_ULT_ATU, RET_NOM_PRO_ULT_ATU, RET_RET_SUP, RET_INFORMACAO, RET_COMPLEMENTO
                         ,ret_cod_entidade,ret_TIP_EVENTO_ESPECIAL,
                      ------- Task 37101 Contribuição previdencia ....
                         RET_RUBRICA_CONTRIB, RET_RUBRICA_CONTRIB_TIPO;
                    EXCEPTION
                    WHEN OTHERS THEN
                                                p_sub_proc_erro := 'SP_GRAVA_RETROATIVO';
                                                p_coderro       := SQLCODE;
                                                P_MSGERRO       := 'Erro na Leitura rotroativo';
                                                INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                                                      p_coderro,
                                                                      'Calcula Folha',
                                                                      sysdate,
                                                                      p_msgerro,
                                                                      p_sub_proc_erro,
                                                                      RDCN.cod_ide_cli,
                                                                      RDCN.cod_fcrubrica);
                                                VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
                   END;
               END LOOP;
                close CUR_COMPBEN_RET;
         END LOOP;
                --    - VAL_PARC_DEBIT obedecer de acordo com a quantidade na tb_casos_ret_folha
                --    - caso n?o esteja cadastrado utilizar o default das faixas
                IF nvezes_credito = 0 THEN
                  IF (VAL_PARC_CRED) > 5000 AND (VAL_PARC_CRED) <= 10000 THEN
                    NVEZES       := 1; -- ERA 2
                    V_DUAS_VEZES := TRUE;
                  ELSIF (VAL_PARC_CRED) > 10000 AND (VAL_PARC_CRED) <= 20000 THEN
                    NVEZES       := 1; -- ERA 3
                    V_DUAS_VEZES := TRUE;
                  ELSIF (VAL_PARC_CRED) > 20000 AND (VAL_PARC_CRED) <= 30000 THEN
                    NVEZES       := 1; -- ERA 4
                    V_DUAS_VEZES := TRUE;
                  ELSIF (VAL_PARC_CRED) > 30000 AND (VAL_PARC_CRED) <= 500000 THEN
                    NVEZES       := 1; -- ERA 5
                    V_DUAS_VEZES := TRUE;
                  ELSIF (VAL_PARC_CRED) > 500000 THEN
                    V_DUAS_VEZES := null;
                    NVEZES       := 1; -- ERA 0
                    FOR I IN 1 .. PARC.COUNT LOOP

                      RDCN := NULL;
                      RDCN := PARC(I);

                      IF RDCN.val_rubrica > 0 THEN

                        BEGIN
                          INSERT /*+ append */
                          INTO TB_VALOR_ACIMA_RET
                          VALUES
                            (RDCN.cod_ins,
                             RDCN.tip_processo,
                             PAR_PER_REAL,
                             RDCN.cod_ide_cli,
                             RDCN.cod_beneficio,
                             RDCN.seq_pagamento,
                             RDCN.cod_fcrubrica,
                             RDCN.seq_vig,
                             trunc(RDCN.val_rubrica, 2),
                             RDCN.num_quota,
                             RDCN.flg_natureza,
                             RDCN.tot_quota,
                             RDCN.dat_ini_ref,
                             RDCN.dat_fim_ref,
                             RDCN.cod_ide_cli_ben,
                             RDCN.num_ord_jud,
                             RDCN.dat_ing,
                             RDCN.dat_ult_atu,
                             RDCN.nom_usu_ult_atu,
                             RDCN.nom_pro_ult_atu,
                             RDCN.seq_detalhe,
                             RDCN.des_informacao,
                             RDCN.des_complemento,
                             'N',
                             'N',
                             PAR_PER_REAL);

                        EXCEPTION
                          WHEN OTHERS THEN
                            p_sub_proc_erro := 'SP_GRAVA_VALOR_ACIMA';
                            p_coderro       := SQLCODE;
                            P_MSGERRO       := 'Erro na inclusao da tabela com valor acima no retroativo';
                            INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                                  p_coderro,
                                                  'Calcula Folha',
                                                  sysdate,
                                                  p_msgerro,
                                                  p_sub_proc_erro,
                                                  RDCN.cod_ide_cli,
                                                  RDCN.cod_fcrubrica);
                            VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
                        END;

                        PARC(I).val_rubrica := 0;

                      END IF;
                    END LOOP;
                    return;
                  ELSE
                    V_DUAS_VEZES := FALSE;
                    NVEZES       := 1;
                  END IF;
                ELSIF nvezes_credito = 1 THEN
                  V_DUAS_VEZES := FALSE;
                  NVEZES       := nvezes_credito;
                ELSE
                  V_DUAS_VEZES := TRUE;
                  NVEZES       := nvezes_credito;
                END IF;

                -- tb_valor_acima_ret

                FOR I IN 1 .. PARC.COUNT LOOP

                  IF parc(i).flg_natureza = 'C' THEN

                    IF parc(i).VAL_RUBRICA > 0 THEN
                      --x.VAL_RUBRICA>0 then
                      tdcn.extend;
                      idx_caln        := nvl(idx_caln, 0) + 1;
                      idx_seq_detalhe := nvl(idx_seq_detalhe, 0) + 1;
                      val_parc        := parc(i).VAL_RUBRICA;
                      FOR J IN 1 .. NVEZES LOOP

                        IF V_DUAS_VEZES THEN
                          parc(i).VAL_RUBRICA := (val_parc / NVEZES);
                          parc(i).tot_quota := NVEZES;
                          IF J > 1 THEN
                            dat_aux := ADD_MONTHS(PAR_PER_PRO, (J - 1));
                            parc(i).PER_PROCESSO := ADD_MONTHS(PAR_PER_PRO, (J - 1));
                            idx_caln := nvl(idx_caln, 0) + 1;
                            idx_seq_detalhe := idx_seq_detalhe + 1;
                            tdcn.extend;
                            parc(i).seq_detalhe := idx_seq_detalhe;
                            IF NVEZES > 1 THEN
                              parc(i).des_complemento := 'Parc ' || j || '/' || NVEZES;
                            END IF;
                            parc(i).num_quota := J;
                          ELSE
                            parc(i).num_quota := 1;
                            IF NVEZES > 1 THEN
                              parc(i).des_complemento := 'Parc ' || j || '/' || NVEZES;
                            END IF;
                          END IF;
                          tdcn(idx_caln) := parc(i);
                        ELSE
                          parc(i).num_quota := 1;
                          parc(i).tot_quota := 1;
                          parc(i).seq_detalhe := idx_caln;
                          tdcn(idx_caln) := parc(i);
                          parc(i).des_complemento := 'Ret.';
                          exit;
                        END IF;
                      END LOOP;
                    END IF;
                  END IF;
                END LOOP;

                -- Parcelamento para debito

                NVEZES :=1;-- nvezes_debito;

                FOR I IN 1 .. PARC.COUNT LOOP

                  IF PARC(i).COD_FCRUBRICA NOT IN (65100, 65151) THEN
                    -- n?o parcelar desconto de FUNPREV

                    IF parc(i).flg_natureza = 'D' THEN

                      IF parc(i).VAL_RUBRICA > 0 THEN
                        --x.VAL_RUBRICA>0 then
                        tdcn.extend;
                        idx_caln := nvl(idx_caln, 0) + 1;
                        idx_seq_detalhe := idx_seq_detalhe + 1;
                        val_parc := parc(i).VAL_RUBRICA;
                        parc(i).VAL_RUBRICA := (val_parc / NVEZES);
                        parc(i).tot_quota := NVEZES;

                        FOR J IN 1 .. NVEZES LOOP

                          IF J > 1 THEN
                            dat_aux := ADD_MONTHS(PAR_PER_PRO, (J - 1));
                            parc(i).PER_PROCESSO := ADD_MONTHS(PAR_PER_PRO, (J - 1));
                            idx_caln := nvl(idx_caln, 0) + 1;
                            idx_seq_detalhe := idx_seq_detalhe + 1;
                            tdcn.extend;
                            parc(i).seq_detalhe := idx_seq_detalhe;
                            IF nvezes > 1 THEN
                              parc(i).des_complemento := 'Parc ' || j || '/' || NVEZES;
                            END IF;
                            parc(i).num_quota := J;
                          ELSE
                            parc(i).num_quota := 1;
                            parc(i).seq_detalhe := idx_seq_detalhe;
                            IF NVEZES > 1 THEN
                              parc(i).des_complemento := 'Parc ' || j || '/' || NVEZES;
                            END IF;
                          END IF;
                          tdcn(idx_caln) := parc(i);
                        END LOOP;
                      END IF;
                    END IF;
                  ELSE
                    tdcn.extend;
                    idx_caln := nvl(idx_caln, 0) + 1;
                    idx_seq_detalhe := idx_seq_detalhe + 1;
                    parc(i).seq_detalhe := idx_seq_detalhe;
                    tdcn(idx_caln) := parc(i);

                  END IF;
                END LOOP;
      exception
        when others then
          p_sub_proc_erro := 'SP_OBTEM_RETROATIVO';
          p_coderro       := SQLCODE;
          P_MSGERRO       := SQLERRM ||' : ERRO AO OBTER  RETROATIVO';
          INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                p_coderro,
                                'Calcula Folha',
                                sysdate,
                                p_msgerro,
                                p_sub_proc_erro,
                                ANT_IDE_CLI,
                                NULL);

       end;
             EXCEPTION
                 WHEN OTHERS THEN
                        p_sub_proc_erro := 'SP_GRAVA_RETROATIVO';
                        p_coderro       := SQLCODE;
                        P_MSGERRO       := 'Erro na inclusao rotroativo';
                        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                              p_coderro,
                                              'Calcula Folha',
                                              sysdate,
                                              p_msgerro,
                                              p_sub_proc_erro,
                                              RDCN.cod_ide_cli,
                                              RDCN.cod_fcrubrica);
        END;

  END SP_INS_DETCAL_RET;
  ----------------------------------------------------------------------------------
  PROCEDURE SP_INS_NPAGO_RET AS

    TOT_VAL_RUB_RET     number;
    PER_PRO_RET         date;
    CUR_COMPBEN_RET     curform;
    PCOD_IDE_CLI        VARCHAR2(20);
    RET_COD_INS         NUMBER;
    RET_TIP_PROCESSO    VARCHAR2(1);
    RET_PER_PROCESSO    DATE;
    RET_COD_IDE_CLI     VARCHAR2(20);
    RET_COD_BENEFICIO   NUMBER;
    RET_SEQ_PAGAMENTO   NUMBER;
    RET_COD_FCRUBRICA   NUMBER;
    RET_SEQ_VIG         NUMBER;
    RET_VAL_RUBRICA     NUMBER;
    RET_NUM_QUOTA       NUMBER;
    RET_FLG_NATUREZA    VARCHAR2(1);
    RET_TOT_QUOTA       NUMBER;
    RET_DAT_INI_REF     DATE;
    RET_DAT_FIM_REF     DATE;
    RET_COD_IDE_CLI_BEN VARCHAR2(20);
    RET_NUM_ORD_JUD     NUMBER;
    RET_DAT_ING         DATE;
    RET_DAT_ULT_ATU     DATE;
    RET_NOM_USU_ULT_ATU VARCHAR2(20);
    RET_NOM_PRO_ULT_ATU VARCHAR2(20);
    RET_INFORMACAO      VARCHAR(10);
    RET_COMPLEMENTO     VARCHAR(15);

    VAL_PARC_CRED  NUMBER(18, 4);
    VAL_PARC_DEBIT NUMBER(18, 4);

    V_DUAS_VEZES BOOLEAN;

    dat_aux date;

    rec_parc tb_det_calculado_parc%rowtype;

  BEGIN
    /*
       SELECT max(per_processo)
         INTO PER_PRO_RET
         FROM tb_det_ret
        WHERE --cod_ide_cli=BEN_IDE_CLI
              cod_ins=PAR_COD_INS
          AND per_processo=PAR_PER_PRO;
    */

    --select cod_ide_cli into PCOD_IDE_CLI FROM TB_PESSOA_FISICA WHERE NUM_CPF=BEN_NUM_CPF;

    OPEN CUR_COMPBEN_RET FOR
    /*for x in(    */
      SELECT cod_ins,
             tip_processo,
             per_processo,
             cod_ide_cli,
             cod_beneficio,
             seq_pagamento,
             cod_fcrubrica,
             seq_vig,
             val_rubrica,
             num_quota,
             flg_natureza,
             tot_quota,
             dat_ini_ref,
             dat_fim_ref,
             cod_ide_cli_ben,
             num_ord_jud,
             dat_ing,
             dat_ult_atu,
             nom_usu_ult_atu,
             nom_pro_ult_atu
        INTO RET_COD_INS,
             RET_TIP_PROCESSO,
             RET_PER_PROCESSO,
             RET_COD_IDE_CLI,
             RET_COD_BENEFICIO,
             RET_SEQ_PAGAMENTO,
             RET_COD_FCRUBRICA,
             RET_SEQ_VIG,
             RET_VAL_RUBRICA,
             RET_NUM_QUOTA,
             RET_FLG_NATUREZA,
             RET_TOT_QUOTA,
             RET_DAT_INI_REF,
             RET_DAT_FIM_REF,
             RET_COD_IDE_CLI_BEN,
             RET_NUM_ORD_JUD,
             RET_DAT_ING,
             RET_DAT_ULT_ATU,
             RET_NOM_USU_ULT_ATU,
             RET_NOM_PRO_ULT_ATU
        FROM tb_valor_npago_ret
       WHERE cod_ins = PAR_COD_INS
         AND cod_ide_cli = ANT_IDE_CLI
         AND per_processo = PAR_PER_PRO
         AND dat_ini_ref < PAR_PER_PRO
         AND tip_processo = 'R'
         AND ind_processo = 'S'
         AND ind_inclui_folha = 'S'
         AND cod_beneficio > 0;
    --LOOP
    FETCH CUR_COMPBEN_RET
      INTO RET_COD_INS, RET_TIP_PROCESSO, RET_PER_PROCESSO, RET_COD_IDE_CLI, RET_COD_BENEFICIO, RET_SEQ_PAGAMENTO, RET_COD_FCRUBRICA, RET_SEQ_VIG, RET_VAL_RUBRICA, RET_NUM_QUOTA, RET_FLG_NATUREZA, RET_TOT_QUOTA, RET_DAT_INI_REF, RET_DAT_FIM_REF, RET_COD_IDE_CLI_BEN, RET_NUM_ORD_JUD, RET_DAT_ING, RET_DAT_ULT_ATU, RET_NOM_USU_ULT_ATU, RET_NOM_PRO_ULT_ATU;

    WHILE CUR_COMPBEN_RET%FOUND LOOP
      BEGIN
        IF RET_VAL_RUBRICA > 0 THEN
          --x.VAL_RUBRICA>0 then
          tdcn.extend;
          idx_caln        := nvl(idx_caln, 0) + 1;
          idx_seq_detalhe := idx_seq_detalhe + 1;

          rdcn.cod_ins := RET_COD_INS;
          rdcn.tip_processo := case when RET_TIP_PROCESSO ='R' then
                               'N' else RET_TIP_PROCESSO end;
          rdcn.per_processo      := PAR_PER_PRO;
          rdcn.cod_ide_cli       := RET_COD_IDE_CLI;
          rdcn.cod_beneficio     := RET_COD_BENEFICIO;
          rdcn.seq_pagamento     := vi_seq_pagamento;
          rdcn.seq_detalhe       := idx_seq_detalhe;
          rdcn.cod_fcrubrica     := RET_COD_FCRUBRICA;
          rdcn.seq_vig           := RET_SEQ_VIG;
          rdcn.val_rubrica       := RET_VAL_RUBRICA;
          rdcn.val_rubrica_cheio := RET_VAL_RUBRICA;
          rdcn.num_quota         := RET_NUM_QUOTA;
          rdcn.cod_ide_cli_ben   := RET_COD_IDE_CLI_BEN;
          rdcn.flg_natureza      := RET_flg_natureza;
          rdcn.tot_quota         := RET_tot_quota;
          rdcn.dat_ini_ref       := nvl(RET_DAT_INI_REF, PER_PRO_RET);
          rdcn.dat_fim_ref       := RET_dat_fim_ref;
          rdcn.num_ord_jud       := RET_NUM_ORD_JUD;
          rdcn.dat_ing           := sysdate;
          rdcn.dat_ult_atu       := sysdate;
          rdcn.nom_usu_ult_atu   := RET_nom_usu_ult_atu;
          rdcn.nom_pro_ult_atu   := 'FOLHA CALCULADA';
          tdcn(idx_caln)         := rdcn;
        END IF;
      END;

      FETCH CUR_COMPBEN_RET
        INTO RET_COD_INS, RET_TIP_PROCESSO, RET_PER_PROCESSO, RET_COD_IDE_CLI, RET_COD_BENEFICIO, RET_SEQ_PAGAMENTO, RET_COD_FCRUBRICA, RET_SEQ_VIG, RET_VAL_RUBRICA, RET_NUM_QUOTA, RET_FLG_NATUREZA, RET_TOT_QUOTA, RET_DAT_INI_REF, RET_DAT_FIM_REF, RET_COD_IDE_CLI_BEN, RET_NUM_ORD_JUD, RET_DAT_ING, RET_DAT_ULT_ATU, RET_NOM_USU_ULT_ATU, RET_NOM_PRO_ULT_ATU;
    END LOOP;
    close CUR_COMPBEN_RET;

  END SP_INS_NPAGO_RET;
  ----------------------------------------------------------------------------------
  PROCEDURE SP_INS_DETCAL_PARC AS

    TOT_VAL_RUB_RET     number;
    PER_PRO_RET         date;
    CUR_COMPBEN_RET     curform;
    PCOD_IDE_CLI        VARCHAR2(20);
    RET_COD_INS         NUMBER;
    RET_TIP_PROCESSO    VARCHAR2(1);
    RET_PER_PROCESSO    DATE;
    RET_COD_IDE_CLI     VARCHAR2(20);
    RET_COD_BENEFICIO   NUMBER;
    RET_SEQ_PAGAMENTO   NUMBER;
    RET_COD_FCRUBRICA   NUMBER;
    RET_SEQ_VIG         NUMBER;
    RET_VAL_RUBRICA     NUMBER;
    RET_NUM_QUOTA       NUMBER;
    RET_FLG_NATUREZA    VARCHAR2(1);
    RET_TOT_QUOTA       NUMBER;
    RET_DAT_INI_REF     DATE;
    RET_DAT_FIM_REF     DATE;
    RET_COD_IDE_CLI_BEN VARCHAR2(20);
    RET_NUM_ORD_JUD     NUMBER;
    RET_DAT_ING         DATE;
    RET_DAT_ULT_ATU     DATE;
    RET_NOM_USU_ULT_ATU VARCHAR2(20);
    RET_NOM_PRO_ULT_ATU VARCHAR2(20);
    RET_DES_COMPLEMENTO VARCHAR2(10);

    VAL_PARC_CRED  NUMBER(18, 4);
    VAL_PARC_DEBIT NUMBER(18, 4);

    V_DUAS_VEZES BOOLEAN;

    dat_aux date;

    rec_parc tb_det_calculado_parc%rowtype;

    v_valor_bruto          number(18, 4) := 0;
    v_valor_total_desconto number(18, 4) := 0;
    v_valor_benef          number(18, 4) := 0;

  BEGIN

    OPEN CUR_COMPBEN_RET FOR
    /*for x in(    */
      SELECT cod_ins,
             tip_processo,
             per_processo,
             cod_ide_cli,
             cod_beneficio,
             seq_pagamento,
             cod_fcrubrica,
             seq_vig,
             val_rubrica,
             num_quota,
             flg_natureza,
             tot_quota,
             dat_ini_ref,
             dat_fim_ref,
             cod_ide_cli_ben,
             num_ord_jud,
             dat_ing,
             dat_ult_atu,
             nom_usu_ult_atu,
             nom_pro_ult_atu,
             des_complemento
        INTO RET_COD_INS,
             RET_TIP_PROCESSO,
             RET_PER_PROCESSO,
             RET_COD_IDE_CLI,
             RET_COD_BENEFICIO,
             RET_SEQ_PAGAMENTO,
             RET_COD_FCRUBRICA,
             RET_SEQ_VIG,
             RET_VAL_RUBRICA,
             RET_NUM_QUOTA,
             RET_FLG_NATUREZA,
             RET_TOT_QUOTA,
             RET_DAT_INI_REF,
             RET_DAT_FIM_REF,
             RET_COD_IDE_CLI_BEN,
             RET_NUM_ORD_JUD,
             RET_DAT_ING,
             RET_DAT_ULT_ATU,
             RET_NOM_USU_ULT_ATU,
             RET_NOM_PRO_ULT_ATU,
             RET_DES_COMPLEMENTO
        FROM tb_det_calculado_parc
       WHERE cod_ins = PAR_COD_INS
         AND cod_ide_cli = ANT_IDE_CLI
            --             AND   per_processo=PER_PRO_RET
         AND per_processo = PAR_PER_PRO
         AND (tip_processo = 'N' OR tip_processo = 'S')
         AND cod_beneficio > 0;
    --LOOP
    FETCH CUR_COMPBEN_RET
      INTO RET_COD_INS, RET_TIP_PROCESSO, RET_PER_PROCESSO, RET_COD_IDE_CLI, RET_COD_BENEFICIO, RET_SEQ_PAGAMENTO, RET_COD_FCRUBRICA, RET_SEQ_VIG, RET_VAL_RUBRICA, RET_NUM_QUOTA, RET_FLG_NATUREZA, RET_TOT_QUOTA, RET_DAT_INI_REF, RET_DAT_FIM_REF, RET_COD_IDE_CLI_BEN, RET_NUM_ORD_JUD, RET_DAT_ING, RET_DAT_ULT_ATU, RET_NOM_USU_ULT_ATU, RET_NOM_PRO_ULT_ATU, RET_DES_COMPLEMENTO;

    -- Parcelamento -- MVL

    PARCELA := NULL;
    parc.delete;
    idx_parcela    := 0;
    VAL_PARC_CRED  := 0;
    VAL_PARC_DEBIT := 0;

    -- MVL

    WHILE CUR_COMPBEN_RET%FOUND LOOP
      BEGIN

        idx_parcela := idx_parcela + 1;

        parc.extend;

        idx_seq_detalhe := idx_seq_detalhe + 1;

        rdcn.cod_ins := RET_COD_INS;
        rdcn.tip_processo := PAR_TIP_PRO;
        rdcn.per_processo := PAR_PER_PRO;
        rdcn.cod_ide_cli := RET_COD_IDE_CLI;
        rdcn.cod_beneficio := RET_COD_BENEFICIO;
        rdcn.seq_pagamento := vi_seq_pagamento;
        rdcn.seq_detalhe := idx_seq_detalhe;
        rdcn.cod_fcrubrica := RET_COD_FCRUBRICA;
        rdcn.seq_vig := RET_SEQ_VIG;
        rdcn.val_rubrica := RET_VAL_RUBRICA;
        rdcn.val_rubrica_cheio := RET_VAL_RUBRICA;
        rdcn.num_quota := RET_NUM_QUOTA;
        rdcn.flg_natureza := RET_flg_natureza;
        rdcn.tot_quota := RET_tot_quota;
        rdcn.dat_ini_ref := nvl(RET_DAT_INI_REF, PER_PRO_RET);
        rdcn.dat_fim_ref := RET_dat_fim_ref;
        rdcn.num_ord_jud := RET_NUM_ORD_JUD;
        rdcn.dat_ing := sysdate;
        rdcn.dat_ult_atu := sysdate;
        rdcn.nom_usu_ult_atu := RET_nom_usu_ult_atu;
        rdcn.nom_pro_ult_atu := 'FOLHA CALCULADA';
        rdcn.des_complemento := RET_DES_COMPLEMENTO;
        rdcn.cod_ide_cli_ben := RET_COD_IDE_CLI_BEN;
        parc(idx_parcela) := rdcn;

      END;
      FETCH CUR_COMPBEN_RET
        INTO RET_COD_INS, RET_TIP_PROCESSO, RET_PER_PROCESSO, RET_COD_IDE_CLI, RET_COD_BENEFICIO, RET_SEQ_PAGAMENTO, RET_COD_FCRUBRICA, RET_SEQ_VIG, RET_VAL_RUBRICA, RET_NUM_QUOTA, RET_FLG_NATUREZA, RET_TOT_QUOTA, RET_DAT_INI_REF, RET_DAT_FIM_REF, RET_COD_IDE_CLI_BEN, RET_NUM_ORD_JUD, RET_DAT_ING, RET_DAT_ULT_ATU, RET_NOM_USU_ULT_ATU, RET_NOM_PRO_ULT_ATU, RET_DES_COMPLEMENTO;
    END LOOP;
    close CUR_COMPBEN_RET;

    FOR I IN 1 .. PARC.COUNT LOOP

      tdcn.extend;
      idx_caln := nvl(idx_caln, 0) + 1;
      tdcn(idx_caln) := parc(i);

    END LOOP;


  END SP_INS_DETCAL_PARC;
  ----------------------------------------------------------------------------------
  PROCEDURE SP_INS_DETCAL_ACIMA AS

    TOT_VAL_RUB_RET     number;
    PER_PRO_RET         date;
    CUR_COMPBEN_RET     curform;
    PCOD_IDE_CLI        VARCHAR2(20);
    RET_COD_INS         NUMBER;
    RET_TIP_PROCESSO    VARCHAR2(1);
    RET_PER_PROCESSO    DATE;
    RET_COD_IDE_CLI     VARCHAR2(20);
    RET_COD_BENEFICIO   NUMBER;
    RET_SEQ_PAGAMENTO   NUMBER;
    RET_COD_FCRUBRICA   NUMBER;
    RET_SEQ_VIG         NUMBER;
    RET_VAL_RUBRICA     NUMBER;
    RET_NUM_QUOTA       NUMBER;
    RET_FLG_NATUREZA    VARCHAR2(1);
    RET_TOT_QUOTA       NUMBER;
    RET_DAT_INI_REF     DATE;
    RET_DAT_FIM_REF     DATE;
    RET_COD_IDE_CLI_BEN VARCHAR2(20);
    RET_NUM_ORD_JUD     NUMBER;
    RET_DAT_ING         DATE;
    RET_DAT_ULT_ATU     DATE;
    RET_NOM_USU_ULT_ATU VARCHAR2(20);
    RET_NOM_PRO_ULT_ATU VARCHAR2(20);

    VAL_PARC_CRED  NUMBER(18, 4);
    VAL_PARC_DEBIT NUMBER(18, 4);

    V_DUAS_VEZES BOOLEAN;

    dat_aux date;

    rec_parc tb_det_calculado_parc%rowtype;

  BEGIN

    OPEN CUR_COMPBEN_RET FOR
    /*for x in(    */
      SELECT cod_ins,
             tip_processo,
             per_processo,
             cod_ide_cli,
             cod_beneficio,
             seq_pagamento,
             cod_fcrubrica,
             seq_vig,
             val_rubrica,
             num_quota,
             flg_natureza,
             tot_quota,
             dat_ini_ref,
             dat_fim_ref,
             cod_ide_cli_ben,
             num_ord_jud,
             dat_ing,
             dat_ult_atu,
             nom_usu_ult_atu,
             nom_pro_ult_atu
        INTO RET_COD_INS,
             RET_TIP_PROCESSO,
             RET_PER_PROCESSO,
             RET_COD_IDE_CLI,
             RET_COD_BENEFICIO,
             RET_SEQ_PAGAMENTO,
             RET_COD_FCRUBRICA,
             RET_SEQ_VIG,
             RET_VAL_RUBRICA,
             RET_NUM_QUOTA,
             RET_FLG_NATUREZA,
             RET_TOT_QUOTA,
             RET_DAT_INI_REF,
             RET_DAT_FIM_REF,
             RET_COD_IDE_CLI_BEN,
             RET_NUM_ORD_JUD,
             RET_DAT_ING,
             RET_DAT_ULT_ATU,
             RET_NOM_USU_ULT_ATU,
             RET_NOM_PRO_ULT_ATU
        FROM tb_valor_acima_ret
       WHERE cod_ins = PAR_COD_INS
         AND cod_ide_cli = ANT_IDE_CLI
            --             AND   per_processo=PER_PRO_RET
         AND per_processo = PAR_PER_PRO
         AND tip_processo = 'N'
         AND cod_beneficio > 0;
    --LOOP
    FETCH CUR_COMPBEN_RET
      INTO RET_COD_INS, RET_TIP_PROCESSO, RET_PER_PROCESSO, RET_COD_IDE_CLI, RET_COD_BENEFICIO, RET_SEQ_PAGAMENTO, RET_COD_FCRUBRICA, RET_SEQ_VIG, RET_VAL_RUBRICA, RET_NUM_QUOTA, RET_FLG_NATUREZA, RET_TOT_QUOTA, RET_DAT_INI_REF, RET_DAT_FIM_REF, RET_COD_IDE_CLI_BEN, RET_NUM_ORD_JUD, RET_DAT_ING, RET_DAT_ULT_ATU, RET_NOM_USU_ULT_ATU, RET_NOM_PRO_ULT_ATU;

    -- Parcelamento -- MVL

    PARCELA := NULL;
    parc.delete;
    idx_parcela    := 0;
    VAL_PARC_CRED  := 0;
    VAL_PARC_DEBIT := 0;

    -- MVL

    WHILE CUR_COMPBEN_RET%FOUND LOOP
      BEGIN

        idx_parcela     := idx_parcela + 1;
        idx_seq_detalhe := idx_seq_detalhe + 1;
        parc.extend;

        rdcn.cod_ins := RET_COD_INS;
        rdcn.tip_processo := PAR_TIP_PRO;
        rdcn.per_processo := PAR_PER_PRO;
        rdcn.cod_ide_cli := RET_COD_IDE_CLI;
        rdcn.cod_beneficio := RET_COD_BENEFICIO;
        rdcn.seq_pagamento := vi_seq_pagamento;
        rdcn.seq_detalhe := idx_seq_detalhe;
        rdcn.cod_fcrubrica := RET_COD_FCRUBRICA;
        rdcn.seq_vig := RET_SEQ_VIG;
        rdcn.val_rubrica := RET_VAL_RUBRICA;
        rdcn.val_rubrica_cheio := RET_VAL_RUBRICA;
        rdcn.num_quota := RET_NUM_QUOTA;
        rdcn.flg_natureza := RET_flg_natureza;
        rdcn.tot_quota := RET_tot_quota;
        rdcn.dat_ini_ref := nvl(RET_DAT_INI_REF, PER_PRO_RET);
        rdcn.dat_fim_ref := RET_dat_fim_ref;
        rdcn.num_ord_jud := RET_NUM_ORD_JUD;
        rdcn.dat_ing := sysdate;
        rdcn.dat_ult_atu := sysdate;
        rdcn.nom_usu_ult_atu := RET_nom_usu_ult_atu;
        rdcn.nom_pro_ult_atu := 'FOLHA CALCULADA';
        rdcn.cod_ide_cli_ben := RET_COD_IDE_CLI_BEN;
        parc(idx_parcela) := rdcn;

      END;
      FETCH CUR_COMPBEN_RET
        INTO RET_COD_INS, RET_TIP_PROCESSO, RET_PER_PROCESSO, RET_COD_IDE_CLI, RET_COD_BENEFICIO, RET_SEQ_PAGAMENTO, RET_COD_FCRUBRICA, RET_SEQ_VIG, RET_VAL_RUBRICA, RET_NUM_QUOTA, RET_FLG_NATUREZA, RET_TOT_QUOTA, RET_DAT_INI_REF, RET_DAT_FIM_REF, RET_COD_IDE_CLI_BEN, RET_NUM_ORD_JUD, RET_DAT_ING, RET_DAT_ULT_ATU, RET_NOM_USU_ULT_ATU, RET_NOM_PRO_ULT_ATU;
    END LOOP;
    close CUR_COMPBEN_RET;

    FOR I IN 1 .. PARC.COUNT LOOP

      tdcn.extend;
      idx_caln := nvl(idx_caln, 0) + 1;
      tdcn(idx_caln) := parc(i);

    END LOOP;

  END SP_INS_DETCAL_ACIMA;

  ----------------------------------------------------------------------------------
  PROCEDURE SP_GRAVA_MASTER_RET AS

    RFOL_TEMP          TB_FOLHA_RET_PROC%ROWTYPE;
    I                  NUMBER;
    VPER_PROCESSO_REAL DATE;
  BEGIN
    FOR I IN 1 .. VFOLHA.COUNT LOOP
      RFOL := VFOLHA(I);
      SELECT ADD_MONTHS(LAST_DAY(SYSDATE) + 1, -1)
        INTO VPER_PROCESSO_REAL
        FROM DUAL;
      BEGIN
        INSERT /*+ append */
        INTO TB_FOLHA_RET_PROC
          (cod_ins,
           tip_processo,
           per_processo,
           seq_pagamento,
           cod_ide_cli,
           cod_beneficio,
           cod_ide_cli_ben,
           PER_PROCESSO_REAL,
           ind_processo,
           VAL_SAL_BASE)

        VALUES
          (rfol.COD_INS,
           rfol.TIP_PROCESSO,
           par_per_real,
           rfol.SEQ_PAGAMENTO,
           rfol.COD_IDE_CLI,
           rfol.COD_BENEFICIO,
           rfol.cod_ide_cli_ben,
           rfol.PER_PROCESSO,
           'N',
           trunc(rfol.val_sal_base, 2));
      EXCEPTION
        WHEN OTHERS THEN
          p_sub_proc_erro := 'SP_GRAVA_MASTER_RET';
          p_coderro       := SQLCODE;
          P_MSGERRO       := 'Erro ao incluir no resumo do retroativo';
          INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                p_coderro,
                                'Calcula Folha',
                                sysdate,
                                p_msgerro,
                                p_sub_proc_erro,
                                BEN_IDE_CLI,
                                COM_COD_FCRUBRICA);
          VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
          --         RAISE ERRO;
      END;

    END LOOP;

  END SP_GRAVA_MASTER_RET;
  ----------------------------------------------------------------------------------
  PROCEDURE SP_GRAVA_DETALHE_RET AS

    RDCN                   TB_DET_CALCUlADO_ESTRUC%rowtype;
    RDCD                   TB_DET_CALCUlADO_ESTRUC%rowtype;
    RDCN_CON               TB_DET_CALCUlADO_ESTRUC%rowtype; -- conceito
    RUBRICA_ANT            NUMBER;
    COD_IDE_CLI_BEN_ANT    TB_DET_CALCUlADO_ESTRUC.COD_IDE_CLI_BEN%type;
    CONT_DETALHE_TDCN      number := 0;
    CONT_DETALHE_TVAL      number := 0;
    I                      NUMBER;
    CUR_COMPL_RET          curform;
    CRET_COD_INS           NUMBER;
    CRET_TIP_PROCESSO      VARCHAR2(1);
    CRET_COD_IDE_CLI       VARCHAR2(20);
    CRET_COD_BENEFICIO     NUMBER;
    CRET_SEQ_PAGAMENTO     NUMBER;
    CRET_COD_FCRUBRICA     NUMBER;
    CRET_SEQ_VIG           NUMBER;
    CRET_VAL_RUBRICA       NUMBER;
    CRET_FLG_NATUREZA      VARCHAR2(1);
    CRET_COD_IDE_CLI_BEN   VARCHAR2(20);
    CRET_NUM_ORD_JUD       NUMBER;
    CRET_DAT_INI_REF       DATE;
    CRET_VAL_RUBRICA_CHEIO NUMBER;
    V_EXIST                BOOLEAN;
    V_EVENTO_ESPEC         VARCHAR2(1);
    V_VAL_RUBRICA          NUMBER(18, 4) := 0;
    V_VAL_RUBRICA_CORRECAO NUMBER(18, 4) := 0;
    ind                    NUMBER := 0;
    j                      number := 0;
    k                      number := 0;
    m                      number := 0;
    chave_ant              VARCHAR2(80);
    vc_nao_parcela         varchar2(1) := 'N';
    conta                  number(4) := 0;

    vi_rubrica               number;
    vi_seq_vig               number;
    val_valor_correcao       number(18, 4) := 0;
    w_qtd_mes_fator_correcao number(3) := 0;
    w_data_fator_correcao    date := null;
    w_calcula_correcao       BOOLEAN;

    dat_ini_ref_ant           date;
    dat_fim_ref_ant           date;

    type con_ret is table of number index by binary_integer;

    conceito_ret con_ret;
    --- Controle de rubricas com mesmo conceito e diferente extenc?o 22-04-2016
    conceito_ret_controle con_ret;

  BEGIN

    conta := tdcn.count;

    TDCA.delete;
    idx_ret13 := 0;


    FOR I IN 1 .. TDCN.COUNT LOOP

      IF TDCN(I).TIP_PROCESSO = 'T' THEN
        FOR k IN 1 .. cod_con.count LOOP
          -- JTS  Calculo % 13 01-06-2010 13
          IF tip_evento_especial(k) in ('T','A','R','L') THEN
            IF cod_rub(k) = TDCN(I)
            .cod_fcrubrica and cod_entidade(k) = ANT_ENTIDADE THEN
              TDCA.extend;
              idx_ret13 := idx_ret13 + 1;
              TDCA(idx_ret13) := TDCN(I);
            END IF;
          END IF;
        END LOOP;
      ELSE
        IF TDCN(I).TIP_PROCESSO is not null then
          TDCA.extend;
          idx_ret13 := idx_ret13 + 1;
          TDCA(idx_ret13) := TDCN(I);
        END IF;
      END IF;

    END LOOP;

    TDCN.delete;
    FOR I IN 1 .. TDCA.COUNT LOOP
      TDCN.extend;
      TDCN(I) := TDCA(I);
    END LOOP;

    TDCT.delete;
    V_VAL_RUBRICA := 0;


   --- Comentado o 28112010 Depois de caso apresentado de Imasp agregado
   --- N?o calculado para 1 Lancamento -- JTS
   --- Liberado o Codigo 18-07-2011

    FOR I IN 1 .. TDCN.COUNT LOOP
/*      IF (TDCN(i).val_rubrica > 0 or TDCN(i).val_rubrica is not null ) and
         TDCN(i).cod_fcrubrica  not in (1860150,1860151,1860155,1860156)  then
        IF I = 1 THEN
          dat_ini_ref_ant:=TDCN(i).dat_ini_ref;
          dat_fim_ref_ant:=TDCN(i).dat_fim_ref;
          chave_ant           := lpad(ltrim(to_char(TDCN(i).cod_beneficio)),
                                      8,
                                      0) ||
                                 lpad(ltrim(to_char(TDCN(i).cod_fcrubrica)),
                                      7,
                                      0) ||   nvl(TDCN(i).cod_ide_cli_ben, '');
                                       --  ||  nvl(TDCN(i).dat_ini_ref,to_date('01/01/1901','dd/mm/yyyy'));
          RUBRICA_ANT         := TDCN(i).cod_fcrubrica;
          COD_IDE_CLI_BEN_ANT := TDCN(i).cod_ide_cli_ben;
          V_VAL_RUBRICA       := TDCN(i).val_rubrica;
          TDCT.extend;
          j := j + 1;
          TDCT(i) := TDCN(i);
          ind := i;
        ELSE
          IF chave_ant <>
             lpad(ltrim(to_char(nvl(TDCN(i).cod_beneficio, 0))), 8, 0) ||
             lpad(ltrim(to_char(nvl(TDCN(i).cod_fcrubrica, 0))), 7, 0) ||
             nvl(TDCN(i).cod_ide_cli_ben, '') or not (
             dat_ini_ref_ant=TDCN(i).dat_ini_ref and
             dat_fim_ref_ant=TDCN(i).dat_fim_ref)
              then
            dat_ini_ref_ant:=TDCN(i).dat_ini_ref;
            dat_fim_ref_ant:=TDCN(i).dat_fim_ref;
            chave_ant := lpad(ltrim(to_char(TDCN(i).cod_beneficio)), 8, 0) ||
                         lpad(ltrim(to_char(TDCN(i).cod_fcrubrica)), 7, 0) ||
                         TDCN(i).cod_ide_cli_ben ;--||
                         --  nvl(TDCN(i).dat_ini_ref,to_date('01/01/1901','dd/mm/yyyy'));
            RUBRICA_ANT := TDCN(i).cod_fcrubrica;
            COD_IDE_CLI_BEN_ANT := TDCN(i).cod_ide_cli_ben;
            j := j + 1;
            TDCT(j - 1).val_rubrica := V_VAL_RUBRICA;
            --TDCT(j - 1).dat_ini_ref := PAR_PER_PRO;
            V_VAL_RUBRICA := trunc(TDCN(i).val_rubrica,2);
            TDCT.extend;
            TDCT(j) := TDCN(i);
            ind := i;
          ELSE  --  trunc(rdcn.val_rubrica_cheio, 2
            V_VAL_RUBRICA := V_VAL_RUBRICA + trunc(nvl(TDCN(i).val_rubrica, 0),2);
            TDCT(j).val_rubrica := V_VAL_RUBRICA;
          END IF;
        END IF;
      END IF;*/
      ------------------------------------------------------------
                ------ Correção de Retroativo --- 20180411
             TDCN(i).cod_conceito:=trunc(TDCN(i).cod_fcrubrica/100) ;

            IF (TDCN(i).val_rubrica > 0 or TDCN(i).val_rubrica is not null )/* and
               TDCN(i).cod_fcrubrica  not in (1860150,1860151,1860155,1860156)*/
               -- Comentado a solic. de Caroline Yumie 11-10-2013
               then
              IF I = 1 THEN
                dat_ini_ref_ant:=TDCN(i).dat_ini_ref;
                dat_fim_ref_ant:=TDCN(i).dat_fim_ref;
                ------ Correção de Retroativo --- 20180411
                TDCN(i).cod_conceito:=trunc(TDCN(i).cod_fcrubrica)/100;
                chave_ant           := lpad(ltrim(to_char(TDCN(i).cod_beneficio)),
                                            8,
                                            0) ||
                                       ------ Correção de Retroativo --- 20180411
                                       --lpad(ltrim(to_char(TDCN(i).cod_fcrubrica)),
                                        lpad(ltrim(to_char(TDCN(i).cod_conceito)),
                                             7,
                                             0)
                                           ||  nvl(TDCN(i).cod_ide_cli_ben, '')
                                               ||  nvl(TDCN(i).dat_ini_ref,PAR_PER_PRO);
                RUBRICA_ANT         := TDCN(i).cod_fcrubrica;
                COD_IDE_CLI_BEN_ANT := TDCN(i).cod_ide_cli_ben;
                V_VAL_RUBRICA       := TDCN(i).val_rubrica;
                TDCT.extend;
                j := j + 1;
                TDCT(i) := TDCN(i);
                ind := i;
              ELSE
                IF chave_ant <>
                   lpad(ltrim(to_char(nvl(TDCN(i).cod_beneficio, 0))), 8, 0) ||
                      ------ Correção de Retroativo --- 20180411
                   --lpad(ltrim(to_char(nvl(TDCN(i).cod_fcrubrica, 0))), 7, 0) ||
                    lpad(ltrim(to_char(nvl(TDCN(i).cod_conceito, 0))), 7, 0) ||
                   nvl(TDCN(i).cod_ide_cli_ben, '')                          ||
                   nvl(TDCN(i).dat_ini_ref,PAR_PER_PRO)
                  then
                  dat_ini_ref_ant:=TDCN(i).dat_ini_ref;
                  dat_fim_ref_ant:=TDCN(i).dat_fim_ref;
                  chave_ant := lpad(ltrim(to_char(TDCN(i).cod_beneficio)), 8, 0) ||
                      ------ Correção de Retroativo --- 20180411
                   --lpad(ltrim(to_char(nvl(TDCN(i).cod_fcrubrica, 0))), 7, 0) ||
                    lpad(ltrim(to_char(nvl(TDCN(i).cod_conceito, 0))), 7, 0) ||
                               TDCN(i).cod_ide_cli_ben  ||
                               nvl(TDCN(i).dat_ini_ref,PAR_PER_PRO);
                  RUBRICA_ANT := TDCN(i).cod_fcrubrica;
                  COD_IDE_CLI_BEN_ANT := TDCN(i).cod_ide_cli_ben;
                  j := j + 1;
                  TDCT(j - 1).val_rubrica := V_VAL_RUBRICA;
                  --TDCT(j - 1).dat_ini_ref := PAR_PER_PRO;
                  V_VAL_RUBRICA := trunc(TDCN(i).val_rubrica,2);
                  TDCT.extend;
                  TDCT(j) := TDCN(i);
                  ind := i;
                ELSE  --  trunc(rdcn.val_rubrica_cheio, 2
                  V_VAL_RUBRICA := V_VAL_RUBRICA + trunc(nvl(TDCN(i).val_rubrica, 0),2);
                  TDCT(j).val_rubrica := V_VAL_RUBRICA;
                END IF;
              END IF;
            END IF;
    END LOOP;

    conta := tdcn.count;

    TDCN.delete;
    FOR I IN 1 .. TDCT.COUNT LOOP
      TDCN.extend;
      TDCN(I) := TDCT(I);
    END LOOP;
    -- Liberado o Codigo 18-07-2011

    -- retirar rubrica com indicador de gravacao = 'N'

    FOR i in 1 .. tdcn.count LOOP

      rdcn := tdcn(i);

      FOR j in 1 .. cod_rub.count LOOP

        IF cod_rub(j) = rdcn.cod_fcrubrica AND ind_grava_detalhe(J) = 'N' AND
           cod_entidade(j) = ANT_ENTIDADE THEN

          tdcn(i).val_rubrica := null;
          tdcn(i).cod_ins := null;

        END IF;

      END LOOP;
    END LOOP;

    conta := tdcn.count;

    FOR I IN 1 .. TDCN.COUNT LOOP
      RDCN := NULL;
      RDCN := TDCN(I);

      --   grava  tabela dos valores calculados para conferencia no retroativo
      --
      IF RDCN.COD_INS IS NOT NULL AND RDCN.COD_FCRUBRICA IS NOT NULL THEN

        SP_INCLUI_RESULTADO_CALC_RET(rdcn);

      END IF;

      ------------------------------------------------------------------------

      vc_nao_parcela := 'N';

      BEGIN
        SELECT distinct 'S'
          INTO vc_nao_parcela
          FROM TB_DET_CALCULADO_PARC
         WHERE COD_INS = PAR_COD_INS
           AND TIP_PROCESSO = 'N'
           AND DAT_INI_REF = PAR_PER_PRO
           AND trunc(cod_fcrubrica / 100, 000) =
               trunc(rdcn.COD_FCRUBRICA / 100, 000)
           AND COD_IDE_CLI = rdcn.cod_ide_cli
           AND COD_BENEFICIO = rdcn.cod_beneficio
           AND PER_PROCESSO >= PAR_PER_REAL;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          vc_nao_parcela := 'N';
      END;

      IF vc_nao_parcela = 'N' THEN

        -- Verifica existencia de mais de uma rubrica para o mesmo conceito

        FOR m IN 1 .. TDCN.COUNT LOOP
          RDCN_CON := NULL;
          RDCN_CON := TDCN(m);

          IF TRUNC(RDCN.cod_fcrubrica / 100) =
             TRUNC(RDCN_CON.cod_fcrubrica / 100) AND
             RDCN.cod_fcrubrica <> RDCN_CON.cod_fcrubrica AND
             RDCN.cod_BENEFICIO = RDCN_CON.cod_BENEFICIO AND
             ((RDCN.cod_ide_cli_ben is null AND
              RDCN_CON.cod_ide_cli_ben is null) OR
              RDCN.cod_ide_cli_ben = RDCN_CON.cod_ide_cli_ben)
              --JTS 30062011
             AND  RDCN.DAT_INI_REF= RDCN_CON.DAT_INI_REF
             AND SUBSTR(RDCN_CON.cod_fcrubrica,LENGTH(RDCN_CON.cod_fcrubrica)-1,2) NOT IN  ('55','56') --  codigo Novo 26-08-2011-------
             AND SUBSTR(RDCN.cod_fcrubrica,LENGTH(RDCN.cod_fcrubrica)-1,2) NOT IN  ('55','56')
             AND (RDCN_CON.cod_ide_cli_ben IS NULL OR RDCN_CON.cod_ide_cli_ben=0 OR
                  RDCN_CON.cod_ide_cli_ben = ' ' )
               THEN
               IF  RDCN_CON.FLG_NATUREZA ='C' THEN
                   RDCN.val_rubrica := RDCN.val_rubrica + RDCN_CON.val_rubrica;
               ELSE
                   RDCN.val_rubrica := RDCN.val_rubrica + (RDCN_CON.val_rubrica*-1);
               END IF;


            BEGIN
              IF conceito_ret(TRUNC(RDCN.cod_fcrubrica / 100)) is null THEN
                conceito_ret(TRUNC(RDCN.cod_fcrubrica / 100)) := RDCN_CON.cod_fcrubrica;
                conceito_ret_controle(TRUNC(RDCN.cod_fcrubrica / 100)) := 0;
              END IF;
            EXCEPTION
              WHEN NO_DATA_FOUND THEN
                conceito_ret(TRUNC(RDCN.cod_fcrubrica / 100)) := RDCN_CON.cod_fcrubrica;
                conceito_ret_controle(TRUNC(RDCN.cod_fcrubrica / 100)) := 0;
            END;
          END IF;

        END LOOP;

        -- MVL 28/05/2007
        FOR i2 IN 1 .. vfolha.count LOOP
                      rfol := vfolha(i2);
                         EXIT WHEN   RFOL.COD_BENEFICIO=rdcn.cod_beneficio;
        END LOOP;
        ANT_ENTIDADE:=rfol.cod_entidade;
        IF RDCN.TIP_EVENTO_ESPECIAL ='P' THEN
          RDCN.DAT_INI_REF:=PAR_PER_PRO;
        END IF;

        BEGIN
          IF RDCN.cod_fcrubrica is not null then
            IF conceito_ret(TRUNC(RDCN.cod_fcrubrica / 100)) <>
               RDCN.cod_fcrubrica   AND
               conceito_ret_controle(TRUNC(RDCN.cod_fcrubrica / 100)) =0
             THEN
              SP_OBTER_DIF_RET(RDCN.cod_beneficio,
                               RDCN.cod_fcrubrica,
                               RDCN.val_rubrica,
                               RDCN.COD_IDE_CLI,
                               RDCN.COD_IDE_CLI_BEN,
                               RDCN.FLG_NATUREZA,
                               RDCN.DAT_INI_REF,
                               RDCN.val_rubrica,
                               V_EVENTO_ESPEC);
               conceito_ret_controle(TRUNC(RDCN.cod_fcrubrica / 100)) :=2;
            ELSE
              rdcn.val_rubrica := 0;
               conceito_ret_controle(TRUNC(RDCN.cod_fcrubrica / 100)) :=2;
            END IF;
          END IF;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            SP_OBTER_DIF_RET(RDCN.cod_beneficio,
                             RDCN.cod_fcrubrica,
                             RDCN.val_rubrica,
                             RDCN.COD_IDE_CLI,
                             RDCN.COD_IDE_CLI_BEN,
                             RDCN.FLG_NATUREZA,
                             RDCN.DAT_INI_REF,
                             RDCN.val_rubrica,
                             V_EVENTO_ESPEC);
        END;
        -- MVL 28/05/2007
        vi_pagar := false; -- Rod jan10

        IF VI_PAGAR THEN

          --IF V_EVENTO_ESPEC <> 'I' THEN  -- RAO 20060410

          IF RDCN.val_rubrica < 0 THEN
            RDCN.val_rubrica  := RDCN.val_rubrica * -1;
            RDCN.FLG_NATUREZA := 'D';
          ELSE
            RDCN.FLG_NATUREZA := 'C';
          END IF;

          IF RDCN.val_rubrica <> 0 THEN
               FOR i2 IN 1 .. vfolha.count LOOP
                      rfol := vfolha(i2);
                         EXIT WHEN   RFOL.COD_BENEFICIO=rdcn.cod_beneficio;
               END LOOP;
                ANT_ENTIDADE:=rfol.cod_entidade;
            SP_OBTEM_RUBRICA(RDCN.COD_FCRUBRICA,
                             RDCN.FLG_NATUREZA,
                             RDCN.COD_FCRUBRICA);
            IF RDCN.COD_FCRUBRICA = 320250 THEN
              RDCN.COD_FCRUBRICA := 320251;
              RDCN.FLG_NATUREZA  := 'D';
            END IF;
          END IF;
          --
          CRET_VAL_RUBRICA   := RDCN.VAL_RUBRICA;
          CRET_FLG_NATUREZA  := RDCN.FLG_NATUREZA;
          CRET_COD_FCRUBRICA := RDCN.COD_FCRUBRICA;
          --
          --  gravar rubricas da diferenca no array do retroativo
          --
          IF RDCN.val_rubrica >= 0.01 THEN

            RDCN.des_complemento  := 'Ret.';
            ret_rdcn              := rdcn;
            ret_rdcn.per_processo := PAR_PER_REAL;
            ret_rdcn.dat_ini_ref  := PAR_PER_PRO;

            ret_tdcn.extend;

            cont_detalhe_tdcn := cont_detalhe_tdcn + 1;
            ret_tdcn(cont_detalhe_tdcn) := ret_rdcn;


          END IF;
        ELSE
          IF RDCN.val_rubrica is not null then

            --           CONT_DETALHE := CONT_DETALHE + 1;

            IF RDCN.val_rubrica < 0 THEN
              RDCN.val_rubrica  := RDCN.val_rubrica * -1;
              RDCN.FLG_NATUREZA := 'D';
            ELSE
              RDCN.FLG_NATUREZA := 'C';
            END IF;

            RDCN.des_complemento := 'Ret.';

            IF RDCN.cod_ins is not null then

              -- Fator de correcao efv
              --          RDCN.val_rubrica := round(RDCN.val_rubrica * VI_FATOR_MES, 2);

              IF RDCN.val_rubrica <> 0 THEN
                    FOR i2 IN 1 .. vfolha.count LOOP
                      rfol := vfolha(i2);
                         EXIT WHEN   RFOL.COD_BENEFICIO=rdcn.cod_beneficio;
                    END LOOP;
                     ANT_ENTIDADE:=rfol.cod_entidade;
                SP_OBTEM_RUBRICA(RDCN.COD_FCRUBRICA,
                                 RDCN.FLG_NATUREZA,
                                 RDCN.COD_FCRUBRICA);
              END IF;
                --- Comentado 12-08-2013 solicitac?o Yumi T.
/*              IF TRUNC(rdcn.cod_fcrubrica/100) IN (70006,70037) AND
                 rdcn.flg_natureza='C' THEN
                 rdcn.val_rubrica:=0;
              END IF;*/

              ---- TEPORAL --09-11-2011

            ---- Instuc?o abaixo  foi inserida em 09-11-2011 a solicitac?o
           --  de  Paulo Miranda e Yumi por processo massivo da Educ.
           -- Foi tirado em 27/12/2013 a solicitac?o de Caroline Yumi.
/*            IF TRUNC(rdcn.cod_fcrubrica/100) IN (78001) AND
               rdcn.flg_natureza='C' THEN
               rdcn.val_rubrica:=0;
            END IF;*/


              -- comentado 30-09-2011 - descomentado 07-10-2011
              --- Comentado 12-08-2013 solicitac?o Yumi T.
/*              IF TRUNC(rdcn.cod_fcrubrica/100) IN ( 12001,12003,12004,12005 ,800750--10009
                 ) AND
                 rdcn.flg_natureza='D' THEN
                 rdcn.val_rubrica:=0;
              END IF;*/

              RDCN.des_complemento  := 'Ret.';
              ret_rdcn.per_processo := PAR_PER_PRO;-- mODIFICADO PAR_PER_REAL 28-11-2011

              ret_vnpago_rdcn.cod_ins           := rdcn.cod_ins;
              ret_vnpago_rdcn.tip_processo      := rdcn.tip_processo;
              ret_vnpago_rdcn.per_processo      := PAR_PER_REAL;
              ret_vnpago_rdcn.cod_ide_cli       := rdcn.cod_ide_cli;
              ret_vnpago_rdcn.cod_beneficio     := rdcn.cod_beneficio;
              ret_vnpago_rdcn.seq_pagamento     := rdcn.seq_pagamento;
              ret_vnpago_rdcn.cod_fcrubrica     := rdcn.cod_fcrubrica;
              ret_vnpago_rdcn.seq_vig           := rdcn.seq_vig;
              ret_vnpago_rdcn.val_rubrica       := rdcn.val_rubrica;
              ret_vnpago_rdcn.num_quota         := rdcn.num_quota;
              ret_vnpago_rdcn.flg_natureza      := rdcn.flg_natureza;
              ret_vnpago_rdcn.tot_quota         := rdcn.tot_quota;
              ret_vnpago_rdcn.dat_ini_ref       := PAR_PER_PRO;
              ret_vnpago_rdcn.dat_fim_ref       := rdcn.dat_fim_ref;
              ret_vnpago_rdcn.cod_ide_cli_ben   := rdcn.cod_ide_cli_ben;
              ret_vnpago_rdcn.num_ord_jud       := rdcn.num_ord_jud;
              ret_vnpago_rdcn.dat_ing           := rdcn.dat_ing;
              ret_vnpago_rdcn.dat_ult_atu       := rdcn.dat_ult_atu;
              ret_vnpago_rdcn.nom_usu_ult_atu   := rdcn.nom_usu_ult_atu;
              ret_vnpago_rdcn.nom_pro_ult_atu   := rdcn.nom_pro_ult_atu;
              ret_vnpago_rdcn.seq_detalhe       := rdcn.seq_detalhe * 10;
              ret_vnpago_rdcn.des_informacao    := rdcn.des_informacao;
              ret_vnpago_rdcn.des_complemento   := rdcn.des_complemento;
              ret_vnpago_rdcn.val_rubrica_cheio := rdcn.val_rubrica_cheio;
              ret_vnpago_rdcn.ind_inclui_folha  := 'N';
              ret_vnpago_rdcn.ind_processo      := 'N';

              ret_tval_npago.extend;

              cont_detalhe_tval := cont_detalhe_tval + 1;
              ret_tval_npago(cont_detalhe_tval) := ret_vnpago_rdcn;

            END IF;
          END IF;
        END IF;
      END IF;
    END LOOP;

   --- Aqui devera ser Mudado para N?o aparecer muita rubrica
    FOR i2 IN 1 .. vfolha.count LOOP
           rfol := vfolha(i2);
           ---- Alteração 21-09-2017
            ANT_ENTIDADE:=rfol.cod_entidade;
                  OPEN CUR_COMPL_RET FOR
                    SELECT DC.COD_INS, --  DC.TIP_PROCESSO     ,
                           DC.COD_IDE_CLI,
                           DC.COD_BENEFICIO,
                           DC.SEQ_PAGAMENTO,
                           DC.SEQ_VIG,
                           ' ' FLG_NATUREZA,
                           NVL(DC.COD_IDE_CLI_BEN,0) COD_IDE_CLI_BEN ,
                           NVL(DC.NUM_ORD_JUD,0),
                           DC.DAT_INI_REF,
                           sum(decode(flg_natureza,
                                      'D',
                                      DC.VAL_RUBRICA * -1,
                                      DC.VAL_RUBRICA)) val_rubrica,
                       --  dc.cod_fcrubrica
                          TO_NUMBER(TO_CHAR(TRUNC( dc.cod_fcrubrica/100)) ||'00') cod_fcrubrica
                      INTO CRET_COD_INS, --     CRET_TIP_PROCESSO    ,
                           CRET_COD_IDE_CLI,
                           CRET_COD_BENEFICIO,
                           CRET_SEQ_PAGAMENTO,
                           CRET_SEQ_VIG,
                           CRET_FLG_NATUREZA,
                           CRET_COD_IDE_CLI_BEN,
                           CRET_NUM_ORD_JUD,
                           CRET_DAT_INI_REF,
                           CRET_VAL_RUBRICA,
                           CRET_COD_FCRUBRICA
                      FROM tb_HDET_CALCULADO DC,
                           TB_RUBRICAS_PROCESSO    RP,
                           user_ipesp.tb_formula_calculo      fc
                     WHERE DC.COD_INS = PAR_COD_INS
                      -- AND DC.PER_PROCESSO <= PAR_PER_PRO
                       AND (DC.PER_PROCESSO = PAR_PER_PRO and
                           DC.DAT_INI_REF = PAR_PER_PRO or
                           (DC.PER_PROCESSO <> PAR_PER_REAL and
                           DC.DAT_INI_REF = PAR_PER_PRO)) -- RAO 20060411
                       AND ((RP.TIP_PROCESSO in ('N'/*, 'S'*/) and PAR_TIP_PRO = 'R') or
                           (RP.TIP_PROCESSO = 'T' and PAR_TIP_PRO = 'T'))
                       AND DC.TIP_PROCESSO = DC.TIP_PROCESSO --RP.TIP_PROCESSO
                       AND DC.COD_IDE_CLI = ANT_IDE_CLI
                       AND DC.COD_BENEFICIO =RFOL.COD_BENEFICIO
                       AND dc.cod_ins = rp.cod_ins
                       and rp.flg_processa = 'S'
                       and fc.cod_rubrica = rp.cod_rubrica
                       and fc.cod_fcrubrica = dc.cod_fcrubrica
                       and fc.cod_entidade = rp.cod_entidade
                       and fc.cod_entidade = ANT_ENTIDADE
                       and fc.dat_ini_vig<=PAR_PER_PRO
                       and nvl(fc.dat_fim_vig,par_per_pro) >=PAR_PER_PRO
                       and fc.cod_ins = dc.cod_ins
                       and fc.seq_vig > 0
                       and rp.cod_rubrica in
                           (select rpc.cod_rubrica
                              from tb_rubricas_processo rpc
                             where rpc.flg_processa = 'S'
                               and rpc.tip_processo in ('R','E')
                               and rpc.cod_ins = par_cod_ins
                               and rpc.cod_entidade =ANT_ENTIDADE)
                       and not exists
                     (select 's'
                              from tb_det_calculado_parc dcp
                             where dcp.cod_ins = dc.cod_ins
                               and dcp.tip_processo = 'N'
                               and dcp.dat_ini_ref = PAR_PER_PRO
                               and dcp.cod_ide_cli = dc.cod_ide_cli
                               and dcp.cod_beneficio = dc.cod_beneficio
                               and trunc(dcp.cod_fcrubrica / 100, 000) =
                                   trunc(dc.cod_fcrubrica / 100, 000))
                     group by DC.COD_INS, --       DC.TIP_PROCESSO     ,
                              DC.COD_IDE_CLI,
                              DC.COD_BENEFICIO,
                              DC.SEQ_PAGAMENTO,
                              DC.SEQ_VIG,
                              ' ',
                              NVL(DC.COD_IDE_CLI_BEN,0) ,--DC.COD_IDE_CLI_BEN,
                               NVL(DC.NUM_ORD_JUD,0),--DC.NUM_ORD_JUD,
                              DC.DAT_INI_REF,
                             --dc.cod_fcrubrica
                              TRUNC( dc.cod_fcrubrica/100)
                    union all -- Obtem rubricas do lancamento manual
                     SELECT DC.COD_INS, --  DC.TIP_PROCESSO     ,
                           DC.COD_IDE_CLI,
                           DC.COD_BENEFICIO,
                           DC.SEQ_PAGAMENTO,
                           DC.SEQ_VIG,
                           ' ' FLG_NATUREZA,
                           DC.COD_IDE_CLI_BEN,
                           DC.NUM_ORD_JUD,
                           DC.DAT_INI_REF,
                           sum(decode(flg_natureza,
                                      'D',
                                      DC.VAL_RUBRICA * -1,
                                      DC.VAL_RUBRICA)) val_rubrica,
                         dc.cod_fcrubrica  -- TRUNC( dc.cod_fcrubrica/100)         cod_fcrubrica

                      FROM tb_HDET_CALCULADO  DC,
                           TB_RUBRICAS_PROCESSO    RP,
                           tb_formula_calculo      fc
                     WHERE DC.COD_INS = PAR_COD_INS
                       AND ( DC.PER_PROCESSO > PAR_PER_PRO and
                             DC.DAT_INI_REF = PAR_PER_PRO
                             /* or
                              (  DC.PER_PROCESSO <> PAR_PER_REAL and
                                 DC.DAT_INI_REF = PAR_PER_PRO
                              )
                             */
                           ) -- RAO 20060411
                       AND ((RP.TIP_PROCESSO in ('N', 'S') and PAR_TIP_PRO = 'R') or
                           (RP.TIP_PROCESSO = 'T' and PAR_TIP_PRO = 'T'))
                       AND DC.TIP_PROCESSO = RP.TIP_PROCESSO
                       AND DC.COD_IDE_CLI = ANT_IDE_CLI
                       AND DC.COD_BENEFICIO =RFOL.COD_BENEFICIO
                       AND dc.cod_ins = rp.cod_ins
                       and rp.flg_processa = 'S'
                       and fc.cod_rubrica = rp.cod_rubrica
                       and fc.cod_fcrubrica = dc.cod_fcrubrica
                       and fc.cod_entidade = rp.cod_entidade
                       and fc.cod_entidade = ANT_ENTIDADE
                       and fc.dat_ini_vig<=PAR_PER_PRO
                       and nvl(fc.dat_fim_vig,par_per_pro) >=PAR_PER_PRO
                       and fc.cod_ins = dc.cod_ins
                       and fc.seq_vig > 0
                       ---- Condic?o Nla reativada 09-08-2013
                       AND 1=2
                       and rp.cod_rubrica in
                           (select rpc.cod_rubrica
                              from tb_rubricas_processo rpc
                             where rpc.flg_processa = 'S'
                               and rpc.tip_processo = 'R'
                               and rpc.cod_ins = par_cod_ins
                               and rpc.cod_entidade =ANT_ENTIDADE)
                       and not exists
                     (select 's'
                              from tb_det_calculado_parc dcp
                             where dcp.cod_ins = dc.cod_ins
                               and dcp.tip_processo = 'N'
                               and dcp.dat_ini_ref = PAR_PER_PRO
                               and dcp.cod_ide_cli = dc.cod_ide_cli
                               and dcp.cod_beneficio = dc.cod_beneficio
                               and trunc(dcp.cod_fcrubrica / 100, 000) =
                                   trunc(dc.cod_fcrubrica / 100, 000))
                     group by DC.COD_INS, --       DC.TIP_PROCESSO     ,
                              DC.COD_IDE_CLI,
                              DC.COD_BENEFICIO,
                              DC.SEQ_PAGAMENTO,
                              DC.SEQ_VIG,
                              ' ',
                              DC.COD_IDE_CLI_BEN,
                              DC.NUM_ORD_JUD,
                              DC.DAT_INI_REF,
                             dc.cod_fcrubrica ;-- TRUNC( dc.cod_fcrubrica/100);


                  FETCH CUR_COMPL_RET
                    INTO CRET_COD_INS, --        CRET_TIP_PROCESSO    ,
                  CRET_COD_IDE_CLI, CRET_COD_BENEFICIO, CRET_SEQ_PAGAMENTO, CRET_SEQ_VIG, CRET_FLG_NATUREZA, CRET_COD_IDE_CLI_BEN, CRET_NUM_ORD_JUD, CRET_DAT_INI_REF, CRET_VAL_RUBRICA, CRET_COD_FCRUBRICA;

                  WHILE CUR_COMPL_RET%FOUND LOOP
                    BEGIN
                      V_EXIST := FALSE;

                      FOR I IN 1 .. TDCN.COUNT LOOP
                        RDCN := NULL;
                        RDCN := TDCN(I);

                        IF TRUNC(CRET_COD_FCRUBRICA/100) = trunc(RDCN.cod_fcrubrica / 100, 000) and
                           CRET_COD_BENEFICIO = RDCN.cod_beneficio and
                           CRET_DAT_INI_REF = RDCN.DAT_INI_REF THEN
                          V_EXIST := TRUE;
                          exit; -- MVL - 31/03/2006
                        END IF;
                      END LOOP;

                      IF NOT V_EXIST THEN
                        --INLUIR COMO RETRATIVO CONTRARIO

                        --            cont_detalhe := cont_detalhe + 1;

                        IF CRET_VAL_RUBRICA < 0 THEN
                          CRET_VAL_RUBRICA  := CRET_VAL_RUBRICA * -1;
                          CRET_FLG_NATUREZA := 'C';
                        ELSE
                          CRET_FLG_NATUREZA := 'D';
                        END IF;
                         FOR i2 IN 1 .. vfolha.count LOOP
                             rfol := vfolha(i2);
                             EXIT WHEN   RFOL.COD_BENEFICIO=rdcn.cod_beneficio;
                         END LOOP;
                         ANT_ENTIDADE:=rfol.cod_entidade;

                        SP_OBTEM_RUBRICA(CRET_COD_FCRUBRICA,
                                         CRET_FLG_NATUREZA,
                                         CRET_COD_FCRUBRICA);

                        IF CRET_COD_FCRUBRICA = 320200 THEN
                          --- FFRANCO 02/2007
                          CRET_COD_FCRUBRICA := 320251;
                        END IF; --- FFRANCO 02/2007

                        ---- TEPORAL --09-11-2011
                        IF TRUNC( CRET_cod_fcrubrica/100) IN (78001) AND
                         CRET_flg_natureza='C' THEN
                         CRET_VAL_RUBRICA :=0;
                        END IF;
                        IF CRET_VAL_RUBRICA > 0 THEN

                          -- incluir no array para efetuar o calculo da correc?o

                          rdcn.cod_ins           := CRET_cod_ins;
                          rdcn.tip_processo      := 'R';
                          rdcn.per_processo      := PAR_PER_REAL;
                          rdcn.cod_ide_cli       := CRET_COD_IDE_CLI;
                          rdcn.cod_beneficio     := CRET_cod_beneficio;
                          rdcn.seq_pagamento     := CRET_seq_pagamento;
                          rdcn.cod_fcrubrica     := CRET_cod_fcrubrica;
                          rdcn.seq_vig           := CRET_seq_vig;
                          rdcn.val_rubrica       := CRET_val_rubrica;
                          rdcn.num_quota         := 1;
                          rdcn.flg_natureza      := CRET_flg_natureza;
                          rdcn.tot_quota         := 1;
                          rdcn.dat_ini_ref       := PAR_PER_PRO;
                          rdcn.dat_fim_ref       := null;
                          rdcn.cod_ide_cli_ben   := CRET_COD_IDE_CLI_BEN;
                          rdcn.num_ord_jud       := CRET_NUM_ORD_JUD;
                          rdcn.dat_ing           := sysdate;
                          rdcn.dat_ult_atu       := sysdate;
                          rdcn.nom_usu_ult_atu   := 'RET -212';
                          rdcn.nom_pro_ult_atu   := 'FOLHA RET';
                          rdcn.seq_detalhe       := cont_detalhe_tdcn;
                          rdcn.des_informacao    := null;
                          rdcn.des_complemento   := 'Ret';
                          rdcn.val_rubrica_cheio := 0;

                          ret_rdcn := rdcn;
                          ret_tdcn.extend;

                          cont_detalhe_tdcn := cont_detalhe_tdcn + 1;
                          ret_tdcn(cont_detalhe_tdcn) := ret_rdcn;

                          SP_INCLUI_RESULTADO_CALC_RET(rdcn);

                        END IF;
                      END IF;

                      FETCH CUR_COMPL_RET
                        INTO CRET_COD_INS, --      CRET_TIP_PROCESSO    ,
                      CRET_COD_IDE_CLI, CRET_COD_BENEFICIO, CRET_SEQ_PAGAMENTO, CRET_SEQ_VIG, CRET_FLG_NATUREZA, CRET_COD_IDE_CLI_BEN, CRET_NUM_ORD_JUD, CRET_DAT_INI_REF, CRET_VAL_RUBRICA, CRET_COD_FCRUBRICA;

                    END;

                  END LOOP;
                  CLOSE CUR_COMPL_RET;

    END LOOP;
    --
    -- Tratamento correc?o monetaria.
    --
    --  obter as diferencas das rubricas pagas

    -- verificar se tem correc?o para o pensionista ou aposentado

     --SP_VERIFICA_CORRECAO_MONETARIA(ANT_IDE_CLI, w_calcula_correcao);
    w_calcula_correcao:=FALSE;
    IF w_calcula_correcao THEN

      val_valor_correcao := 0;

      -- Calcular Correc?o Monetaria para as Rubricas no array

      W_COD_PARAM_GERAL_CORRECAO := 'FIPE';

      w_qtd_mes_fator_correcao := (trunc((PAR_PER_REAL - PAR_PER_PRO) / 30) + 1);

      w_data_fator_correcao := par_per_pro;

      FOR i IN 1 .. ret_tdcn.count LOOP

        rdcn.cod_fcrubrica    := ret_tdcn(i).cod_fcrubrica;
        rdcn.val_rubrica      := ret_tdcn(i).val_rubrica;
        w_data_fator_correcao := par_per_pro;
        rdcn.flg_natureza     := ret_tdcn(i).flg_natureza;

        IF rdcn.flg_natureza = 'C' THEN

          FOR p IN 1 .. w_qtd_mes_fator_correcao LOOP

            SP_OBTEM_FATOR_CORRECAO('',
                                    w_data_fator_correcao,
                                    VI_FATOR_MES);

            val_valor_correcao := val_valor_correcao +
                                  ((RDCN.val_rubrica * (VI_FATOR_MES)) -
                                  RDCN.val_rubrica);

            w_data_fator_correcao := add_months(par_per_pro, p);

          END LOOP;

        END IF;

      END LOOP;

      w_data_fator_correcao := par_per_pro;

      FOR i IN 1 .. ret_tval_npago.count LOOP

        rdcn.cod_fcrubrica    := ret_tval_npago(i).cod_fcrubrica;
        rdcn.val_rubrica      := ret_tval_npago(i).val_rubrica;
        w_data_fator_correcao := par_per_pro;
        rdcn.flg_natureza     := ret_tval_npago(i).flg_natureza;

        IF rdcn.flg_natureza = 'C' THEN

          FOR p IN 1 .. w_qtd_mes_fator_correcao LOOP

            SP_OBTEM_FATOR_CORRECAO('',
                                    w_data_fator_correcao,
                                    VI_FATOR_MES);

            val_valor_correcao := val_valor_correcao +
                                  ((RDCN.val_rubrica * (VI_FATOR_MES)) -
                                  RDCN.val_rubrica);

            w_data_fator_correcao := add_months(par_per_pro, p);

          END LOOP;

        END IF;

      END LOOP;

      RDCN.des_informacao := 'Ret.Cor. ';
      RDCN.val_rubrica    := val_valor_correcao;
      RDCN.COD_INS        := PAR_COD_INS;
      RDCN.TIP_PROCESSO   := PAR_TIP_PRO;
      RDCN.PER_PROCESSO   := PAR_PER_REAL;
      RDCN.COD_IDE_CLI    := ANT_IDE_CLI;
      RDCN.FLG_NATUREZA   := 'C';
      RDCN.DAT_INI_REf    := PAR_PER_PRO;
      RDCN.Seq_Vig        := 1;

      SP_OBTEM_RUBRICA_EVENTO_ESPEC('C',
                                    ANT_ENTIDADE,
                                    '',
                                    vi_rubrica,
                                    vi_seq_vig);
      RDCN.cod_fcrubrica := vi_rubrica;

      ret_rdcn := rdcn;

      ret_tdcn.extend;

      cont_detalhe_tdcn := cont_detalhe_tdcn + 1;
      ret_tdcn(cont_detalhe_tdcn) := ret_rdcn;

    END IF;

    FOR i IN 1 .. ret_tdcn.count LOOP

      RDCN := RET_TDCN(i);

      SP_INCLUI_TB_DET_RET(RDCN);

    END LOOP;

    FOR i IN 1 .. ret_tval_npago.count LOOP
      IF ret_tval_npago(i).val_rubrica > 0 THEN
      rdcn.cod_ins           := ret_tval_npago(i).cod_ins;
      rdcn.tip_processo      := ret_tval_npago(i).tip_processo;
      rdcn.per_processo      := ret_tval_npago(i).per_processo;
      rdcn.cod_ide_cli       := ret_tval_npago(i).cod_ide_cli;
      rdcn.cod_beneficio     := ret_tval_npago(i).cod_beneficio;
      rdcn.seq_pagamento     := ret_tval_npago(i).seq_pagamento;
      rdcn.cod_fcrubrica     := ret_tval_npago(i).cod_fcrubrica;
      rdcn.seq_vig           := nvl(ret_tval_npago(i).seq_vig,1);
      rdcn.val_rubrica       := ret_tval_npago(i).val_rubrica;
      rdcn.num_quota         := ret_tval_npago(i).num_quota;
      rdcn.flg_natureza      := ret_tval_npago(i).flg_natureza;
      rdcn.tot_quota         := ret_tval_npago(i).tot_quota;
      rdcn.dat_ini_ref       := ret_tval_npago(i).dat_ini_ref;
      rdcn.dat_fim_ref       := ret_tval_npago(i).dat_fim_ref;
      rdcn.cod_ide_cli_ben   := ret_tval_npago(i).cod_ide_cli_ben;
      rdcn.num_ord_jud       := ret_tval_npago(i).num_ord_jud;
      rdcn.dat_ing           := ret_tval_npago(i).dat_ing;
      rdcn.dat_ult_atu       := ret_tval_npago(i).dat_ult_atu;
      rdcn.nom_usu_ult_atu   := ret_tval_npago(i).nom_usu_ult_atu;
      rdcn.nom_pro_ult_atu   := ret_tval_npago(i).nom_pro_ult_atu;
      rdcn.seq_detalhe       := ret_tval_npago(i).seq_detalhe;
      rdcn.des_informacao    := ret_tval_npago(i).des_informacao;
      rdcn.des_complemento   := ret_tval_npago(i).des_complemento;
      rdcn.val_rubrica_cheio := ret_tval_npago(i).val_rubrica_cheio;

      SP_INCLUI_VALOR_NPAGO_RET(RDCN);
      END IF;
    END LOOP;

  END SP_GRAVA_DETALHE_RET;
  ----------------------------------------------------------------------------------
  PROCEDURE SP_OBTER_DIF_RET(P_COD_BENEFICIO   IN NUMBER,
                             P_COD_RUBRICA     IN NUMBER,
                             VAL_RET           IN NUMBER,
                             P_IDE_CLI         IN VARCHAR2,
                             P_COD_IDE_CLI_BEN IN VARCHAR2,
                             P_FLG_NATUREZA    IN VARCHAR2,
                             P_INI_REF         IN DATE,
                             VALOR             OUT NUMBER,
                             EVENTO_ESPECIAL   OUT VARCHAR2) IS
    --RETURN  number IS

    V_EVENTO_ESPECIAL TB_RUBRICAS.TIP_EVENTO_ESPECIAL%TYPE;
    VALOR_O           number;
    VALOR_1           number;
    VALOR_CALC        NUMBER := 0;

  BEGIN
    IF P_COD_RUBRICA <> 320200 THEN
      ---FFRANCO  02/2007
     IF TO_CHAR(P_INI_REF,'MMYYYY') =to_char(PAR_PER_PRO, 'MMYYYY') THEN
       begin
        VI_PAGAR := TRUE;
        --- Alterac?o de Codigo Para Teste de Retroativo.----02-08-2010
        SELECT sum(decode(flg_natureza, 'C', val_rubrica, val_rubrica * -1))
          INTO VALOR_O
        --     FROM TB_DET_CALCULADO DC     MVL (22052006)
          FROM tb_ficha_financeira_ret2 DC
         WHERE DC.COD_INS = PAR_COD_INS
           AND PER_PROCESSO =
               to_date('01' || to_char(PAR_PER_PRO, 'MMYYYY'), 'DDMMYYYY') --RAO: isto deve ser revisto
           AND DC.TIP_PROCESSO in ('N', 'S'/*, 'T'*/)
           AND COD_IDE_CLI = P_IDE_CLI
           AND COD_BENEFICIO = P_COD_BENEFICIO
              --      AND FLG_NATUREZA = P_FLG_NATUREZA
           AND cod_conceito =
               trunc(P_COD_RUBRICA / 100, 000)

           AND DC.DAT_INI_REF =
              to_date('01' || to_char(PAR_PER_PRO, 'MMYYYY'), 'DDMMYYYY') -- RAO: 20060308 Deve considerar apenas os da data em processamento
         AND nvl(DC.COD_IDE_CLI_BEN, 0) = nvl(P_COD_IDE_CLI_BEN, 0);

      exception
        when no_data_found then
          valor_o  := 0;
          VI_PAGAR := FALSE;
      end;
    ELSE
      begin
       VI_PAGAR := TRUE;
         --- Alterac?o de Codigo Para Teste de Retroativo.----02-08-2010
        SELECT sum(decode(flg_natureza, 'C', val_rubrica, val_rubrica * -1))
          INTO VALOR_O
        --     FROM TB_DET_CALCULADO DC     MVL (22052006)
          FROM tb_ficha_financeira_ret2 DC
         WHERE DC.COD_INS = PAR_COD_INS
           AND PER_PROCESSO =
               to_date('01' || to_char(PAR_PER_PRO, 'MMYYYY'), 'DDMMYYYY') --RAO: isto deve ser revisto
           AND DC.TIP_PROCESSO in ('N', 'S'/*, 'T'*/)
           AND COD_IDE_CLI = P_IDE_CLI
           AND COD_BENEFICIO = P_COD_BENEFICIO
              --      AND FLG_NATUREZA = P_FLG_NATUREZA
           AND cod_conceito =
               trunc(P_COD_RUBRICA / 100, 000)

           AND to_date('01' || to_char(DC.DAT_INI_REF ,'MMYYYY'), 'DDMMYYYY')  =
               to_date('01' || to_char(P_INI_REF, 'MMYYYY'), 'DDMMYYYY')

          AND nvl(DC.COD_IDE_CLI_BEN, 0) = nvl(P_COD_IDE_CLI_BEN, 0);

      exception
        when no_data_found then
          valor_o  := 0;
          VI_PAGAR := FALSE;
      end;
    END IF;
      --- Alterac?o de Codigo Para Teste de Retroativo.----02-08-2010
      begin
        SELECT nvl(sum(decode(flg_natureza,
                              'C',
                              val_rubrica,
                              val_rubrica * -1)),
                   0)
          INTO VALOR_1
        --     FROM TB_DET_CALCULADO DC MVL(22052006)
          FROM tb_ficha_financeira_ret2 DC
         WHERE DC.COD_INS = PAR_COD_INS
           AND (DC.DAT_INI_REF = PAR_PER_PRO)
           AND DC.TIP_PROCESSO in ('N', 'S'/*, 'T'*/)
           AND DC.COD_IDE_CLI = P_IDE_CLI
           AND DC.COD_BENEFICIO = P_COD_BENEFICIO
              --      AND DC.FLG_NATUREZA = P_FLG_NATUREZA
           AND DC.PER_PROCESSO <> PAR_PER_PRO ---RAO 20060410
           AND cod_conceito =
               trunc(P_COD_RUBRICA / 100, 000)
           AND nvl(DC.COD_IDE_CLI_BEN, 0) = nvl(P_COD_IDE_CLI_BEN, 0)
          ;

      exception
        when no_data_found then
          valor_1 := 0;
          IF NOT VI_PAGAR THEN
            VI_PAGAR := FALSE;
          END IF;
      end;

      IF VALOR_O IS NULL AND VALOR_1 = 0 THEN
        VALOR_O  := 0;
        VI_PAGAR := FALSE;
      ELSIF VALOR_O IS NULL AND (VALOR_1 > 0 or VALOR_1 < 0) THEN
        VALOR_O := 0;
      END IF;

      IF P_FLG_NATUREZA = 'D' THEN
        VALOR_CALC := VAL_RET * -1;
      ELSE
        VALOR_CALC := VAL_RET;
      END IF;
 ------------ Codigo Novo --------------------
/*     IF SUBSTR(P_COD_RUBRICA ,LENGTH(P_COD_RUBRICA )-1,2) IN ('55','56') THEN
      IF SUBSTR(P_COD_RUBRICA ,LENGTH(P_COD_RUBRICA )-1,2)='56' THEN
         VALOR_O := VALOR_CALC + (VALOR_O + VALOR_1);
      ELSE
          VALOR_O := VALOR_CALC - (VALOR_O + VALOR_1);
       END IF;
     ELSE
        VALOR_O := VALOR_CALC - (VALOR_O + VALOR_1);
     END IF;
 */
 ---------------------------------------------
     VALOR_O := VALOR_CALC - (VALOR_O + VALOR_1);
      /*
          IF VALOR_O < 0 THEN
             VALOR_O := VALOR_O * -1;
          END IF;
      */
      VALOR := VALOR_O;

    ELSE
      VALOR := VAL_RET;
    END IF; --- FFRANCO 02/2007
  END SP_OBTER_DIF_RET;
  ----------------------------------------------------------------------------------
  PROCEDURE SP_MONTAR_ARRAY_RET(P_COD_BENEFICIO IN NUMBER) IS
    --RETURN  number IS

  BEGIN

    idx_ret     := 0;
    idx_ret_ref := 0;

    FOR X in (SELECT cod_ide_cli,
                     cod_beneficio,
                     trunc(DC.COD_FCRUBRICA / 100, 000),
                     per_processo,
                     dat_ini_ref,
                     COD_IDE_CLI_BEN,
                     sum(decode(flg_natureza,
                                'C',
                                val_rubrica,
                                val_rubrica * -1))
                FROM tb_ficha_financeira_ret2 DC
               WHERE COD_INS = PAR_COD_INS
                 AND PER_PROCESSO =
                     to_date('01' || to_char(PAR_PER_PRO, 'MMYYYY'),
                             'DDMMYYYY') --RAO: isto deve ser revisto
                 AND TIP_PROCESSO in ('N', 'S', 'T')
                 AND COD_IDE_CLI = BEN_IDE_CLI
                 AND COD_BENEFICIO = P_COD_BENEFICIO
                 AND DC.DAT_INI_REF =
                     to_date('01' || to_char(PAR_PER_PRO, 'MMYYYY'),
                             'DDMMYYYY')
               group by cod_ide_cli,
                        cod_beneficio,
                        trunc(DC.COD_FCRUBRICA / 100, 000),
                        per_processo,
                        dat_ini_ref,
                        COD_IDE_CLI_BEN) LOOP

      null;

    END LOOP;

    FOR Z in (SELECT cod_ide_cli,
                     cod_beneficio,
                     trunc(DC.COD_FCRUBRICA / 100, 000),
                     per_processo,
                     COD_IDE_CLI_BEN,
                     nvl(sum(decode(flg_natureza,
                                    'C',
                                    val_rubrica,
                                    val_rubrica * -1)),
                         0)
                FROM tb_ficha_financeira_ret2 DC
               WHERE DC.COD_INS = PAR_COD_INS
                 AND (DC.DAT_INI_REF = PAR_PER_PRO)
                 AND DC.TIP_PROCESSO in ('N', 'S', 'T')
                 AND DC.COD_IDE_CLI = BEN_IDE_CLI
                 AND DC.COD_BENEFICIO = P_COD_BENEFICIO
                 AND DC.PER_PROCESSO <> PAR_PER_PRO ---RAO 20060410
                 and DC.PER_PROCESSO <> PAR_PER_REAL
               group by cod_ide_cli,
                        cod_beneficio,
                        trunc(DC.COD_FCRUBRICA / 100, 000),
                        per_processo,
                        COD_IDE_CLI_BEN) LOOP

      null;
    END LOOP;

  END SP_MONTAR_ARRAY_RET;
  ----------------------------------------------------------------------------------
  PROCEDURE SP_VERIF_RUBRICA_NPAGA_MES_SUP AS

    RDCN                 TB_DET_calculado_estruc%rowtype;
    RDCD                 TB_DET_calculado_estruc%rowtype;
    RUBRICA_ANT          NUMBER;
    COD_IDE_CLI_BEN_ANT  TB_DET_CALCUlADO_ESTRUC.COD_IDE_CLI_BEN%type;
    CONT_DETALHE         number := 0;
    I                    NUMBER;
    CUR_COMPL_RET        curform;
    CRET_COD_INS         NUMBER;
    CRET_TIP_PROCESSO    VARCHAR2(1);
    CRET_COD_IDE_CLI     VARCHAR2(20);
    CRET_COD_BENEFICIO   NUMBER;
    CRET_SEQ_PAGAMENTO   NUMBER;
    CRET_COD_FCRUBRICA   NUMBER;
    CRET_SEQ_VIG         NUMBER;
    CRET_VAL_RUBRICA     NUMBER;
    CRET_FLG_NATUREZA    VARCHAR2(1);
    CRET_COD_IDE_CLI_BEN VARCHAR2(20);
    CRET_NUM_ORD_JUD     NUMBER;
    CRET_DAT_INI_REF     DATE;
    V_EXIST              BOOLEAN;
    V_EVENTO_ESPEC       VARCHAR2(1);
    V_VAL_RUBRICA        NUMBER(18, 4) := 0;
    ind                  NUMBER := 0;
    j                    number := 0;
    k                    number := 0;
    chave_ant            VARCHAR2(33);
    vc_nao_parcela       varchar2(1) := 'N';
    conta                number(4) := 0;




  BEGIN

    OPEN CUR_COMPL_RET FOR
      SELECT DC.COD_INS,
             DC.TIP_PROCESSO,
             DC.COD_IDE_CLI,
             DC.COD_BENEFICIO,
             DC.SEQ_PAGAMENTO,
             DC.SEQ_VIG,
             ' ' FLG_NATUREZA,
             DC.COD_IDE_CLI_BEN,
             DC.NUM_ORD_JUD,
             DC.DAT_INI_REF,
             sum(decode(flg_natureza,
                        'D',
                        DC.VAL_RUBRICA * -1,
                        DC.VAL_RUBRICA)) val_rubrica,
             trunc(dc.cod_fcrubrica / 100, 000) cod_fcrubrica
        INTO CRET_COD_INS,
             CRET_TIP_PROCESSO,
             CRET_COD_IDE_CLI,
             CRET_COD_BENEFICIO,
             CRET_SEQ_PAGAMENTO,
             CRET_SEQ_VIG,
             CRET_FLG_NATUREZA,
             CRET_COD_IDE_CLI_BEN,
             CRET_NUM_ORD_JUD,
             CRET_DAT_INI_REF,
             CRET_VAL_RUBRICA,
             CRET_COD_FCRUBRICA
        FROM tb_ficha_financeira_ret2 DC, -- tabela temporaria 24/06/2008 mvl
             TB_RUBRICAS_PROCESSO    RP,
             tb_formula_calculo      fc
       WHERE DC.COD_INS = PAR_COD_INS
         AND (DC.PER_PROCESSO = PAR_PER_PRO and
             DC.DAT_INI_REF = PAR_PER_PRO)
         AND (RP.TIP_PROCESSO = 'N')
         AND DC.TIP_PROCESSO = RP.TIP_PROCESSO
         AND DC.COD_IDE_CLI = ANT_IDE_CLI
         AND dc.cod_ins = rp.cod_ins
         and rp.flg_processa = 'S'
         and fc.cod_rubrica = rp.cod_rubrica
         and fc.cod_fcrubrica = dc.cod_fcrubrica
         and trunc(fc.cod_fcrubrica / 100) <> 658
         and fc.seq_vig > 0
         and fc.cod_ins = dc.cod_ins
         and rp.cod_rubrica in
             (select rpc.cod_rubrica
                from tb_rubricas_processo rpc
               where rpc.flg_processa = 'S'
                 and rpc.tip_processo = 'S'
                 and rpc.cod_ins = PAR_COD_INS)
       group by DC.COD_INS,
                DC.TIP_PROCESSO,
                DC.COD_IDE_CLI,
                DC.COD_BENEFICIO,
                DC.SEQ_PAGAMENTO,
                DC.SEQ_VIG,
                ' ',
                DC.COD_IDE_CLI_BEN,
                DC.NUM_ORD_JUD,
                DC.DAT_INI_REF,
                trunc(dc.cod_fcrubrica / 100, 000)
      union all -- Obtem rubricas do lancamento manual
      SELECT DC.COD_INS,
             DC.TIP_PROCESSO,
             DC.COD_IDE_CLI,
             DC.COD_BENEFICIO,
             DC.SEQ_PAGAMENTO,
             DC.SEQ_VIG,
             ' ' FLG_NATUREZA,
             DC.COD_IDE_CLI_BEN,
             DC.NUM_ORD_JUD,
             DC.DAT_INI_REF,
             sum(decode(flg_natureza,
                        'D',
                        DC.VAL_RUBRICA * -1,
                        DC.VAL_RUBRICA)) val_rubrica,
             trunc(dc.cod_fcrubrica / 100, 000) cod_fcrubrica
        FROM tb_ficha_financeira_ret2 DC, -- tabela temporaria 24/06/2008 mvl
             TB_RUBRICAS_PROCESSO    RP,
             tb_formula_calculo      fc
       WHERE DC.COD_INS = PAR_COD_INS
         AND (DC.PER_PROCESSO = PAR_PER_PRO and
             DC.DAT_INI_REF = PAR_PER_PRO)
         AND (RP.TIP_PROCESSO = 'N')
         AND DC.TIP_PROCESSO = RP.TIP_PROCESSO
         AND DC.COD_IDE_CLI = ANT_IDE_CLI
         AND dc.cod_ins = rp.cod_ins
         and rp.flg_processa = 'S'
         and fc.cod_rubrica = rp.cod_rubrica
         and fc.cod_fcrubrica = dc.cod_fcrubrica
         and trunc(fc.cod_fcrubrica / 100) <> 658
         and fc.seq_vig > 0
         and fc.cod_ins = dc.cod_ins
         and rp.cod_rubrica in
             (select rpc.cod_rubrica
                from tb_rubricas_processo rpc
               where rpc.flg_processa = 'N'
                 and rpc.tip_processo = 'S'
                 and rpc.cod_rubrica < 30000
                 and rpc.cod_ins = PAR_COD_INS)
       group by DC.COD_INS,
                DC.TIP_PROCESSO,
                DC.COD_IDE_CLI,
                DC.COD_BENEFICIO,
                DC.SEQ_PAGAMENTO,
                DC.SEQ_VIG,
                ' ',
                DC.COD_IDE_CLI_BEN,
                DC.NUM_ORD_JUD,
                DC.DAT_INI_REF,
                trunc(dc.cod_fcrubrica / 100, 000);

    FETCH CUR_COMPL_RET
      INTO CRET_COD_INS, CRET_TIP_PROCESSO, CRET_COD_IDE_CLI, CRET_COD_BENEFICIO, CRET_SEQ_PAGAMENTO, CRET_SEQ_VIG, CRET_FLG_NATUREZA, CRET_COD_IDE_CLI_BEN, CRET_NUM_ORD_JUD, CRET_VAL_RUBRICA, CRET_COD_FCRUBRICA;

    WHILE CUR_COMPL_RET%FOUND LOOP
      BEGIN
        V_EXIST := FALSE;

        -- Para os descontos 31/05/2007

        FOR i in 1 .. tdcd.count LOOP
          rdcd := null;
          rdcd := tdcd(i);
          IF CRET_COD_FCRUBRICA = trunc(RDCD.cod_fcrubrica / 100, 000) and
             CRET_COD_BENEFICIO = RDCD.cod_beneficio AND
             CRET_DAT_INI_REF = RDCN.DAT_INI_REF THEN
            V_EXIST := TRUE;
            exit; -- MVL - 31/03/2006
          END IF;
        END LOOP;

        -- Para as vantagens

        FOR I IN 1 .. TDCN.COUNT LOOP
          RDCN := NULL;
          RDCN := TDCN(I);

          IF CRET_COD_FCRUBRICA = trunc(RDCN.cod_fcrubrica / 100, 000) and
             CRET_COD_BENEFICIO = RDCN.cod_beneficio AND
             CRET_DAT_INI_REF = RDCN.DAT_INI_REF THEN
            V_EXIST := TRUE;
            exit; -- MVL - 31/03/2006
          END IF;
        END LOOP;

        IF NOT V_EXIST THEN
          --INLUIR COMO RETRATIVO CONTRARIO
          BEGIN
            cont_detalhe := cont_detalhe + 1;

            IF CRET_VAL_RUBRICA < 0 THEN
              CRET_VAL_RUBRICA  := CRET_VAL_RUBRICA * -1;
              CRET_FLG_NATUREZA := 'C';
            ELSE
              CRET_FLG_NATUREZA := 'D';
            END IF;

            begin
              SELECT COD_RUBRICA
                INTO CRET_COD_FCRUBRICA
                FROM TB_RUBRICAS
               WHERE COD_CONCEITO = CRET_COD_FCRUBRICA
                 AND FLG_NATUREZA = CRET_FLG_NATUREZA
                 AND SUBSTR(lpad(ltrim(to_char(COD_RUBRICA)), 7, 0), 6, 2) <> '00';

              IF CRET_VAL_RUBRICA > 0 THEN
                --                  inserir no array

                tdcn.extend;

                idx_caln        := nvl(idx_caln, 0) + 1;
                idx_seq_detalhe := nvl(idx_seq_detalhe, 0) + 1;

                rdcn.cod_ins       := PAR_COD_INS;
                rdcn.tip_processo  := PAR_TIP_PRO;
                rdcn.per_processo  := PAR_PER_PRO;
                rdcn.cod_ide_cli   := CRET_COD_IDE_CLI;
                rdcn.cod_beneficio := CRET_COD_BENEFICIO;
                rdcn.seq_pagamento := vi_seq_pagamento;
                rdcn.seq_detalhe   := idx_seq_detalhe;
                rdcn.cod_fcrubrica := CRET_COD_FCRUBRICA;
                rdcn.seq_vig       := CRET_SEQ_VIG;
                rdcn.val_rubrica   := CRET_VAL_RUBRICA;
                rdcn.num_quota     := 0;
                rdcn.flg_natureza  := CRET_FLG_NATUREZA;
                rdcn.tot_quota     := 0;
                IF PAR_TIP_PRO = 'R' THEN
                  rdcn.dat_ini_ref := CRET_DAT_INI_REF;
                ELSE
                  rdcn.dat_ini_ref := PAR_PER_PRO;
                END IF;
                rdcn.dat_fim_ref     := null;
                rdcn.num_ord_jud     := CRET_NUM_ORD_JUD;
                rdcn.dat_ing         := sysdate;
                rdcn.dat_ult_atu     := sysdate;
                rdcn.nom_usu_ult_atu := PAR_COD_USU;
                rdcn.nom_pro_ult_atu := 'FOLHA CALCULADA';
                rdcn.des_informacao  := null;

                tdcn(idx_caln) := rdcn;

              END IF;
            exception
              when no_data_found then
                p_sub_proc_erro := 'SP_VERIFICA_RUBRICA_NPAGA_MES_SUP';
                p_coderro       := SQLCODE;
                P_MSGERRO       := 'Erro ao obter a rubrica nao paga na suplementar';
                INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                      p_coderro,
                                      'Calcula Folha',
                                      sysdate,
                                      p_msgerro,
                                      p_sub_proc_erro,
                                      CRET_cod_ide_cli,
                                      CRET_COD_FCRUBRICA);
                VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
            end;
          end;
        END IF;
      END;

      FETCH CUR_COMPL_RET
        INTO CRET_COD_INS, CRET_TIP_PROCESSO, CRET_COD_IDE_CLI, CRET_COD_BENEFICIO, CRET_SEQ_PAGAMENTO, CRET_SEQ_VIG, CRET_FLG_NATUREZA, CRET_COD_IDE_CLI_BEN, CRET_NUM_ORD_JUD, CRET_VAL_RUBRICA, CRET_COD_FCRUBRICA;
    END LOOP;
    CLOSE CUR_COMPL_RET;

  END SP_VERIF_RUBRICA_NPAGA_MES_SUP;
  ----------------------------------------------------------------------------------
  PROCEDURE SP_CARREGA_PARVAL_FOLHA(p_per_pro in date) AS

    oval_elemento number;

    par_cod_param       varchar(10);
    par_cod_estrutura   varchar(10);
    par_cod_elemento    varchar(30);
    par_num_seq         number(8);
    par_val_elemento    number(18, 5);
    par_ini_vig         date;
    par_fim_vig         date;
    par_dat_ult_atu     date;
    par_nom_usu_ult_atu varchar(20);
    par_nom_pro_ult_atu varchar(40);
    par_num_faixa       number;


    CURSOR CUR_PARAM IS
      SELECT cod_param,
             cod_estrutura,
             cod_elemento,
             num_seq,
             val_elemento,
             ini_vig,
             fim_vig,
             dat_ult_atu,
             nom_usu_ult_atu,
             nom_pro_ult_atu,
             num_faixa
        FROM tb_det_param_estrutura
       WHERE (to_char(p_per_pro, 'YYYYMM') >= to_char(ini_vig, 'YYYYMM') AND
             (p_per_pro <=
             nvl(fim_vig, to_date('01/01/2045', 'dd/mm/yyyy'))))
       order by cod_param, cod_estrutura, cod_elemento, num_seq, num_faixa;

  BEGIN

    OPEN CUR_PARAM;
    FETCH CUR_PARAM
      INTO par_cod_param, par_cod_estrutura, par_cod_elemento, par_num_seq, par_val_elemento, par_ini_vig, par_fim_vig, par_dat_ult_atu, par_nom_usu_ult_atu, par_nom_pro_ult_atu, par_num_faixa;

    WHILE CUR_PARAM%found LOOP
      BEGIN
        vparam.extend;
        idx_param := nvl(idx_param, 0) + 1;
        rpval.cod_param := par_cod_param;
        rpval.cod_estrutura := par_cod_estrutura;
        rpval.cod_elemento := par_cod_elemento;
        rpval.num_seq := par_num_seq;
        rpval.val_elemento := par_val_elemento;
        rpval.ini_vig := par_ini_vig;
        rpval.fim_vig := par_fim_vig;
        rpval.dat_ult_atu := par_dat_ult_atu;
        rpval.nom_usu_ult_atu := par_nom_usu_ult_atu;
        rpval.nom_pro_ult_atu := par_nom_pro_ult_atu;
        rpval.num_faixa := par_num_faixa;
        vparam(idx_param) := rpval;

        FETCH CUR_PARAM
          INTO par_cod_param, par_cod_estrutura, par_cod_elemento, par_num_seq, par_val_elemento, par_ini_vig, par_fim_vig, par_dat_ult_atu, par_nom_usu_ult_atu, par_nom_pro_ult_atu, par_num_faixa;

      EXCEPTION
        WHEN OTHERS THEN
          p_sub_proc_erro := 'SP_CARREGA_PARVAL_FOLHA';
          p_coderro       := sqlcode;
          p_msgerro       := 'Erro ao carregar os parametros de folha';
          INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                p_coderro,
                                'Calcula Folha',
                                sysdate,
                                p_msgerro,
                                p_sub_proc_erro,
                                BEN_IDE_CLI,
                                COM_COD_FCRUBRICA);
          VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
          --       RAISE erro;
      END;
    END LOOP;
    close CUR_PARAM;
  END SP_CARREGA_PARVAL_FOLHA;
  ----------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_PARVAL_FOLHA2(P_COD_PARAM     in varchar,
                                   P_COD_ESTRUTURA in varchar,
                                   P_COD_ELEMENTO  in varchar,
                                   P_VADI01        out number) AS
    c     number;
    contp number;

  BEGIN
    contp := vparam.count;
    FOR c IN 1 .. contp LOOP
      rpval := vparam(c);
      IF rpval.cod_estrutura = p_cod_estrutura AND
         rpval.cod_elemento = p_cod_elemento THEN
        P_VADI01 := rpval.val_elemento;
        EXIT;
      END IF;
    END LOOP;

  END SP_OBTEM_PARVAL_FOLHA2;
  ----------------------------------------------------------------------------------
  ---> ffranco 03/2007
  PROCEDURE SP_OBTEM_PARVAL_FOLHA3(P_COD_PARAM     in varchar,
                                   P_COD_ESTRUTURA in varchar,
                                   P_COD_ELEMENTO  in varchar,
                                   P_DADI01        out date) AS
    c     number;
    contp number;

  BEGIN

    BEGIN

      select min(dpe.ini_vig)
        into P_DADI01
        from tb_det_param_estrutura dpe
       where dpe.cod_estrutura = p_cod_estrutura
         and dpe.cod_elemento = p_cod_elemento
         and dpe.cod_param = p_cod_param;
    exception
      when no_data_found then

        P_DADI01 := to_date('01/02/2004', 'dd/mm/yyyy');

    end;

    /*
      contp:=vparam.count;
      FOR c IN 1..contp LOOP
          rpval:=vparam(c);
           IF  rpval.cod_estrutura = p_cod_estrutura AND
              rpval.cod_elemento=p_cod_elemento and
              rpval.fim_vig is null THEN
              P_DADI01:=rpval.ini_vig;
              EXIT;
          END IF;
      END LOOP;
    */

  END SP_OBTEM_PARVAL_FOLHA3;
  ----------------------------------------------------------------------------------
  PROCEDURE SP_OBT_FAIXA_IRRF_SALFA_TASCO(P_COD_PARAM     in varchar2,
                                          P_COD_ESTRUTURA in varchar2,
                                          P_VADI01        out number,
                                          P_VADI02        out number,
                                          P_VADI03        out number,
                                          P_VADI04        out number,
                                          P_VADI05        out number,
                                          P_VADI06        out number,
                                          P_VADI07        out number,
                                          P_VADI08        out number,
                                          P_VADI09        out number,
                                          P_MSGERRO       out varchar2) AS

  BEGIN

    IF p_cod_param = 'TRAM' THEN
      SP_OBTEM_PARVAL_FOLHA2('TRAM',
                             P_COD_ESTRUTURA,
                             'IRLIM_SUP1',
                             P_VADI01);
      SP_OBTEM_PARVAL_FOLHA2('TRAM',
                             P_COD_ESTRUTURA,
                             'IRVAL_IMP1',
                             P_VADI02);
      SP_OBTEM_PARVAL_FOLHA2('TRAM',
                             P_COD_ESTRUTURA,
                             'IRVAL_AJUS1',
                             P_VADI03);
      SP_OBTEM_PARVAL_FOLHA2('TRAM',
                             P_COD_ESTRUTURA,
                             'IRLIM_SUP2',
                             P_VADI04);
      SP_OBTEM_PARVAL_FOLHA2('TRAM',
                             P_COD_ESTRUTURA,
                             'IRVAL_IMP2',
                             P_VADI05);
      SP_OBTEM_PARVAL_FOLHA2('TRAM',
                             P_COD_ESTRUTURA,
                             'IRVAL_AJUS2',
                             P_VADI06);
      SP_OBTEM_PARVAL_FOLHA2('TRAM',
                             P_COD_ESTRUTURA,
                             'IRLIM_SUP3',
                             P_VADI07);
      SP_OBTEM_PARVAL_FOLHA2('TRAM',
                             P_COD_ESTRUTURA,
                             'IRVAL_IMP3',
                             P_VADI08);
      SP_OBTEM_PARVAL_FOLHA2('TRAM',
                             P_COD_ESTRUTURA,
                             'IRVAL_AJUS3',
                             P_VADI09);
    END IF;

    IF p_cod_param = 'SALFA' THEN
      SP_OBTEM_PARVAL_FOLHA2('SALFA',
                             P_COD_ESTRUTURA,
                             'FAIXA1_SF',
                             P_VADI01);
      SP_OBTEM_PARVAL_FOLHA2('SALFA', P_COD_ESTRUTURA, 'VAL1SF', P_VADI02);
      SP_OBTEM_PARVAL_FOLHA2('SALFA',
                             P_COD_ESTRUTURA,
                             'FAIXA2_SF',
                             P_VADI03);
      SP_OBTEM_PARVAL_FOLHA2('SALFA', P_COD_ESTRUTURA, 'VAL2SF', P_VADI04);
      SP_OBTEM_PARVAL_FOLHA2('SALFA',
                             P_COD_ESTRUTURA,
                             'FAIXA3_SF',
                             P_VADI05);
      SP_OBTEM_PARVAL_FOLHA2('SALFA', P_COD_ESTRUTURA, 'VAL3SF', P_VADI06);
      P_VADI07 := 0;
      P_VADI08 := 0;
      P_VADI09 := 0;
    END IF;

    IF p_cod_param = 'TASCO' THEN
      SP_OBTEM_PARVAL_FOLHA2('TASCO',
                             P_COD_ESTRUTURA,
                             'BASE_PREV',
                             P_VADI01);
      SP_OBTEM_PARVAL_FOLHA2('TASCO',
                             P_COD_ESTRUTURA,
                             'DED_PREV',
                             P_VADI02);
      P_VADI03 := 0;
      P_VADI04 := 0;
      P_VADI05 := 0;
      P_VADI06 := 0;
      P_VADI07 := 0;
      P_VADI08 := 0;
      P_VADI09 := 0;
    END IF;

  EXCEPTION
    WHEN OTHERS THEN
      P_MSGERRO := sqlcode || sqlerrm;

  END SP_OBT_FAIXA_IRRF_SALFA_TASCO;
  ----------------------------------------------------------------------------------
  PROCEDURE SP_CARREGA_VAR_TOTAIS_FOLHA AS

    CURSOR CUR_VAR IS
      SELECT COD_VARIAVEL, DES_VARIAVEL
        FROM TB_VARIAVEIS
       WHERE FLG_GRAVA_TOTAIS = 'S';

    VCOD_VARIAVEL VARCHAR2(30);
    VDES_VARIAVEL VARCHAR2(100);
    J             number := 0;

  BEGIN

    OPEN CUR_VAR;

    FETCH CUR_VAR
      INTO VCOD_VARIAVEL, VDES_VARIAVEL;
    WHILE CUR_VAR%FOUND LOOP
      vtotvar.extend;
      idx_totvar := nvl(idx_totvar, 0) + 1;
      rvar.COD_VARIAVEL := VCOD_VARIAVEL;
      rvar.DES_VARIAVEL := VDES_VARIAVEL;
      vtotvar(idx_totvar) := rvar;
      FETCH CUR_VAR
        INTO VCOD_VARIAVEL, VDES_VARIAVEL;
    END LOOP;

    for j in 1 .. 4 loop
      vtotvar.extend;
      idx_totvar := nvl(idx_totvar, 0) + 1;
      IF J = 1 THEN
        VCOD_VARIAVEL := 'TOT_ISENCAO_IR';
        VDES_VARIAVEL := 'TOTAIS DE ISENCAO IR';
        --                valor := rfol.val_base_isencao;
      ELSIF J = 2 THEN
        VCOD_VARIAVEL := 'TOT_DED_IR';
        VDES_VARIAVEL := 'TOTAIS DE DEDUCOES IR';
        --                valor := rfol.ded_base_ir+rfol.ded_ir_oj + rfol.ded_ir_pa+rfol.ded_ir_doenca;
      ELSIF J = 3 THEN
        VCOD_VARIAVEL := 'TOT_BASE_BRUTA_IR';
        VDES_VARIAVEL := 'TOTAIS DA BASE BRUTA IR';
        --                valor := rfol.val_base_ir;
      ELSIF J = 4 THEN
        VCOD_VARIAVEL := 'TOT_BASE_LIQ_IR';
        VDES_VARIAVEL := 'TOTAIS DA BASE LIQUIDA IR';
        --                valor := rfol.val_ir_ret_pag;
      END IF;

      rvar.COD_VARIAVEL := VCOD_VARIAVEL;
      rvar.DES_VARIAVEL := VDES_VARIAVEL;
      vtotvar(idx_totvar) := rvar;
    end loop;
    close CUR_VAR;

  END SP_CARREGA_VAR_TOTAIS_FOLHA;
  ----------------------------------------------------------------------------------
  PROCEDURE SP_GRAVA_TOTAIS_FOLHA(P_COD_BENEFICIO IN NUMBER,
                                  P_COD_CLI       IN VARCHAR2,
                                  P_COD_VARIAVEL  IN VARCHAR2,
                                  P_VALOR1        IN NUMBER,
                                  P_VALOR2        IN NUMBER,
                                  P_VALOR3        IN NUMBER,
                                  P_VALOR4        IN NUMBER) AS

    cont    number;
    tot_var number(18, 4);
  BEGIN

    tot_var := 0;

    FOR cont IN 1 .. vtotvar.count LOOP
      rvar := vtotvar(cont);

      IF rvar.COD_VARIAVEL = 'NUM_DEPSF' THEN
        tot_var := VI_IDADE;
      ELSIF rvar.COD_VARIAVEL = 'BASEIR' THEN
        tot_var := VI_BASE_IR;
      ELSIF rvar.COD_VARIAVEL = 'TOT_ISENCAO_IR' THEN
        tot_var := p_valor1;
      ELSIF rvar.COD_VARIAVEL = 'TOT_DED_IR' THEN
        tot_var := p_valor2;
      ELSIF rvar.COD_VARIAVEL = 'TOT_BASE_BRUTA_IR' THEN
        tot_var := p_valor3;
      ELSIF rvar.COD_VARIAVEL = 'TOT_BASE_LIQ_IR' THEN
        tot_var := p_valor4;
      ELSE
        SP_OBTEM_VALORES_TOTAIS(rvar.COD_VARIAVEL,
                                P_COD_BENEFICIO,
                                0,
                                'N',
                                tot_var);
      END IF;

      if tot_var < 0 then
        tot_var := tot_var * -1;
      end if;

      BEGIN
        IF ANT_FLG_STATUS <> 'S' THEN
          ---> FFRANCO 03/2007
          INSERT /*+ append */
          INTO TB_TOTAIS_FOLHA
            (COD_INS,
             COD_IDE_CLI,
             COD_TIP_PROCESSO,
             SEQ_PAGAMENTO,
             PER_PROCESSO,
             COD_BENEFICIO,
             COD_ELEMENTO,
             VAL_ELEMENTO)
          VALUES
            (PAR_COD_INS,
             P_COD_CLI,
             PAR_TIP_PRO,
             cont,
             PAR_PER_PRO,
             P_COD_BENEFICIO,
             rvar.cod_variavel,
             trunc(tot_var, 2));
        ELSE
          INSERT /*+ append */
          INTO ---> FFRANCO 03/2007
          TB_TOTAIS_FOLHA_SIM
            (COD_INS,
             COD_IDE_CLI,
             COD_TIP_PROCESSO,
             SEQ_PAGAMENTO,
             PER_PROCESSO,
             COD_BENEFICIO,
             COD_ELEMENTO,
             VAL_ELEMENTO,
             LOTE)
          VALUES
            (PAR_COD_INS,
             P_COD_CLI,
             PAR_TIP_PRO,
             cont,
             PAR_PER_PRO,
             P_COD_BENEFICIO,
             rvar.cod_variavel,
             trunc(tot_var, 2),
             '1');
        END IF;
      EXCEPTION
        WHEN OTHERS THEN
          p_sub_proc_erro := 'SP_GRAVA_TOTAIS_FOLHA';
          p_coderro       := SQLCODE;
          P_MSGERRO       := 'Erro ao incluir na taela de totalizacao';
          INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                p_coderro,
                                'Calcula Folha',
                                sysdate,
                                p_msgerro,
                                p_sub_proc_erro,
                                BEN_IDE_CLI,
                                COM_COD_FCRUBRICA);
          VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
          --            RAISE ERRO;
      END;
    END LOOP;
  END SP_GRAVA_TOTAIS_FOLHA;
  ----------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_PERCEN_CALC_IR(ide_cli  in varchar2,
                                    TotBru   in number,
                                    PERC_IR  out number,
                                    REDUT_IR out number) AS

    idx_ir number;
    contir number;

    LIM_SUP1 number;
    VAL_IMP1 number;
    AJUS1    number;
    LIM_SUP2 number;
    VAL_IMP2 number;
    AJUS2    number;
    LIM_SUP3 number;
    VAL_IMP3 number;
    AJUS3    number;
    MonImp   number;

    PorImp  number;
    Redutor number;

    var1 number := 1;
    var2 number := 2;
    var3 number := 3;
    -- JTS 07-22-2010
    VI_ISENTO2 boolean := TRUE;
  BEGIN
    PorImp  := 0;
    Redutor := 0;
    MonImp  := 0;
  IF sp_isenta_irrf(ide_cli) <> VI_ISENTO2 THEN
    BEGIN
      BEGIN
        IF reg_ttypir(1) (1).val_elemento <= 0 THEN
          NULL;
        END IF;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN

          reg_ttypir.delete;
          contir := vparam.count;
          FOR c IN 1 .. contir LOOP
            rpval := vparam(c);
            IF rpval.cod_param = 'TRAM' AND rpval.cod_estrutura = 2000 THEN
              IF rpval.cod_elemento = 'IRLIM_SUP' THEN
                reg_ttypir(var1)(rpval.num_faixa) := rpval;
              ELSIF rpval.cod_elemento = 'IRVAL_AJUS' THEN
                reg_ttypir(var2)(rpval.num_faixa) := rpval;
              ELSIF rpval.cod_elemento = 'IRVAL_IMP' THEN
                reg_ttypir(var3)(rpval.num_faixa) := rpval;
              END IF;
              --              reg_ttypir.extend;
              --              idx_ir:= nvl(idx_ir,0) + 1;
              --              typir(idx_ir) := rpval;
            END IF;
          END LOOP;

      END;

      FOR c IN 1 .. 5 loop
        --reg_ttypir.count LOOP

        IF TotBru <= reg_ttypir(var1) (c).val_elemento THEN
          --LIM_SUP1 THEN
          Redutor := reg_ttypir(var2) (c).val_elemento; --AJUS1;
          PorImp  := reg_ttypir(var3) (c).val_elemento; --VAL_IMP1;
          EXIT;
        END IF;

      END LOOP;

      MonImp := (TotBru * PorImp / 100);
      MonImp := MonImp - Redutor;

      PERC_IR  := PorImp;
      REDUT_IR := Redutor;

    END;
   ELSE
      PERC_IR  := 0;
      REDUT_IR := 0;
   END IF;

  END SP_OBTEM_PERCEN_CALC_IR;
  ----------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_DEDUCOES(ide_cli in varchar2, deducao_ir out number) AS
    VI_VAL_PAGOS   NUMBER(18, 4) := 0;
    VI_ISENTO      boolean := TRUE;
    nEdad          number;
    nIni           number;
    nFin           number;
    vi_rubrica     number := 0;
    vi_val_rubrica number := 0;
    vi_seq_vig     number := 0;
    DAT_PERIODO_PAG      date ;-- Fim Alterac?o 27-07-2015
  BEGIN

    --- Obtem valores deduc?es
    -- Enfermidade grave
    -- judicial (isenc?o)
    IF sp_isenta_irrf(ide_cli) <> VI_ISENTO THEN
      ------ Inicio de Bloque Alterado ----------------------------

             FOR I IN 1 ..  tgrup.COUNT LOOP
             IF  VFOLHA.COUNT  >0 THEN
              IF tgrup(i).NUM_GRP_PAG =VFOLHA(1).NUM_GRP THEN
                 DAT_PERIODO_PAG :=tgrup(i).DAT_PAGAMENTO;
                 EXIT;
               END IF;
             END IF;
             END LOOP;
             IF   DAT_PERIODO_PAG IS NULL OR
                  DAT_PERIODO_PAG < PAR_PER_PRO THEN
                  DAT_PERIODO_PAG:=PAR_PER_PRO;
             END IF;

      -- Maior 65
      deducao_ir := 0;
      nFin       := to_char(ANT_DTA_NASC, 'yyyymmdd');
      nIni       := to_char(last_day(DAT_PERIODO_PAG), 'yyyymmdd');
      ---------------- Fim Alterac?o 27-07-2015 ----------------------
      nEdad      := (nIni - nFin) / 10000;
      IF nEdad >= 65 THEN
        deducao_ir := V_DED_IR_65;
      END IF;

      -- Dependentes
      VI_NUM_DEP_ECO := 0;
      IF COM_TIP_BENEFICIO = 'APOSENTADO' THEN
        VI_NUM_DEP_ECO := SP_OBTEM_DEP_DED_IR(ide_cli, 'A');
      ELSE
        VI_NUM_DEP_ECO := SP_OBTEM_DEP_DED_IR(ide_cli, 'P');
      END IF;

      IF VI_NUM_DEP_ECO > 0 THEN
        deducao_ir := nvl(deducao_ir, 0) + (V_DED_IR_DEP * VI_NUM_DEP_ECO);
      END IF;

      -- Rubricas que deduzem no IR

      vi_val_pagos := SP_OBTEM_DED_PAGOS_SEMPA;

      IF vi_val_pagos > 0 THEN
        deducao_ir := deducao_ir + vi_val_pagos;
      END IF;
    else
      deducao_ir := 0;
    end if;

    select nvl(deducao_ir, 0) into deducao_ir from dual;

  END SP_OBTEM_DEDUCOES;
  ----------------------------------------------------------------------------------
  PROCEDURE SP_CALCULA_IMPOSTO2(TotBru in number, MonImp out number) AS

    idx_ir number;
    contir number;
    valor_proc_especial number(18,4) :=0;
    LIM_SUP1 number;
    VAL_IMP1 number;
    AJUS1    number;
    LIM_SUP2 number;
    VAL_IMP2 number;
    AJUS2    number;
    LIM_SUP3 number;
    VAL_IMP3 number;
    AJUS3    number;

    PorImp  number;
    Redutor number;

    var1 number := 1;
    var2 number := 2;
    var3 number := 3;

    VALD  number(10,2) :=0;
  BEGIN
    PorImp  := 0;
    Redutor := 0;
    MonImp  := 0;

    BEGIN
      BEGIN
        IF reg_ttypir(1) (1).val_elemento <= 0 THEN
          NULL;
        END IF;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN

          reg_ttypir.delete;
          contir := vparam.count;

          IF  NOT VI_IR_EXTERIOR  THEN
                  FOR c IN 1 .. contir LOOP
                    rpval := vparam(c);
                    IF rpval.cod_param = 'TRAM' AND rpval.cod_estrutura = 2000 THEN
                      IF rpval.cod_elemento = 'IRLIM_SUP' THEN
                        reg_ttypir(var1)(rpval.num_faixa) := rpval;
                      ELSIF rpval.cod_elemento = 'IRVAL_AJUS' THEN
                        reg_ttypir(var2)(rpval.num_faixa) := rpval;
                      ELSIF rpval.cod_elemento = 'IRVAL_IMP' THEN
                        reg_ttypir(var3)(rpval.num_faixa) := rpval;
                      END IF;
                      --              reg_ttypir.extend;
                      --              idx_ir:= nvl(idx_ir,0) + 1;
                      --              typir(idx_ir) := rpval;
                    END IF;
                  END LOOP;
          ELSE
                  FOR c IN 1 .. contir LOOP
                    rpval := vparam(c);
                    IF rpval.cod_param = 'IREXT' AND rpval.cod_estrutura = 2000 THEN
                      IF rpval.cod_elemento = 'IRLIM_SUP' THEN
                        reg_ttypir(var1)(rpval.num_faixa) := rpval;
                      ELSIF rpval.cod_elemento = 'IRVAL_AJUS' THEN
                        reg_ttypir(var2)(rpval.num_faixa) := rpval;
                      ELSIF rpval.cod_elemento = 'IRVAL_IMP' THEN
                        reg_ttypir(var3)(rpval.num_faixa) := rpval;
                      END IF;
                      --              reg_ttypir.extend;
                      --              idx_ir:= nvl(idx_ir,0) + 1;
                      --              typir(idx_ir) := rpval;
                    END IF;
                  END LOOP;
          END IF;
      END;

      FOR c IN 1 .. 5 loop
        --reg_ttypir.count LOOP
           VALD := reg_ttypir(var1) (c).val_elemento;
        IF TotBru <= reg_ttypir(var1) (c).val_elemento THEN

          --LIM_SUP1 THEN
          Redutor := reg_ttypir(var2) (c).val_elemento; --AJUS1;
          PorImp  := reg_ttypir(var3) (c).val_elemento; --VAL_IMP1;
          EXIT;
        END IF;

      END LOOP;

      MonImp := (TotBru * PorImp / 100);
      MonImp := MonImp - Redutor;
    END;

    --Verifica se possui Processamento Especial ocorrido neste mes se sim deduz o IR processado
    valor_proc_especial :=0;

    -- Comentado em mar.10
/*    BEGIN
      select sum(dc.val_rubrica) into valor_proc_especial
      from   tb_det_calculado dc
      where  dc.tip_processo='S'
        and  dc.per_processo = PAR_PER_PRO
        and  dc.cod_ide_cli  = ant_ide_cli
        and  dc.cod_fcrubrica = 7001200 ;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        valor_proc_especial := 0;
      WHEN OTHERS THEN
        valor_proc_especial := 0;
    END;*/

    IF valor_proc_especial >0 AND valor_proc_especial IS NOT NULL THEN
       MonImp := MonImp - valor_proc_especial;
    END IF;
  END SP_CALCULA_IMPOSTO2;
--- Calculo de Ir Externo 
  PROCEDURE SP_CALCULA_IMPOSTO_EXT(TotBru in number, MonImp out number) AS

    idx_ir number;
    contir number;
    valor_proc_especial number(18,4) :=0;
    LIM_SUP1 number;
    VAL_IMP1 number;
    AJUS1    number;
    LIM_SUP2 number;
    VAL_IMP2 number;
    AJUS2    number;
    LIM_SUP3 number;
    VAL_IMP3 number;
    AJUS3    number;

    PorImp  number;
    Redutor number;

    var1 number := 1;
    var2 number := 2;
    var3 number := 3;

    VALD  number(10,2) :=0;
  BEGIN
    PorImp  := 0;
    Redutor := 0;
    MonImp  := 0;

    BEGIN
      BEGIN
        IF  reg_ttypir_ext(1) (1).val_elemento <= 0 THEN
          NULL;
        END IF;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN

          reg_ttypir_ext.delete;
          contir := vparam.count;

      
                  FOR c IN 1 .. contir LOOP
                    rpval := vparam(c);
                    IF rpval.cod_param = 'IREXT' AND rpval.cod_estrutura = 2000 THEN
                        IF rpval.cod_elemento = 'IRLIM_SUP' THEN
                          reg_ttypir_ext(var1)(rpval.num_faixa) := rpval;
                        ELSIF rpval.cod_elemento = 'IRVAL_AJUS' THEN
                           reg_ttypir_ext(var2)(rpval.num_faixa) := rpval;
                        ELSIF rpval.cod_elemento = 'IRVAL_IMP' THEN
                           reg_ttypir_ext(var3)(rpval.num_faixa) := rpval;
                        END IF;
                    END IF;
                  END LOOP;
         
      END;

      FOR c IN 1 .. 5 loop
        --reg_ttypir.count LOOP
           VALD :=  reg_ttypir_ext(var1) (c).val_elemento;
        IF TotBru <=  reg_ttypir_ext(var1) (c).val_elemento THEN

          --LIM_SUP1 THEN
          Redutor :=  reg_ttypir_ext(var2) (c).val_elemento; --AJUS1;
          PorImp  :=  reg_ttypir_ext(var3) (c).val_elemento; --VAL_IMP1;
          EXIT;
        END IF;

      END LOOP;

      MonImp := (TotBru * PorImp / 100);
      MonImp := MonImp - Redutor;
    END;

 

    IF valor_proc_especial >0 AND valor_proc_especial IS NOT NULL THEN
       MonImp := MonImp - valor_proc_especial;
    END IF;
  END SP_CALCULA_IMPOSTO_EXT; 
  ---------------------------------------------------------------------------------
  PROCEDURE SP_CALCULA_PENSAO AS

    i                integer := 0;
    j                integer := 0;
    r                integer := 0;
    v_apaga          char(1) := 'N';
    V_RUBRICA_PENSAO number := 0;
    V_BEN_IDE_CLI    VARCHAR2(20) := null;
    V_BENEF          NUMBER(8);
    v_rub            number;
    V_ANT_IDE_CLI    VARCHAR2(20) := null;
    v_num_linhas     number := 0;

   -- controle PA
    V_SEG_VIG        NUMBER(8);
    -- variaveis do sql

    PEN_COD_BENEFICIO        NUMBER(8) := 0;
    PEN_TIP_BENEFICIO        VARCHAR2(20);
    PEN_COD_RUBRICA          NUMBER(8);
    PEN_COD_FCRUBRICA        NUMBER(8);
    PEN_SEQ_VIG_FC           NUMBER(8);
    PEN_NAT_COMP             CHAR(1);
    PEN_NUM_ORD_JUD          NUMBER(8);
    PEN_IDE_CLI_INSTITUIDOR  VARCHAR2(20);
    PEN_VAL_FIXO_IND         NUMBER(18, 4);
    PEN_VAL_PORC_IND         NUMBER(18, 4);
    PEN_VAL_PORC2            NUMBER(18, 4);
    PEN_QTY_UNID_IND         NUMBER(18, 4);
    PEN_VAL_UNID             NUMBER(8);
    PEN_TIPO_VALOR           CHAR(1);
    PEN_IND_QTAS             CHAR(1);
    PEN_NUM_QTAS_PAG         NUMBER(8);
    PEN_TOT_QTAS_PAG         NUMBER(8);
    PEN_IND_COMP_RUB         CHAR(1);
    PEN_NAT_RUB              CHAR(1);
    PEN_INI_REF              DATE;
    PEN_FIM_REF              DATE;
    PEN_PRIORIDADE           NUMBER(8);
    PEN_DED_IR               CHAR(1);
    PEN_NUM_FUNCAO           NUMBER;
    PEN_FLG_PROCESSA         CHAR(1);
    PEN_NAT_VAL              CHAR(1);
    PEN_TIPO_APLICACAO       CHAR(1);
    PEN_PERCENT_BEN          NUMBER(18, 4);
    PEN_TIPO_EVENTO_ESPECIAL VARCHAR2(2);
    PEN_VAL_STR1             VARCHAR2(30);
    PEN_VAL_STR2             VARCHAR2(30);
    PEN_MATRICULA            VARCHAR2(20);
    PEN_ENTIDADE             NUMBER(8);
    PEN_CARGO                NUMBER(8);
    PEN_CARGO_APOS           NUMBER(8);
    PEN_PCCS                 NUMBER(8);
    PEN_COD_JORNADA          varchar2(10);
    PEN_DAT_INI_VIG          DATE;
    PEN_DAT_FIM_VIG          DATE;
    PEN_COD_VINCULO          NUMBER(8);
    PEN_COD_REGIME_JUR       NUMBER(8);
    PEN_TIP_PROVIMENTO       VARCHAR2(5);
    PEN_COD_JORNADA_REL      VARCHAR2(10);
    PEN_COD_ENTIDADE         NUMBER(8);
    PEN_NUM_MATRICULA        VARCHAR2(20);
    PEN_COD_IDE_CLI_BEN      VARCHAR2(20);
    PEN_MSC_INFORMACAO       VARCHAR2(10);
    PEN_COL_INFORMACAO       VARCHAR2(25);
    PEN_DAT_INI              DATE;
    PEN_DAT_FIM              DATE;
    -----------------------------------------------
    -- Variavel para controle de Base de Calculo 13
    -- 11/08/2015
    ----------------------------------------------
   PEN_VAL_PORC_13         NUMBER(18,4);
   PEN_VAL_FIXO_13         NUMBER(18,4);
   PEN_VAL_UNIDADE_13      NUMBER(18,4);
    -----------------------------------------------
    -- Fim de Bloque Base de Calculo 13
    ------------------------------------------------
    SAM_IDE_CLI              VARCHAR2(20);
    SAM_FLG_STATUS           CHAR(1);
    SAM_COD_BENEFICIO        NUMBER(8) := 0;
    SAN_TIP_BENEFICIO        VARCHAR2(20);
    SAN_COD_RUBRICA          NUMBER(8);
    SAN_COD_FCRUBRICA        NUMBER(8);
    SAN_SEQ_VIG_FC           NUMBER(8);
    SAN_NAT_COMP             CHAR(1);
    SAN_NUM_ORD_JUD          NUMBER(8);
    SAN_IDE_CLI_INSTITUIDOR  VARCHAR2(20);
    SAN_VAL_FIXO_IND         NUMBER(18, 4);
    SAN_VAL_PORC_IND         NUMBER(18, 4);
    SAN_VAL_PORC2            NUMBER(18, 4);
    SAN_QTY_UNID_IND         NUMBER(18, 4);
    SAN_VAL_UNID             NUMBER(8);
    SAN_TIPO_VALOR           CHAR(1);
    SAN_IND_QTAS             CHAR(1);
    SAN_NUM_QTAS_PAG         NUMBER(8);
    SAN_TOT_QTAS_PAG         NUMBER(8);
    SAN_IND_COMP_RUB         CHAR(1);
    SAN_NAT_RUB              CHAR(1);
    SAN_INI_REF              DATE;
    SAN_FIM_REF              DATE;
    SAN_PRIORIDADE           NUMBER(8);
    SAN_DED_IR               CHAR(1);
    SAN_NUM_FUNCAO           NUMBER;
    SAN_FLG_PROCESSA         CHAR(1);
    SAN_NAT_VAL              CHAR(1);
    SAN_TIPO_APLICACAO       CHAR(1);
    SAN_PERCENT_BEN          NUMBER(18, 4);
    SAN_TIPO_EVENTO_ESPECIAL VARCHAR2(2);
    SAN_VAL_STR1             VARCHAR2(30);
    SAN_VAL_STR2             VARCHAR2(30);
    SAN_MATRICULA            VARCHAR2(20);
    SAN_ENTIDADE             NUMBER(8);
    SAN_CARGO                NUMBER(8);
    SAN_CARGO_APOS           NUMBER(8);
    SAN_PCCS                 NUMBER(8);
    SAN_COD_JORNADA          varchar2(10);
    SAN_DAT_INI_VIG          DATE;
    SAN_DAT_FIM_VIG          DATE;
    SAN_COD_VINCULO          NUMBER(8);
    SAN_COD_REGIME_JUR       NUMBER(8);
    SAN_TIP_PROVIMENTO       VARCHAR2(5);
    SAN_COD_JORNADA_REL      VARCHAR2(10);
    SAN_COD_ENTIDADE         NUMBER(8);
    SAN_NUM_MATRICULA        VARCHAR2(20);
    SAN_COD_IDE_CLI_BEN      VARCHAR2(20);
    SAN_MSC_INFORMACAO       VARCHAR2(10);
    SAN_COL_INFORMACAO       VARCHAR2(25);
    SAN_DAT_INI              DATE;
    SAN_DAT_FIM              DATE;
    -----------------------------------------------
    -- Variavel para controle de Base de Calculo 13
    -- 11/08/2015
    ----------------------------------------------
   SAN_VAL_PORC_13         NUMBER(18,4);
   SAN_VAL_FIXO_13         NUMBER(18,4);
   SAN_VAL_UNIDADE_13      NUMBER(18,4);
    -----------------------------------------------
    -- Fim de Bloque Base de Calculo 13
    ------------------------------------------------
  BEGIN

    V_BEN_IDE_CLI       := null;
    SAN_COD_IDE_CLI_BEN := null;
    PEN_COD_IDE_CLI_BEN := null;

    --  salvar as variaveis correntes apos a quebra do beneficiario
    SAM_IDE_CLI              := BEN_IDE_CLI;
    SAM_FLG_STATUS           := BEN_FLG_STATUS;
    SAM_COD_BENEFICIO        := COM_COD_BENEFICIO;
    SAN_TIP_BENEFICIO        := COM_TIP_BENEFICIO;
    SAN_COD_RUBRICA          := COM_COD_RUBRICA;
    SAN_COD_FCRUBRICA        := COM_COD_FCRUBRICA;
    SAN_SEQ_VIG_FC           := COM_SEQ_VIG_FC;
    SAN_NAT_COMP             := COM_NAT_COMP;
    SAN_NUM_ORD_JUD          := COM_NUM_ORD_JUD;
    SAN_IDE_CLI_INSTITUIDOR  := COM_IDE_CLI_INSTITUIDOR;
    SAN_VAL_FIXO_IND         := COM_VAL_FIXO_IND;
    SAN_VAL_PORC_IND         := COM_VAL_PORC_IND;
    SAN_VAL_PORC2            := COM_VAL_PORC2;
    SAN_QTY_UNID_IND         := COM_QTY_UNID_IND;
    SAN_VAL_UNID             := COM_VAL_UNID;
    SAN_TIPO_VALOR           := COM_TIPO_VALOR;
    SAN_IND_QTAS             := COM_IND_QTAS;
    SAN_NUM_QTAS_PAG         := COM_NUM_QTAS_PAG;
    SAN_TOT_QTAS_PAG         := COM_TOT_QTAS_PAG;
    SAN_IND_COMP_RUB         := COM_IND_COMP_RUB;
    SAN_NAT_RUB              := COM_NAT_RUB;
    SAN_INI_REF              := COM_INI_REF;
    SAN_FIM_REF              := COM_FIM_REF;
    SAN_PRIORIDADE           := COM_PRIORIDADE;
    SAN_DED_IR               := COM_DED_IR;
    SAN_NUM_FUNCAO           := COM_NUM_FUNCAO;
    SAN_FLG_PROCESSA         := COM_FLG_PROCESSA;
    SAN_NAT_VAL              := COM_NAT_VAL;
    SAN_TIPO_APLICACAO       := COM_TIPO_APLICACAO;
    SAN_PERCENT_BEN          := COM_PERCENT_BEN;
    SAN_TIPO_EVENTO_ESPECIAL := COM_TIPO_EVENTO_ESPECIAL;
    SAN_VAL_STR1             := COM_VAL_STR1;
    SAN_VAL_STR2             := COM_VAL_STR2;
    SAN_MATRICULA            := COM_MATRICULA;
    SAN_ENTIDADE             := COM_ENTIDADE;
    SAN_CARGO                := COM_CARGO;
    SAN_CARGO_APOS           := COM_CARGO_APOS;
    SAN_PCCS                 := COM_PCCS;
    SAN_COD_JORNADA          := COM_COD_JORNADA;
    SAN_DAT_INI_VIG          := COM_DAT_INI_VIG;
    SAN_DAT_FIM_VIG          := COM_DAT_FIM_VIG;
    SAN_COD_VINCULO          := COM_COD_VINCULO;
    SAN_COD_REGIME_JUR       := COM_COD_REGIME_JUR;
    SAN_TIP_PROVIMENTO       := COM_TIP_PROVIMENTO;
    SAN_COD_JORNADA_REL      := COM_COD_JORNADA_REL;
    SAN_COD_ENTIDADE         := COM_COD_ENTIDADE;
    SAN_NUM_MATRICULA        := COM_NUM_MATRICULA;
    SAN_COD_IDE_CLI_BEN      := COM_COD_IDE_CLI_BEN;
    SAN_MSC_INFORMACAO       := COM_MSC_INFORMACAO;
    SAN_COL_INFORMACAO       := COM_COL_INFORMACAO;

    -----------------------------------------------
    -- Variavel para controle de Base de Calculo 13
    -- 11/08/2015
    ----------------------------------------------
   SAN_VAL_PORC_13    :=COM_VAL_PORC_13   ;
   SAN_VAL_FIXO_13    :=COM_VAL_FIXO_13   ;
   SAN_VAL_UNIDADE_13 :=COM_VAL_UNIDADE_13;
    -----------------------------------------------
    -- Fim de Bloque Base de Calculo 13
    ------------------------------------------------

    pdcn.delete;
    r := 0;

    -- apagar a rubrica de pens?o

    FOR i in 1 .. tdcn.count LOOP
      rdcn    := tdcn(i);
      v_apaga := 'N';

      FOR j in 1 .. cod_fcrubrica.count LOOP

        if rdcn.cod_fcrubrica = cod_fcrubrica(j) then
          v_apaga := 'S';
          exit;
        end if;

      END LOOP;

      if v_apaga = 'N' then
        pdcn.extend;
        r := r + 1;
        pdcn(r) := tdcn(i);
      end if;
    END LOOP;

    IDX_CALN := 0;
    tdcn.delete;
    tdcn_pa.delete;

    FOR i in 1 .. pdcn.count LOOP
      tdcn.extend;
      tdcn(i) := pdcn(i);
      IDX_CALN := IDX_CALN + 1;
    END LOOP;

    v_rub            := cod_fcrubrica.count;
    IDX_CALN_PA      := 0;
    v_valor_total_pa := 0;

    -- loop para calculo da pens?o
    FOR j in 1 .. cod_fcrubrica.count LOOP

      V_RUBRICA_PENSAO := cod_fcrubrica(j);
      V_BEN_IDE_CLI    := cod_beneficiario(j);
      V_BENEF          := a_beneficio(j);
      V_SEG_VIG        := cod_fcrubrica_seg(j);
      IF RUBRICAS_TIPOS(J) ='N' THEN
      --  obtem os dados para calculo --
              BEGIN
                --- COMPOSICAO INDIVIDUAL
                SELECT BB.COD_BENEFICIO,
                       DECODE(BC.COD_TIPO_BENEFICIO,
                              'M',
                              'PENSIONISTA',
                              'APOSENTADO'),
                       FC.COD_RUBRICA,
                       FC.COD_FCRUBRICA,
                       CI.SEQ_VIG_FC,
                       'I',
                       CI.NUM_ORD_JUD,
                       CI.COD_IDE_CLI,
                       CI.VAL_FIXO,
                       CI.VAL_PORC,
                       0,
                       CI.VAL_UNIDADE,
                       FC.VAL_UNIDADE,
                       FC.TIP_VALOR,
                       RR.FLG_QUOTA,
                       CI.NUM_QTAS_PAGAS,
                       CI.NUM_QTAS_PAGAS,
                       FC.FLG_COMP,
                       RR.FLG_NATUREZA,
                       CI.DAT_INI_REFER,
                       CI.DAT_FIM_REFER,
                       FC.NUM_PRIORIDADE,
                       CP.FLG_DED_IR,
                       RP.FLG_PROCESSA,
                       CP.NAT_VAL,
                       FC.TIP_APLICACAO,
                       BC.VAL_PERCENT_BEN,
                       nvl(RR.TIP_EVENTO_ESPECIAL, 'N'),
                       null,
                       null,
                       BC.NUM_MATRICULA,
                       BC.COD_ENTIDADE,
                       BC.COD_CARGO,
                       BC.COD_CARGO_APOS,
                       BB.DAT_INI_BEN,
                       BB.DAT_FIM_BEN,
                       CI.DAT_INI_REFER,
                       CI.COD_IDE_CLI_BEN,
                       FC.MSC_INFORMACAO,
                       FC.COL_INFORMACAO,
                      -----------------------------------------------
                      -- Variavel para controle de Base de Calculo 13
                      -- 11/08/2015
                      ----------------------------------------------
                       CI.VAL_PORC_13   ,
                       CI.VAL_FIXO_13   ,
                       CI.VAL_UNIDADE_13,
                       ----- Fim de Bloque   Base de Calculo 13
                       rownum
                  INTO PEN_COD_BENEFICIO,
                       PEN_TIP_BENEFICIO,
                       PEN_COD_RUBRICA,
                       PEN_COD_FCRUBRICA,
                       PEN_SEQ_VIG_FC,
                       PEN_NAT_COMP,
                       PEN_NUM_ORD_JUD,
                       PEN_IDE_CLI_INSTITUIDOR,
                       PEN_VAL_FIXO_IND,
                       PEN_VAL_PORC_IND,
                       PEN_VAL_PORC2,
                       PEN_QTY_UNID_IND,
                       PEN_VAL_UNID,
                       PEN_TIPO_VALOR,
                       PEN_IND_QTAS,
                       PEN_NUM_QTAS_PAG,
                       PEN_TOT_QTAS_PAG,
                       PEN_IND_COMP_RUB,
                       PEN_NAT_RUB,
                       PEN_INI_REF,
                       PEN_FIM_REF,
                       PEN_PRIORIDADE,
                       PEN_DED_IR,
                       PEN_FLG_PROCESSA,
                       PEN_NAT_VAL,
                       PEN_TIPO_APLICACAO,
                       PEN_PERCENT_BEN,
                       PEN_TIPO_EVENTO_ESPECIAL,
                       PEN_VAL_STR1,
                       PEN_VAL_STR2,
                       PEN_MATRICULA,
                       PEN_ENTIDADE,
                       PEN_CARGO,
                       PEN_CARGO_APOS,
                       PEN_DAT_INI,
                       PEN_DAT_FIM,
                       PEN_DAT_INI_VIG,
                       PEN_COD_IDE_CLI_BEN,
                       PEN_MSC_INFORMACAO,
                       PEN_COL_INFORMACAO,
                      -----------------------------------------------
                      -- Variavel para controle de Base de Calculo 13
                      -- 11/08/2015
                      ----------------------------------------------
                       PEN_VAL_PORC_13   ,
                       PEN_VAL_FIXO_13   ,
                       PEN_VAL_UNIDADE_13,
                       ----- Fim de Bloque   Base de Calculo 13
                       v_num_linhas
                  FROM USER_IPESP.TB_COMPOSICAO_INDIV    CI,
                       TB_BENEFICIARIO        BB,
                       TB_RUBRICAS            RR,
                       TB_FORMULA_CALCULO     FC,
                       TB_RUBRICAS_PROCESSO   RP,
                       TB_CONCESSAO_BENEFICIO BC,
                       TB_CONCEITOS_PAG       CP,
                       TB_BENEFICIO_CARGO     EC
                 WHERE BB.COD_INS = PAR_COD_INS
                   AND FC.COD_FCRUBRICA = V_RUBRICA_PENSAO
                   AND CI.COD_IDE_CLI   = ANT_IDE_CLI

       --- Incrementado um Novo evento especial para tratar repasses.
       ---- Evento Especial 8
       ---------------------------------------------------------------
                  --   AND CI.COD_IDE_CLI_BEN      =     V_BEN_IDE_CLI
                   AND NVL(CI.COD_IDE_CLI_BEN,'0') = NVL(V_BEN_IDE_CLI,'0')

                   AND CI.COD_BEN = V_BENEF
                   AND CI.SEQ_VIG = V_SEG_VIG
                   AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
                       to_char(BB.DAT_INI_BEN, 'YYYYMM') and
                       to_char(PAR_PER_PRO, 'YYYYMM') <=
                       to_char(nvl(BB.DAT_FIM_BEN,
                                    to_date('01/01/2045', 'dd/mm/yyyy')),
                                'YYYYMM'))
                   AND BB.FLG_STATUS in ('A', 'H', 'S', 'X')
                   AND CI.FLG_STATUS = 'V'
                   AND BB.FLG_REG_ATIV = 'S'
                   AND BB.FLG_CONT_BEN = 'N'
                   AND BC.COD_INS = BB.COD_INS
                   AND BC.COD_BENEFICIO = BB.COD_BENEFICIO
                   AND CI.COD_INS = BB.COD_INS
                   AND CI.COD_IDE_CLI = BB.COD_IDE_CLI_BEN
                   AND BC.COD_ENTIDADE = RR.COD_ENTIDADE
                   AND RR.COD_ENTIDADE = RP.COD_ENTIDADE
                   AND RR.COD_ENTIDADE = CP.COD_ENTIDADE
                   AND RR.COD_ENTIDADE = FC.COD_ENTIDADE              -- AND BC.COD_IDE_CLI_SERV= BB.COD_IDE_CLI_BEN efv 20060823
                   AND CI.COD_BEN = BB.COD_BENEFICIO
                   AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
                       to_char(CI.DAT_INI_VIG, 'YYYYMM') and
                       to_char(PAR_PER_PRO, 'YYYYMM') <=
                       to_char(nvl(CI.DAT_FIM_VIG,
                                    to_date('01/01/2045', 'dd/mm/yyyy')),
                                'YYYYMM'))
                   AND FC.COD_INS = BB.COD_INS
                   AND FC.COD_FCRUBRICA = CI.COD_FCRUBRICA
                   AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
                       to_char(FC.DAT_INI_VIG, 'YYYYMM') and
                       to_char(PAR_PER_PRO, 'YYYYMM') <=
                       to_char(nvl(FC.DAT_FIM_VIG,
                                    to_date('01/01/2045', 'dd/mm/yyyy')),
                                'YYYYMM'))
                   AND FC.TIP_APLICACAO = 'I'
                   AND RR.COD_INS = BB.COD_INS
                   AND RR.COD_RUBRICA = FC.COD_RUBRICA
                   AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
                       to_char(RR.DAT_INI_VIG, 'YYYYMM') and
                       to_char(PAR_PER_PRO, 'YYYYMM') <=
                       to_char(nvl(RR.DAT_FIM_VIG,
                                    to_date('01/01/2045', 'dd/mm/yyyy')),
                                'YYYYMM'))
                   AND CP.COD_INS = RR.COD_INS
                   AND CP.COD_CONCEITO = RR.COD_CONCEITO
                   AND RP.COD_INS = RR.COD_INS
                   AND RP.COD_RUBRICA = RR.COD_RUBRICA
                   AND RP.TIP_PROCESSO = PAR_TIP_PRO
                   AND RP.SEQ_VIG >= 0
                     AND RP.FLG_PROCESSA = 'S'
                   AND RR.SEQ_VIG = RP.SEQ_VIG_RUBRICA
                   AND RR.SEQ_VIG = FC.SEQ_VIG_RUBRICA
                   AND EC.COD_INS = BC.COD_INS
                   AND EC.COD_BENEFICIO = BC.COD_BENEFICIO
                   AND EC.COD_IDE_CLI_SERV = BC.COD_IDE_CLI_SERV
                   AND EC.COD_ENTIDADE = BC.COD_ENTIDADE
                     AND EC.COD_IDE_CLI_BEN = bb.cod_ide_cli_ben
                   AND EC.COD_PCCS = BC.COD_PCCS
                   AND EC.NUM_MATRICULA = BC.NUM_MATRICULA
                   AND EC.FLG_STATUS = 'V'
                   AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
                       to_char(EC.DAT_INI_VIG, 'YYYYMM') AND
                       to_char(PAR_PER_PRO, 'YYYYMM') <=
                       to_char(nvl(EC.DAT_FIM_VIG,
                                    to_date('01/01/2045', 'dd/mm/yyyy')),
                                'YYYYMM'));
                --ORDER BY CI.COD_IDE_CLI_BEN;

              EXCEPTION
                WHEN OTHERS THEN
                  p_sub_proc_erro := 'SP_CALCULA_PENSAO';
                  p_coderro       := SQLCODE;
                  P_MSGERRO       := SQLERRM;
              END;
      ELSE
              --  obtem os dados para calculo --
              BEGIN
                --- COMPOSICAO INDIVIDUAL
                SELECT BB.COD_BENEFICIO,
                       DECODE(BC.COD_TIPO_BENEFICIO,
                              'M',
                              'PENSIONISTA',
                              'APOSENTADO'),
                       RA.COD_RUBRICA,
                       RA.COD_FCRUBRICA,
                       CI.SEQ_VIG_FC,
                       'I',
                       CI.NUM_ORD_JUD,
                       CI.COD_IDE_CLI,
                       CI.VAL_FIXO,
                       CI.VAL_PORC,
                       0,
                       CI.VAL_UNIDADE,
                       FC.VAL_UNIDADE,
                       FC.TIP_VALOR,
                       RR.FLG_QUOTA,
                       CI.NUM_QTAS_PAGAS,
                       CI.NUM_QTAS_PAGAS,
                       FC.FLG_COMP,
                       RR.FLG_NATUREZA,
                       CI.DAT_INI_REFER,
                       CI.DAT_FIM_REFER,
                       FC.NUM_PRIORIDADE,
                       CP.FLG_DED_IR,
                       RP.FLG_PROCESSA,
                       CP.NAT_VAL,
                       FC.TIP_APLICACAO,
                       BC.VAL_PERCENT_BEN,
                       nvl(RR.TIP_EVENTO_ESPECIAL, 'N'),
                       null,
                       null,
                       BC.NUM_MATRICULA,
                       BC.COD_ENTIDADE,
                       BC.COD_CARGO,
                       BC.COD_CARGO_APOS,
                       BB.DAT_INI_BEN,
                       BB.DAT_FIM_BEN,
                       CI.DAT_INI_REFER,
                       CI.COD_IDE_CLI_BEN,
                       -----------------------------------------------
                      -- Variavel para controle de Base de Calculo 13
                      -- 11/08/2015
                      ----------------------------------------------
                       RA.MSC_INFORMACAO,
                       RA.COL_INFORMACAO,------------------------
                      -- Variavel para controle de Base de Calculo 13
                      -- 11/08/2015
                      ----------------------------------------------
                       CI.VAL_PORC_13   ,
                       CI.VAL_FIXO_13   ,
                       CI.VAL_UNIDADE_13,
                       ----- Fim de Bloque   Base de Calculo 13
                       rownum
                  INTO PEN_COD_BENEFICIO,
                       PEN_TIP_BENEFICIO,
                       PEN_COD_RUBRICA,
                       PEN_COD_FCRUBRICA,
                       PEN_SEQ_VIG_FC,
                       PEN_NAT_COMP,
                       PEN_NUM_ORD_JUD,
                       PEN_IDE_CLI_INSTITUIDOR,
                       PEN_VAL_FIXO_IND,
                       PEN_VAL_PORC_IND,
                       PEN_VAL_PORC2,
                       PEN_QTY_UNID_IND,
                       PEN_VAL_UNID,
                       PEN_TIPO_VALOR,
                       PEN_IND_QTAS,
                       PEN_NUM_QTAS_PAG,
                       PEN_TOT_QTAS_PAG,
                       PEN_IND_COMP_RUB,
                       PEN_NAT_RUB,
                       PEN_INI_REF,
                       PEN_FIM_REF,
                       PEN_PRIORIDADE,
                       PEN_DED_IR,
                       PEN_FLG_PROCESSA,
                       PEN_NAT_VAL,
                       PEN_TIPO_APLICACAO,
                       PEN_PERCENT_BEN,
                       PEN_TIPO_EVENTO_ESPECIAL,
                       PEN_VAL_STR1,
                       PEN_VAL_STR2,
                       PEN_MATRICULA,
                       PEN_ENTIDADE,
                       PEN_CARGO,
                       PEN_CARGO_APOS,
                       PEN_DAT_INI,
                       PEN_DAT_FIM,
                       PEN_DAT_INI_VIG,
                       PEN_COD_IDE_CLI_BEN,
                       PEN_MSC_INFORMACAO,
                       PEN_COL_INFORMACAO,
                        -----------------------------------------------
                      -- Variavel para controle de Base de Calculo 13
                      -- 11/08/2015
                      ----------------------------------------------
                       PEN_VAL_PORC_13   ,
                       PEN_VAL_FIXO_13   ,
                       PEN_VAL_UNIDADE_13,
                       ----- Fim de Bloque   Base de Calculo 13
                       v_num_linhas
                  FROM TB_COMPOSICAO_INDIV     CI,
                       TB_BENEFICIARIO         BB,
                       TB_RUBRICAS             RR,
                       TB_FORMULA_CALCULO      FC,
                       TB_RUBRICAS_PROCESSO    RP,
                       TB_CONCESSAO_BENEFICIO  BC,
                       TB_CONCEITOS_PAG        CP,
                       TB_BENEFICIO_CARGO      EC,
                       TB_RUBRICAS_AUTOMATICAS RA
                 WHERE BB.COD_INS = PAR_COD_INS
                   AND RA.COD_FCRUBRICA = V_RUBRICA_PENSAO
                   AND CI.COD_IDE_CLI   = ANT_IDE_CLI

       --- Incrementado um Novo evento especial para tratar repasses.
       ---- Evento Especial 8
       ---------------------------------------------------------------
               --  AND     CI.COD_IDE_CLI_BEN      =     V_BEN_IDE_CLI
                   AND NVL(CI.COD_IDE_CLI_BEN,'0') = NVL(V_BEN_IDE_CLI,'0')

                   AND CI.COD_BEN = V_BENEF
                   AND CI.SEQ_VIG = V_SEG_VIG
                   AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
                       to_char(BB.DAT_INI_BEN, 'YYYYMM') and
                       to_char(PAR_PER_PRO, 'YYYYMM') <=
                       to_char(nvl(BB.DAT_FIM_BEN,
                                    to_date('01/01/2045', 'dd/mm/yyyy')),
                                'YYYYMM'))
                   AND BB.FLG_STATUS in ('A', 'H', 'S', 'X')
                   AND CI.FLG_STATUS = 'V'
                   AND BB.FLG_REG_ATIV = 'S'
                   AND BB.FLG_CONT_BEN = 'N'
                   AND BC.COD_INS = BB.COD_INS
                   AND BC.COD_BENEFICIO = BB.COD_BENEFICIO
                   AND CI.COD_INS = BB.COD_INS
                   AND CI.COD_IDE_CLI = BB.COD_IDE_CLI_BEN
                   AND BC.COD_ENTIDADE = RR.COD_ENTIDADE
                   AND RR.COD_ENTIDADE = RP.COD_ENTIDADE
                   AND RR.COD_ENTIDADE = CP.COD_ENTIDADE
                   AND RR.COD_ENTIDADE = FC.COD_ENTIDADE              -- AND BC.COD_IDE_CLI_SERV= BB.COD_IDE_CLI_BEN efv 20060823
                   AND CI.COD_BEN = BB.COD_BENEFICIO
                   AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
                       to_char(CI.DAT_INI_VIG, 'YYYYMM') and
                       to_char(PAR_PER_PRO, 'YYYYMM') <=
                       to_char(nvl(CI.DAT_FIM_VIG,
                                    to_date('01/01/2045', 'dd/mm/yyyy')),
                                'YYYYMM'))
                   AND FC.COD_INS = BB.COD_INS
                   AND FC.COD_FCRUBRICA = CI.COD_FCRUBRICA
                   AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
                       to_char(FC.DAT_INI_VIG, 'YYYYMM') and
                       to_char(PAR_PER_PRO, 'YYYYMM') <=
                       to_char(nvl(FC.DAT_FIM_VIG,
                                    to_date('01/01/2045', 'dd/mm/yyyy')),
                                'YYYYMM'))
                   AND FC.TIP_APLICACAO = 'I'
                   AND RR.COD_INS = BB.COD_INS
                   AND RR.COD_RUBRICA = FC.COD_RUBRICA
                   AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
                       to_char(RR.DAT_INI_VIG, 'YYYYMM') and
                       to_char(PAR_PER_PRO, 'YYYYMM') <=
                       to_char(nvl(RR.DAT_FIM_VIG,
                                    to_date('01/01/2045', 'dd/mm/yyyy')),
                                'YYYYMM'))
                   AND CP.COD_INS = RR.COD_INS
                   AND CP.COD_CONCEITO = RR.COD_CONCEITO
                   AND RP.COD_INS = RR.COD_INS
                   AND RP.COD_RUBRICA = RR.COD_RUBRICA
                   AND RP.TIP_PROCESSO = PAR_TIP_PRO
                   AND RP.SEQ_VIG >= 0
                     AND RP.FLG_PROCESSA = 'S'
                   AND RR.SEQ_VIG = RP.SEQ_VIG_RUBRICA
                   AND RR.SEQ_VIG = FC.SEQ_VIG_RUBRICA
                   AND EC.COD_INS = BC.COD_INS
                   AND EC.COD_BENEFICIO = BC.COD_BENEFICIO
                   AND EC.COD_IDE_CLI_SERV = BC.COD_IDE_CLI_SERV
                   AND EC.COD_ENTIDADE = BC.COD_ENTIDADE
                     AND EC.COD_IDE_CLI_BEN = bb.cod_ide_cli_ben
                   AND EC.COD_PCCS = BC.COD_PCCS
                   AND EC.NUM_MATRICULA = BC.NUM_MATRICULA
                   AND EC.FLG_STATUS = 'V'
                   AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
                       to_char(EC.DAT_INI_VIG, 'YYYYMM') AND
                       to_char(PAR_PER_PRO, 'YYYYMM') <=
                       to_char(nvl(EC.DAT_FIM_VIG,
                                    to_date('01/01/2045', 'dd/mm/yyyy')),
                                'YYYYMM'))
                  AND RA.COD_INS=FC.COD_INS
                  AND RA.COD_FCRUBRICA_ASSOC =FC.COD_FCRUBRICA
                  AND RA.COD_ENTIDADE        =FC.COD_ENTIDADE
                  AND   (to_char(PAR_PER_PRO, 'YYYYMM') >=
                      to_char(RA.DAT_INI_VIG, 'YYYYMM') AND
                      to_char(PAR_PER_PRO, 'YYYYMM') <=
                      to_char(nvl(RA.DAT_FIM_VIG, to_date('01/01/2045', 'dd/mm/yyyy')),
                    'YYYYMM'))
                    ;
                --ORDER BY CI.COD_IDE_CLI_BEN;

              EXCEPTION
                WHEN OTHERS THEN
                  p_sub_proc_erro := 'SP_CALCULA_PENSAO';
                  p_coderro       := SQLCODE;
                  P_MSGERRO       := SQLERRM;
              END;
       END IF;
      --  fim do SQL
      BEN_IDE_CLI              := ANT_IDE_CLI;
      BEN_FLG_STATUS           := ANT_FLG_STATUS;
      COM_COD_BENEFICIO        := PEN_COD_BENEFICIO;
      COM_TIP_BENEFICIO        := PEN_TIP_BENEFICIO;
      COM_COD_RUBRICA          := PEN_COD_RUBRICA;
      COM_COD_FCRUBRICA        := PEN_COD_FCRUBRICA;
      COM_SEQ_VIG_FC           := PEN_SEQ_VIG_FC;
      COM_NAT_COMP             := PEN_NAT_COMP;
      COM_NUM_ORD_JUD          := PEN_NUM_ORD_JUD;
      COM_IDE_CLI_INSTITUIDOR  := PEN_IDE_CLI_INSTITUIDOR;
      COM_VAL_FIXO_IND         := PEN_VAL_FIXO_IND;
      COM_VAL_PORC_IND         := PEN_VAL_PORC_IND;
      COM_VAL_PORC2            := PEN_VAL_PORC2;
      COM_QTY_UNID_IND         := PEN_QTY_UNID_IND;
      COM_VAL_UNID             := PEN_VAL_UNID;
      COM_TIPO_VALOR           := PEN_TIPO_VALOR;
      COM_IND_QTAS             := PEN_IND_QTAS;
      COM_NUM_QTAS_PAG         := PEN_NUM_QTAS_PAG;
      COM_TOT_QTAS_PAG         := PEN_TOT_QTAS_PAG;
      COM_IND_COMP_RUB         := PEN_IND_COMP_RUB;
      COM_NAT_RUB              := PEN_NAT_RUB;
      COM_INI_REF              := PEN_INI_REF;
      COM_FIM_REF              := PEN_FIM_REF;
      COM_PRIORIDADE           := PEN_PRIORIDADE;
      COM_DED_IR               := PEN_DED_IR;
      COM_NUM_FUNCAO           := PEN_NUM_FUNCAO;
      COM_FLG_PROCESSA         := PEN_FLG_PROCESSA;
      COM_NAT_VAL              := PEN_NAT_VAL;
      COM_TIPO_APLICACAO       := PEN_TIPO_APLICACAO;
      COM_PERCENT_BEN          := PEN_PERCENT_BEN;
      COM_TIPO_EVENTO_ESPECIAL := PEN_TIPO_EVENTO_ESPECIAL;
      COM_VAL_STR1             := PEN_VAL_STR1;
      COM_VAL_STR2             := PEN_VAL_STR2;
      COM_MATRICULA            := PEN_MATRICULA;
      COM_ENTIDADE             := PEN_ENTIDADE;
      COM_CARGO                := PEN_CARGO;
      COM_CARGO_APOS           := PEN_CARGO_APOS;
      COM_PCCS                 := NVL(PEN_PCCS,0);
      COM_COD_JORNADA          := PEN_COD_JORNADA;
      COM_DAT_INI_VIG          := PEN_DAT_INI_VIG;
      COM_DAT_FIM_VIG          := PEN_DAT_FIM_VIG;
      COM_COD_VINCULO          := PEN_COD_VINCULO;
      COM_COD_REGIME_JUR       := PEN_COD_REGIME_JUR;
      COM_TIP_PROVIMENTO       := PEN_TIP_PROVIMENTO;
      COM_COD_JORNADA_REL      := PEN_COD_JORNADA_REL;
      COM_COD_ENTIDADE         := PEN_COD_ENTIDADE;
      COM_NUM_MATRICULA        := PEN_NUM_MATRICULA;
      COM_COD_IDE_CLI_BEN      := PEN_COD_IDE_CLI_BEN;
      COM_MSC_INFORMACAO       := PEN_MSC_INFORMACAO;
      COM_COL_INFORMACAO       := PEN_COL_INFORMACAO;
    -----------------------------------------------
    -- Variavel para controle de Base de Calculo 13
    -- 11/08/2015
    ----------------------------------------------
    COM_VAL_PORC_13            :=PEN_VAL_PORC_13   ;
    COM_VAL_FIXO_13            :=PEN_VAL_FIXO_13   ;
    COM_VAL_UNIDADE_13         :=PEN_VAL_UNIDADE_13;
    ---- Ticket 41024 ---- Para Calculo de Fator Mês.
    BEN_DAT_INICIO             :=PEN_DAT_INI;
    -----------------------------------------------
    -- Fim de Bloque Base de Calculo 13

        FOR i2 IN 1 .. vfolha.count LOOP
            rfol := vfolha(i2);
             EXIT WHEN   RFOL.COD_BENEFICIO=PEN_COD_BENEFICIO;
        END LOOP;
        COM_COD_ENTIDADE:=RFOL.COD_ENTIDADE;



      IF V_NUM_LINHAS = 1 THEN
        V_ANT_IDE_CLI := PEN_COD_IDE_CLI_BEN;
      END IF;


      SP_CALCULA_VALOR_RUBRICA;

      IF mon_calculo > 0 THEN
        -- armazena em array
        mon_calculo := trunc(round(mon_calculo,2), 2);
        --- Comentado por JTS 26-01-2011
            --SP_INS_DETCAL_PA(V_ANT_IDE_CLI, mon_calculo);
        --    Inverte a natureza da rubrica para gravar
        --    o registro como debito
        rdcn.dat_ini_ref  := COM_INI_REF;
        rdcn.dat_fim_ref  := COM_FIM_REF;
        rdcn.flg_natureza := COM_NAT_RUB;
        SP_INS_DETCALCULADO(mon_calculo);
        v_valor_total_pa := v_valor_total_pa + mon_calculo;
      END IF;


    END LOOP;

    COM_COD_BENEFICIO        := SAM_COD_BENEFICIO;
    COM_TIP_BENEFICIO        := SAN_TIP_BENEFICIO;
    COM_COD_RUBRICA          := SAN_COD_RUBRICA;
    COM_COD_FCRUBRICA        := SAN_COD_FCRUBRICA;
    COM_SEQ_VIG_FC           := SAN_SEQ_VIG_FC;
    COM_NAT_COMP             := SAN_NAT_COMP;
    COM_NUM_ORD_JUD          := SAN_NUM_ORD_JUD;
    COM_IDE_CLI_INSTITUIDOR  := SAN_IDE_CLI_INSTITUIDOR;
    COM_VAL_FIXO_IND         := SAN_VAL_FIXO_IND;
    COM_VAL_PORC_IND         := SAN_VAL_PORC_IND;
    COM_VAL_PORC2            := SAN_VAL_PORC2;
    COM_QTY_UNID_IND         := SAN_QTY_UNID_IND;
    COM_VAL_UNID             := SAN_VAL_UNID;
    COM_TIPO_VALOR           := SAN_TIPO_VALOR;
    COM_IND_QTAS             := SAN_IND_QTAS;
    COM_NUM_QTAS_PAG         := SAN_NUM_QTAS_PAG;
    COM_TOT_QTAS_PAG         := SAN_TOT_QTAS_PAG;
    COM_IND_COMP_RUB         := SAN_IND_COMP_RUB;
    COM_NAT_RUB              := SAN_NAT_RUB;
    COM_INI_REF              := SAN_INI_REF;
    COM_FIM_REF              := SAN_FIM_REF;
    COM_PRIORIDADE           := SAN_PRIORIDADE;
    COM_DED_IR               := SAN_DED_IR;
    COM_NUM_FUNCAO           := SAN_NUM_FUNCAO;
    COM_FLG_PROCESSA         := SAN_FLG_PROCESSA;
    COM_NAT_VAL              := SAN_NAT_VAL;
    COM_TIPO_APLICACAO       := SAN_TIPO_APLICACAO;
    COM_PERCENT_BEN          := SAN_PERCENT_BEN;
    COM_TIPO_EVENTO_ESPECIAL := SAN_TIPO_EVENTO_ESPECIAL;
    COM_VAL_STR1             := SAN_VAL_STR1;
    COM_VAL_STR2             := SAN_VAL_STR2;
    COM_MATRICULA            := SAN_MATRICULA;
    COM_ENTIDADE             := SAN_ENTIDADE;
    COM_CARGO                := SAN_CARGO;
    COM_CARGO_APOS           := SAN_CARGO_APOS;
    COM_PCCS                 := SAN_PCCS;
    COM_COD_JORNADA          := SAN_COD_JORNADA;
    COM_DAT_INI_VIG          := SAN_DAT_INI_VIG;
    COM_DAT_FIM_VIG          := SAN_DAT_FIM_VIG;
    COM_COD_VINCULO          := SAN_COD_VINCULO;
    COM_COD_REGIME_JUR       := SAN_COD_REGIME_JUR;
    COM_TIP_PROVIMENTO       := SAN_TIP_PROVIMENTO;
    COM_COD_JORNADA_REL      := SAN_COD_JORNADA_REL;
    COM_COD_ENTIDADE         := SAN_COD_ENTIDADE;
    COM_NUM_MATRICULA        := SAN_NUM_MATRICULA;
    COM_COD_IDE_CLI_BEN      := SAN_COD_IDE_CLI_BEN;
    COM_MSC_INFORMACAO       := SAN_MSC_INFORMACAO;
    COM_COL_INFORMACAO       := SAN_COL_INFORMACAO;
    BEN_IDE_CLI    := SAM_IDE_CLI;
    BEN_FLG_STATUS := SAM_FLG_STATUS;
    -----------------------------------------------
    -- Variavel para controle de Base de Calculo 13
    -- 11/08/2015
    ----------------------------------------------
    COM_VAL_PORC_13            :=SAN_VAL_PORC_13   ;
    COM_VAL_FIXO_13            :=SAN_VAL_FIXO_13   ;
    COM_VAL_UNIDADE_13         :=SAN_VAL_UNIDADE_13;
    -----------------------------------------------
    -- Fim de Bloque Base de Calculo 13
    ------------------------------------------------
    tdcn.extend;
    idx_caln := nvl(idx_caln, 0) + 1;
    tdcn(idx_caln).val_rubrica := 0;

    idx_folha_pa := 0;

  END SP_CALCULA_PENSAO;

  ---------------------------------------------------------------------------------

  PROCEDURE SP_CALCULA_PARCELAMENTO AS
  BEGIN
    -- CARREGA AS RUBRICAS DE PARCELAMENTO POR IDE_CLI
    SP_CARREGA_PARCELAMENTO(ANT_IDE_CLI);
  END SP_CALCULA_PARCELAMENTO;


  PROCEDURE SP_CARREGA_PARCELAMENTO (P_COD_IDE_CLI IN VARCHAR2) AS
  BEGIN
      -- Carrega Beneficios que possuem parcelamento
      PARC_COD_BENEFICIO      := NULL;
      PARC_COD_IDE_CLI        := NULL;
      PARC_COD_RUBRICA        := NULL;
      PARC_DAT_REFERENCIA     := NULL;
      PARC_COD_IDE_CLI_BEN    := NULL;
      PARC_SALDO_RUBRICA      := NULL;
      PARC_DAT_FIM_REFERENCIA := NULL;
      PARC_FLG_CORRECAO       := NULL;
      PARC_ID_LANCAMENTO      := NULL;
      PARC_NUM_PRIORIDADE     := NULL;
      PARC_TIP_BENEFICIO      := NULL;
      PARC_TOT_SALDO_PRIOR    := NULL;
      PARC_COD_ENTIDADE       := NULL;
      PARC_FLG_NATUREZA       := NULL;
      PARC_TIPO_EVENTO_ESPECIAL := NULL;
      V_PERC_PARCELAMENTO     := 0;
      V_QTD_MESES_PARC        := 1;


      -- VALOR DO PERCENTUAL DE PARCELAMENTO
      SP_OBTEM_PARVAL_FOLHA2('PERC_PARC', 1000, 'PERC_PARC', V_PERC_PARCELAMENTO);

      vfolha_parc.delete;
      v_icont := 0;

      OPEN CUR_BENPARC;
      LOOP
          FETCH CUR_BENPARC
           INTO PARC_COD_BENEFICIO,
                PARC_COD_IDE_CLI,
                PARC_NUM_PRIORIDADE,
                PARC_TIP_BENEFICIO,
                PARC_TOT_SALDO_PRIOR;
          EXIT WHEN CUR_BENPARC%NOTFOUND;

          v_icont := v_icont + 1;
          vfolha_parc(v_icont).cod_beneficio   := PARC_COD_BENEFICIO;
          vfolha_parc(v_icont).cod_ide_cli     := PARC_COD_IDE_CLI;
          vfolha_parc(v_icont).num_prioridade  := PARC_NUM_PRIORIDADE;
          vfolha_parc(v_icont).tip_beneficio   := PARC_TIP_BENEFICIO;
          vfolha_parc(v_icont).val_total_saldo := PARC_TOT_SALDO_PRIOR;
      END LOOP;
      CLOSE CUR_BENPARC;

      v_icont := NVL(vfolha_parc.count,0);

      IF (v_icont > 0) THEN
          ANT_PARC_COD_BENEFICIO := 0;
          v_icont := 0;
          FOR v_icont IN vfolha_parc.first..vfolha_parc.last LOOP

               IF (ANT_PARC_COD_BENEFICIO != vfolha_parc(v_icont).cod_beneficio) THEN

                   -- OBTEM BRUTO DA FOLHA
                   V_TOT_BRUTO_PARC_CRED := 0;
                   V_TOT_BRUTO_PARC_DEB := 0;
                   V_TOT_BRUTO_PARC_ICRED := 0;
                   V_TOT_BRUTO_PARC_IDEB := 0;

                   -- ATUALIZA A VARIAVEL PARA USO DAS ROTINAS ABAIXO
                   PARC_COD_BENEFICIO  := vfolha_parc(v_icont).COD_BENEFICIO;

                   IF PARC_TIP_BENEFICIO = 'PENSIONISTA' THEN

                      SP_OBTEM_VALORES_TOTAIS('BRUTO_PARC_CRED',
                                              PARC_COD_BENEFICIO,
                                              0,
                                              'N',
                                              V_TOT_BRUTO_PARC_CRED);


                      SP_OBTEM_VALORES_TOTAIS('BRUTO_PARC_DEB',
                                               PARC_COD_BENEFICIO,
                                               0,
                                               'N',
                                               V_TOT_BRUTO_PARC_DEB);

                   ELSE

                      SP_OBTEM_VALORES_TOTAIS('BRUTO_PARC_CRED_A',
                                              PARC_COD_BENEFICIO,
                                              0,
                                              'N',
                                              V_TOT_BRUTO_PARC_CRED);

                      SP_OBTEM_VALORES_TOTAIS('BRUTO_PARC_DEB_A',
                                              PARC_COD_BENEFICIO,
                                              0,
                                              'N',
                                              V_TOT_BRUTO_PARC_DEB);
                   END IF;

                   -- OBTEM BRUTO DA COMPOSICAO_INDIV
                   IF PARC_TIP_BENEFICIO = 'PENSIONISTA' THEN

                      SP_OBTEM_VALORES_TOTAIS('INDIV_PARC_CRED',
                                              PARC_COD_BENEFICIO,
                                              0,
                                              'N',
                                              V_TOT_BRUTO_PARC_ICRED);

                      SP_OBTEM_VALORES_TOTAIS('INDIV_PARC_DEB',
                                               PARC_COD_BENEFICIO,
                                               0,
                                               'N',
                                               V_TOT_BRUTO_PARC_IDEB);

                   ELSE

                      SP_OBTEM_VALORES_TOTAIS('INDIV_PARC_CRED_A',
                                              PARC_COD_BENEFICIO,
                                              0,
                                              'N',
                                              V_TOT_BRUTO_PARC_ICRED);


                      SP_OBTEM_VALORES_TOTAIS('INDIV_PARC_DEB_A',
                                              PARC_COD_BENEFICIO,
                                              0,
                                              'N',
                                              V_TOT_BRUTO_PARC_IDEB);
                   END IF;



                   -- OBTEM OS VALORES DE MARGEM DOS MESES QUE POSSUEM RETROATIVO
                   V_VAL_MARGEM_RET := 0;
                   SP_OBTEM_MARGEM_PARC_RET (V_VAL_MARGEM_RET);

                   -- CALCULA O VALOR DA MARGEM RETROATIVA
                   SP_OBTEM_MARGEM_PARC (V_VAL_MARGEM_RET, 0, V_PERC_PARCELAMENTO, V_VAL_MARGEM_RET);

                   -- CALCULA O VALOR DA MARGEM DO MES
                   V_VAL_MARGEM   := 0;
                   SP_OBTEM_MARGEM_PARC (V_TOT_BRUTO_PARC_CRED+V_TOT_BRUTO_PARC_DEB, V_TOT_BRUTO_PARC_ICRED+V_TOT_BRUTO_PARC_IDEB, V_PERC_PARCELAMENTO, V_VAL_MARGEM);

                   --ATUALIZA AS VARIAVEIS COM O NOVO VALOR
                   V_VAL_MARGEM  := NVL(V_VAL_MARGEM,0) + NVL(V_VAL_MARGEM_RET,0);
                   V_VAL_RESTO_MARGEM := V_VAL_MARGEM;
                   ANT_PARC_COD_BENEFICIO := vfolha_parc(v_icont).cod_beneficio;

               END IF;

               PARC_NUM_PRIORIDADE := vfolha_parc(v_icont).num_prioridade;

               IF ( V_VAL_RESTO_MARGEM > 0) THEN
                  -- cursor da composicao do parcelamento
                  -- NECESSARIO PARA ATUALIZAR O VALOR DA RUBRICA
                  -- QUANDO ESSE POSSUIR CORREC?O
                  V_VAL_CORRECAO_PARC := 0;
                  V_DAT_MINIMA_CORRECAO := NULL;
                  V_DAT_MAXIMA_CORRECAO := NULL;

                  OPEN CUR_COMPPARC;
                  LOOP
                    FETCH CUR_COMPPARC
                        INTO PARC_COD_RUBRICA,
                             PARC_DAT_REFERENCIA,
                             PARC_COD_IDE_CLI_BEN,
                             PARC_SALDO_RUBRICA,
                             PARC_DAT_FIM_REFERENCIA,
                             PARC_FLG_CORRECAO,
                             PARC_ID_LANCAMENTO,
                             PARC_FLG_NATUREZA,
                             PARC_COD_ENTIDADE,
                             PARC_TIPO_EVENTO_ESPECIAL;
                        EXIT WHEN CUR_COMPPARC%NOTFOUND;


                        -- CALCULA FATOR DE CORREC?O
                        -- PARA SOMAR NOS VALORES DE DESCONTOS DA RUBRICA
                        IF nvl(PARC_FLG_CORRECAO,'N') = 'S' THEN
                           V_MES_PARC_REF := NULL;
                           V_ANO_PARC_REF := NULL;
                           V_FATOR        := 0;

                           -- armazena a data minima e maxima das rubricas que possuem correc?o
                           -- o cusor esta ordenado por data de referencia
                           IF (V_VAL_CORRECAO_PARC = 0) THEN
                             V_DAT_MINIMA_CORRECAO := PARC_DAT_REFERENCIA;
                           ELSE
                             V_DAT_MAXIMA_CORRECAO := NVL(PARC_DAT_FIM_REFERENCIA, PARC_DAT_REFERENCIA);
                           END IF;


                           -- VERIFICA O PREENCHIMENTO DAS DATAS DE REFERENCIAS
                           IF (PARC_DAT_FIM_REFERENCIA IS NOT NULL) THEN
                             V_MES_PARC_REF := TO_CHAR(PARC_DAT_FIM_REFERENCIA,'MM');
                             V_ANO_PARC_REF := TO_CHAR(PARC_DAT_FIM_REFERENCIA,'YYYY');
                           ELSE
                             V_MES_PARC_REF := TO_CHAR(PARC_DAT_REFERENCIA,'MM');
                             V_ANO_PARC_REF := TO_CHAR(PARC_DAT_REFERENCIA,'YYYY');
                           END IF;

                           IF (V_MES_PARC_REF IS NULL AND V_ANO_PARC_REF IS NULL) THEN
                             V_MES_PARC_REF := TO_CHAR(PAR_PER_PRO,'MM');
                             V_ANO_PARC_REF := TO_CHAR(PAR_PER_PRO,'YYYY');
                           END IF;

                           -- VERIFICA SE A REFERENCIA DA RUBRICA E 12 E N?O PERTENCE A
                           -- RELAC?O DE RUBRICAS DE 13 SALARIO
                           IF (V_MES_PARC_REF = '12' AND PARC_TIPO_EVENTO_ESPECIAL != '3') THEN
                              V_ANO_PARC_REF := V_ANO_PARC_REF + 1;
                           END IF;

                           -- CALCULA O FATOR DA UFESP
                           SP_OBTEM_FATOR_CORRECAO_UFESP(TO_CHAR(PAR_PER_PRO,'YYYY'), V_ANO_PARC_REF, V_FATOR);

                           -- OBTEM NOVO VALOR TOTAL DOS DESCONTOS POR PRIORIDADE
                           -- VALOR CALCULADO POR RUBRICA
                           vfolha_parc(v_icont).val_total_saldo := vfolha_parc(v_icont).val_total_saldo + (PARC_SALDO_RUBRICA * NVL(V_FATOR,1));
                           V_VAL_CORRECAO_PARC := V_VAL_CORRECAO_PARC + (PARC_SALDO_RUBRICA * NVL(V_FATOR,1));

                        END IF;
                  END LOOP;
                  CLOSE CUR_COMPPARC;
             END IF;
             V_VAL_CORRECAO_PARC := ROUND ( TRUNC( NVL(V_VAL_CORRECAO_PARC,0), 4),  2);


             V_RCONT := 0;
             TDCN_PARC.DELETE;

             IF (V_VAL_RESTO_MARGEM > 0) THEN
                  -- ABRA NOVAMENTE O CURSOR PARA REALIZAR O ABATIMENTO
                  -- DAS RUBRICAS PELA MARGEM CALCULADA
                  OPEN CUR_COMPPARC;
                  LOOP
                    FETCH CUR_COMPPARC
                        INTO PARC_COD_RUBRICA,
                             PARC_DAT_REFERENCIA,
                             PARC_COD_IDE_CLI_BEN,
                             PARC_SALDO_RUBRICA,
                             PARC_DAT_FIM_REFERENCIA,
                             PARC_FLG_CORRECAO,
                             PARC_ID_LANCAMENTO,
                             PARC_FLG_NATUREZA,
                             PARC_COD_ENTIDADE,
                             PARC_TIPO_EVENTO_ESPECIAL;
                        EXIT WHEN CUR_COMPPARC%NOTFOUND;

                        -- CRITERIO PARA OBTER O SALDO ATUAL DE DEBITOS DE PARCELAMENTO
                        V_VAL_SALDO_ATU := (vfolha_parc(v_icont).val_total_saldo / V_VAL_MARGEM);
                        V_VAL_SALDO_ATU := ROUND( TRUNC( PARC_SALDO_RUBRICA / V_VAL_SALDO_ATU, 4), 2);

                        IF (V_VAL_SALDO_ATU > 0) THEN
                            IF (V_VAL_RESTO_MARGEM <= PARC_SALDO_RUBRICA AND V_VAL_RESTO_MARGEM <= V_VAL_SALDO_ATU) THEN
                               V_VAL_SALDO_ATU := V_VAL_RESTO_MARGEM;
                               V_VAL_RESTO_MARGEM := 0;
                            ELSE

                                  IF (V_VAL_SALDO_ATU >= PARC_SALDO_RUBRICA) THEN
                                     IF ((V_VAL_RESTO_MARGEM - PARC_SALDO_RUBRICA)) <= 0 THEN
                                        V_VAL_SALDO_ATU := V_VAL_RESTO_MARGEM;
                                        V_VAL_RESTO_MARGEM := 0;
                                     ELSE
                                        V_VAL_SALDO_ATU := PARC_SALDO_RUBRICA;
                                        V_VAL_RESTO_MARGEM := V_VAL_RESTO_MARGEM - PARC_SALDO_RUBRICA;
                                     END IF;

                                  ELSE
                                     V_VAL_RESTO_MARGEM := V_VAL_RESTO_MARGEM - V_VAL_SALDO_ATU;
                                  END IF;
                            END IF;

                            if (V_VAL_SALDO_ATU > 0) then
                                V_RCONT := V_RCONT + 1;
                                idx_seq_detalhe := nvl(idx_seq_detalhe, 0) + 1;
                                TDCN_PARC.EXTEND;
                                tdcn_parc(V_RCONT).COD_INS               := PAR_COD_INS;
                                tdcn_parc(V_RCONT).TIP_PROCESSO          := PAR_TIP_PRO;
                                tdcn_parc(V_RCONT).PER_PROCESSO          := PAR_PER_PRO;
                                tdcn_parc(V_RCONT).COD_IDE_CLI           := vfolha_parc(v_icont).COD_IDE_CLI;
                                tdcn_parc(V_RCONT).COD_BENEFICIO         := vfolha_parc(v_icont).cod_beneficio;
                                tdcn_parc(V_RCONT).SEQ_PAGAMENTO         := PAR_SEQ_PAGAMENTO;
                                tdcn_parc(V_RCONT).COD_FCRUBRICA         := PARC_COD_RUBRICA;
                                tdcn_parc(V_RCONT).SEQ_VIG               := 1;
                                tdcn_parc(V_RCONT).VAL_RUBRICA           := V_VAL_SALDO_ATU; --ROUND( TRUNC( V_VAL_SALDO_ATU, 4), 2);
                                tdcn_parc(V_RCONT).NUM_QUOTA             := 1;
                                tdcn_parc(V_RCONT).FLG_NATUREZA          := PARC_FLG_NATUREZA;
                                tdcn_parc(V_RCONT).TOT_QUOTA             := 0;
                                tdcn_parc(V_RCONT).DAT_INI_REF           := PARC_DAT_REFERENCIA;
                                tdcn_parc(V_RCONT).DAT_FIM_REF           := PARC_DAT_FIM_REFERENCIA;
                                tdcn_parc(V_RCONT).COD_IDE_CLI_BEN       := PARC_COD_IDE_CLI_BEN;
                                tdcn_parc(V_RCONT).NUM_ORD_JUD           := NULL;
                                tdcn_parc(V_RCONT).DAT_ING               := SYSDATE;
                                tdcn_parc(V_RCONT).DAT_ULT_ATU           := SYSDATE;
                                tdcn_parc(V_RCONT).NOM_USU_ULT_ATU       := 'FOLHA';
                                tdcn_parc(V_RCONT).NOM_PRO_ULT_ATU       := 'FOLHA DEB PARC';
                                tdcn_parc(V_RCONT).SEQ_DETALHE           := idx_seq_detalhe;
                                tdcn_parc(V_RCONT).DES_INFORMACAO        := NULL;
                                tdcn_parc(V_RCONT).DES_COMPLEMENTO       := case when PARC_FLG_NATUREZA = 'C' then 'Parc.Cred' ELSE 'Parc.Deb' end;
                                tdcn_parc(V_RCONT).VAL_RUBRICA_CHEIO     := V_VAL_SALDO_ATU; -- ROUND( TRUNC( V_VAL_SALDO_ATU, 4), 2);
                                tdcn_parc(V_RCONT).VAL_INIDADE           := 0;
                                tdcn_parc(V_RCONT).VAL_PORC              := 0;
                                tdcn_parc(V_RCONT).NUM_CARGA             := 1;
                                tdcn_parc(V_RCONT).NUM_SEQ_CONTROLE_CARGA:= PARC_ID_LANCAMENTO;
                                tdcn_parc(V_RCONT).FLG_IR_ACUMULADO      := NULL;
                                tdcn_parc(V_RCONT).DAT_INCORP_RUB        := NULL;
                                tdcn_parc(V_RCONT).FLG_BASE_IR           := NULL;
                            end if;

                            IF ( V_VAL_RESTO_MARGEM <= 0) THEN
                               EXIT;
                            END IF;
                        END IF;
                   END LOOP;
                   CLOSE CUR_COMPPARC;
               else
                 exit;
               END IF;

               -- INSERE RUBRICA DE CORRECAO POR PRIORIDADE
               IF (V_VAL_CORRECAO_PARC > 0) THEN
                    PARC_DAT_REFERENCIA := V_DAT_MINIMA_CORRECAO;
                    PARC_DAT_FIM_REFERENCIA := V_DAT_MAXIMA_CORRECAO;

                    V_RCONT := V_RCONT + 1;
                    idx_seq_detalhe := nvl(idx_seq_detalhe, 0) + 1;
                    TDCN_PARC.EXTEND;
                    tdcn_parc(V_RCONT).COD_INS               := PAR_COD_INS;
                    tdcn_parc(V_RCONT).TIP_PROCESSO          := PAR_TIP_PRO;
                    tdcn_parc(V_RCONT).PER_PROCESSO          := PAR_PER_PRO;
                    tdcn_parc(V_RCONT).COD_IDE_CLI           := vfolha_parc(v_icont).COD_IDE_CLI;
                    tdcn_parc(V_RCONT).COD_BENEFICIO         := vfolha_parc(v_icont).cod_beneficio;
                    tdcn_parc(V_RCONT).SEQ_PAGAMENTO         := PAR_SEQ_PAGAMENTO;
                    tdcn_parc(V_RCONT).COD_FCRUBRICA         := 1300456;
                    tdcn_parc(V_RCONT).SEQ_VIG               := 1;
                    tdcn_parc(V_RCONT).VAL_RUBRICA           := CASE WHEN V_VAL_RESTO_MARGEM >= V_VAL_CORRECAO_PARC THEN  V_VAL_CORRECAO_PARC ELSE ROUND( TRUNC( V_VAL_CORRECAO_PARC / (vfolha_parc(v_icont).val_total_saldo / V_VAL_MARGEM), 4), 2) END; -- V_VAL_CORRECAO_PARC;
                    tdcn_parc(V_RCONT).NUM_QUOTA             := 1;
                    tdcn_parc(V_RCONT).FLG_NATUREZA          := 'D';
                    tdcn_parc(V_RCONT).TOT_QUOTA             := 0;
                    tdcn_parc(V_RCONT).DAT_INI_REF           := PARC_DAT_REFERENCIA;
                    tdcn_parc(V_RCONT).DAT_FIM_REF           := PARC_DAT_FIM_REFERENCIA;
                    tdcn_parc(V_RCONT).COD_IDE_CLI_BEN       := PARC_COD_IDE_CLI_BEN;
                    tdcn_parc(V_RCONT).NUM_ORD_JUD           := NULL;
                    tdcn_parc(V_RCONT).DAT_ING               := SYSDATE;
                    tdcn_parc(V_RCONT).DAT_ULT_ATU           := SYSDATE;
                    tdcn_parc(V_RCONT).NOM_USU_ULT_ATU       := 'FOLHA';
                    tdcn_parc(V_RCONT).NOM_PRO_ULT_ATU       := 'FOLHA DEB PARC';
                    tdcn_parc(V_RCONT).SEQ_DETALHE           := idx_seq_detalhe;
                    tdcn_parc(V_RCONT).DES_INFORMACAO        := NULL;
                    tdcn_parc(V_RCONT).DES_COMPLEMENTO       := 'Parc.Deb';
                    tdcn_parc(V_RCONT).VAL_RUBRICA_CHEIO     := CASE WHEN V_VAL_RESTO_MARGEM >= V_VAL_CORRECAO_PARC THEN  V_VAL_CORRECAO_PARC ELSE ROUND( TRUNC( V_VAL_CORRECAO_PARC / (vfolha_parc(v_icont).val_total_saldo / V_VAL_MARGEM), 4), 2) END; -- V_VAL_CORRECAO_PARC;
                    tdcn_parc(V_RCONT).VAL_INIDADE           := 0;
                    tdcn_parc(V_RCONT).VAL_PORC              := 0;
                    tdcn_parc(V_RCONT).NUM_CARGA             := 1;
                    tdcn_parc(V_RCONT).NUM_SEQ_CONTROLE_CARGA:= 1;
                    tdcn_parc(V_RCONT).FLG_IR_ACUMULADO      := NULL;
                    tdcn_parc(V_RCONT).DAT_INCORP_RUB        := NULL;
                    tdcn_parc(V_RCONT).FLG_BASE_IR           := NULL;

                    V_VAL_RESTO_MARGEM := V_VAL_RESTO_MARGEM - tdcn_parc(V_RCONT).VAL_RUBRICA;
               END IF;

               -- inclui no vetor (tdcn) com os valores da tdcn_parc
               V_RCONT := nvl(V_RCONT,0);
               if (tdcn_parc.count > 0) then
                    FOR V_RCONT IN tdcn_parc.first..tdcn_parc.last LOOP
                        tdcn.extend;
                        idx_caln         := nvl(idx_caln, 0) + 1;
                        tdcn(idx_caln)   := tdcn_parc(V_RCONT);
                    END LOOP;
               end if;

          END LOOP;
       END IF;
  END;

  -- PROCEDIMENTO PARA OBTER A MARGEM DO PARCELAMENTO DE DEBITOS
  PROCEDURE SP_OBTEM_MARGEM_PARC (P_VAL_BRUTO IN NUMBER,
                                  P_VAL_EVENTUAL NUMBER,
                                  P_PERC_PARCELAMENTO NUMBER,
                                  P_VAL_MARGEM OUT NUMBER
                                  ) AS
  BEGIN
      BEGIN
         P_VAL_MARGEM := (((P_VAL_BRUTO/100) * P_PERC_PARCELAMENTO)) + P_VAL_EVENTUAL;
      EXCEPTION
         WHEN OTHERS THEN
            P_VAL_MARGEM := 0;
      END;

      P_VAL_MARGEM := round(trunc(P_VAL_MARGEM,4) ,2);
  END;

  -- PROCEDIMENTO PARA OBTER A MARGEM DO PARCELAMENTO DE DEBITOS RETROATIVOS
  PROCEDURE SP_OBTEM_MARGEM_PARC_RET (P_VAL_MARGEM_RET OUT NUMBER) AS
    I number; -- contador da tdcn
    J number; -- contador das referencias
    k number; -- contador das rubricas retroativas
    v_Control number; -- controla a localizac?o da referencia no vetor
    v_Flg_Parcelamento_ret varchar2(1); -- verifica a existencia de retroativos em folhas anterioes
  BEGIN
      vDatRef_Ret.delete;
      BEGIN
        FOR I IN 1 .. tdcn.count LOOP
          rdcn_parc_ret := tdcn(I);
          v_control := 0;

          -- verifica na memoria da det_calculada se existe alguma dat_ini_ref anterior ao
          -- periodo da folha e seja 50 (D) e 51 (c)
          if (rdcn_parc_ret.dat_ini_ref < PAR_PER_PRO) and
             (substr(rdcn_parc_ret.cod_Fcrubrica, length(rdcn_parc_ret.cod_FCRubrica)-1, 2) in ('50','51') and
             rdcn_parc_ret.cod_beneficio = PARC_COD_BENEFICIO
             )
             then

             k := vDatRef_Ret.count;
             FOR J IN 1 .. vDatRef_Ret.count LOOP
               -- Inclui no vetor a rubrica quando ja existir uma referencia incluida
               IF (vDatRef_Ret(J).dat_ini_ref = rdcn_parc_ret.dat_ini_ref) THEN
                  k := k + 1;
                  vDatRef_Ret.extend;
                  vDatRef_Ret(k).COD_BENEFICIO := PARC_COD_BENEFICIO;
                  vDatRef_Ret(k).COD_IDE_CLI   := PARC_COD_IDE_CLI;
                  vDatRef_Ret(k).DAT_INI_REF   := rdcn_parc_ret.dat_ini_ref;
                  vDatRef_Ret(k).COD_FCRUBRICA := rdcn_parc_ret.cod_fcRubrica;
                  vDatRef_Ret(k).VAL_RUBRICA   := rdcn_parc_ret.val_rubrica;
                  vDatRef_Ret(k).FLG_NATUREZA  := rdcn_parc_ret.flg_natureza;
                  vDatRef_Ret(k).VAL_RUBRICA_CHEIO  := rdcn_parc_ret.VAL_RUBRICA_CHEIO;
                  v_control := 1;
                  exit;
               END IF;
             END LOOP;

             IF (v_control = 0) THEN
                 -- verifica na hdet_calculado se existe algum valor pago para a mesma data de inicio de referencia
                 -- Se n?o existir inclui no vetor
                 v_Flg_Parcelamento_ret := NULL;
                 select decode(count(*),0,'N','S')
                   INTO v_Flg_Parcelamento_ret
                   from user_Ipesp.tb_hdet_calculado dc
                  where dc.cod_ins = PAR_COD_INS
                    and dc.cod_beneficio = PARC_COD_BENEFICIO
                    and dc.cod_ide_cli   = PARC_COD_IDE_CLI
                    and dc.per_processo <= PAR_PER_PRO
                    and dc.tip_processo != 'T' -- alterado em 14/02/2017 TT37743 por ljunior
                    AND DC.DAT_INI_REF   = rdcn_parc_ret.dat_ini_ref;

                  if (v_Flg_Parcelamento_ret = 'N') THEN
                     k := k + 1;
                     vDatRef_Ret.extend;
                     vDatRef_Ret(k).COD_BENEFICIO      := PARC_COD_BENEFICIO;
                     vDatRef_Ret(k).COD_IDE_CLI        := PARC_COD_IDE_CLI;
                     vDatRef_Ret(k).DAT_INI_REF        := rdcn_parc_ret.dat_ini_ref;
                     vDatRef_Ret(k).COD_FCRUBRICA      := rdcn_parc_ret.cod_fcRubrica;
                     vDatRef_Ret(k).VAL_RUBRICA        := rdcn_parc_ret.val_rubrica;
                     vDatRef_Ret(k).FLG_NATUREZA       := rdcn_parc_ret.flg_natureza;
                     vDatRef_Ret(k).VAL_RUBRICA_CHEIO  := rdcn_parc_ret.VAL_RUBRICA_CHEIO;
                  END IF;
             END IF;
          END IF;
        END LOOP;

        V_TOT_BRUTO_PARC_RET := 0;
        V_TOT_BRUTO_PARC_RET_A := 0;
        IF (vDatRef_Ret.COUNT > 0)  THEN
            IF (PARC_TIP_BENEFICIO = 'PENSIONISTA') THEN
               -- OBTEM BASE COMPOSTADA POR CONCEITO
               SP_OBTEM_VALORES_TOTAIS_RET('BRUTO_PARC_CRED',
                                          PARC_COD_BENEFICIO,
                                          0,
                                          'N',
                                          V_TOT_BRUTO_PARC_RET);
            ELSE
               -- OBTEM BASE COMPOSTADA POR CONCEITO
                SP_OBTEM_VALORES_TOTAIS_RET('BRUTO_PARC_CRED_A',
                                        PARC_COD_BENEFICIO,
                                        0,
                                        'N',
                                        V_TOT_BRUTO_PARC_RET_A);
            END IF;

        END IF;

        IF (V_TOT_BRUTO_PARC_RET > 0 ) THEN
           P_VAL_MARGEM_RET := V_TOT_BRUTO_PARC_RET;
        ELSIF  (V_TOT_BRUTO_PARC_RET_A > 0 ) THEN
           P_VAL_MARGEM_RET := V_TOT_BRUTO_PARC_RET_A;
        END IF;

        P_VAL_MARGEM_RET := NVL(P_VAL_MARGEM_RET,0);

      EXCEPTION
         WHEN OTHERS THEN
            P_VAL_MARGEM_RET := 0;
      END;

      P_VAL_MARGEM_RET := round (trunc(P_VAL_MARGEM_RET,4) ,2);
  END;

  ------------------------------------------------------------------------
  -- PROCEDIMENTO USADO PARA OBTER A BASE BRUTA DO RETROATIVO POR CONCEITO
  -- LJUNIOR EM 29/07/2015
  ----------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_VALORES_TOTAIS_RET(I_COD_VARIAVEL  in VARCHAR2,
                                        I_COD_BENEFICIO IN NUMBER,
                                        I_COD_RUBRICA   NUMBER,
                                        i_ind_val_cheio in varchar2,
                                        I_VALOR         OUT NUMBER) AS
    c_comp     curform;
    vi_valor   number(18, 5);
    VI_RUBRICA NUMBER;
    NF_RUBRICA number;
    valor_temp number(18,4);

  BEGIN
    I_VALOR  := 0;
    VI_VALOR := 0;
    valor_temp :=0;

    SELECT cb.cod_entidade
      INTO ANT_ENTIDADE
      FROM tb_concessao_beneficio cb
     where cb.cod_beneficio = PARC_COD_BENEFICIO ;

    --- Obtem rubricas por cod_elemento
    IF PAR_TIP_PRO = 'T' THEN
      begin
        SELECT cd.cod_fcrubrica_composta
          INTO NF_RUBRICA
          FROM tb_composicao_rub cd
         WHERE cd.cod_variavel = I_COD_VARIAVEL
           AND cd.cod_ins = PAR_COD_INS
           AND cd.cod_entidade = ANT_ENTIDADE
           AND cd.cod_fcrubrica_composta =
               DECODE(I_COD_RUBRICA,
                      0,
                      cod_fcrubrica_composta,
                      I_COD_RUBRICA)
           AND cd.dat_ini_vig <= PAR_PER_PRO
           AND (cd.dat_fim_vig >= PAR_PER_PRO or cd.dat_fim_vig is null);
      exception
        when others then
          nf_rubrica      := null;
          p_sub_proc_erro := 'SP_OBTEM_VALORES_TOTAIS';
          p_coderro       := SQLCODE;
          P_MSGERRO       := 'Erro ao obter a rubrica composta para o 13';
          INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                p_coderro,
                                'Calcula Folha',
                                sysdate,
                                p_msgerro,
                                p_sub_proc_erro,
                                BEN_IDE_CLI,
                                I_COD_RUBRICA);
          VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
      end;
    ELSE
      begin
        SELECT cd.cod_fcrubrica_composta
          INTO NF_RUBRICA
          FROM tb_composicao_rub cd, tb_rubricas rp, tb_formula_calculo fc
         WHERE cd.cod_variavel = I_COD_VARIAVEL
           AND cd.cod_ins = PAR_COD_INS
           AND cd.dat_ini_vig <= PAR_PER_PRO
           AND (cd.dat_fim_vig >= PAR_PER_PRO or cd.dat_fim_vig is null)
           and rp.cod_ins = cd.cod_ins
           AND cd.cod_entidade = ANT_ENTIDADE
           AND rp.cod_entidade = cd.cod_entidade
           and fc.cod_entidade = cd.cod_entidade
           and rp.tip_evento <> 'T'
           and fc.cod_ins = rp.cod_ins
           and fc.cod_rubrica = rp.cod_rubrica
           and cd.cod_fcrubrica_composta = fc.cod_fcrubrica
           --- agregado por PEP 26012011
           AND ( (cd.cod_variavel  = 'BASE_PREV' and RP.COD_RUBRICA=7060300 )
            OR   (cd.cod_variavel != 'BASE_PREV')
                );
      exception
        when others then
          nf_rubrica      := null;
          p_sub_proc_erro := 'SP_OBTEM_VALORES_TOTAIS';
          p_coderro       := SQLCODE;
          P_MSGERRO       := 'Erro ao obter a rubrica composta para totalizacao';
          INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                p_coderro,
                                'Calcula Folha',
                                sysdate,
                                p_msgerro,
                                p_sub_proc_erro,
                                BEN_IDE_CLI,
                                I_COD_RUBRICA);
          VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
      end;
    END IF;

    --- Obtem rubricas da composicao
    Open c_comp for
      select DISTINCT trunc(cd.cod_fcrubrica_compoe/100)
        from tb_compoe_det cd
       where cd.cod_ins = PAR_COD_INS
         and cd.cod_fcrubrica_composta = nf_rubrica
         and cd.cod_entidade_composta = ANT_ENTIDADE
         and cd.dat_ini_vig <= PAR_PER_PRO
         and (cd.dat_fim_vig >= PAR_PER_PRO or cd.dat_fim_vig is null)
         order by trunc(cd.cod_fcrubrica_compoe/100);
    FETCH c_comp
      into vi_rubrica;

    WHILE C_COMP%FOUND LOOP
        SP_VALOR_CALCULADO_RET (VI_RUBRICA,
                                I_COD_BENEFICIO,
                                PARC_COD_IDE_CLI,
                                i_ind_val_cheio,
                                vi_valor);
        IF vi_valor <> 0 THEN
           I_VALOR := I_VALOR + VI_VALOR;
        END IF;

        FETCH c_comp
          into vi_rubrica;
    END LOOP;
    CLOSE C_COMP;

  END SP_OBTEM_VALORES_TOTAIS_RET;

  -- PROCEDIMENTO PARA SOMAR OS VALORES DAS RUBRICAS DE RETROATIVO DO PARCELAMENTO DE DEBITOS
  -- LJUNIOR EM 19/08/2015
  PROCEDURE SP_VALOR_CALCULADO_RET  (I_RUBRICA       IN NUMBER,
                                     I_COD_BENEFICIO IN NUMBER,
                                     I_COD_IDE_CLI   IN VARCHAR2,
                                     I_IND_VAL_CHEIO IN VARCHAR2,
                                     O_VALOR         OUT NUMBER) AS
    i       integer;
    cont_sp number := 0;
  BEGIN
    O_VALOR := 0;
    cont_sp := vDatRef_Ret.count;
    FOR i IN 1 .. vDatRef_Ret.count LOOP
      rdcn_parc_ret := vDatRef_Ret(i);

      IF trunc(rdcn_parc_ret.cod_fcrubrica/100) = i_rubrica AND
         rdcn_parc_ret.cod_beneficio = i_cod_beneficio AND
         rdcn_parc_ret.cod_ide_cli  = I_COD_IDE_CLI
      THEN
        IF rdcn_parc_ret.flg_natureza = 'D' then
          IF i_ind_val_cheio = 'N' THEN
            o_valor := o_valor - TRUNC(rdcn_parc_ret.val_rubrica,2);
          ELSE
            o_valor := o_valor - TRUNC(rdcn_parc_ret.val_rubrica_cheio,2);
          END IF;
        ELSE
          IF i_ind_val_cheio = 'N' THEN
            o_valor := o_valor + TRUNC(rdcn_parc_ret.val_rubrica,2);
          ELSE
            o_valor := o_valor + TRUNC(rdcn_parc_ret.val_rubrica_cheio,2);
          END IF;
        END IF;
      END IF;
    END LOOP;
  END SP_VALOR_CALCULADO_RET;

  ---------------------------------------------------------------------------------
  PROCEDURE SP_CALCULA_REDUTOR AS

    i                   integer := 0;
    j                   integer := 0;
    r                   integer := 0;
    v_apaga             char(1) := 'N';
    V_RUBRICA_REDUTOR   number := 0;
    V_BEN_IDE_CLI       VARCHAR2(20) := null;
    V_BENEF             NUMBER(8);
    BASE_RC             NUMBER(18, 4) := 0;
    DED_IR              NUMBER(18, 4) := 0;
    VI_BASE_IR_REDUC    NUMBER(18, 4) := 0;
    VI_BASE_IR_REDUC_13 NUMBER(18, 4) := 0;
    BASE_FUN_PREV       NUMBER(18, 4) := 0;
    AJUS2               NUMBER(18, 4) := 0;
    perc_prev           number(18, 4) := 0;
    LIM_SUP2            number;
    VAL_IMP2            number; -- percentual

    -- variaveis do sql

    PEN_COD_BENEFICIO        NUMBER(8) := 0;
    PEN_TIP_BENEFICIO        VARCHAR2(20);
    PEN_COD_RUBRICA          NUMBER(8);
    PEN_COD_FCRUBRICA        NUMBER(8);
    PEN_SEQ_VIG_FC           NUMBER(8);
    PEN_NAT_COMP             CHAR(1);
    PEN_NUM_ORD_JUD          NUMBER(8);
    PEN_IDE_CLI_INSTITUIDOR  VARCHAR2(20);
    PEN_VAL_FIXO_IND         NUMBER(18, 4);
    PEN_VAL_PORC_IND         NUMBER(18, 4);
    PEN_VAL_PORC2            NUMBER(18, 4);
    PEN_QTY_UNID_IND         NUMBER(18, 4);
    PEN_VAL_UNID             NUMBER(8);
    PEN_TIPO_VALOR           CHAR(1);
    PEN_IND_QTAS             CHAR(1);
    PEN_NUM_QTAS_PAG         NUMBER(8);
    PEN_TOT_QTAS_PAG         NUMBER(8);
    PEN_IND_COMP_RUB         CHAR(1);
    PEN_NAT_RUB              CHAR(1);
    PEN_INI_REF              DATE;
    PEN_FIM_REF              DATE;
    PEN_PRIORIDADE           NUMBER(8);
    PEN_DED_IR               CHAR(1);
    PEN_NUM_FUNCAO           NUMBER;
    PEN_FLG_PROCESSA         CHAR(1);
    PEN_NAT_VAL              CHAR(1);
    PEN_TIPO_APLICACAO       CHAR(1);
    PEN_PERCENT_BEN          NUMBER(18, 4);
    PEN_TIPO_EVENTO_ESPECIAL VARCHAR2(2);
    PEN_VAL_STR1             VARCHAR2(30);
    PEN_VAL_STR2             VARCHAR2(30);
    PEN_MATRICULA            VARCHAR2(20);
    PEN_ENTIDADE             NUMBER(8);
    PEN_CARGO                NUMBER(8);
    PEN_CARGO_APOS           NUMBER(8);
    PEN_PCCS                 NUMBER(8);
    PEN_COD_JORNADA          varchar2(10);
    PEN_DAT_INI_VIG          DATE;
    PEN_DAT_FIM_VIG          DATE;
    PEN_COD_VINCULO          NUMBER(8);
    PEN_COD_REGIME_JUR       NUMBER(8);
    PEN_TIP_PROVIMENTO       VARCHAR2(5);
    PEN_COD_JORNADA_REL      VARCHAR2(10);
    PEN_COD_ENTIDADE         NUMBER(8);
    PEN_NUM_MATRICULA        VARCHAR2(20);
    PEN_COD_IDE_CLI_BEN      VARCHAR2(20);
    PEN_MSC_INFORMACAO       VARCHAR2(10);
    PEN_COL_INFORMACAO       VARCHAR2(25);
    PEN_DAT_INI              DATE;
    PEN_DAT_FIM              DATE;
    PEN_PORC_VIG             NUMBER(18, 4);
    PEN_DAT_VIG_RUBRICA      tb_rubricas.dat_fim_vig%TYPE;

    SAM_IDE_CLI              VARCHAR2(20);
    SAM_FLG_STATUS           CHAR(1);
    SAM_COD_BENEFICIO        NUMBER(8) := 0;
    SAN_TIP_BENEFICIO        VARCHAR2(20);
    SAN_COD_RUBRICA          NUMBER(8);
    SAN_COD_FCRUBRICA        NUMBER(8);
    SAN_SEQ_VIG_FC           NUMBER(8);
    SAN_NAT_COMP             CHAR(1);
    SAN_NUM_ORD_JUD          NUMBER(8);
    SAN_IDE_CLI_INSTITUIDOR  VARCHAR2(20);
    SAN_VAL_FIXO_IND         NUMBER(18, 4);
    SAN_VAL_PORC_IND         NUMBER(18, 4);
    SAN_VAL_PORC2            NUMBER(18, 4);
    SAN_QTY_UNID_IND         NUMBER(18, 4);
    SAN_VAL_UNID             NUMBER(8);
    SAN_TIPO_VALOR           CHAR(1);
    SAN_IND_QTAS             CHAR(1);
    SAN_NUM_QTAS_PAG         NUMBER(8);
    SAN_TOT_QTAS_PAG         NUMBER(8);
    SAN_IND_COMP_RUB         CHAR(1);
    SAN_NAT_RUB              CHAR(1);
    SAN_INI_REF              DATE;
    SAN_FIM_REF              DATE;
    SAN_PRIORIDADE           NUMBER(8);
    SAN_DED_IR               CHAR(1);
    SAN_NUM_FUNCAO           NUMBER;
    SAN_FLG_PROCESSA         CHAR(1);
    SAN_NAT_VAL              CHAR(1);
    SAN_TIPO_APLICACAO       CHAR(1);
    SAN_PERCENT_BEN          NUMBER(18, 4);
    SAN_TIPO_EVENTO_ESPECIAL VARCHAR2(2);
    SAN_VAL_STR1             VARCHAR2(30);
    SAN_VAL_STR2             VARCHAR2(30);
    SAN_MATRICULA            VARCHAR2(20);
    SAN_ENTIDADE             NUMBER(8);
    SAN_CARGO                NUMBER(8);
    SAN_CARGO_APOS           NUMBER(8);
    SAN_PCCS                 NUMBER(8);
    SAN_COD_JORNADA          varchar2(10);
    SAN_DAT_INI_VIG          DATE;
    SAN_DAT_FIM_VIG          DATE;
    SAN_COD_VINCULO          NUMBER(8);
    SAN_COD_REGIME_JUR       NUMBER(8);
    SAN_TIP_PROVIMENTO       VARCHAR2(5);
    SAN_COD_JORNADA_REL      VARCHAR2(10);
    SAN_COD_ENTIDADE         NUMBER(8);
    SAN_NUM_MATRICULA        VARCHAR2(20);
    SAN_COD_IDE_CLI_BEN      VARCHAR2(20);
    SAN_MSC_INFORMACAO       VARCHAR2(10);
    SAN_COL_INFORMACAO       VARCHAR2(25);
    SAN_DAT_INI              DATE;
    SAN_DAT_FIM              DATE;
    SAN_PORC_VIG             NUMBER(18, 4);
    SAN_DAT_VIG_RUBRICA      tb_rubricas.dat_fim_vig%TYPE;

  BEGIN

    V_BEN_IDE_CLI       := null;
    SAN_COD_IDE_CLI_BEN := null;
    PEN_COD_IDE_CLI_BEN := null;

    --  salvar as variaveis correntes apos a quebra do beneficiario
    SAM_IDE_CLI              := BEN_IDE_CLI;
    SAM_FLG_STATUS           := BEN_FLG_STATUS;
    SAM_COD_BENEFICIO        := COM_COD_BENEFICIO;
    SAN_TIP_BENEFICIO        := COM_TIP_BENEFICIO;
    SAN_COD_RUBRICA          := COM_COD_RUBRICA;
    SAN_COD_FCRUBRICA        := COM_COD_FCRUBRICA;
    SAN_SEQ_VIG_FC           := COM_SEQ_VIG_FC;
    SAN_NAT_COMP             := COM_NAT_COMP;
    SAN_NUM_ORD_JUD          := COM_NUM_ORD_JUD;
    SAN_IDE_CLI_INSTITUIDOR  := COM_IDE_CLI_INSTITUIDOR;
    SAN_VAL_FIXO_IND         := COM_VAL_FIXO_IND;
    SAN_VAL_PORC_IND         := COM_VAL_PORC_IND;
    SAN_VAL_PORC2            := COM_VAL_PORC2;
    SAN_QTY_UNID_IND         := COM_QTY_UNID_IND;
    SAN_VAL_UNID             := COM_VAL_UNID;
    SAN_TIPO_VALOR           := COM_TIPO_VALOR;
    SAN_IND_QTAS             := COM_IND_QTAS;
    SAN_NUM_QTAS_PAG         := COM_NUM_QTAS_PAG;
    SAN_TOT_QTAS_PAG         := COM_TOT_QTAS_PAG;
    SAN_IND_COMP_RUB         := COM_IND_COMP_RUB;
    SAN_NAT_RUB              := COM_NAT_RUB;
    SAN_INI_REF              := COM_INI_REF;
    SAN_FIM_REF              := COM_FIM_REF;
    SAN_PRIORIDADE           := COM_PRIORIDADE;
    SAN_DED_IR               := COM_DED_IR;
    SAN_NUM_FUNCAO           := COM_NUM_FUNCAO;
    SAN_FLG_PROCESSA         := COM_FLG_PROCESSA;
    SAN_NAT_VAL              := COM_NAT_VAL;
    SAN_TIPO_APLICACAO       := COM_TIPO_APLICACAO;
    SAN_PERCENT_BEN          := COM_PERCENT_BEN;
    SAN_TIPO_EVENTO_ESPECIAL := COM_TIPO_EVENTO_ESPECIAL;
    SAN_VAL_STR1             := COM_VAL_STR1;
    SAN_VAL_STR2             := COM_VAL_STR2;
    SAN_MATRICULA            := COM_MATRICULA;
    SAN_ENTIDADE             := COM_ENTIDADE;
    SAN_CARGO                := COM_CARGO;
    SAN_CARGO_APOS           := COM_CARGO_APOS;
    SAN_PCCS                 := COM_PCCS;
    SAN_COD_JORNADA          := COM_COD_JORNADA;
    SAN_DAT_INI_VIG          := COM_DAT_INI_VIG;
    SAN_DAT_FIM_VIG          := COM_DAT_FIM_VIG;
    SAN_COD_VINCULO          := COM_COD_VINCULO;
    SAN_COD_REGIME_JUR       := COM_COD_REGIME_JUR;
    SAN_TIP_PROVIMENTO       := COM_TIP_PROVIMENTO;
    SAN_COD_JORNADA_REL      := COM_COD_JORNADA_REL;
    SAN_COD_ENTIDADE         := COM_COD_ENTIDADE;
    SAN_NUM_MATRICULA        := COM_NUM_MATRICULA;
    SAN_COD_IDE_CLI_BEN      := COM_COD_IDE_CLI_BEN;
    SAN_MSC_INFORMACAO       := COM_MSC_INFORMACAO;
    SAN_COL_INFORMACAO       := COM_COL_INFORMACAO;
    --  SAN_PORC_VIG        := COM_PORC_VIG;
    --   SAN_DAT_INI := COM_DAT_INI;
    --   SAN_DAT_FIM := COM_DAT_FIM;

    pdcn.delete;
    r := 0;

    -- apagar a rubirca de pens?o

    FOR i in 1 .. tdcn.count LOOP
      rdcn    := tdcn(i);
      v_apaga := 'N';

      FOR j in 1 .. cod_fcrubrica_redutor.count LOOP

        if rdcn.cod_fcrubrica = cod_fcrubrica_redutor(j) then
          v_apaga := 'S';
          exit;
        end if;

      END LOOP;

      if v_apaga = 'N' then
        pdcn.extend;
        r := r + 1;
        pdcn(r) := tdcn(i);
      end if;
    END LOOP;

    IDX_CALN := 0;
    tdcn.delete;

    FOR i in 1 .. pdcn.count LOOP
      tdcn.extend;
      tdcn(i) := pdcn(i);
      IDX_CALN := IDX_CALN + 1;
    END LOOP;

    -- loop para calculo da pens?o
    FOR j in 1 .. cod_fcrubrica_redutor.count LOOP

      V_RUBRICA_REDUTOR := cod_fcrubrica_redutor(j);
      V_BEN_IDE_CLI     := cod_beneficiario_redutor(j);
      V_BENEF           := a_beneficio_redutor(j);

      --  obtem os dados para calculo --
      BEGIN

        SELECT BB.COD_BENEFICIO AS COM_COD_BENEFICIO,
               DECODE(BC.COD_TIPO_BENEFICIO,
                      'M',
                      'PENSIONISTA',
                      'APOSENTADO') AS COM_TIP_BENEFICIO,
               FC.COD_RUBRICA AS COM_COD_RUBRICA,
               FC.COD_FCRUBRICA AS COM_COD_FCRUBRICA,
               RR.SEQ_VIG AS COM_SEQ_VIG_FC,
               'G' AS COM_NAT_COMP,
               null AS COM_NUM_ORD_JUD,
               null AS COM_IDE_CLI_INSTITUIDOR,
               null AS COM_VAL_FIXO_IND,
               null AS COM_VAL_PORC_IND,
               0 AS COM_VAL_PORC2,
               null AS COM_QTY_UNID_IND,
               FC.VAL_UNIDADE AS COM_VAL_UNID,
               FC.TIP_VALOR AS COM_TIPO_VALOR,
               'N' AS COM_IND_QTAS,
               0 AS COM_NUM_QTAS_PAG,
               0 AS COM_TOT_QTAS_PAG,
               FC.FLG_COMP AS COM_IND_COMP_RUB,
               RR.FLG_NATUREZA AS COM_NAT_RUB,
               null AS COM_INI_REF,
               null AS COM_FIM_REF,
               FC.NUM_PRIORIDADE AS COM_PRIORIDADE,
               CP.FLG_DED_IR AS COM_DED_IR,
               RP.FLG_PROCESSA AS COM_FLG_PROCESSA,
               CP.NAT_VAL AS COM_NAT_VAL,
               FC.TIP_APLICACAO AS COM_TIPO_APLICACAO,
               BC.VAL_PERCENT_BEN AS COM_PERCENT_BEN,
               nvl(RR.TIP_EVENTO_ESPECIAL, 'N') AS COM_TIPO_EVENTO_ESPECIAL,
               null AS COM_VAL_STR1,
               null AS COM_VAL_STR2,
               BC.NUM_MATRICULA AS COM_MATRICULA,
               BC.COD_ENTIDADE AS COM_ENTIDADE,
               EC.COD_CARGO AS COM_CARGO,
               EC.COD_CARGO_APOS AS COM_CARGO_APOS,
               BB.DAT_INI_BEN AS BEN_DAT_INICIO,
               BB.DAT_FIM_BEN AS BEN_DAT_FIM,
               FC.DAT_INI_VIG AS COM_DAT_INI_VIG,
               FC.DAT_FIM_VIG AS COM_DAT_FIM_VIG,
               null AS COM_COD_IDE_CLI_BEN,
               FC.MSC_INFORMACAO AS COM_MSC_INFORMACAO,
               FC.COL_INFORMACAO AS COM_COL_INFORMACAO,
               (to_char(decode(rr.dat_fim_vig,
                               null,
                               add_months(PAR_PER_PRO, 1) - 1,
                               rr.dat_fim_vig),
                        'dd') /
               to_char(add_months(PAR_PER_PRO, 1) - 1, 'dd')) AS COM_PORC_VIG, --RAO 20060321
               RR.DAT_FIM_VIG AS COM_DAT_VIG_RUBRICA -- MVL
          INTO PEN_COD_BENEFICIO,
               PEN_TIP_BENEFICIO,
               PEN_COD_RUBRICA,
               PEN_COD_FCRUBRICA,
               PEN_SEQ_VIG_FC,
               PEN_NAT_COMP,
               PEN_NUM_ORD_JUD,
               PEN_IDE_CLI_INSTITUIDOR,
               PEN_VAL_FIXO_IND,
               PEN_VAL_PORC_IND,
               PEN_VAL_PORC2,
               PEN_QTY_UNID_IND,
               PEN_VAL_UNID,
               PEN_TIPO_VALOR,
               PEN_IND_QTAS,
               PEN_NUM_QTAS_PAG,
               PEN_TOT_QTAS_PAG,
               PEN_IND_COMP_RUB,
               PEN_NAT_RUB,
               PEN_INI_REF,
               PEN_FIM_REF,
               PEN_PRIORIDADE,
               PEN_DED_IR,
               PEN_FLG_PROCESSA,
               PEN_NAT_VAL,
               PEN_TIPO_APLICACAO,
               PEN_PERCENT_BEN,
               PEN_TIPO_EVENTO_ESPECIAL,
               PEN_VAL_STR1,
               PEN_VAL_STR2,
               PEN_MATRICULA,
               PEN_ENTIDADE,
               PEN_CARGO,
               PEN_CARGO_APOS,
               PEN_DAT_INI,
               PEN_DAT_FIM,
               PEN_DAT_INI_VIG,
               PEN_DAT_FIM_VIG,
               PEN_COD_IDE_CLI_BEN,
               PEN_MSC_INFORMACAO,
               PEN_COL_INFORMACAO,
               PEN_PORC_VIG,
               PEN_DAT_VIG_RUBRICA
          FROM TB_BENEFICIARIO        BB,
               TB_RUBRICAS            RR,
               TB_FORMULA_CALCULO     FC,
               TB_RUBRICAS_PROCESSO   RP,
               TB_CONCESSAO_BENEFICIO BC,
               TB_CONCEITOS_PAG       CP,
               TB_BENEFICIO_CARGO     EC,
               vis_orgao_inativos     voi
         WHERE BB.COD_INS = PAR_COD_INS
           AND FC.COD_FCRUBRICA = V_RUBRICA_REDUTOR
           AND BB.COD_IDE_CLI_BEN = v_ben_ide_cli
           AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
               to_char(BB.DAT_INI_BEN, 'YYYYMM') and
               to_char(PAR_PER_PRO, 'YYYYMM') <=
               to_char(nvl(BB.DAT_FIM_BEN,
                            to_date('01/01/2045', 'dd/mm/yyyy')),
                        'YYYYMM'))
           AND BB.FLG_STATUS in ('A', 'H', 'S', 'X')
           AND BB.FLG_REG_ATIV = 'S'
           AND BB.FLG_CONT_BEN = 'N'
           AND RR.COD_ENTIDADE = bc.cod_entidade
           AND RR.COD_ENTIDADE = RP.COD_ENTIDADE
           AND RR.COD_ENTIDADE = CP.COD_ENTIDADE
           AND BC.COD_INS = BB.COD_INS
           AND BC.COD_BENEFICIO = BB.COD_BENEFICIO
           AND BC.COD_IDE_CLI_SERV = BB.COD_IDE_CLI_BEN
           AND FC.COD_INS = BB.COD_INS
           AND FC.TIP_APLICACAO = 'G'
           AND voi.cod_ide_cli = v_ben_ide_cli
           and voi.nome_orgao = 'APOSENTADOS'
           AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
               to_char(FC.DAT_INI_VIG, 'YYYYMM') and
               to_char(PAR_PER_PRO, 'YYYYMM') <=
               to_char(nvl(FC.DAT_FIM_VIG,
                            to_date('01/01/2045', 'dd/mm/yyyy')),
                        'YYYYMM'))
           AND RR.COD_INS = BB.COD_INS
           AND RR.COD_RUBRICA = FC.COD_RUBRICA
           AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
               to_char(RR.DAT_INI_VIG, 'YYYYMM') and
               to_char(PAR_PER_PRO, 'YYYYMM') <=
               to_char(nvl(RR.DAT_FIM_VIG,
                            to_date('01/01/2045', 'dd/mm/yyyy')),
                        'YYYYMM'))
           AND CP.COD_INS = RR.COD_INS
           AND CP.COD_CONCEITO = RR.COD_CONCEITO
           AND RP.COD_INS = RR.COD_INS
           AND RP.COD_RUBRICA = RR.COD_RUBRICA
           AND RP.TIP_PROCESSO = PAR_TIP_PRO
           AND RP.SEQ_VIG >= 0
           AND RP.FLG_PROCESSA = 'S' ---RAO 20060410
           AND nvl(RR.TIP_EVENTO_ESPECIAL, 'N') <> 'I'
           AND nvl(RR.TIP_EVENTO_ESPECIAL, 'N') <> 'J'
           AND RR.SEQ_VIG = RP.SEQ_VIG_RUBRICA
           AND RR.SEQ_VIG = FC.SEQ_VIG_RUBRICA
           AND EC.COD_INS = BC.COD_INS
           AND EC.COD_BENEFICIO = BC.COD_BENEFICIO
           AND EC.COD_IDE_CLI_SERV = BC.COD_IDE_CLI_SERV
           AND EC.COD_ENTIDADE = BC.COD_ENTIDADE
           AND EC.COD_PCCS = BC.COD_PCCS
           AND EC.NUM_MATRICULA = BC.NUM_MATRICULA
           AND EC.FLG_STATUS = 'V'
           AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
               to_char(EC.DAT_INI_VIG, 'YYYYMM') AND
               to_char(PAR_PER_PRO, 'YYYYMM') <=
               to_char(nvl(EC.DAT_FIM_VIG,
                            to_date('01/01/2045', 'dd/mm/yyyy')),
                        'YYYYMM'));

      EXCEPTION
        WHEN OTHERS THEN
          p_sub_proc_erro := 'SP_CALCULA_PENSAO';
          p_coderro       := SQLCODE;
          P_MSGERRO       := 'Erro ao consultar o registro para calculo do redutor';
          INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                p_coderro,
                                'Calcula Folha',
                                sysdate,
                                p_msgerro,
                                p_sub_proc_erro,
                                BEN_IDE_CLI,
                                COM_COD_FCRUBRICA);
          VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
          --            RAISE ERRO;
      END;

      --  fim do SQL
      BEN_IDE_CLI              := ANT_IDE_CLI;
      BEN_FLG_STATUS           := ANT_FLG_STATUS;
      COM_COD_BENEFICIO        := PEN_COD_BENEFICIO;
      COM_TIP_BENEFICIO        := PEN_TIP_BENEFICIO;
      COM_COD_RUBRICA          := PEN_COD_RUBRICA;
      COM_COD_FCRUBRICA        := PEN_COD_FCRUBRICA;
      COM_SEQ_VIG_FC           := PEN_SEQ_VIG_FC;
      COM_NAT_COMP             := PEN_NAT_COMP;
      COM_NUM_ORD_JUD          := PEN_NUM_ORD_JUD;
      COM_IDE_CLI_INSTITUIDOR  := PEN_IDE_CLI_INSTITUIDOR;
      COM_VAL_FIXO_IND         := PEN_VAL_FIXO_IND;
      COM_VAL_PORC_IND         := PEN_VAL_PORC_IND;
      COM_VAL_PORC2            := PEN_VAL_PORC2;
      COM_QTY_UNID_IND         := PEN_QTY_UNID_IND;
      COM_VAL_UNID             := PEN_VAL_UNID;
      COM_TIPO_VALOR           := PEN_TIPO_VALOR;
      COM_IND_QTAS             := PEN_IND_QTAS;
      COM_NUM_QTAS_PAG         := PEN_NUM_QTAS_PAG;
      COM_TOT_QTAS_PAG         := PEN_TOT_QTAS_PAG;
      COM_IND_COMP_RUB         := PEN_IND_COMP_RUB;
      COM_NAT_RUB              := PEN_NAT_RUB;
      COM_INI_REF              := PEN_INI_REF;
      COM_FIM_REF              := PEN_FIM_REF;
      COM_PRIORIDADE           := PEN_PRIORIDADE;
      COM_DED_IR               := PEN_DED_IR;
      COM_NUM_FUNCAO           := PEN_NUM_FUNCAO;
      COM_FLG_PROCESSA         := PEN_FLG_PROCESSA;
      COM_NAT_VAL              := PEN_NAT_VAL;
      COM_TIPO_APLICACAO       := PEN_TIPO_APLICACAO;
      COM_PERCENT_BEN          := PEN_PERCENT_BEN;
      COM_TIPO_EVENTO_ESPECIAL := PEN_TIPO_EVENTO_ESPECIAL;
      COM_VAL_STR1             := PEN_VAL_STR1;
      COM_VAL_STR2             := PEN_VAL_STR2;
      COM_MATRICULA            := PEN_MATRICULA;
      COM_ENTIDADE             := PEN_ENTIDADE;
      COM_CARGO                := PEN_CARGO;
      COM_CARGO_APOS           := PEN_CARGO_APOS;
      COM_PCCS                 := PEN_PCCS;
      COM_COD_JORNADA          := PEN_COD_JORNADA;
      COM_DAT_INI_VIG          := PEN_DAT_INI_VIG;
      COM_DAT_FIM_VIG          := PEN_DAT_FIM_VIG;
      COM_COD_VINCULO          := PEN_COD_VINCULO;
      COM_COD_REGIME_JUR       := PEN_COD_REGIME_JUR;
      COM_TIP_PROVIMENTO       := PEN_TIP_PROVIMENTO;
      COM_COD_JORNADA_REL      := PEN_COD_JORNADA_REL;
      COM_COD_ENTIDADE         := PEN_COD_ENTIDADE;
      COM_NUM_MATRICULA        := PEN_NUM_MATRICULA;
      COM_COD_IDE_CLI_BEN      := PEN_COD_IDE_CLI_BEN;
      COM_MSC_INFORMACAO       := PEN_MSC_INFORMACAO;
      COM_COL_INFORMACAO       := PEN_COL_INFORMACAO;
      COM_PORC_VIG             := PEN_PORC_VIG;
      COM_DAT_VIG_RUBRICA      := PEN_DAT_VIG_RUBRICA;

      --   COM_DAT_INI := PEN_DAT_INI;
      --   COM_DAT_FIM := PEN_DAT_FIM;

      --   SP_CALCULA_VALOR_RUBRICA;
      -- comentado mvl 16/05/2008 retirar depois
      SP_OBTEM_VALORES_TOTAIS('BASE_RC',
                              PEN_cod_beneficio,
                              0,
                              'N',
                              BASE_RC);

      SP_OBTEM_BASE_IR(IDX_CALN,'N', VI_BASE_IR_REDUC, VI_BASE_IR_REDUC_13);

      IF VI_BASE_IR_REDUC = 0 THEN
        DED_IR   := 0;
        val_imp2 := 0;
        ajus2    := 0;
      ELSE
        DED_IR := SP_OBTEM_DED_PAGOS;
        SP_OBTEM_PARVAL_FOLHA2('TRAM', 2000, 'IRVAL_IMP2', VAL_IMP2);
        SP_OBTEM_PARVAL_FOLHA2('TRAM', 2000, 'IRVAL_AJUS2', AJUS2);
      END IF;

      --retirar depois
      SP_OBTEM_VALORES_TOTAIS('BASE_PREV',
                              PEN_cod_beneficio,
                              0,
                              'N',
                              BASE_FUN_PREV);
      SP_OBTEM_PARVAL_FOLHA2('TASCO', 2000, 'PERC_CONTR', perc_prev);

      --   mon_calculo := ((BASE_RC -
      --              ((VI_BASE_IR_REDUC - DED_IR)*(VAL_IMP2/100) - AJUS2) -
      --              ((BASE_FUN_PREV - DESC_PREV) * PERC_PREV)) - VI_REDUC);

      mon_calculo := ((BASE_RC - v_val_ir - valor_prev_calc) - VI_REDUC);

      IF mon_calculo > 0 THEN
        -- armazena em array
        SP_INS_DETCALCULADO(mon_calculo);
      END IF;

    END LOOP;

    COM_COD_BENEFICIO        := SAM_COD_BENEFICIO;
    COM_TIP_BENEFICIO        := SAN_TIP_BENEFICIO;
    COM_COD_RUBRICA          := SAN_COD_RUBRICA;
    COM_COD_FCRUBRICA        := SAN_COD_FCRUBRICA;
    COM_SEQ_VIG_FC           := SAN_SEQ_VIG_FC;
    COM_NAT_COMP             := SAN_NAT_COMP;
    COM_NUM_ORD_JUD          := SAN_NUM_ORD_JUD;
    COM_IDE_CLI_INSTITUIDOR  := SAN_IDE_CLI_INSTITUIDOR;
    COM_VAL_FIXO_IND         := SAN_VAL_FIXO_IND;
    COM_VAL_PORC_IND         := SAN_VAL_PORC_IND;
    COM_VAL_PORC2            := SAN_VAL_PORC2;
    COM_QTY_UNID_IND         := SAN_QTY_UNID_IND;
    COM_VAL_UNID             := SAN_VAL_UNID;
    COM_TIPO_VALOR           := SAN_TIPO_VALOR;
    COM_IND_QTAS             := SAN_IND_QTAS;
    COM_NUM_QTAS_PAG         := SAN_NUM_QTAS_PAG;
    COM_TOT_QTAS_PAG         := SAN_TOT_QTAS_PAG;
    COM_IND_COMP_RUB         := SAN_IND_COMP_RUB;
    COM_NAT_RUB              := SAN_NAT_RUB;
    COM_INI_REF              := SAN_INI_REF;
    COM_FIM_REF              := SAN_FIM_REF;
    COM_PRIORIDADE           := SAN_PRIORIDADE;
    COM_DED_IR               := SAN_DED_IR;
    COM_NUM_FUNCAO           := SAN_NUM_FUNCAO;
    COM_FLG_PROCESSA         := SAN_FLG_PROCESSA;
    COM_NAT_VAL              := SAN_NAT_VAL;
    COM_TIPO_APLICACAO       := SAN_TIPO_APLICACAO;
    COM_PERCENT_BEN          := SAN_PERCENT_BEN;
    COM_TIPO_EVENTO_ESPECIAL := SAN_TIPO_EVENTO_ESPECIAL;
    COM_VAL_STR1             := SAN_VAL_STR1;
    COM_VAL_STR2             := SAN_VAL_STR2;
    COM_MATRICULA            := SAN_MATRICULA;
    COM_ENTIDADE             := SAN_ENTIDADE;
    COM_CARGO                := SAN_CARGO;
    COM_CARGO_APOS           := SAN_CARGO_APOS;
    COM_PCCS                 := SAN_PCCS;
    COM_COD_JORNADA          := SAN_COD_JORNADA;
    COM_DAT_INI_VIG          := SAN_DAT_INI_VIG;
    COM_DAT_FIM_VIG          := SAN_DAT_FIM_VIG;
    COM_COD_VINCULO          := SAN_COD_VINCULO;
    COM_COD_REGIME_JUR       := SAN_COD_REGIME_JUR;
    COM_TIP_PROVIMENTO       := SAN_TIP_PROVIMENTO;
    COM_COD_JORNADA_REL      := SAN_COD_JORNADA_REL;
    COM_COD_ENTIDADE         := SAN_COD_ENTIDADE;
    COM_NUM_MATRICULA        := SAN_NUM_MATRICULA;
    COM_COD_IDE_CLI_BEN      := SAN_COD_IDE_CLI_BEN;
    COM_MSC_INFORMACAO       := SAN_MSC_INFORMACAO;
    COM_COL_INFORMACAO       := SAN_COL_INFORMACAO;
    COM_PORC_VIG             := SAN_PORC_VIG;
    COM_DAT_VIG_RUBRICA      := SAN_DAT_VIG_RUBRICA;

    --   SAN_DAT_INI := COM_DAT_INI;
    --   SAN_DAT_FIM := COM_DAT_FIM;
    BEN_IDE_CLI    := SAM_IDE_CLI;
    BEN_FLG_STATUS := SAM_FLG_STATUS;

  END SP_CALCULA_REDUTOR;
  ---------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_RUBRICA(i_cod_fcrubrica in number,
                             i_flg_natureza  in varchar2,
                             o_cod_rubrica   out number) as

  begin

    SELECT COD_RUBRICA
      INTO o_cod_rubrica
      FROM TB_RUBRICAS
     WHERE COD_CONCEITO = trunc(i_cod_fcrubrica / 100, 000)
       AND FLG_NATUREZA = i_flg_natureza
       AND COD_ENTIDADE = ANT_ENTIDADE
       AND SUBSTR(lpad(ltrim(to_char(COD_RUBRICA)), 7, 0), 6, 2) IN
           ('50', '51'); -- alt ffranco 03/2007
  exception
    when no_data_found then
      p_sub_proc_erro := 'SP_GRAVA_DETALHE_RET A1';
      p_coderro       := SQLCODE;
      P_MSGERRO       := 'Erro ao obter o codigo da rubrica';
      INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                            p_coderro,
                            'Calcula Folha',
                            sysdate,
                            p_msgerro,
                            p_sub_proc_erro,
                            rdcn.cod_ide_cli,
                            i_COD_FCRUBRICA);
      VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
    when others then
      p_sub_proc_erro := 'SP_GRAVA_DETALHE_RET A1';
      p_coderro       := SQLCODE;
      P_MSGERRO       := SQLERRM;
      INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                            p_coderro,
                            'Calcula Folha',
                            sysdate,
                            p_msgerro,
                            p_sub_proc_erro,
                            rdcn.cod_ide_cli,
                            i_COD_FCRUBRICA);
      VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;

    --   end;

  END SP_OBTEM_RUBRICA;
  -------------------------------------------------------------------------------------
  PROCEDURE SP_VERIFICA_CORRECAO_MONETARIA(I_COD_IDE_CLI  IN VARCHAR2,
                                           O_ANO_INICIO   OUT NUMBER ,
                                           O_FLG_CORRECAO OUT BOOLEAN) AS

    O_FLG_TEM_CORRECAO CHAR(1);

  BEGIN
       O_FLG_CORRECAO := FALSE;
    Begin
      SELECT RET.FATOR_CORRECAO,
             TO_NUMBER(TO_CHAR(RET.DAT_PERIODO_PROC,'YYYY'))
        INTO O_FLG_TEM_CORRECAO,
             O_ANO_INICIO
        FROM TB_CASOS_RET_FOLHA RET
       where RET.COD_INS          = PAR_COD_INS
         and RET.COD_IDE_CLI      = I_COD_IDE_CLI
         and RET.DAT_PERIODO_COMP = PAR_PER_REAL
         -- TASK 3017 -- APLICADO POR LUIZ EM 28/04/2015
         and RET.flg_status = 'V';
         -- FIM TASK 3017

       IF O_FLG_TEM_CORRECAO ='S' THEN --- Alterado 28-09-2016 "S" true
           O_FLG_CORRECAO := TRUE;
       END IF;

    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        O_FLG_TEM_CORRECAO := 'N';
        O_FLG_CORRECAO     := FALSE;
      WHEN OTHERS THEN
        p_sub_proc_erro := 'SP_OBTEM_FATOR_CORRECAO1';
        p_coderro       := SQLCODE;
        P_MSGERRO       := 'Erro ao obter o fator de correcao';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              0,
                              0);
        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
    end;

  END SP_VERIFICA_CORRECAO_MONETARIA;
  -------------------------------------------------------------------------------------
  -- SP_OBTEM_FATOR_CORRECAO: Obtem fator de correc?o nos casos de retroativo
  --efv
  PROCEDURE SP_OBTEM_FATOR_CORRECAO(I_COD_IDE_CLI    IN VARCHAR2,
                                    i_data_param     in date,
                                    O_FATOR_CORRECAO OUT NUMBER) AS
    O_FATOR_MES NUMBER(18, 4);

  BEGIN
    O_FATOR_MES := 1;

    begin
      /*
      SELECT cod.cod_porcen
      INTO O_FATOR_MES
      FROM PARCOD COD
      WHERE COD.COD_CODNUM = 2355
      AND   COD.COD_CUEN01 = (SELECT MAX(COD2.COD_CUEN01)
                              FROM  PARCOD COD2
                              WHERE COD2.COD_CODNUM = 2355
                              AND   COD2.COD_CUEN01 <= to_char(PAR_PER_REAL, 'MMYYYY'))
      AND   TO_DATE(TO_CHAR(COD.COD_NUME01, '00')||COD.COD_NUME02,'MMYYYY') = PAR_PER_PRO;
      */

      SELECT dpe.val_elemento
         INTO O_FATOR_MES
        FROM tb_det_param_estrutura dpe
       WHERE dpe.cod_param = W_COD_PARAM_GERAL_CORRECAO
         and dpe.cod_estrutura = 1000
         AND to_char(dpe.ini_vig, 'YYYYMM') >=
             to_char(i_data_param, 'YYYYMM')
         and to_char(dpe.fim_vig, 'YYYYMM') <=
             to_char(i_data_param, 'YYYYMM');

      O_FATOR_CORRECAO := O_FATOR_MES;
      /*
      SELECT cod.cod_porcen
      INTO O_FATOR_MES
      FROM PARCOD COD
      WHERE COD.COD_CODNUM = 2355
      AND   to_date(COD.COD_CUEN01, 'MMYYYY') =
                             (SELECT max(to_date(COD2.COD_CUEN01, 'MMYYYY'))
                              FROM  PARCOD COD2
                              WHERE COD2.COD_CODNUM = 2355
                              AND   to_date(COD2.COD_CUEN01, 'MMYYYY') <= PAR_PER_REAL)
      AND   TO_DATE(TO_CHAR(COD.COD_NUME01, '00')||COD.COD_NUME02,'MMYYYY') = PAR_PER_PRO; */
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        O_FATOR_MES      := 1;  -- Era 1 passei para zero em.10.11.09
        O_FATOR_CORRECAO := 1;  -- Era 1 passei para zero em.10.11.09
      WHEN OTHERS THEN
        p_sub_proc_erro := 'SP_OBTEM_FATOR_CORRECAO2';
        p_coderro       := SQLCODE;
        P_MSGERRO       := 'Erro ao obter o fator de correcao mes';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              0,
                              0);
        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
    end;

    RETURN;

  END SP_OBTEM_FATOR_CORRECAO;
  -------------------------------------------------------------------------------------
  -- SP_OBTEM_ADIANTAMENTO_13: Obtem o valor total de adiantamentos de 13 no ano
  -- efv
  FUNCTION SP_OBTEM_ADIANTAMENTO_13 RETURN NUMBER AS
    O_VAL_ADIANTA      NUMBER(18, 4);
    O_VAL_ADIANTA_13   NUMBER(18, 4);
    O_QTD_AVOS_INST    number(18, 4);
    O_NUM_MESES_INST   number(18, 4);
    O_QTD_AVOS_BENEF   number(18, 4);
    vcod_fcrubrica_ant tb_det_calculado_ESTRUC.cod_fcrubrica%type;
    vCOM_NAT_RUB       varchar2(2) := '';
  BEGIN
    O_VAL_ADIANTA := 0;

    IF PAR_TIP_PRO = 'T' THEN
      IF HOUVE_RATEIO = FALSE THEN
        Begin
          SELECT NVL(SUM(CAL.VAL_RUBRICA), 0) -->  ffranco 07/12/2006
            INTO O_VAL_ADIANTA
            FROM TB_DET_CALCULADO CAL
           WHERE CAL.COD_INS = PAR_COD_INS
             AND CAL.TIP_PROCESSO IN
                 (SELECT PRO.TIP_PROCESSO FROM TB_TIPO_PROCESSO PRO)
             AND TRUNC(CAL.DAT_INI_REF, 'YEAR') =
                 TRUNC(to_date(PAR_PER_PRO), 'YEAR')
             AND CAL.COD_BENEFICIO = COM_COD_BENEFICIO
             AND CAL.COD_IDE_CLI = BEN_IDE_CLI ---> ffranco 07/12/2006
             AND CAL.COD_FCRUBRICA in (14900, 14901, 14951, 14902);
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            O_VAL_ADIANTA := 0;
          WHEN OTHERS THEN
            p_sub_proc_erro := 'SP_OBTEM_ADIANTAMENTO_13';
            p_coderro       := SQLCODE;
            P_MSGERRO       := 'Erro ao obter o adiantamento do 13?';
            INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                  p_coderro,
                                  'Calcula Folha',
                                  sysdate,
                                  p_msgerro,
                                  p_sub_proc_erro,
                                  BEN_IDE_CLI,
                                  0);
            VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
        end;

        IF O_VAL_ADIANTA > 0 THEN
          -- armazena em array
          vcod_fcrubrica_ant := com_cod_fcrubrica;
          vCOM_NAT_RUB       := COM_NAT_RUB;
          com_cod_fcrubrica  := 14950;
          COM_NAT_RUB        := 'D';
          SP_INS_DETCALCULADO(O_VAL_ADIANTA);
          COM_NAT_RUB       := vCOM_NAT_RUB;
          com_cod_fcrubrica := vcod_fcrubrica_ant;
          O_VAL_ADIANTA     := 0;
        END IF;
      END IF;
      IF HOUVE_RATEIO = FALSE THEN
        Begin
          SELECT NVL(SUM(CAL.VAL_RUBRICA), 0) -->  ffranco 07/12/2006
            INTO O_VAL_ADIANTA_13
            FROM TB_DET_CALCULADO CAL
           WHERE CAL.COD_INS = PAR_COD_INS
             AND CAL.TIP_PROCESSO IN
                 (SELECT PRO.TIP_PROCESSO FROM TB_TIPO_PROCESSO PRO)
             AND TRUNC(CAL.DAT_INI_REF, 'YEAR') =
                 TRUNC(to_date(PAR_PER_PRO), 'YEAR')
             AND CAL.COD_BENEFICIO = COM_COD_BENEFICIO
             AND CAL.COD_IDE_CLI <> BEN_IDE_CLI ---> ffranco 02/2007
             AND CAL.COD_FCRUBRICA = 15000;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            O_VAL_ADIANTA := 0;
          WHEN OTHERS THEN
            p_sub_proc_erro := 'SP_OBTEM_ADIANTAMENTO_13';
            p_coderro       := SQLCODE;
            P_MSGERRO       := 'Erro ao obter o adiantamento do 13?';
            INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                  p_coderro,
                                  'Calcula Folha',
                                  sysdate,
                                  p_msgerro,
                                  p_sub_proc_erro,
                                  BEN_IDE_CLI,
                                  0);
            VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
        end;

        IF O_VAL_ADIANTA_13 > 0 THEN
          -- armazena em array
          vcod_fcrubrica_ant := com_cod_fcrubrica;
          vCOM_NAT_RUB       := COM_NAT_RUB;
          com_cod_fcrubrica  := 15050;
          COM_NAT_RUB        := 'D';
          o_val_adianta_13   := o_val_adianta_13 * (VI_PERCENTUAL_RATEIO);
          SP_INS_DETCALCULADO(O_VAL_ADIANTA_13);
          COM_NAT_RUB       := vCOM_NAT_RUB;
          com_cod_fcrubrica := vcod_fcrubrica_ant;
          O_VAL_ADIANTA     := 0;
        END IF;
      END IF;

    ELSE

      --------  por ffranco em 02/2007 --- adiantamento 13 salario de aposentado em pensionista
      IF (PAR_TIP_PRO = 'T' and COM_TIP_BENEFICIO = 'PENSIONISTA') OR
         (VI_TEM_SAIDA and COM_TIP_BENEFICIO = 'PENSIONISTA') THEN

        Begin
          SELECT NVL(SUM(CAL.VAL_RUBRICA), 0) -->  ffranco 07/12/2006
            INTO O_VAL_ADIANTA
            FROM TB_DET_CALCULADO CAL
           WHERE CAL.COD_INS = PAR_COD_INS
             AND CAL.TIP_PROCESSO IN
                 (SELECT PRO.TIP_PROCESSO FROM TB_TIPO_PROCESSO PRO)
             AND TRUNC(CAL.DAT_INI_REF, 'YEAR') =
                 TRUNC(to_date(PAR_PER_PRO), 'YEAR')
                --   AND   CAL.COD_BENEFICIO = ant_COD_BENEFICIO
             AND CAL.COD_IDE_CLI = DECODE(PAR_TIP_PRO,
                                          'T',
                                          COM_IDE_CLI_INSTITUIDOR,
                                          BEN_IDE_CLI) ---> ffranco 02/2007
             AND CAL.COD_FCRUBRICA in (14900, 14901, 14951, 14902);
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            O_VAL_ADIANTA := 0;
          WHEN OTHERS THEN
            p_sub_proc_erro := 'SP_OBTEM_ADIANTAMENTO_13';
            p_coderro       := SQLCODE;
            P_MSGERRO       := 'Erro ao obter o valor do adiantamento do 13?';
            INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                  p_coderro,
                                  'Calcula Folha',
                                  sysdate,
                                  p_msgerro,
                                  p_sub_proc_erro,
                                  BEN_IDE_CLI,
                                  0);
            VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
        end;
        ---> levanta a data de falecimento do instituidor
        ---> e compara com quantidade de avos de 13 sal adiantado que ele recebeu
        /*   begin
          select cindiv.val_unidade
           into O_QTD_AVOS_INST
          from tb_composicao_indiv cindiv
          where cindiv.cod_ins = PAR_COD_INS
            and cindiv.cod_ide_cli = COM_IDE_CLI_INSTITUIDOR
            and TRUNC(Cindiv.Dat_Ini_VIG, 'YEAR') = TRUNC(to_date(PAR_PER_PRO), 'YEAR')
            and cindiv.cod_fcrubrica in  (14900,14901,14951);
        EXCEPTION WHEN NO_DATA_FOUND THEN
        O_QTD_AVOS_INST := 0;
        WHEN OTHERS THEN
           p_sub_proc_erro:= 'SP_OBTEM_ADIANTAMENTO_13';
           p_coderro := SQLCODE;
           P_MSGERRO := SQLERRM;
                INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                               p_coderro,
                                'Calcula Folha',
                                sysdate,
                               p_msgerro,
                                p_sub_proc_erro,
                                BEN_IDE_CLI,
                                0);
        END; */
        Begin
          SELECT TO_NUMBER(TO_CHAR(BEN.DAT_FIM_BEN, 'MM'))
            INTO O_NUM_MESES_INST
            FROM TB_BENEFICIARIO BEN
           WHERE BEN.COD_INS = PAR_COD_INS
             AND BEN.COD_IDE_CLI_BEN = BEN_IDE_CLI; --COM_IDE_CLI_INSTITUIDOR;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            O_NUM_MESES_INST := 0;
          WHEN OTHERS THEN
            p_sub_proc_erro := 'SP_OBTEM_ADIANTAMENTO_13';
            p_coderro       := SQLCODE;
            P_MSGERRO       := 'Erro ao obter o numero de meses do final do beneficio';
            INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                  p_coderro,
                                  'Calcula Folha',
                                  sysdate,
                                  p_msgerro,
                                  p_sub_proc_erro,
                                  BEN_IDE_CLI,
                                  0);
            VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
        end;
        /*
        IF O_NUM_MESES_INST > 0 and O_QTD_AVOS_INST > 0 THEN
           O_VAL_ADIANTA := O_VAL_ADIANTA / O_QTD_AVOS_INST * 12;
           O_VAL_ADIANTA := O_VAL_ADIANTA / 12 * (O_QTD_AVOS_INST - O_NUM_MESES_INST) * VI_PERCENTUAL_RATEIO;
           V_NUM_AVOS_13_ADI := O_QTD_AVOS_INST - O_NUM_MESES_INST;
        END IF; */

        IF O_VAL_ADIANTA > 0 AND COM_DAT_FIM_VIG IS NULL THEN
          -- armazena em array
          vcod_fcrubrica_ant := com_cod_fcrubrica;
          vCOM_NAT_RUB       := COM_NAT_RUB;
          com_cod_fcrubrica  := 14952;
          COM_NAT_RUB        := 'D';
          SP_INS_DETCALCULADO(O_VAL_ADIANTA);
          COM_NAT_RUB       := vCOM_NAT_RUB;
          com_cod_fcrubrica := vcod_fcrubrica_ant;
          O_VAL_ADIANTA     := 0;
        END IF;
      end if;
    END IF;
    -----------
    IF PAR_TIP_PRO = 'T' AND COM_TIP_BENEFICIO = 'PENSIONISTA' AND
       O_VAL_ADIANTA_13 > 0 THEN
      O_VAL_ADIANTA := O_VAL_ADIANTA_13;
    ELSE
      O_VAL_ADIANTA := 0;
    END IF;

    RETURN(O_VAL_ADIANTA);

  END SP_OBTEM_ADIANTAMENTO_13;
  -------------------------------------------------------------------------------------
  -- SP_OBTEM_TETO_PENSAO: Obtem o valor total de adiantamentos de 13 no ano
  -- efv
  FUNCTION SP_OBTEM_TETO_PENSAO RETURN NUMBER AS
    o_val_teto_pensao NUMBER(18, 4);
  BEGIN
    o_val_teto_pensao := 0;
    Begin
      SELECT cod.cod_valo01 --, cod.cod_porcen
        into o_val_teto_pensao --, v_porc_teto_pensao
        FROM PARCOD cod
       WHERE COD_CODNUM = 2304
         and cod.cod_codsou = 'TETOPM'
         and cod.cod_fech01 <= PAR_PER_PRO
         and (cod.cod_fech02 is null or cod.cod_fech02 >= PAR_PER_PRO);
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        o_val_teto_pensao := 1000000;
      WHEN OTHERS THEN
        p_sub_proc_erro := 'SP_OBTEM_TETO_PENSAO';
        p_coderro       := SQLCODE;
        P_MSGERRO       := 'Erro ao obter o teto de pensao';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              null,
                              0);
        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
    end;

    RETURN(o_val_teto_pensao);

  END SP_OBTEM_TETO_PENSAO;
  ----------------------------------------------------------------------------------
  FUNCTION SP_OBTEM_DESC_NIVEL RETURN VARCHAR2 IS

    v_des_nivel tb_valores_fatores.des_val_fat%type;

  BEGIN

    v_des_nivel := ' ';

    BEGIN
      select vf.des_val_fat --, mf.des_sigla
        into v_des_nivel
        from tb_valores_fatores    vf,
             tb_valores_referencia vr,
             tb_mestre_fatores     mf
       where vf.cod_ins = PAR_COD_INS
         and vf.cod_ins = vr.cod_ins
         and vf.cod_entidade = vr.cod_entidade
         and vf.cod_pccs = vr.cod_pccs
         and vf.cod_mes_fat = vr.cod_mes_fat
         and vf.cod_val_fat = vr.cod_val_fat
         and vr.cod_referencia = BEN_COD_REFERENCIA
         and vr.cod_quadro = COM_QUADRO
         and vr.cod_pccs = COM_PCCS
         and vr.cod_entidade = COM_ENTIDADE
         and mf.cod_ins = vf.cod_ins
         and mf.cod_entidade = vr.cod_entidade
         and mf.cod_pccs = vf.cod_pccs
         and mf.cod_mes_fat = vr.cod_mes_fat
         and mf.cod_mes_fat = 3;

    exception
      when others then
        v_des_nivel := ' ';
    end;

    return v_des_nivel;

  END SP_OBTEM_DESC_NIVEL;
  ----------------------------------------------------------------------------------
  FUNCTION SP_OBTEM_DESC_PISO RETURN VARCHAR2 IS

    v_des_nivel tb_valores_fatores.des_val_fat%type;

  BEGIN

    v_des_nivel := ' ';

    BEGIN
      select vf.des_val_fat --, mf.des_sigla
        into v_des_nivel
        from tb_valores_fatores    vf,
             tb_valores_referencia vr,
             tb_mestre_fatores     mf
       where vf.cod_ins = PAR_COD_INS
         and vf.cod_ins = vr.cod_ins
         and vf.cod_entidade = vr.cod_entidade
         and vf.cod_pccs = vr.cod_pccs
         and vf.cod_mes_fat = vr.cod_mes_fat
         and vf.cod_val_fat = vr.cod_val_fat
         and vr.cod_referencia = BEN_COD_REFERENCIA
         and vr.cod_quadro = COM_QUADRO
         and vr.cod_pccs = COM_PCCS
         and vr.cod_entidade = COM_ENTIDADE
         and mf.cod_ins = vf.cod_ins
         and mf.cod_entidade = vr.cod_entidade
         and mf.cod_pccs = vf.cod_pccs
         and mf.cod_mes_fat = vr.cod_mes_fat
         and mf.cod_mes_fat = 4;

    exception
      when others then
        v_des_nivel := ' ';
    end;

    return v_des_nivel;

  END SP_OBTEM_DESC_PISO;
  ----------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_VAL_JORN_PISO(o_valor out number) AS

  BEGIN
    BEGIN
      select jor.val_valor_percentual
        into o_valor
        from tb_valores_fatores    vf,
             tb_valores_referencia vr,
             tb_mestre_fatores     mf,
             tb_jornada            jor
       where vf.cod_ins = PAR_COD_INS
         and vf.cod_ins = vr.cod_ins
         and vf.cod_entidade = vr.cod_entidade
         and vf.cod_pccs = vr.cod_pccs
         and vf.cod_mes_fat = vr.cod_mes_fat
         and vf.cod_val_fat = vr.cod_val_fat
         and vr.cod_referencia = BEN_COD_REFERENCIA
         and vr.cod_quadro = COM_QUADRO
         and vr.cod_pccs = COM_PCCS
         and vr.cod_entidade = COM_ENTIDADE
         and mf.cod_ins = vf.cod_ins
         and mf.cod_entidade = vr.cod_entidade
         and mf.cod_pccs = vf.cod_pccs
         and mf.cod_mes_fat = vr.cod_mes_fat
         and mf.cod_mes_fat = 4
         and vf.cod_ins = jor.cod_ins
         and vf.des_val_fat = jor.des_jornada;

    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        O_VALOR := 0;

      WHEN OTHERS THEN
        p_sub_proc_erro := 'SP_OBTEM_VAL_JORN_PISO';
        p_coderro       := SQLCODE;
        P_MSGERRO       := 'Erro ao obter o valor do percentual do piso minimo';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              BEN_IDE_CLI,
                              COM_COD_FCRUBRICA);

        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;

    END;

  END;
  ----------------------------------------------------------------------------------

  -- Agrega rubrica en array que sera inserido na tabela de detalhe calculado
  --
  ----------------------------------------------------------------------------------
  PROCEDURE SP_INS_DETCAL_PA(ide_cli in varchar2, i_valor in number) AS
    cur_form         curesp;
    vs_str           varchar2(100);
    vs_inf           varchar2(10);
    vs_valor_val     number(18, 4);
    val_rubrica_supl number(18, 4) := 0;
    vi_valor_det     number(18, 4) := 0;
    vc_nao_parcela   varchar2(1) := null;

  BEGIN

    vi_valor_det := i_valor;
    -- incluir informacao do beneficiario por ordem judicial PA

    IF COM_NUM_ORD_JUD IS NOT NULL THEN
      BEGIN
        select co.cod_ide_cli
          into rdcn.cod_ide_cli_ben
          from tb_composicao_oj co
         where co.cod_ins = PAR_COD_INS
           and co.num_ord_jud = COM_NUM_ORD_JUD
           AND co.cod_fcrubrica = com_cod_fcrubrica;
      EXCEPTION
        when no_data_found then
          rdcn.cod_ide_cli_ben := null;
      END;
    ELSE
      rdcn.cod_ide_cli_ben := null;
    END IF;

    vc_nao_parcela := 'N';

    --  testa se houve parcelamento --

    IF PAR_TIP_PRO = 'R' THEN
      IF BEN_IDE_CLI <> 2527500 THEN
        BEGIN
          SELECT distinct 'S'
            INTO vc_nao_parcela
            FROM TB_DET_CALCULADO_PARC
           WHERE COD_INS = PAR_COD_INS
             AND TIP_PROCESSO = 'N'
             AND DAT_INI_REF = PAR_PER_PRO
             AND trunc(cod_fcrubrica / 100, 000) =
                 trunc(COM_COD_FCRUBRICA / 100, 000)
             AND COD_IDE_CLI = BEN_IDE_CLI
             AND COD_BENEFICIO = COM_COD_BENEFICIO;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            vc_nao_parcela := 'N';
        END;
      ELSE
        vc_nao_parcela := 'N';
      END IF;
    ELSE
      vc_nao_parcela := 'N';
    END IF;

    IF vc_nao_parcela = 'N' THEN

      IF vi_valor_det > 0 THEN
        BEGIN
          tdcn_pa.extend;
        EXCEPTION
          when others then
            p_sub_proc_erro := 'SP_INS_DETCAL_NORMAL';
            p_coderro       := SQLCODE;
            P_MSGERRO       := 'Erro na criacao do array para Pensao Alimenticia';
            INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                  p_coderro,
                                  'Calcula Folha',
                                  sysdate,
                                  p_msgerro,
                                  p_sub_proc_erro,
                                  BEN_IDE_CLI,
                                  COM_COD_FCRUBRICA);
            VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
        END;

        idx_caln_pa := nvl(idx_caln_pa, 0) + 1;
        --    idx_seq_detalhe := nvl(idx_seq_detalhe,0) + 1;

        --    Inverte a natureza da rubrica para gravar
        --    o registro como credito e calcular o IR da PA

        IF COM_NAT_RUB = 'C' then
          COM_NAT_RUB := 'D';
        ELSE
          COM_NAT_RUB := 'C';
        END IF;

        ---

        rdcn.flg_natureza := COM_NAT_RUB;

        rdcn.cod_ins       := PAR_COD_INS;
        rdcn.tip_processo  := PAR_TIP_PRO;
        rdcn.per_processo  := PAR_PER_PRO;
        rdcn.cod_ide_cli   := BEN_IDE_CLI ;
        rdcn.cod_beneficio := COM_COD_BENEFICIO;
        rdcn.seq_pagamento := vi_seq_pagamento;
        rdcn.seq_detalhe   := idx_caln_pa;
        rdcn.cod_fcrubrica := COM_COD_FCRUBRICA;
        rdcn.seq_vig       := COM_SEQ_VIG_FC;
        rdcn.val_rubrica   := vi_valor_det;
        rdcn.num_quota     := COM_NUM_QTAS_PAG + 1;

        rdcn.tot_quota       := COM_TOT_QTAS_PAG;
        rdcn.dat_ini_ref     := PAR_PER_PRO;
        rdcn.dat_fim_ref     := COM_FIM_REF;
        rdcn.num_ord_jud     := COM_NUM_ORD_JUD;
        rdcn.dat_ing         := sysdate;
        rdcn.dat_ult_atu     := sysdate;
        rdcn.nom_usu_ult_atu := PAR_COD_USU;
        rdcn.nom_pro_ult_atu := 'FOLHA CALCULADA';
        rdcn.des_informacao  := null;

        rdcn.val_rubrica_cheio := rdcn.val_rubrica;

        IF PAR_TIP_PRO = 'R' AND rdcn.des_complemento IS NULL THEN
          rdcn.des_complemento := 'Ret.';
        ELSIF rdcn.des_complemento not like 'Parc%' Then
          rdcn.des_complemento := null;
        END IF;

        rdcn.cod_ide_cli_ben := null;
        rdcn.cod_ide_cli_ben := COM_COD_IDE_CLI_BEN;

        vs_valor_val := 0;

        IF COM_MSC_INFORMACAO is not null AND
           COM_COL_INFORMACAO is not null THEN

          FOR i IN 1 .. nom_variavel.count LOOP

            IF nom_variavel(i) = COM_COL_INFORMACAO THEN
              vs_valor_val     := val_variavel(i);
              v_val_percentual := vs_valor_val;
              exit;
            END IF;

          END LOOP;

          vs_str := 'select ' || 'to_char(' || '''' || vs_valor_val || '''' || ',' || '''' ||
                    COM_MSC_INFORMACAO || '''' || ',' || '''' ||
                    'NLS_NUMERIC_CHARACTERS = ' || '".,"' || '''' || ')' ||
                    ' from dual';

          BEGIN
            OPEN cur_form FOR vs_str;
            FETCH cur_form
              INTO vs_inf;
            CLOSE cur_form;
          END;

          IF COM_COL_INFORMACAO = 'VAL_PERC_BENEFICIO' OR
             COM_COL_INFORMACAO = 'VAL_PAR_CONS' OR
             COM_COL_INFORMACAO = 'PERC_VAL_PENSAO' OR
             COM_COL_INFORMACAO = 'VAL_PERC_FIXO' THEN
            rdcn.des_informacao := vs_inf || '%';
          ELSIF COM_COL_INFORMACAO = 'PERC_RATEIO_PECUNIA' THEN
            rdcn.des_informacao := TO_CHAR(VI_PERC_PECUNIA,
                                           COM_MSC_INFORMACAO);
          ELSIF COM_COL_INFORMACAO = 'NUM_DEPENDENTES' THEN
            rdcn.des_informacao := vs_inf || ' Dep.';
          ELSIF COM_COL_INFORMACAO = 'GRP_ABONO_SALARIAL' THEN
            rdcn.des_informacao := 'GRP=' || vs_inf;
          ELSIF COM_COL_INFORMACAO = 'NUM_PARCELAS' THEN
            rdcn.des_informacao := lpad(to_char(COM_NUM_QTAS_PAG, '999'),
                                        3,
                                        0) || '/' ||
                                   lpad(to_char(COM_TOT_QTAS_PAG, '999'),
                                        3,
                                        0);
          ELSIF COM_COL_INFORMACAO = 'VAL_PENSAO' THEN
            rdcn.des_informacao := 'VAL. FIXO';
          ELSIF COM_COL_INFORMACAO = 'QTD_SAL_MIN_PENSAO' THEN
            rdcn.des_informacao := vs_inf || 'S.M.';
          ELSIF COM_COL_INFORMACAO = 'PERC_SAL_MIN_PENSAO' THEN
            rdcn.des_informacao := ltrim(vs_inf) || '% SM';
          ELSIF COM_COL_INFORMACAO = 'QTD_COTAS' THEN
            rdcn.des_informacao := ltrim(vs_inf);
          ELSE
            rdcn.des_informacao := vs_inf;
          END IF;
        END IF;

        tdcn_pa(idx_caln_pa) := rdcn;

      END IF;
    END IF;
    --EXCEPTION
    --     when errpro then
    --          null;
    --     when others then
    --          par_err  := sqlcode;
    --          par_men  := 'SP_INS_DETCAL_NORMAL: ' || sqlerrm;
  END SP_INS_DETCAL_PA;
  ----------------------------------------------------------------------------------
  PROCEDURE SP_GRAVA_MASTER_FOLHA_PA(IDE_CLI IN VARCHAR2, COD_BEN IN NUMBER, VAL_PA IN NUMBER) AS

    i                number := 0;
    j                number := 0;
    valor            number := 0;
    variavel         VARCHAR2(30) := null;
    val_rubrica_supl number(18, 4) := 0;
    v_fol            number;
    Tot_cred_pa      number(18, 4) := 0;
    rfol2            TB_FOLHA%ROWTYPE; -- Armazena Totais

  BEGIN

    delete tb_det_calculado_pa dpa
     where --> ffranco 03/2007
     dpa.cod_ins = PAR_COD_INS
     and dpa.tip_processo = PAR_TIP_PRO
     AND dpa.per_processo = PAR_PER_PRO
     AND dpa.seq_pagamento = vi_seq_pagamento
     AND dpa.cod_ide_cli =   IDE_CLI;

    delete tb_folha_pa fpa
     where --> ffranco 03/2007
     fpa.cod_ins = PAR_COD_INS
     and fpa.tip_processo = PAR_TIP_PRO
     AND fpa.per_processo = PAR_PER_PRO
     AND fpa.seq_pagamento = vi_seq_pagamento
     AND fpa.cod_ide_cli =   IDE_CLI ;

    delete tb_det_calculado_pa_sim dpas
     where --> ffranco 03/2007
     dpas.cod_ins = PAR_COD_INS
     and dpas.tip_processo = PAR_TIP_PRO
     AND dpas.per_processo = PAR_PER_PRO
     AND dpas.seq_pagamento = vi_seq_pagamento
     AND dpas.cod_ide_cli =  IDE_CLI ;

    delete tb_folha_pa_sim fpas
     where --> ffranco 03/2007
     fpas.cod_ins = PAR_COD_INS
     and fpas.tip_processo = PAR_TIP_PRO
     AND fpas.per_processo = PAR_PER_PRO
     AND fpas.seq_pagamento = vi_seq_pagamento
     AND fpas.cod_ide_cli =  IDE_CLI ;

    COMMIT;

    IF vi_suplementar THEN
      IF SUPL_OK = 'X' THEN
        FOR i in 1 .. tdcn_pa.count LOOP
          rdcn := tdcn_pa(i);

          val_rubrica_supl := sp_valor_suplementar(rdcn.cod_ide_cli,
                                                   rdcn.cod_beneficio,
                                                   rdcn.cod_fcrubrica,
                                                   rdcn.flg_natureza,
                                                   rdcn.val_rubrica,
                                                   rdcn.dat_ini_ref,
                                                   rdcn.cod_ide_cli_ben );

          IF RDCN.val_rubrica < 0 THEN
            RDCN.val_rubrica := RDCN.val_rubrica * -1;
            IF RDCN.FLG_NATUREZA = 'C' THEN
              RDCN.FLG_NATUREZA := 'D';
            ELSE
              RDCN.FLG_NATUREZA := 'C';
            END IF;
          END IF;

          begin
            SELECT COD_RUBRICA
              INTO RDCN.COD_FCRUBRICA
              FROM TB_RUBRICAS
             WHERE COD_CONCEITO = trunc(RDCN.COD_FCRUBRICA / 100, 000)
               AND FLG_NATUREZA = RDCN.FLG_NATUREZA
                  --                AND SUBSTR(lpad(ltrim(to_char(COD_RUBRICA)),5,0),4,2) <> '00';
                  --                AND SUBSTR(lpad(ltrim(to_char(COD_RUBRICA)),6,0),5,2) <> '00'; -- alt ffranco 5/12/2006
               AND SUBSTR(lpad(ltrim(to_char(COD_RUBRICA)), 7, 0), 6, 2) IN
                   ('50', '51'); -- alt ffranco 03/2007
          exception
            when no_data_found then
              p_sub_proc_erro := 'SP_GRAVA_MASTER_PA A1';
              p_coderro       := SQLCODE;
              P_MSGERRO       := 'Erro ao obter a rubrica de Pensao Alimenticia';
              INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                    p_coderro,
                                    'Calcula Folha',
                                    sysdate,
                                    p_msgerro,
                                    p_sub_proc_erro,
                                    BEN_IDE_CLI,
                                    COM_COD_FCRUBRICA);
              VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
            when others then
              p_sub_proc_erro := 'SP_GRAVA_DETALHE_PA_RET ERRO';
              p_coderro       := SQLCODE;
              P_MSGERRO       := 'Erro ao obter a rubrica de pensao alimenticia';
              INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                    p_coderro,
                                    'Calcula Folha',
                                    sysdate,
                                    p_msgerro,
                                    p_sub_proc_erro,
                                    RDCN.COD_IDE_CLI,
                                    RDCN.COD_FCRUBRICA);

              VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
          end;
          tdcn_pa(i).COD_FCRUBRICA := RDCN.COD_FCRUBRICA;
          tdcn_pa(i).val_rubrica := val_rubrica_supl;
          tdcn_pa(i).flg_natureza := RDCN.FLG_NATUREZA;
        END LOOP;
      END IF;
    END IF;

    vfolha_pa.extend;
    idx_folha_pa := nvl(idx_folha_pa, 0) + 1;

    rfol.COD_INS       := PAR_COD_INS;
    rfol.TIP_PROCESSO  := PAR_TIP_PRO;
    rfol.PER_PROCESSO  := PAR_PER_PRO;
    rfol.SEQ_PAGAMENTO := vi_seq_pagamento;
    rfol.COD_IDE_CLI   := IDE_CLI;  --IDE_CLI;
    rfol.COD_BENEFICIO := com_cod_beneficio; -- MVL8
    rfol.NUM_GRP       := null;
    rfol.NUM_SEQ_BENEF := null;

    rfol.cod_ide_cli_ben := IDE_CLI;

    SP_OBTEM_DADOS_PF( ANT_IDE_CLI, 'B', rfol.cod_ide_serv, rfol.nom_serv);
    SP_OBTEM_DADOS_PF( IDE_CLI, 'B', rfol.cod_ide_ben, rfol.nom_ben);
    SP_OBTEM_DADOS_PF( IDE_CLI, 'T', rfol.cod_ide_tut, rfol.nom_tut);

    rfol.dat_processo := PAR_PER_PRO;

    rfol.val_sal_base := VAL_PA;
    rfol.tot_cred     := VAL_PA;

    rfol.ded_ir_oj          := 0; --V_DED_IR_OJ;
    rfol.ded_ir_doenca      := V_DED_IR_DOENCA;
    rfol.ded_ir_pa          := V_DED_IR_PA;
    rfol.flg_pag            := 'S';
    rfol.flg_ind_pago       := 'N';
    rfol.flg_ind_ultimo_pag := 'N';
    rfol.tot_cred_pag       := 0;
    rfol.tot_deb_pag        := 0;
    rfol.val_liquido_pag    := 0;

    rfol.ind_processo := 'S';

    vfolha_pa(idx_folha_pa) := rfol;

    IF PAR_PER_PRO = PAR_PER_REAL THEN
      null;
      --      SP_OBTEM_IRRF(ide_cli, idx_folha_pa, 'S', V_VAL_IR, V_VAL_IR_13);
    ELSE
      V_VAL_IR    := 0;
      V_VAL_IR_13 := 0;
    END IF;
    --- FIM PARA NAO PROCESSAR IR PARA RETROATIVOS

    IF V_VAL_IR > 0 OR V_VAL_IR_13 > 0 THEN
      IF PAR_TIP_PRO = 'T' THEN
        -- Incluir a Rubrica do IR no ARRAY
        SP_OBTEM_DETALHE_PAG(ANT_IDE_CLI, 'S', 'I', 'T');
      ELSE
        SP_OBTEM_DETALHE_PAG(ANT_IDE_CLI, 'S', 'I', 'N');
      END IF;
    ELSE
      vi_ir_ret.extend;
      -- Inicializacao da variavel do ir retido, recebendo o valor do ir calculado
      vi_ir_ret(1) := V_VAL_IR;
      -- n?o existindo IR , o valor da variavel ir retido ficara com zero.
    END IF;

    IF VI_TEM_SAIDA AND VI_BASE_IR_13 > 0 THEN
      -- Incluir a Rubrica do IR - 13  - no ARRAY
      IF PAR_TIP_PRO = 'T' THEN
        SP_OBTEM_DETALHE_PAG(IDE_CLI, 'S', 'A', 'T');
      END IF;
      SP_OBTEM_DETALHE_PAG(IDE_CLI, 'S', 'I', 'T');
    END IF;

    v_fol := vfolha_pa.count;
    tot_cred_pa := 0;

--rod acumula folha_pa em 29.set.09
     -- FOR B IN 1 .. v_cod_beneficio.count LOOP
     --    cod_benef := v_cod_beneficio( B );
         FOR i IN 1 .. vfolha_pa.count LOOP
            rfol2 := vfolha_pa(i);
            IF rfol2.cod_ide_cli=IDE_CLI  AND rfol2.cod_beneficio=COD_BEN THEN
               tot_cred_pa := tot_cred_pa + rfol2.tot_cred;
            END IF;
         END LOOP;
     -- END LOOP;
--

      --IF tot_cred_pa >0 THEN
      --rfol := vfolha_pa(vfolha_pa.count);
      rfol.val_base_ir            := nvl(VI_BASE_IR, 0);
      rfol.val_base_ir_pag        := nvl(rfol.val_base_ir, 0);
      rfol.val_base_ir_13         := nvl(VI_BASE_IR_13, 0);
      rfol.val_ir_13_ret          := nvl(V_VAL_IR_13, 0);
      rfol.val_base_ir_13_pag     := nvl(rfol.val_base_ir_13, 0);
      rfol.val_base_ir_13_ret_pag := nvl(V_VAL_IR_13, 0);
      --   SP_OBTEM_VALORES_TOTAIS
      -- obtem valor total de credito
      --      rfol.tot_cred := VI_BASE_IR;

      -- obtem valor total de debito
      rfol.tot_deb := nvl(V_VAL_IR, 0);

      rfol.val_base_prev := 0;

      if rfol.tot_deb < 0 then
        rfol.tot_deb := rfol.tot_deb * -1;
      end if;
      --rfol.val_liquido := 0;
      rfol.val_liquido := rfol.tot_cred - rfol.tot_deb;

      IF v_cod_beneficio.count > 1 THEN
        IF rfol.tot_deb > 0 AND rfol.val_base_ir > 0 THEN
          begin
            rfol.val_ir_ret := vi_ir_ret(1);
          EXCEPTION
            WHEN OTHERS THEN
              p_sub_proc_erro := 'SP_GRAVA_MASTER_PA';
              p_coderro       := SQLCODE;
              P_MSGERRO       := 'Erro ao obter o valor do IR retido';
              INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                    p_coderro,
                                    'Calcula Folha',
                                    sysdate,
                                    p_msgerro,
                                    p_sub_proc_erro,
                                    BEN_IDE_CLI,
                                    COM_COD_FCRUBRICA);
              VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
              --            RAISE ERRO;
          END;

        ELSE
          rfol.val_ir_ret := 0;
        END IF;
      ELSIF V_VAL_IR > 0 THEN
        IF rfol.tot_deb > 0 THEN
          rfol.val_ir_ret := vi_ir_ret(1);
        ELSE
          rfol.val_ir_ret := 0;
        END IF;
      ELSE
        rfol.val_ir_ret := 0;
      END IF;

      rfol.ded_base_ir      := VI_TOT_DED;
      rfol.val_ir_ret_pag   := rfol.val_ir_ret;
      rfol.ded_ir_pa        := V_DED_IR_PA;
      rfol.ded_ir_doenca    := V_DED_IR_DOENCA;
      rfol.val_base_isencao := V_BASE_ISENCAO;
      rfol.tot_deb := 0;
      rfol.val_liquido := tot_cred_pa;
      rfol.val_sal_base := 0;

      BEGIN
        IF ANT_FLG_STATUS = 'A' and rfol.cod_ide_cli =  IDE_CLI THEN -- alterado de <>'S' para ='Y'  para nunca rodar
          ---> FFRANCO 03/2007
          INSERT /*+ append */
          INTO TB_FOLHA_PA
            (cod_ins,
             tip_processo,
             per_processo,
             seq_pagamento,
             cod_ide_cli,
             cod_beneficio,
             num_grp,
             num_seq_benef,
             cod_ide_cli_ben,
             cod_ide_serv,
             nom_serv,
             cod_ide_ben,
             nom_ben,
             cod_ide_tut,
             nom_tut,
             dat_processo,
             val_sal_base,
             tot_cred,
             tot_deb,
             val_liquido,
             val_base_ir,
             val_ir_ret,
             ded_base_ir,
             ded_ir_oj,
             ded_ir_doenca,
             ded_ir_pa,
             flg_pag,
             flg_ind_pago,
             flg_ind_ultimo_pag,
             tot_cred_pag,
             tot_deb_pag,
             val_liquido_pag,
             val_base_ir_pag,
             val_ir_ret_pag,
             val_base_ir_13,
             VAL_IR_13_RET,
             val_base_ir_13_pag,
             VAL_BASE_IR_13_RET_PAG,
             val_base_isencao,
             IND_PROCESSO,
             val_base_prev,
              ----- TASK 3359-----
              VAL_BASE_REDUTOR
             )

          VALUES
            (rfol.COD_INS,
             rfol.TIP_PROCESSO,
             rfol.PER_PROCESSO,
             rfol.SEQ_PAGAMENTO,
             rfol.COD_IDE_CLI,
             rfol.COD_BENEFICIO,
             rfol.NUM_GRP,
             rfol.NUM_SEQ_BENEF,
             rfol.cod_ide_cli_ben,
             rfol.cod_ide_serv,
             rfol.nom_serv,
             rfol.cod_ide_ben,
             rfol.nom_ben,
             rfol.cod_ide_tut,
             rfol.nom_tut,
             rfol.dat_processo,
             trunc(rfol.val_sal_base, 2),
             --trunc(rfol.tot_cred, 2),
             trunc(tot_cred_pa,2),
             trunc(rfol.tot_deb, 2),
             trunc(rfol.val_liquido, 2),
             trunc(rfol.val_base_ir, 2),
             trunc(rfol.val_ir_ret, 2),
             trunc(rfol.ded_base_ir, 2),
             trunc(rfol.ded_ir_oj, 2),
             trunc(rfol.ded_ir_doenca, 2),
             trunc(rfol.ded_ir_pa, 2),
             rfol.flg_pag,
             rfol.flg_ind_pago,
             rfol.flg_ind_ultimo_pag,
             trunc(rfol.tot_cred_pag, 2),
             trunc(rfol.tot_deb_pag, 2),
             trunc(rfol.val_liquido_pag, 2),
             trunc(rfol.val_base_ir_pag, 2),
             trunc(rfol.val_ir_ret_pag, 2),
             trunc(rfol.val_base_ir_13, 2),
             trunc(rfol.val_ir_13_ret, 2),
             trunc(rfol.val_base_ir_13_pag, 2),
             trunc(rfol.val_base_ir_13_ret_pag, 2),
             trunc(rfol.val_base_isencao, 2),
             rfol.ind_processo,
             trunc(rfol.val_base_prev, 2),
              ---- TASK 3359 ----
             rfol.val_base_redutor
               );
        ELSE
          INSERT /*+ append */
          INTO TB_FOLHA_PA_SIM
            ( ---> FFRANCO 03/2007
             cod_ins,
             tip_processo,
             per_processo,
             seq_pagamento,
             cod_ide_cli,
             cod_beneficio,
             num_grp,
             num_seq_benef,
             cod_ide_cli_ben,
             cod_ide_serv,
             nom_serv,
             cod_ide_ben,
             nom_ben,
             cod_ide_tut,
             nom_tut,
             dat_processo,
             val_sal_base,
             tot_cred,
             tot_deb,
             val_liquido,
             val_base_ir,
             val_ir_ret,
             ded_base_ir,
             ded_ir_oj,
             ded_ir_doenca,
             ded_ir_pa,
             flg_pag,
             flg_ind_pago,
             flg_ind_ultimo_pag,
             tot_cred_pag,
             tot_deb_pag,
             val_liquido_pag,
             val_base_ir_pag,
             val_ir_ret_pag,
             val_base_ir_13,
             VAL_IR_13_RET,
             val_base_ir_13_pag,
             VAL_BASE_IR_13_RET_PAG,
             val_base_isencao,
             IND_PROCESSO,
             val_base_prev)

          VALUES
            (rfol.COD_INS,
             rfol.TIP_PROCESSO,
             rfol.PER_PROCESSO,
             rfol.SEQ_PAGAMENTO,
             rfol.COD_IDE_CLI,
             rfol.COD_BENEFICIO,
             rfol.NUM_GRP,
             rfol.NUM_SEQ_BENEF,
             rfol.cod_ide_cli_ben,
             rfol.cod_ide_serv,
             rfol.nom_serv,
             rfol.cod_ide_ben,
             rfol.nom_ben,
             rfol.cod_ide_tut,
             rfol.nom_tut,
             rfol.dat_processo,
             rfol.val_sal_base,
             rfol.tot_cred,
             rfol.tot_deb,
             rfol.val_liquido,
             rfol.val_base_ir,
             rfol.val_ir_ret,
             rfol.ded_base_ir,
             rfol.ded_ir_oj,
             rfol.ded_ir_doenca,
             rfol.ded_ir_pa,
             rfol.flg_pag,
             rfol.flg_ind_pago,
             rfol.flg_ind_ultimo_pag,
             rfol.tot_cred_pag,
             rfol.tot_deb_pag,
             rfol.val_liquido_pag,
             rfol.val_base_ir_pag,
             rfol.val_ir_ret_pag,
             rfol.val_base_ir_13,
             rfol.val_ir_13_ret,
             rfol.val_base_ir_13_pag,
             rfol.val_base_ir_13_ret_pag,
             rfol.val_base_isencao,
             rfol.ind_processo,
             rfol.val_base_prev);
        END IF;
      EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
          null;
          --              update tb_folha_pa
        --               set

        WHEN OTHERS THEN
          p_sub_proc_erro := 'SP_GRAVA_MASTER_PA';
          p_coderro       := SQLCODE;
          P_MSGERRO       := 'Erro na inclusao das rubricas de Pensao Alimenticia';
          INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                p_coderro,
                                'Calcula Folha',
                                sysdate,
                                p_msgerro,
                                p_sub_proc_erro,
                                BEN_IDE_CLI,
                                COM_COD_FCRUBRICA);

        --            RAISE ERRO;
      END;
      valor := rfol.val_base_ir + rfol.ded_base_ir + rfol.ded_ir_oj +
               rfol.ded_ir_pa + rfol.ded_ir_doenca;

      -- gravar os totais do IR
    --END IF;
--    END LOOP;
    commit;
  END SP_GRAVA_MASTER_FOLHA_PA;

  ----------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_DATA_OBITO(I_BENEFICIO  IN NUMBER,
                                O_DATA_OBITO OUT date) AS
    --V_COUNT NUMBER;
  v_cod_entidade number := 0;
  BEGIN
    BEGIN

      select pf.dat_obito
        into O_DATA_OBITO
        from tb_pessoa_fisica pf
       where pf.cod_ide_cli =
             (select cod_ide_cli_serv
                from tb_concessao_beneficio
               where cod_beneficio = I_BENEFICIO
                 and cod_ins = PAR_COD_INS)
                 --and cod_entidade = COM_COD_ENTIDADE)
         and pf.cod_ins = PAR_COD_INS;

      --         SELECT --DECODE(PF.DAT_OBITO, null, to_char(PAR_PER_PRO,'YYYYMMDD'), to_char(PF.DAT_OBITO,'YYYYMMDD'))
      --                 pf.dat_obito
      --           into O_DATA_OBITO
      --           FROM TB_PESSOA_FISICA PF,
      --                TB_CONCESSAO_BENEFICIO CB
      --          WHERE PF.COD_INS = 1
      --            AND CB.COD_IDE_CLI_SERV = PF.COD_IDE_CLI
      --           AND CB.COD_BENEFICIO = I_BENEFICIO
      --           and cb.cod_entidade = COM_COD_ENTIDADE
      --           and pf.cod_ins = cb.cod_ins;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        O_DATA_OBITO := par_per_pro; --to_char(PAR_PER_PRO,'YYYYMMDD');
      WHEN OTHERS THEN
        p_sub_proc_erro := 'SP_OBTEM_DATA_OBITO';
        p_coderro       := SQLCODE;
        P_MSGERRO       := 'Erro ao obter a data do obito';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              BEN_IDE_CLI,
                              0);
        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
        --          RAISE ERRO;
    END;

  END SP_OBTEM_DATA_OBITO;
  ----------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_DATA_OBITO_INV(I_BENEFICIO  IN NUMBER,
                                    O_DATA_OBITO OUT VARCHAR2) AS
    --V_COUNT NUMBER;
  BEGIN
    BEGIN
      SELECT --DECODE(PF.DAT_OBITO, null, to_char(PAR_PER_PRO,'YYYYMMDD'), to_char(PF.DAT_OBITO,'YYYYMMDD'))
       to_char(pf.dat_obito, 'YYYYMMDD')
        into O_DATA_OBITO
        FROM TB_PESSOA_FISICA PF, TB_CONCESSAO_BENEFICIO CB
       WHERE PF.COD_INS = 1
         AND CB.COD_IDE_CLI_SERV = PF.COD_IDE_CLI
         AND CB.COD_BENEFICIO = I_BENEFICIO
         and cb.cod_entidade = COM_COD_ENTIDADE
         and pf.cod_ins = cb.cod_ins;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        O_DATA_OBITO := to_char(par_per_pro, 'yyyymmdd'); --to_char(PAR_PER_PRO,'YYYYMMDD');
      WHEN OTHERS THEN
        p_sub_proc_erro := 'SP_OBTEM_DATA_OBITO';
        p_coderro       := SQLCODE;
        P_MSGERRO       := 'Erro ao obter a data do obito inv.';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              BEN_IDE_CLI,
                              0);
        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
        --          RAISE ERRO;
    END;

  END SP_OBTEM_DATA_OBITO_INV;
  ----------------------------------------------------------------------------------
  PROCEDURE SP_INCLUI_DETALHE_PAG_PA(ide_cli          in varchar2,
                                     TP_COD_BENEFICIO IN NUMBER,
                                     TP_RUBRICA       IN NUMBER,
                                     TP_VAL_RUBRICA   IN NUMBER,
                                     TP_SEQ_VIG       IN NUMBER,
                                     TP_FLG_NATUREZA  IN VARCHAR2) as

  BEGIN

    /* obter a rubrica de credito para PA */

    rdcn.cod_ins         := PAR_COD_INS;
    rdcn.tip_processo    := PAR_TIP_PRO;
    rdcn.per_processo    := PAR_PER_PRO;
    rdcn.cod_ide_cli     := ide_cli;
    rdcn.cod_beneficio   := TP_COD_BENEFICIO;
    rdcn.seq_pagamento   := vi_seq_pagamento;
    rdcn.seq_detalhe     := idx_seq_detalhe;
    rdcn.cod_fcrubrica   := 2200100; --tp_rubrica;
    rdcn.val_rubrica     := tp_val_rubrica;
    rdcn.seq_vig         := tp_seq_vig;
    rdcn.num_quota       := 0;
    rdcn.flg_natureza    := tp_flg_natureza;
    rdcn.tot_quota       := 0;
    rdcn.dat_ini_ref     := PAR_PER_PRO;
    rdcn.dat_fim_ref     := NULL;
    rdcn.cod_ide_cli_ben := NULL; --verificar
    rdcn.num_ord_jud     := NULL; --varificar
    rdcn.dat_ing         := sysdate;
    rdcn.dat_ult_atu     := sysdate;
    rdcn.nom_usu_ult_atu := PAR_COD_USU;
    rdcn.nom_pro_ult_atu := 'FOLHA CALCULADA';


    rdcn.des_complemento := null;

    IF VI_NUM_DEP_ECO > 0 AND trunc(tp_rubrica / 100, 000) = 3902 THEN
      rdcn.des_informacao := to_char(VI_NUM_DEP_ECO, '09') || ' Dep.';
    END IF;

    tdcn_pa(idx_caln_pa) := rdcn;

  END SP_INCLUI_DETALHE_PAG_PA;

  ----------------------------------------------------------------------------------
  PROCEDURE SP_GRAVA_DET_PAG_PA (IDE_CLI IN VARCHAR2, COD_BEN IN NUMBER) AS    --  GRAVA DETALHE DE PENSAO ALIMENTICEA
    V_RUBRICA_SUPL      NUMBER(8) := 0;
    val_rubrica_supl    number(18, 4) := 0;
    cont_detalhe        number := 0;
    i                   integer := 0;
    PER_PRO_RET         date;
    v_rubrica_contraria NUMBER(8) := 0;

  BEGIN

    cont_detalhe := 0;

    -- Folha Normal
    FOR i in 1 .. tdcn_pa.count LOOP

      rdcn := tdcn_pa(i);
      IF rdcn.cod_ide_cli_ben = IDE_CLI THEN

      IF rdcn.dat_ini_ref = rdcn.per_processo then
        rdcn.des_complemento := null;
      end if;
      IF rdcn.per_processo = PAR_PER_PRO THEN
        IF rdcn.val_rubrica > 0 THEN
          cont_detalhe := cont_detalhe + 1;
          BEGIN
            --pega rubrica contraria ao invez da principal ROD.18.ago.09
            select cod_rubrica_contraria
              into v_rubrica_contraria
              from tb_rubricas
             where cod_rubrica = rdcn.cod_fcrubrica
               and cod_entidade = ANT_ENTIDADE
               and (dat_fim_vig is null or dat_fim_vig > PAR_PER_PRO);
            IF v_rubrica_contraria is null then
              v_rubrica_contraria := rdcn.cod_fcrubrica;
            END IF;
            --
            --IF ANT_FLG_STATUS <> 'S' THEN
            IF ANT_FLG_STATUS = 'A' THEN  -- alterado de <>'S' para ='Y' para nunca entrar
              INSERT /*+ append */
              INTO TB_DET_CALCULADO_PA
              VALUES
                (rdcn.cod_ins,
                 rdcn.tip_processo,
                 rdcn.per_processo,
                 rdcn.cod_ide_cli,
                 rdcn.cod_beneficio,
                 rdcn.seq_pagamento,
                 v_rubrica_contraria,
                 rdcn.seq_vig,
                 trunc(rdcn.val_rubrica, 2),
                 rdcn.num_quota,
                 rdcn.flg_natureza,
                 rdcn.tot_quota,
                 rdcn.dat_ini_ref,
                 rdcn.dat_fim_ref,
                 rdcn.cod_ide_cli_ben,
                 rdcn.num_ord_jud,
                 rdcn.dat_ing,
                 rdcn.dat_ult_atu,
                 rdcn.nom_usu_ult_atu,
                 rdcn.nom_pro_ult_atu,
                 --rdcn.seq_detalhe,
                 cont_detalhe,
                 rdcn.des_informacao,
                 rdcn.des_complemento);
            ELSE
              INSERT /*+ append */
              INTO TB_DET_CALCULADO_PA_SIM ---> FFRANCO 03/2007
              VALUES
                (rdcn.cod_ins,
                 rdcn.tip_processo,
                 rdcn.per_processo,
                 rdcn.cod_ide_cli,
                 rdcn.cod_beneficio,
                 rdcn.seq_pagamento,
                 v_rubrica_contraria, --rdcn.cod_fcrubrica,
                 rdcn.seq_vig,
                 trunc(rdcn.val_rubrica, 2),
                 rdcn.num_quota,
                 rdcn.flg_natureza,
                 rdcn.tot_quota,
                 rdcn.dat_ini_ref,
                 rdcn.dat_fim_ref,
                 rdcn.cod_ide_cli_ben,
                 rdcn.num_ord_jud,
                 rdcn.dat_ing,
                 rdcn.dat_ult_atu,
                 rdcn.nom_usu_ult_atu,
                 rdcn.nom_pro_ult_atu,
                 --rdcn.seq_detalhe,
                 cont_detalhe,
                 rdcn.des_informacao,
                 rdcn.des_complemento,
                 '1');
            END IF;
          EXCEPTION
            WHEN OTHERS THEN
              p_sub_proc_erro := 'SP_GRAVA_DET_PAG_PA';
              p_coderro       := SQLCODE;
              P_MSGERRO       := 'Erro ao gravar o detalhe da rubricas de pensao alimenticia';
              INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                    p_coderro,
                                    'Calcula Folha',
                                    sysdate,
                                    p_msgerro,
                                    p_sub_proc_erro,
                                    rdcn.cod_ide_cli,
                                    rdcn.cod_fcrubrica);
              VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
              --       RAISE ERRO;
          END;

        END IF;
      END IF;
      END IF;

    END LOOP;

    commit;

    -- Folha Terceiros

  END SP_GRAVA_DET_PAG_PA;
  ----------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_PAGAMENTO_ESPECIAL(o_pagto_especial out number) AS

    v_cod_bene tb_beneficiario.cod_beneficio%type;

  BEGIN

    begin
      SELECT 1
        into o_pagto_especial
        from tb_casos_ret_folha crf
       where crf.cod_ins = par_cod_ins
         and crf.cod_ide_cli = ant_ide_cli
         and crf.dat_periodo_comp = PAR_PER_REAL
         -- TASK 3017 -- APLICADO POR LUIZ EM 28/04/2015
         and crf.flg_status = 'V'
         -- FIM TASK 3017
         and exists (select 1
                from tb_folha ff
               where ff.cod_ins = crf.cod_ins
                 and ff.tip_processo = 'E'
                 and ff.per_processo = PAR_PER_PRO
                 and ff.cod_ide_cli = crf.cod_ide_cli
                 and ff.seq_pagamento > 0);

      select distinct cod_beneficio, cod_entidade
        into ant_cod_beneficio, ant_entidade
        from tb_beneficio_cargo
       where cod_ins = PAR_COD_INS
         and cod_ide_cli_ben = ant_ide_cli
         and flg_status = 'V'
         and dat_fim_vig is null;

      for g in (select dc1.cod_beneficio,
                       dc1.cod_fcrubrica,
                       dc1.val_rubrica,
                       dc1.flg_natureza,
                       dc1.dat_ini_ref,
                       dc1.seq_pagamento,
                       dc1.seq_vig,
                       dc1.des_complemento,
                       dc1.des_informacao
                  from tb_det_calculado dc1
                 where dc1.cod_ins = PAR_COD_INS
                   and dc1.tip_processo = 'E'
                   and dc1.per_processo = PAR_PER_PRO
                   and dc1.cod_ide_cli = ant_ide_cli
                   and dc1.cod_beneficio > 0
                   and dc1.seq_pagamento > 0) loop

        tdcn.extend;
        idx_caln        := nvl(idx_caln, 0) + 1;
        idx_seq_detalhe := nvl(idx_seq_detalhe, 0) + 1;

        rdcn.cod_ins       := PAR_COD_INS;
        rdcn.tip_processo  := 'E';
        rdcn.per_processo  := PAR_PER_PRO;
        rdcn.cod_ide_cli   := ANT_IDE_CLI;
        rdcn.cod_beneficio := g.cod_beneficio;
        rdcn.seq_pagamento := g.seq_pagamento;
        rdcn.seq_detalhe   := idx_seq_detalhe;
        rdcn.cod_fcrubrica := g.cod_fcrubrica;
        rdcn.val_rubrica   := g.val_rubrica;
        rdcn.seq_vig       := g.seq_vig;
        rdcn.num_quota     := 0;
        rdcn.flg_natureza  := g.flg_natureza;
        rdcn.tot_quota     := 0;
        rdcn.dat_ini_ref   := g.dat_ini_ref;
        rdcn.dat_fim_ref   := NULL;
        --             rdcn.cod_ide_cli_ben:= NULL;        --verificar
        --          rdcn.num_ord_jud    := NULL;        --varificar
        rdcn.dat_ing         := sysdate;
        rdcn.dat_ult_atu     := sysdate;
        rdcn.nom_usu_ult_atu := PAR_COD_USU;
        rdcn.nom_pro_ult_atu := 'FOLHA CALCULADA';

        rdcn.des_complemento := g.des_complemento;
        rdcn.des_informacao  := g.des_informacao;

        tdcn(idx_caln) := rdcn;

      end loop;

    exception
      when others then
        o_pagto_especial := 0;
    end;
  END SP_OBTEM_PAGAMENTO_ESPECIAL;
  ----------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_ENQUADRAMENTO(o_tipo_efeito      in number,
                                   o_cod_ref_oj       out number,
                                   o_cod_beneficio_oj out number,
                                   o_val_porc_efe     out number) is -- MVL 26/08/2008
  BEGIN
    begin

      select OJP.COD_REFER, ojp.cod_beneficio, ij.percentual
      --            OJP.VAL_PORC_EFE
        into o_cod_ref_oj, o_cod_beneficio_oj, o_val_porc_efe
        from tb_ord_jud_pessoa_fisica ojp,
             TB_ORDEM_JUD_TIPO_EFEITO OJ,
             TB_ORDEM_JUDICIAL        OJU,
             Tb_Indice_Jud            IJ
       where OJ.COD_INS = PAR_COD_INS
         AND OJ.COD_INS = ojp.cod_ins
         and OJ.NUM_ORD_JUD = OJP.NUM_ORD_JUD
         AND OJU.COD_INS = OJ.COD_INS
         AND OJU.NUM_ORD_JUD = OJ.NUM_ORD_JUD
         AND ojp.cod_ide_cli = BEN_IDE_CLI
         AND OJU.DAT_FIM_EFEITO IS NULL
         AND oj.cod_tip_efeito = o_tipo_efeito
         AND ij.tab_ind_jud = OJP.TAB_IND_JUD
         AND ij.cod_ins = oj.cod_ins;

    exception
      when no_data_found then
        o_cod_ref_oj       := 0;
        o_cod_beneficio_oj := 0;
        o_val_porc_efe     := 0;
      WHEN OTHERS THEN
        p_sub_proc_erro := 'FUNCAO 81';
        p_coderro       := SQLCODE;
        P_MSGERRO       := 'Erro ao obter o enquadramento';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              BEN_IDE_CLI,
                              COM_COD_FCRUBRICA);
        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
    END;
  END SP_OBTEM_ENQUADRAMENTO;
  ----------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_LIMITE_REGIME_GERAL(o_dat_obito out date) is
  BEGIN
    SELECT PEF.DAT_OBITO
      INTO O_DAT_obito
      FROM TB_PESSOA_FISICA PEF
     WHERE PEF.COD_INS = PAR_COD_INS
       AND PEF.COD_IDE_CLI = COM_IDE_CLI_INSTITUIDOR;

  END SP_OBTEM_LIMITE_REGIME_GERAL;
  ----------------------------------------------------------------------------
  FUNCTION SP_OBTEM_DIAS_BENEFICIO RETURN NUMBER as

    v_qtd_d number;

  BEGIN
    BEGIN
      SELECT TO_NUMBER(to_char(RB.DAT_INI_BEN, 'DD'))
        INTO v_qtd_d
        FROM tb_BENEFICIARIO rb
       WHERE RB.COD_INS = PAR_COD_INS
         AND RB.COD_IDE_CLI_BEN = BEN_IDE_CLI
         AND RB.COD_BENEFICIO = COM_COD_BENEFICIO;
    EXCEPTION
      WHEN OTHERS THEN
        v_qtd_d := 0;
    END;

    RETURN(v_qtd_d);

  END SP_OBTEM_DIAS_BENEFICIO;
  --------------------------------------------------------------------------------
  PROCEDURE SP_CALCULA_TETO AS

    vi_rubrica     number := 0;
    vi_val_rubrica number(18, 2) := 0;
    vi_seq_vig     number := 0;
    i_perc         t_sal_base;
    i_perc_cheio   t_sal_base;
    --i_perc             number(18,6) := 0;
    --i_perc_cheio       number(18,6) := 0;
    i               number := 0;
    cod_benef       number := 0;
    valor_teto      number(18, 4) := 0;
    valor_teto_tot  number(18, 4) := 0;
    valor_teto_calc number(18, 4) := 0;

    valor_teto_cheio      number(18, 4) := 0;
    valor_teto_tot_cheio  number(18, 4) := 0;
    valor_teto_calc_cheio number(18, 4) := 0;

    v_data_obito date;
    o_data       date;
    o_str        char(1) := null;

    perc_teto        number(18, 4) := 0;
    desc_teto        number(18, 4) := 0;
    max_teto         number(18, 4) := 0;
    v_entidade_atual number := 0;

    nao_tem_prev char(1) := null;

    total_suplementar number(18, 4) := 0;
    total_folha_supl  number(18, 4) := 0;
    vs_rateio         char(1) := 'N';

    vd_data_obito date;
    vi_rubrica_t  number;

    --ROD12
    v_dat_ini_p13    date;
    v_qtddias_13prop number;

    ----------------------------------------
     --JTS -- 2010-06 Agregado para Calculo % 13
    ----------------------------------------
    PORCETUAL_13       number(10,5):=0;
   ---JTS Validac?o de Rubrica de Teto. 07-01-2014 TASK  2108
   calcula_tetinho  boolean;

  begin

    valor_teto            := 0;
    valor_teto_tot        := 0;
    perc_teto             := 0;
    valor_teto_calc       := 0;
    valor_teto_cheio      := 0;
    valor_teto_tot_cheio  := 0;
    valor_teto_calc_cheio := 0;

    v_base_teto.delete;
    i_perc.delete;
    v_base_teto_cheio.delete;
    i_perc_cheio.delete;

    SP_OBTEM_RUBRICA_EVENTO_ESPEC('L',    --2160300
                                  ANT_ENTIDADE,
                                  '',
                                  vi_rubrica,
                                  vi_seq_vig);

    -- OBTEM VALORES CONSTANTES
    SP_OBTEM_PARVAL_FOLHA2('TETOPM', 2000, 'VAL_TETOINSS', desc_teto);
    SP_OBTEM_PARVAL_FOLHA3('TETO1012', 2000, 'DAT_INICIO', o_data);


    --Novo modelo de rubricas
    --  SP_VERIFICA_EXISTE_RATEIO;
    --  SP_CARREGA_FORMULA;

    i         := 0;
    i         := v_cod_beneficio.count;
    vs_rateio := 'S';

    vrubexc.delete; -- MVL2
    idx_rubexc := 0; -- MVL2
    --  MVL2
    FOR rub_exc in (select *
                      from tb_rubricas_exc_serv_ben resb
                     where resb.cod_ins = PAR_COD_INS
                          --              and resb.cod_entidade = ANT_ENTIDADE
                       and resb.cod_ide_cli_ben = ant_ide_cli
                       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
                           to_char(resb.DAT_INI_VIG, 'YYYYMM') AND
                           to_char(PAR_PER_PRO, 'YYYYMM') <=
                           to_char(nvl(resb.DAT_FIM_VIG,
                                        to_date('01/01/2045', 'dd/mm/yyyy')),
                                    'YYYYMM'))
                       and resb.flg_status = 'V'
                       and resb.tip_evento_especial = 'L') loop

      vrubexc.extend;
      idx_rubexc := nvl(idx_rubexc, 0) + 1;
      vrubexc(idx_rubexc) := rub_exc;

    END LOOP;
    --  MVL2

    FOR i IN 1 .. v_cod_beneficio.count LOOP

      cod_benef := v_cod_beneficio(i);
        -------------------------------
        ---------------------------
        FOR i2 IN 1 .. vfolha.count LOOP
            rfol := vfolha(i2);
             EXIT WHEN   RFOL.COD_BENEFICIO=cod_benef;
        END LOOP;
        ant_entidade:=RFOL.COD_ENTIDADE;
--     ----------------------


        ----------------------------------
      SP_OBTEM_TIPO_BENEFICIO(cod_benef); -- Agregado o 29-092010 JTS

       --- Validac?o de Rubrica de Teto. 07-01-2014 TASK  2108
       COM_COD_FCRUBRICA:=vi_rubrica;
       COM_COD_ENTIDADE :=ant_entidade;
       COM_COD_BENEFICIO:=cod_benef;
       calcula_tetinho :=TRUE;
       SP_PROCESSA_RUBRICA(calcula_tetinho);
 --------------- Desenvolvimento Task 3689  --------------
       SP_PROCESSA_RUBRICA_TETO(calcula_tetinho);
 --------------- Desenvolvimento Task 3689  --------------
       SP_OBTEM_DATA_OBITO(cod_benef, v_data_obito);
      if v_data_obito >= o_data
       -- Agregado o 29-092010 JTS
       and  COM_TIP_BENEFICIO <> 'APOSENTADO'
       and calcula_tetinho  --Validac?o de Rubrica de Teto. 07-01-2014 TASK  2108
      THEN



         v_base_teto(cod_benef)(1) := 0;
         sp_composicao(vi_rubrica,
                    'BASE_TETO',
                    cod_benef,
                    ant_entidade,
                    'N',
                    valor_teto);

      --      SP_OBTEM_SOMA_VENCIMENTO(cod_benef, ant_entidade, 'N', valor_teto);

         vs_rateio := 'S';

         valor_teto_tot := valor_teto_tot + valor_teto;
         v_base_teto(cod_benef)(1) := valor_teto;
         cont_benef := cont_benef + 1;
      END IF;
    END LOOP;

    IF valor_teto_tot > 0 THEN

      IF i = 1 THEN
             rfol := vfolha(i);
             cod_benef := rfol.cod_beneficio;
             COM_COD_FCRUBRICA:=vi_rubrica;
             COM_COD_ENTIDADE :=RFOL.COD_ENTIDADE;
             COM_COD_BENEFICIO:=cod_benef;
             SP_PROCESSA_RUBRICA(calcula_tetinho);
       --------------- Desenvolvimento Task 3689  --------------
             SP_PROCESSA_RUBRICA_TETO(calcula_tetinho);
       --------------- Desenvolvimento Task 3689  --------------

             SP_OBTEM_DATA_OBITO(cod_benef, v_data_obito);
             IF v_data_obito >= o_data
                   -- Agregado o 29-092010 JTS
                   and  COM_TIP_BENEFICIO <> 'APOSENTADO'
                   and calcula_tetinho  --Validac?o de Rubrica de Teto. 07-01-2014 TASK  2108
             THEN
                         valor_teto_tot := valor_teto_tot +
                          (valor_teto / VI_PERCENTUAL_RATEIO);
                         i_perc(cod_benef)(1) := (v_base_teto(cod_benef) (1) / valor_teto_tot) * 100;
              END IF;
     ELSE
       -- FOR i IN 1 .. v_cod_beneficio.count LOOP
       FOR i  IN 1 .. vfolha.count LOOP
          rfol := vfolha(i);
          cod_benef := rfol.cod_beneficio;
             COM_COD_FCRUBRICA:=vi_rubrica;
             COM_COD_ENTIDADE :=RFOL.COD_ENTIDADE;
             COM_COD_BENEFICIO:=cod_benef;
             SP_PROCESSA_RUBRICA(calcula_tetinho);
            --------------- Desenvolvimento Task 3689  --------------
                 SP_PROCESSA_RUBRICA_TETO(calcula_tetinho);
           --------------- Desenvolvimento Task 3689  --------------

          IF RFOL.TIP_BENEFICIO <> 'APOSENTADO' THEN
             SP_OBTEM_DATA_OBITO(cod_benef, v_data_obito);
             if v_data_obito >= o_data
                and calcula_tetinho  THEN
                i_perc(cod_benef)(1) := (v_base_teto(cod_benef)(1) / valor_teto_tot) * 100;
             END IF;
          END IF;
       END LOOP;
       -- END LOOP;

      END IF;
    END IF;

    --
    -- obter valores calculados cheios , sem proporcionalidade e rateio
    --
    FOR i IN 1 .. v_cod_beneficio.count LOOP

      cod_benef := v_cod_beneficio(i);
        ---------------------------
        FOR i2 IN 1 .. vfolha.count LOOP
            rfol := vfolha(i2);
             EXIT WHEN   RFOL.COD_BENEFICIO=cod_benef;
        END LOOP;
        ant_entidade:=RFOL.COD_ENTIDADE;
--     ----------------------
      ---- Controle do Teto
      SP_OBTEM_TIPO_BENEFICIO(cod_benef); -- Agregado o 29-092010 JTS
       --- Validac?o de Rubrica de Teto. 07-01-2014 TASK  2108
       COM_COD_FCRUBRICA:=vi_rubrica;
       COM_COD_ENTIDADE :=ant_entidade;
       COM_COD_BENEFICIO:=cod_benef;
       SP_PROCESSA_RUBRICA(calcula_tetinho);
       --------------- Desenvolvimento Task 3689  --------------
             SP_PROCESSA_RUBRICA_TETO(calcula_tetinho);
       --------------- Desenvolvimento Task 3689  --------------

      SP_OBTEM_DATA_OBITO(cod_benef, v_data_obito);
      if v_data_obito >= o_data
        -- Agregado o 29-092010 JTS
       and  COM_TIP_BENEFICIO <> 'APOSENTADO'
       and calcula_tetinho  --Validac?o de Rubrica de Teto. 07-01-2014 TASK  2108
       THEN
         sp_composicao(vi_rubrica,
                    'BASE_TETO',
                    cod_benef,
                    ant_entidade,
                    'S',
                    valor_teto_cheio);

         vs_rateio := 'S';
         valor_teto_tot_cheio := valor_teto_tot_cheio + valor_teto_cheio;
         v_base_teto_cheio(cod_benef)(1) := valor_teto_cheio;
       END IF;
    END LOOP;

    IF valor_teto_tot_cheio > 0 THEN

      --FOR i IN 1 .. v_cod_beneficio.count LOOP
        FOR i  IN 1 .. vfolha.count LOOP
          rfol := vfolha(i);
          cod_benef := rfol.cod_beneficio;
             COM_COD_FCRUBRICA:=vi_rubrica;
             COM_COD_ENTIDADE :=RFOL.COD_ENTIDADE;
             COM_COD_BENEFICIO:=cod_benef;
             SP_PROCESSA_RUBRICA(calcula_tetinho);
              --------------- Desenvolvimento Task 3689  --------------
                 SP_PROCESSA_RUBRICA_TETO(calcula_tetinho);
               --------------- Desenvolvimento Task 3689  --------------

          IF RFOL.TIP_BENEFICIO <> 'APOSENTADO'
             and calcula_tetinho   THEN
            SP_OBTEM_DATA_OBITO(cod_benef, v_data_obito);
            if v_data_obito >= o_data THEN
               i_perc_cheio(cod_benef)(1) := (v_base_teto_cheio(cod_benef)
                                          (1) / valor_teto_tot_cheio) * 100;
             END IF;
          END IF;
        END LOOP;
     -- END LOOP;
    END IF;


    --
    -- valor do teto com rateio e proporc?o em dias
    --

    --if v_data_obito >= o_data  then
      IF valor_teto_tot_cheio > desc_teto THEN

        SP_OBTEM_PARVAL_FOLHA2('TETOPM', 2000, 'PERC_TETO', perc_teto);

        /*
             select TRUNC((valor_teto_tot - desc_teto ) * perc_teto, 2)
               into valor_teto_calc
               from dual;
        */
        IF V_QTD_DIAS > V_DIAS_MES THEN
           V_QTD_DIAS := V_DIAS_MES;
        END IF;
        select (TRUNC((valor_teto_tot - desc_teto) * perc_teto, 2)) *
               (V_QTD_DIAS / V_DIAS_MES)
          into valor_teto_calc
          from dual;

        select TRUNC((valor_teto_tot_cheio - desc_teto) * perc_teto, 2)
          into valor_teto_calc_cheio
          from dual;

        FOR i IN 1 .. v_cod_beneficio.count LOOP

          cod_benef := v_cod_beneficio(i);
          ---------------------------
          FOR i2 IN 1 .. vfolha.count LOOP
              rfol := vfolha(i2);
               EXIT WHEN   RFOL.COD_BENEFICIO=cod_benef;
          END LOOP;
          ant_entidade:=RFOL.COD_ENTIDADE;
  --     ----------------------

          SP_OBTEM_TIPO_BENEFICIO(cod_benef); -- Agregado o 29-092010 JTS

         COM_COD_FCRUBRICA:=vi_rubrica;
         COM_COD_ENTIDADE :=ant_entidade;
         COM_COD_BENEFICIO:=cod_benef;
         SP_PROCESSA_RUBRICA(calcula_tetinho);
           --------------- Desenvolvimento Task 3689  --------------
                 SP_PROCESSA_RUBRICA_TETO(calcula_tetinho);
           --------------- Desenvolvimento Task 3689  --------------
          SP_OBTEM_DATA_OBITO(cod_benef, v_data_obito);
        --- Controle de Teto 29092010 JTS
          IF v_data_obito >= o_data
                 -- Agregado o 29-092010 JTS
           and  COM_TIP_BENEFICIO <> 'APOSENTADO'
           and calcula_tetinho  --Validac?o de Rubrica de Teto. 07-01-2014 TASK  2108
          THEN

               SP_RATEIO_BENEFICIO(cod_benef,
                                   ant_ide_cli,
                                   valor_teto,
                                   valor_teto,
                                   VI_PERCENTUAL_RATEIO); -- salario base com rateio

               IF v_base_teto(cod_benef) (1) <> 0 THEN

                 tdcn.extend;
                 idx_caln        := nvl(idx_caln, 0) + 1;
                 idx_seq_detalhe := nvl(idx_seq_detalhe, 0) + 1;

                 sp_composicao(vi_rubrica,
                               'BASE_TETO',
                               cod_benef,
                               ant_entidade,
                               'S',
                               valor_teto);


               END IF;

               vi_val_rubrica := (valor_teto_calc_cheio *
                                 i_perc_cheio(cod_benef) (1)) / 100 *
                                 VI_PERCENTUAL_RATEIO;
               --        round((valor_teto_calc * i_perc(cod_benef)(1)) / 100,2);
               COM_VAL_RUBRICA_CHEIO := valor_teto_calc_cheio;
               --        round((valor_teto_calc_cheio * i_perc_cheio(cod_benef)(1)) / 100,2);
               v_base_teto(cod_benef)(1) := ((valor_teto_calc) *
                                            i_perc(cod_benef) (1)) / 100;

               IF vi_val_rubrica > 0 THEN
                 vi_val_rubrica_prev := vi_val_rubrica;
                   ----------------------------------------
                    --JTS -- 2010-06 Agregado para Calculo % 13
                   ----------------------------------------
                  IF (PAR_TIP_PRO = 'T' ) THEN
                     PORCETUAL_13:=1;
                     PORCETUAL_13:=SP_VALOR_PORCENTUAL13(cod_benef);
                     vi_val_rubrica  :=vi_val_rubrica * PORCETUAL_13;
                  END IF;



                 SP_INCLUI_DETALHE_PAG(cod_benef,
                                       vi_rubrica,
                                       vi_val_rubrica,
                                       vi_seq_vig,
                                       'D');
                  ----------------------------------------
                    --JTS -- 2010-06 Agregado para Calculo % 13
                   ----------------------------------------
                  vi_val_rubrica:=vi_val_rubrica_prev ;
                 -- abater o valor do Desconto TETO no valor do 13? calculado

                 IF PAR_TIP_PRO = 'ZZ' THEN --comentado ROD em DEZ09 era 'T' em vez de ZZ
                   SP_OBTEM_RUBRICA_EVENTO_ESPEC('T',
                                                 ANT_ENTIDADE,
                                                 'C',
                                                 vi_rubrica_t,
                                                 vi_seq_vig);
                   sp_composicao(vi_rubrica_t,
                                 'BASE_COMP',
                                 cod_benef,
                                 ant_entidade,
                                 'N',
                                 vi_val_rubrica);
                   sp_composicao(vi_rubrica_t,
                                 'BASE_COMP',
                                 cod_benef,
                                 ant_entidade,
                                 'N',
                                 COM_VAL_RUBRICA_CHEIO);

                   FOR o IN 1 .. tdcn.count LOOP
                     rdcn := tdcn(o);
                     IF rdcn.cod_fcrubrica = vi_rubrica_t THEN
                       tdcn(o).val_rubrica := vi_val_rubrica;
                       exit;
                     END IF;
                   END LOOP;
                 ELSE

                   -- ALTERAR PARA OBTENC?O DO VALOR DO 13? CALCULADO -- MVL9

                   IF PAR_TIP_PRO = 'N' OR PAR_TIP_PRO ='T' THEN -- era so 'N' continuar ... voltar depois
                     -- Obtem Adiantamento
/*                     SP_OBTEM_RUBRICA_EVENTO_ESPEC('D',
                                                   ANT_ENTIDADE,
                                                   'C',
                                                   vi_rubrica_t,
                                                   vi_seq_vig);*/

                     IF COM_TIP_BENEFICIO = 'APOSENTADO' THEN
                        SP_OBTEM_RUBRICA_EVENTO_ESPEC('G',
                                              ANT_ENTIDADE,
                                              'C',
                                              vi_rubrica_t,
                                              vi_seq_vig);
                     ELSE
                        SP_OBTEM_RUBRICA_EVENTO_ESPEC('D',
                                              ANT_ENTIDADE,
                                              'C',
                                              vi_rubrica_t,
                                              vi_seq_vig);
                     END IF;

                     FOR o IN 1 .. tdcn.count LOOP
                       rdcn := tdcn(o);
                       --Rubrica de TETO de antecipac?o de 13o
                       IF rdcn.cod_fcrubrica = vi_rubrica_t THEN
                         SP_OBTEM_RUBRICA_EVENTO_ESPEC('U',
                                                       ANT_ENTIDADE,
                                                       'D',
                                                       vi_rubrica_t,
                                                       vi_seq_vig);
                           -- CoMENTADO POR JTS
/*                         sp_composicao(vi_rubrica_t,
                                       'BASE_TETO',
                                       cod_benef,
                                       ant_entidade,
                                       'S',
                                       COM_VAL_RUBRICA_CHEIO);
*/


                           PORCETUAL_13:=1;
                           PORCETUAL_13:=SP_VALOR_PORCENTUAL13(cod_benef);
                           vi_val_rubrica := TRUNC(((vi_val_rubrica) *PORCETUAL_13)/2,2);


                         --------------------------------------------------------ROD12

                         --vi_val_rubrica := vi_val_rubrica / 2; ....comentado em ROD12


                          IF vi_val_rubrica  > 0 THEN

                             tdcn.extend;
                             idx_caln        := nvl(idx_caln, 0) + 1;
                             idx_seq_detalhe := nvl(idx_seq_detalhe, 0) + 1;
                             SP_INCLUI_DETALHE_PAG(cod_benef,
                                                   vi_rubrica_t,
                                                   vi_val_rubrica,
                                                   vi_seq_vig,
                                                   'D');
                          END IF;
                         exit;
                       END IF;
                     END LOOP; -- MVL9
                   END IF;
                 END IF;
                 --
               ELSE
                 v_base_teto(cod_benef)(1) := 0;
               END IF;
           END IF;
        END LOOP;
      end if;
    --end if;

  END SP_CALCULA_TETO;
  ---------------------------------------------------------------------------------
  PROCEDURE SP_GERA_RUBRICA_AGRUPADA AS

    vi_rubrica         number := 0;
    vi_val_rubrica     number(18, 2) := 0;
    vi_seq_vig         number := 0;
    i_perc             number(18, 6) := 0;
    i                  number := 0;
    cod_benef          number := 0;
    v_processa_rubrica boolean;
    rdcn_temp          TB_DET_CALCULADO_ESTRUC%rowtype;
    possui_evento_X    number := 0;
    contaa             number := 0;
    possui_evento_y    number := 0;
    tmp_entidade       number := 0;

    PORCETUAL_13       number(10,5):=0;

  BEGIN


       BEGIN

         FOR i IN 1 .. v_cod_beneficio.count LOOP

           cod_benef := v_cod_beneficio(i);

           SP_OBTEM_TIPO_BENEFICIO(cod_benef);
           IF COM_TIP_BENEFICIO <> 'APOSENTADO' THEN

           select cb.cod_entidade into tmp_entidade
             from tb_concessao_beneficio cb
            where cod_benef=cb.cod_beneficio;
           if tmp_entidade is null then
              tmp_entidade := 1;
           end if;

           SP_OBTEM_RUBRICA_EVENTO_ESPEC('A',
                                       tmp_entidade,
                                       'C',
                                       vi_rubrica,
                                       vi_seq_vig);

           sp_composicao(vi_rubrica,
                         'BASE_COMP',
                         cod_benef,
                         tmp_entidade,
                         'N',
                         vi_val_rubrica);
           sp_composicao(vi_rubrica,
                         'BASE_COMP',
                         cod_benef,
                         tmp_entidade,
                         'S',
                         COM_VAL_RUBRICA_CHEIO);

             --- PROPORCIONALIZA  13
           IF (PAR_TIP_PRO = 'T' ) THEN
             PORCETUAL_13:=SP_VALOR_PORCENTUAL13(cod_benef);
             vi_val_rubrica :=vi_val_rubrica * PORCETUAL_13;
             COM_VAL_RUBRICA_CHEIO:=COM_VAL_RUBRICA_CHEIO *PORCETUAL_13;

           END IF;
           -----


           tdcn.extend;
           idx_caln        := nvl(idx_caln, 0) + 1;
           idx_seq_detalhe := nvl(idx_seq_detalhe, 0) + 1; -- MVL03

           SP_INCLUI_DETALHE_PAG(cod_benef,
                                 vi_rubrica,
                                 vi_val_rubrica,
                                 vi_seq_vig,
                                 'C');

         END IF;
         END LOOP;
       exception
         when others then
           null;
       end;


    --------------------------
    SP_INCLUI_REDUTOR_2100600(ANT_IDE_CLI, desc_teto);

    ------------------ IAMSP evento X
    begin

      FOR I IN 1 .. v_cod_beneficio.count LOOP
        cod_benef          := v_cod_beneficio(i);
        SP_OBTEM_TIPO_BENEFICIO(cod_benef);

        select cb.cod_entidade into tmp_entidade
          from tb_concessao_beneficio cb
         where cod_benef=cb.cod_beneficio;
        if tmp_entidade is null then
           tmp_entidade := 1;
        end if;
        COM_ENTIDADE := tmp_entidade;

        SP_OBTEM_RUBRICA_EVENTO_ESPEC('X',
                                    tmp_ENTIDADE,
                                    'D',
                                    vi_rubrica,
                                    vi_seq_vig);

        possui_evento_X := 0;
        contaa          := tdcn.count;
        IF contaa > 0 then
          FOR X IN 1 .. contaa LOOP
            rdcn_temp := tdcn(X);
            IF rdcn_temp.COD_FCRUBRICA = vi_rubrica
               AND rdcn_temp.cod_beneficio = cod_benef THEN
              possui_evento_X := X;
              COM_COD_RUBRICA    := vi_rubrica;
              COM_COD_FCRUBRICA  := vi_rubrica;
              COM_COD_BENEFICIO  := cod_benef;
              COM_COD_ENTIDADE   :=COM_ENTIDADE;
              COM_TIPO_EVENTO_ESPECIAL :='X';
              v_processa_rubrica := true;
              COM_FLG_PROCESSA:='S';
              COM_NAT_RUB     :='D';
             ---- Agregado para controle de consig--
              COM_IND_QTAS    :='N';

              SP_PROCESSA_RUBRICA(v_processa_rubrica);
              SP_CALCULA_VALOR_RUBRICA;
              rdcn_temp := tdcn(possui_evento_x);
              rdcn_temp.val_rubrica := mon_calculo;
              rdcn_temp.val_rubrica_cheio := COM_VAL_RUBRICA_CHEIO;
              tdcn(possui_evento_x) := rdcn_temp;
             END IF;
          END LOOP;
        END IF;

      END LOOP;

    exception
      when others then
        null;
    end;
    --------------------------

       ----------  IAMSP AGREGADO evento Y
    begin

      FOR I IN 1 .. v_cod_beneficio.count LOOP
        cod_benef          := v_cod_beneficio(i);
        SP_OBTEM_TIPO_BENEFICIO(cod_benef);

        select cb.cod_entidade into tmp_entidade
          from tb_concessao_beneficio cb
         where cod_benef=cb.cod_beneficio;
        if tmp_entidade is null then
           tmp_entidade := 1;
        end if;
        COM_ENTIDADE := tmp_entidade;

        SP_OBTEM_RUBRICA_EVENTO_ESPEC('Y',
                                    tmp_ENTIDADE,
                                    'D',
                                    vi_rubrica,
                                    vi_seq_vig);

        possui_evento_X := 0;
        contaa          := tdcn.count;
        IF contaa > 0 then
          FOR X IN 1 .. contaa LOOP
            rdcn_temp := tdcn(X);
            IF rdcn_temp.COD_FCRUBRICA = vi_rubrica
               AND rdcn_temp.cod_beneficio = cod_benef THEN
              possui_evento_X := X;
                COM_COD_RUBRICA    := vi_rubrica;
                COM_COD_FCRUBRICA  := vi_rubrica;
                COM_COD_BENEFICIO  := cod_benef;
                COM_TIPO_EVENTO_ESPECIAL :='Y';
                v_processa_rubrica := true;
                COM_FLG_PROCESSA:='S';
                COM_NAT_RUB     :='D';
              ---- Agregado para controle de consig--
                COM_IND_QTAS    :='N';
                SP_PROCESSA_RUBRICA(v_processa_rubrica);
                SP_CALCULA_VALOR_RUBRICA;
                rdcn_temp := tdcn(possui_evento_x);
                rdcn_temp.val_rubrica := mon_calculo;
                rdcn_temp.val_rubrica_cheio := COM_VAL_RUBRICA_CHEIO;
                tdcn(possui_evento_x) := rdcn_temp;


            END IF;
          END LOOP;
        END IF;


      END LOOP;

    exception
      when others then
        null;
    end;



  END SP_GERA_RUBRICA_AGRUPADA;
  ---------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_TIPO_BENEFICIO(cod_benef in number) AS
  BEGIN
     SELECT DECODE(trim(C.COD_TIPO_BENEFICIO),
                  'M',
                  'PENSIONISTA',
                  'APOSENTADO') AS COM_TIP_BENEFICIO
          into COM_TIP_BENEFICIO
          from tb_concessao_beneficio c
          where c.cod_beneficio= cod_benef ;

  END SP_OBTEM_TIPO_BENEFICIO;
  -----------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_REFERENCIA(o_var_padrao in varchar2,
                                o_referencia out number) AS

  BEGIN

    select max(re.cod_referencia)
      into o_referencia
      from tb_referencia re
     where re.cod_ins = PAR_COD_INS
       and re.cod_pccs = COM_PCCS
       and re.cod_ref_pad_venc = o_var_padrao
       and (PAR_PER_PRO >= re.dat_ini_vig and
           PAR_PER_PRO <=
           nvl(re.dat_fim_vig, to_date('01/01/2045', 'dd/mm/yyyy')));

  exception
    when others then

      o_referencia := 0;

  END SP_OBTEM_REFERENCIA;
  ---------------------------------------------------------------------------------
  PROCEDURE SP_VERIFICA_ORDEM_JUDICIAL(i_num_funcao  in number,
                                       o_val_percent out number) is
    -- MVL 26/08/2008

    w_val_percent number(12, 6) := 0;

  BEGIN
    begin

      select decode(i_num_funcao,
                    0,
                    decode(ojp.ind_calculo,
                           'C',
                           (inj.percentual / 100) + 1,
                           nvl(PAR_PERCENT_CORRECAO, 1)),
                    (inj.percentual / 100) + 1),
             ojp.ind_calculo
        into w_val_percent, COM_IND_CALCULO
        from tb_ord_jud_pessoa_fisica ojp,
             TB_ORDEM_JUD_TIPO_EFEITO OJ,
             TB_ORDEM_JUDICIAL        OJU,
             TB_INDICE_JUD            INJ
       where OJ.COD_INS = PAR_COD_INS
         AND OJ.COD_INS = ojp.cod_ins
         and OJ.NUM_ORD_JUD = OJP.NUM_ORD_JUD
         AND OJU.COD_INS = OJ.COD_INS
         AND OJU.NUM_ORD_JUD = OJ.NUM_ORD_JUD
         AND ojp.cod_ide_cli = BEN_IDE_CLI
         AND OJU.DAT_FIM_EFEITO IS NULL
         AND oj.cod_tip_efeito = 3
         AND INJ.TAB_IND_JUD = OJP.TAB_IND_JUD
         AND INJ.COD_INS = OJ.COD_INS
         AND OJU.DAT_EFEITO<=PAR_PER_PRO
         AND NVL(OJU.DAT_FIM_EFEITO,TO_DATE('01/01/2099','DD/MM/YYYY'))>=PAR_PER_PRO;

      IF i_num_funcao = 214 then

        o_val_percent := w_val_percent;

      ELSE
        o_val_percent        := w_val_percent;
        PAR_PERCENT_CORRECAO := w_val_percent;

      END IF;

    exception
      when no_data_found then
        if PAR_IND_PROC_ENQUADRAMENTO <> 1 then
          PAR_PERCENT_CORRECAO := 1;
          o_val_percent        := 1;
        end if;
      WHEN TOO_MANY_ROWS THEN
        PAR_PERCENT_CORRECAO := 1;
        o_val_percent        := 1;

      WHEN OTHERS THEN
        p_sub_proc_erro := 'SP_VERIFICA_ORDEM_JUDICIAL';
        p_coderro       := SQLCODE;
        P_MSGERRO       := 'Erro ao obter o ordem judicial';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              BEN_IDE_CLI,
                              1);
        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
    END;
  END SP_VERIFICA_ORDEM_JUDICIAL;
  --------------------------------------------------------------------------------
  PROCEDURE SP_RUBRICAS_EXCESSO AS

    vi_rubrica        number := 0;
    vi_val_rubrica    number(18, 2) := 0;
    vi_seq_vig        number := 0;
    i_perc            number(18, 6) := 0;
    i                 number := 0;
    cod_benef         number := 0;
    valor_excesso     number(18, 4) := 0;
    valor_excesso_tot number(18, 4) := 0;
    valor_teto_calc   number(18, 4) := 0;
    vi_rubrica_t      number;
     valor_temp       number(18, 4) := 0;
    v_data_obito date;
    o_data       date;
    o_str        char(1) := null;

    perc_teto        number(18, 4) := 0;
    max_teto         number(18, 4) := 0;
    v_cargo_atual    number := 0;
    v_entidade_atual number := 0;

    w_desc_teto1 number(18, 4) := 0; -- MVL4
    w_desc_teto2 number(18, 4) := 0; -- MVL4
    nao_tem_prev char(1) := null;

    total_suplementar number(18, 4) := 0;
    total_folha_supl  number(18, 4) := 0;
    vs_rateio         char(1) := 'N';

    v_teto_fixo       number(18, 4) := 0;

    o_count_ben number(8) := 0; -- MVL4

    vd_data_obito date;

    --ROD12
    v_dat_ini_p13    date;
    v_qtddias_13prop number;
    --
    vi_atributo_isenta char(1);

    VI_IDE_CLI TB_BENEFICIARIO.COD_IDE_CLI_BEN%TYPE;

        ----- VARIAVEIS INCLUIDAS 17032010 PARA CALCULO TETO

   cod_benef_teto      number        := 0;
   valor_excesso_benef number(18, 4) := 0;
   perc_teto_benef     number(18, 6) := 0;
   valor_excesso_tot_APO number(18, 4) :=0;
   valor_excesso_tot_PEN number(18, 4) :=0;
   CALCULA_TETO           BOOLEAN      := TRUE;

  begin

    valor_excesso     := 0;
    valor_excesso_tot := 0;
    perc_teto         := 0;
    valor_teto_calc   := 0;
     valor_temp       :=0;
    SP_OBTEM_RUBRICA_EVENTO_ESPEC('E',
                                  ANT_ENTIDADE,
                                  'C',
                                  vi_rubrica,
                                  vi_seq_vig);

    --Novo modelo de rubricas
    i         := 0;
    i         := v_cod_beneficio.count;
    vs_rateio := 'S';
    vrubexc.delete;
    idx_rubexc := 0;

    vrubexc.delete;
    idx_rubexc := 0;
    valor_excesso_tot_APO:=0;
    valor_excesso_tot_PEN:=0;
    FOR rub_exc in (select *
                      from tb_rubricas_exc_serv_ben resb
                     where resb.cod_ins = PAR_COD_INS
                          --              and resb.cod_entidade = ANT_ENTIDADE
                       and resb.cod_ide_cli_ben = ant_ide_cli
                       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
                           to_char(resb.DAT_INI_VIG, 'YYYYMM') AND
                           to_char(PAR_PER_PRO, 'YYYYMM') <=
                           to_char(nvl(resb.DAT_FIM_VIG,
                                        to_date('01/01/2045', 'dd/mm/yyyy')),
                                    'YYYYMM'))
                       and resb.flg_status = 'V'
                       and resb.tip_evento_especial = 'E') loop
      -- MVL2

      vrubexc.extend;
      idx_rubexc := nvl(idx_rubexc, 0) + 1;
      vrubexc(idx_rubexc) := rub_exc;

    END LOOP;

    o_count_ben := v_cod_beneficio.count;

    FOR i IN 1 .. v_cod_beneficio.count LOOP

      cod_benef := v_cod_beneficio(i);

      FOR i2 IN 1 .. vfolha.count LOOP
          rfol := vfolha(i2);
           EXIT WHEN   RFOL.COD_BENEFICIO=cod_benef;
      END LOOP;
      VI_PERCENTUAL_RATEIO:=rfol.per_rateio;
       ant_entidade:=RFOL.COD_ENTIDADE;
      SP_OBTEM_TIPO_BENEFICIO(cod_benef);
            --    v_base_teto(cod_benef)(1) := 0;
           --- Caso fixado ate oficializar mudanca no sistema
           -- para calculo de Teto com isenc?o independente 22-03-2013
           IF /*cod_benef !=40160315 and */ not (ant_ide_cli ='0200008776800' and cod_benef =544281 ) Then
            sp_composicao(vi_rubrica,
                          'BASE_REDUT',
                          cod_benef,
                          ant_entidade,
                          'N',
                          valor_excesso);
            ELSE
                valor_excesso:=0;
            END IF;

            --      SP_OBTEM_SOMA_VENCIMENTO(cod_benef, ant_entidade, 'N', valor_excesso);
             valor_temp  :=0;

/*            FOR i2 IN 1 .. vfolha.count LOOP
                rfol := vfolha(i2);
               EXIT WHEN   RFOL.COD_BENEFICIO=cod_benef;
            END LOOP;
            VI_PERCENTUAL_RATEIO:=rfol.per_rateio;
  */

            vs_rateio         := 'S';
            IF  VI_PERCENTUAL_RATEIO >0 THEN
               valor_excesso_tot := valor_excesso_tot +
                                 (valor_excesso / VI_PERCENTUAL_RATEIO); --FFRANCO 10/11/2008
            ELSE
              valor_excesso_tot := valor_excesso_tot;
            END IF;
             cont_benef        := cont_benef + 1;
            IF RFOL.TIP_BENEFICIO='PENSIONISTA' THEN
              IF VI_PERCENTUAL_RATEIO >0 THEN
                valor_excesso_tot_PEN := valor_excesso_tot_PEN  +
                                     (valor_excesso / VI_PERCENTUAL_RATEIO); --FFRANCO 10/11/2008
                ELSE
                  valor_excesso_tot_PEN := valor_excesso_tot_PEN;
               END IF;
            ELSE
                valor_excesso_tot_APO := valor_excesso_tot_APO +
                                     (valor_excesso / VI_PERCENTUAL_RATEIO); --FFRANCO 10/11/2008
            END IF;

    END LOOP;

    SP_OBTEM_PARVAL_FOLHA2('INST_PREV', 1000, 'INST_PREV', V_INST_PREV);

    IF V_INST_PREV = 1 THEN
      SP_OBTEM_PARVAL_FOLHA2('TETO_PREF', 1000, 'TETO_PREF', desc_teto);
    ELSE
      --COM_COD_PODER := SP_OBTEM_PODER(ant_cod_entidade);

      SP_OBTEM_PARVAL_FOLHA3('DAT_EC41', 1000, 'DAT_EC41', o_data); -- MVL1
      SP_OBTEM_ESENCAOEC40(ant_ide_cli,vi_atributo_isenta);
      IF ANT_DAT_INI_BEN < O_DATA OR vi_atributo_isenta='S'  THEN
        -- MVL1

        FOR i IN 1 .. v_cod_beneficio.count LOOP
          --MVL1
          cod_benef := v_cod_beneficio(i); --MVL1
          SP_OBTEM_TIPO_BENEFICIO(cod_benef);

           FOR i2 IN 1 .. vfolha.count LOOP
                rfol := vfolha(i2);
               EXIT WHEN   RFOL.COD_BENEFICIO=cod_benef;
           END LOOP;
           VI_PERCENTUAL_RATEIO:=rfol.per_rateio;
           ant_entidade:=RFOL.COD_ENTIDADE;
                --SP_VERIFICA_VALOR_EXTERNO(cod_benef,ANT_IDE_CLI, v_val_externo);

                select cod_entidade --ROD8 Bloco ini incluso
                  into v_entidade_atual
                  from TB_CONCESSAO_BENEFICIO
                 where cod_beneficio = cod_benef;
                COM_COD_PODER := SP_OBTEM_PODER(v_entidade_atual); --ROD8 Bloco fim

                --      v_base_teto(cod_benef)(1) := 0;
                valor_excesso := 0;
          IF /*cod_benef !=40160315 and */ not (ant_ide_cli ='0200008776800' and cod_benef =544281 ) Then
                sp_composicao(vi_rubrica,
                              'BASE_REDUT',
                              cod_benef,
                              ant_entidade,
                              'S',
                              valor_excesso);
          else
             valor_excesso:=0;
          end if;

                vs_rateio := 'S'; -- MVL1
                --              valor_excesso_tot := valor_excesso_tot + (valor_excesso / VI_PERCENTUAL_RATEIO); --FFRANCO 10/11/2008
                --              cont_benef := cont_benef + 1;

                v_cargo_atual := v_cargo(cod_benef) (1);

                IF com_cod_poder = '1' then

                  SP_OBTEM_PARVAL_FOLHA2('TETO_MIN',
                                         1000,
                                         'TETO_MIN',
                                         w_desc_teto1);
                  SP_OBTEM_PARVAL_FOLHA2('TETO_GOV',
                                         1000,
                                         'TETO_GOV',
                                         w_desc_teto2);

      --4758 - Procurador da Alesp,
      --4532 - ATL - P (Assessor Tecnico Legislativo Procurador) --ja estava
      --4769 - Procurador -  Chefe e,
      --4474 - ATL - P (Assessor Tecnico Legislativo Procurador chefe) --ja estava



                  IF ((v_cargo(cod_benef) (1) >= 7866 AND v_cargo(cod_benef)
                      (1) <= 7878) OR --| MRS0
                     (v_cargo(cod_benef) (1) >= 3639 AND v_cargo(cod_benef)
                      (1) <= 3653) OR v_cargo(cod_benef)
                      (1) = 7889 OR v_cargo(cod_benef) (1) = 4318 OR --| Dario acrescentou
                      v_cargo(cod_benef) (1) = 3997 OR v_cargo(cod_benef)
                      (1) = 7894 OR --| em 20090606
                      v_cargo(cod_benef) (1) = 4336 OR v_cargo(cod_benef)
                      (1) = 4474 OR --|
                      v_cargo(cod_benef) (1) = 4758 OR v_cargo(cod_benef)
                      (1) = 4769 OR --|
                      v_cargo(cod_benef) (1) = 4481 OR v_cargo(cod_benef)
                      (1) = 4482 OR --|
                      v_cargo(cod_benef) (1) = 4532 OR v_cargo(cod_benef)
                      (1) = 5031 OR --|
                      v_cargo(cod_benef) (1) = 4982 OR v_cargo(cod_benef)
                      (1) = 4983 OR --|
                      v_cargo(cod_benef) (1) = 3623 OR v_cargo(cod_benef)
                      (1) = 5036 OR --|
                      v_cargo(cod_benef) (1) = 4990 OR v_cargo(cod_benef)
                      (1) = 5029 OR --|
                      v_cargo(cod_benef) (1) = 5030 OR v_cargo(cod_benef)
                      (1) = 5032 OR --| ROD 24.07.09
                      v_cargo(cod_benef) (1) = 5035 OR v_cargo(cod_benef)
                      (1) = 5037 OR --| ROD 24.07.09
                      v_cargo(cod_benef) (1) = 5038 OR --| ROD 24.07.09
                      v_cargo(cod_benef) (1) = 5034 OR v_cargo(cod_benef)
                      (1) = 5033) AND ANT_ENTIDADE <> 5 THEN

                    desc_teto := w_desc_teto1; -- MVL4
                  ELSE
                    desc_teto := w_desc_teto2; -- MVL4
                  END IF;

                ELSIF com_cod_poder = '2' then
                  SP_OBTEM_PARVAL_FOLHA2('TETO_MIN',
                                         1000,
                                         'TETO_MIN',
                                         w_desc_teto1); -- MVL4
                  SP_OBTEM_PARVAL_FOLHA2('SUBDEPEST',
                                         1000,
                                         'SUB_DEPUT_EST',
                                         w_desc_teto2); -- MVL4

                  IF (v_cargo(cod_benef) (1) = 4474 OR
                      v_cargo(cod_benef) (1) = 4532 OR
                      v_cargo(cod_benef) (1) = 4758 OR
                      v_cargo(cod_benef) (1) = 4769 OR
                      v_cargo(cod_benef) (1) = 4474

                      ) AND ANT_ENTIDADE <> 5 THEN
                    --| ROD5

                    desc_teto := w_desc_teto1; -- MVL4
                  ELSE
                    desc_teto := w_desc_teto2; -- MVL4
                  END IF;

                ELSIF com_cod_poder = '3' then
                  SP_OBTEM_PARVAL_FOLHA2('TETO_MIN', 1000, 'TETO_MIN', desc_teto);
                  --ELSIF com_cod_poder = '4' then
                  --SP_OBTEM_PARVAL_FOLHA2('TETO_AFR',1000,'TETO_AFR',desc_teto);  --Dario Comentou
                ELSE
                  SP_OBTEM_PARVAL_FOLHA2('TETO_PREF',
                                         1000,
                                         'TETO_PREF',
                                         desc_teto);
                END IF;

          ------- Ajuste de Teto quando poder Judicial e cargo especifico.
            IF com_cod_poder = '3'  and  v_cargo(cod_benef) (1) = 5237 then
                SP_OBTEM_PARVAL_FOLHA2('TETO_GOV',
                                         1000,
                                         'TETO_GOV',
                                         desc_teto);
            END IF;

                /*          desc_externo :=0
                          IF v_val_externo >= desc_teto THEN -- N?o recebe mais nada pois ja excedeu o teto
                             desc_externo := valor_excesso;
                          ELSE
                             IF valor_excesso + v_val_externo >= desc_teto THEN
                                valor_excesso := valor_excesso + v_val_externo;
                             END IF;
                          END IF;
                */

                --................................. ROD 01/09 criado teto_fixo para alguns beneficios afim de igualar com PRODESP
                SP_VERIFICA_TETO_FIXO(cod_benef, v_teto_fixo);
                IF v_teto_fixo > 0 THEN
                   desc_teto := v_teto_fixo;
                END IF;

                IF valor_excesso >= desc_teto THEN

                  select valor_excesso - desc_teto
                    into valor_teto_calc
                    from dual;

                  vi_val_rubrica := (valor_teto_calc * VI_PERCENTUAL_RATEIO);

                  --        v_base_teto(cod_benef)(1) := round(((valor_teto_calc) * i_perc) / 100,2);
                   COM_COD_FCRUBRICA:=vi_rubrica;
                   COM_COD_ENTIDADE :=ant_entidade;
                   COM_COD_BENEFICIO:=cod_benef;
                   --BEN_IDE_CLI      :=ant_ide_cli;
                  SP_PROCESSA_RUBRICA(CALCULA_TETO);
                  IF  NOT CALCULA_TETO THEN
                      vi_val_rubrica:=0;
                  END IF;
                  IF vi_val_rubrica > 0 THEN
                    vi_val_rubrica_prev   := trunc(round(vi_val_rubrica,2),2);
                    com_val_rubrica_cheio := trunc(round(valor_teto_calc,2),2); --comentado e substituido por abaixo em 30.nov.2009
                    --com_val_rubrica_cheio := trunc(round(vi_val_rubrica,2),2);

                   ---- Agregado em 25-08-2017
                   COM_TIPO_EVENTO_ESPECIAL :='E';

                    tdcn.extend;
                    idx_caln        := nvl(idx_caln, 0) + 1;
                    idx_seq_detalhe := nvl(idx_seq_detalhe, 0) + 1;
                    SP_INCLUI_DETALHE_PAG(cod_benef,
                                          vi_rubrica,
                                          vi_val_rubrica,
                                          vi_seq_vig,
                                          'D');

                       ----- Alterac?o de Valor Base de Redutor TASK 3359 -----
                       FOR i2 IN 1 .. vfolha.count LOOP
                             rfol := vfolha(i2);
                            IF   RFOL.COD_BENEFICIO=cod_benef THEN
                              vfolha(i2).VAL_BASE_REDUTOR:=valor_excesso;
                              EXIT;
                            END IF;
                       END LOOP;
                    ----------------------------------------------

                    IF PAR_TIP_PRO = 'T' THEN
                      -- Obtem Adiantamento
                      IF COM_TIP_BENEFICIO = 'APOSENTADO' THEN
                         SP_OBTEM_RUBRICA_EVENTO_ESPEC('G',
                                                    ANT_ENTIDADE,
                                                    'C',
                                                    vi_rubrica_t,
                                                    vi_seq_vig);
                      ELSE
                         SP_OBTEM_RUBRICA_EVENTO_ESPEC('D',
                                                    ANT_ENTIDADE,
                                                    'C',
                                                    vi_rubrica_t,
                                                    vi_seq_vig);
                      END IF;

                      FOR o IN 1 .. tdcn.count LOOP
                        rdcn := tdcn(o);
                        IF rdcn.cod_fcrubrica = vi_rubrica_t THEN
                          SP_OBTEM_RUBRICA_EVENTO_ESPEC('Q',
                                                        ANT_ENTIDADE,
                                                        'D',
                                                        vi_rubrica_t,
                                                        vi_seq_vig);
                          sp_composicao(vi_rubrica_t,
                                        'BASE_REDUT',
                                        cod_benef,
                                        ant_entidade,
                                        'S',
                                        COM_VAL_RUBRICA_CHEIO);

                          tdcn.extend;
                          idx_caln        := nvl(idx_caln, 0) + 1;
                          idx_seq_detalhe := nvl(idx_seq_detalhe, 0) + 1;
                          SP_INCLUI_DETALHE_PAG(cod_benef,
                                                vi_rubrica_t,
                                                COM_VAL_RUBRICA_CHEIO / 2,
                                                vi_seq_vig,
                                                'D');
                          exit;
                        END IF;
                      END LOOP; -- MVL9
                    END IF;

                  END IF;

                END IF;

        END LOOP; -- MVL1

        RETURN;

      ELSE
        -- CASO DATA MAIOR DEVE O DESCONTO DE TETO MAIOR PARA TODOS OS BENEFICIOS

        FOR i IN 1 .. v_cod_beneficio.count LOOP
          --ROD8 Bloco inicio incluido

          cod_benef := v_cod_beneficio(i);
          SP_OBTEM_TIPO_BENEFICIO(cod_benef);

          --SP_VERIFICA_VALOR_EXTERNO(cod_benef,ANT_IDE_CLI, v_val_externo);
          select cod_entidade
            into v_entidade_atual
            from TB_CONCESSAO_BENEFICIO
           where cod_beneficio = cod_benef;
          COM_COD_PODER := SP_OBTEM_PODER(v_entidade_atual); --ROD8 Bloco fim

          v_cargo_atual := v_cargo(cod_benef) (1);

          IF com_cod_poder = '1' then

            SP_OBTEM_PARVAL_FOLHA2('TETO_MIN',
                                   1000,
                                   'TETO_MIN',
                                   w_desc_teto1); -- MVL4
            SP_OBTEM_PARVAL_FOLHA2('TETO_GOV',
                                   1000,
                                   'TETO_GOV',
                                   w_desc_teto2); -- MVL4

            IF ((v_cargo_atual >= 7866 AND v_cargo_atual <= 7878) OR --| MRS0
               (v_cargo_atual >= 3639 AND v_cargo_atual <= 3653) OR
               v_cargo_atual = 7889 OR v_cargo_atual = 4318 OR --| Dario acrescentou
               v_cargo_atual = 3997 OR v_cargo_atual = 7894 OR --| em 20090606
               v_cargo_atual = 4336 OR v_cargo_atual = 4474 OR --|
               v_cargo_atual = 4758 OR v_cargo_atual = 4769 OR --|
               v_cargo_atual = 4481 OR v_cargo_atual = 4482 OR --|
               v_cargo_atual = 4532 OR v_cargo_atual = 5031 OR --|
               v_cargo_atual = 4982 OR v_cargo_atual = 4983 OR --|
               v_cargo_atual = 3623 OR v_cargo_atual = 5036 OR --|
               v_cargo_atual = 4990 OR v_cargo_atual = 5029 OR --|
               v_cargo_atual = 5030 OR v_cargo_atual = 5032 OR --| ROD 24.jul.09
               v_cargo_atual = 5035 OR v_cargo_atual = 5037 OR --| ROD 24.jul.09
               v_cargo_atual = 5038 OR --| ROD 24.jul.09
               v_cargo_atual = 5034 OR v_cargo_atual = 5033) AND ANT_ENTIDADE <> 5 THEN
              --|

              desc_teto := w_desc_teto1; -- MVL4
            ELSE
              desc_teto := w_desc_teto2; -- MVL4
            END IF;

            IF desc_teto > max_teto THEN
              max_teto := desc_teto;
            END IF;

          ELSIF com_cod_poder = '2' then
            SP_OBTEM_PARVAL_FOLHA2('TETO_MIN',
                                   1000,
                                   'TETO_MIN',
                                   w_desc_teto1); -- MVL4
            SP_OBTEM_PARVAL_FOLHA2('SUBDEPEST',
                                   1000,
                                   'SUB_DEPUT_EST',
                                   w_desc_teto2); -- MVL4

            IF (v_cargo_atual = 4474 OR
                v_cargo_atual = 4532 OR
                v_cargo_atual = 4758 OR
                v_cargo_atual = 4769
               ) AND ANT_ENTIDADE <> 5 THEN
              desc_teto := w_desc_teto1; -- MVL4
            ELSE
              desc_teto := w_desc_teto2; -- MVL4
            END IF;

            IF desc_teto > max_teto THEN
              max_teto := desc_teto;
            END IF;

          ELSIF com_cod_poder = '3' then
            SP_OBTEM_PARVAL_FOLHA2('TETO_MIN', 1000, 'TETO_MIN', desc_teto);
            --ELSIF com_cod_poder = '4' then
            --SP_OBTEM_PARVAL_FOLHA2('TETO_AFR',1000,'TETO_AFR',desc_teto);  --Dario Comentou
          ELSE
            SP_OBTEM_PARVAL_FOLHA2('TETO_PREF',
                                   1000,
                                   'TETO_PREF',
                                   desc_teto);
          END IF;

          ------- Ajuste de Teto quando poder Judicial e cargo especifico.
            IF com_cod_poder = '3'  and  v_cargo(cod_benef) (1) = 5237 then
                SP_OBTEM_PARVAL_FOLHA2('TETO_GOV',
                                         1000,
                                         'TETO_GOV',
                                         desc_teto);
            END IF;
          --................................. ROD 01/09 criado teto_fixo para alguns beneficios afim de igualar com PRODESP
          SP_VERIFICA_TETO_FIXO(cod_benef, v_teto_fixo);
          IF v_teto_fixo > 0 THEN
             desc_teto := v_teto_fixo;
             --- Agregado por Solucitude de Caroline Yumi 30-07-2013
             --- Varificar se esta condic?o sera mantida.
              max_teto := v_teto_fixo;
          END IF;

          IF desc_teto > max_teto THEN
            max_teto := desc_teto;
          END IF;

        END LOOP;

        desc_teto := max_teto;
      END IF;
    END IF;




   -- IF valor_excesso_tot >= desc_teto THEN

   --   select valor_excesso_tot - desc_teto into valor_teto_calc from dual;

      --     valor_teto_calc := ( valor_teto_tot - desc_teto - VALOR_INCAPACIDADE ) * perc_prev;

      FOR i IN 1 .. v_cod_beneficio.count LOOP
                ------ AGREGAR IF POR TETO
                cod_benef := v_cod_beneficio(i);
                FOR i2 IN 1 .. vfolha.count LOOP
                   rfol := vfolha(i2);
                   EXIT WHEN   RFOL.COD_BENEFICIO=cod_benef;
                END LOOP;
                ant_entidade:=RFOL.COD_ENTIDADE;
                ----
                IF RFOL.TIP_BENEFICIO='PENSIONISTA'  THEN
                  valor_excesso_tot:=valor_excesso_tot_PEN;
                ELSE
                  valor_excesso_tot:=valor_excesso_tot_APO;
                END IF;
                select valor_excesso_tot - desc_teto
                       into valor_teto_calc
                from dual;

                -----
        IF valor_excesso_tot >= desc_teto THEN
                cod_benef := v_cod_beneficio(i);
                SP_OBTEM_TIPO_BENEFICIO(cod_benef);
                IF valor_teto_calc > 0 THEN

                  tdcn.extend;
                  idx_caln        := nvl(idx_caln, 0) + 1;
                  idx_seq_detalhe := nvl(idx_seq_detalhe, 0) + 1;

                  sp_composicao(vi_rubrica,
                                'BASE_REDUT',
                                cod_benef,
                                ant_entidade,
                                'N',
                                valor_excesso);

                  i_perc := (valor_excesso / valor_excesso_tot) * 100;

                END IF;

                vi_val_rubrica := (valor_teto_calc * i_perc) / 100;

                --        v_base_teto(cod_benef)(1) := round(((valor_teto_calc) * i_perc) / 100,2);

                  COM_COD_FCRUBRICA:=vi_rubrica;
                  COM_COD_ENTIDADE :=ant_entidade;
                  COM_COD_BENEFICIO:=cod_benef;
                 -- BEN_IDE_CLI      :=ant_ide_cli;
                  SP_PROCESSA_RUBRICA(CALCULA_TETO);
                  IF  NOT CALCULA_TETO  THEN
                      vi_val_rubrica:=0;
                  END IF;

                IF vi_val_rubrica > 0 THEN
                  vi_val_rubrica_prev   := trunc(round(vi_val_rubrica,2),2);
                  --- JTS 29092010 (Abaixo)
                  --- com_val_rubrica_cheio := trunc(round(valor_teto_calc,2),2);
                  com_val_rubrica_cheio := trunc(round(valor_teto_calc,2),2); --comentado e substituido por abaixo em 30.nov.2009
                  --com_val_rubrica_cheio := trunc(round(vi_val_rubrica,2),2);

                  --- VERIFICA TOTAL BASE TETO DO BENEFICIO
                 -----  BLOCO INCLUIDO 17032010 PARA CALCULO TETO

                   cod_benef_teto      := cod_benef;
                   valor_excesso_benef :=0;
                   perc_teto_benef     :=0;
                   sp_composicao(vi_rubrica,
                                     'BASE_REDUT',
                                      cod_benef_teto,
                                      ant_entidade,
                                      'N',
                                      valor_excesso_benef);
                  FOR i2 IN 1 .. vfolha.count LOOP
                      rfol := vfolha(i2);
                     EXIT WHEN   RFOL.COD_BENEFICIO=cod_benef_teto;
                  END LOOP;
                  VI_PERCENTUAL_RATEIO:=rfol.per_rateio;
                  valor_excesso_benef :=(valor_excesso_benef / VI_PERCENTUAL_RATEIO);
                  perc_teto_benef:=valor_excesso_benef/valor_excesso_tot ;
                  com_val_rubrica_cheio := trunc(round(valor_teto_calc * perc_teto_benef,2),2);
                   -----------------------------------------



                  tdcn.extend;
                  idx_caln        := nvl(idx_caln, 0) + 1;
                  idx_seq_detalhe := nvl(idx_seq_detalhe, 0) + 1;
                  SP_INCLUI_DETALHE_PAG(cod_benef,
                                        vi_rubrica,
                                        vi_val_rubrica,
                                        vi_seq_vig,
                                        'D');

                     ----- Alterac?o de Valor Base de Redutor TASK 3359 -----
                      FOR i2 IN 1 .. vfolha.count LOOP
                             rfol := vfolha(i2);
                            IF   RFOL.COD_BENEFICIO=cod_benef THEN
                                 vfolha(i2).VAL_BASE_REDUTOR:=trunc(round(valor_excesso_tot *perc_teto_benef,2),2);
                              EXIT;
                            END IF;
                       END LOOP;
                    ----------------------------------------------

                  IF PAR_TIP_PRO = 'T' THEN
                    -- Obtem Adiantamento
                    SP_OBTEM_RUBRICA_EVENTO_ESPEC('D',
                                                  ANT_ENTIDADE,
                                                  'C',
                                                  vi_rubrica_t,
                                                  vi_seq_vig);

                    FOR o IN 1 .. tdcn.count LOOP
                      rdcn := tdcn(o);
                      IF rdcn.cod_fcrubrica = vi_rubrica_t THEN
                        SP_OBTEM_RUBRICA_EVENTO_ESPEC('Q',
                                                      ANT_ENTIDADE,
                                                      'D',
                                                      vi_rubrica_t,
                                                      vi_seq_vig);
                        sp_composicao(vi_rubrica_t,
                                      'BASE_REDUT',
                                      cod_benef,
                                      ant_entidade,
                                      'S',
                                      COM_VAL_RUBRICA_CHEIO);

                        tdcn.extend;
                        idx_caln        := nvl(idx_caln, 0) + 1;
                        idx_seq_detalhe := nvl(idx_seq_detalhe, 0) + 1;

                        SP_INCLUI_DETALHE_PAG(cod_benef,
                                              vi_rubrica_t,
                                              COM_VAL_RUBRICA_CHEIO / 2,
                                              vi_seq_vig,
                                              'D');
                        exit;
                      END IF;
                    END LOOP; -- MVL9
                  END IF;

                END IF;

            END IF;    -------- agregar novo END IF.--------------
      END LOOP;
   -- end if;

  END SP_RUBRICAS_EXCESSO;
  ---------------------------------------------------------------------------------
  PROCEDURE SP_VERIFICA_TETO_FIXO(i_cod_benef in NUMBER,
                                  o_teto_fixo out number) as
  v_teto_fixo       number(18, 4) := 0;
  ------ Variaveis Novas ----
  w_qtd_ordem_jud       number (4)    :=0;
  w_teto_poder          number(18, 4) := 0;
  w_max_teto_poder      number(18, 4) := 0;

  BEGIN

  BEGIN

       BEGIN
        select  count(*)
          INTO  W_QTD_ORDEM_JUD
          from tb_ordem_judicial        ordem,
               tb_ord_jud_det_param     pdet_ordem,
               tb_ordem_jud_tipo_efeito efeito,
               tb_ord_jud_pessoa_fisica fordem
          where fordem.cod_ins           = PAR_COD_INS
          and  fordem.cod_ide_cli        = ANT_IDE_CLI
          and fordem.num_ord_jud         = ordem.num_ord_jud
          and fordem.cod_beneficio       = i_cod_benef
          and ordem.cod_ins              =  PAR_COD_INS
          and pdet_ordem.cod_ins = ordem.cod_ins
          and pdet_ordem.num_ord_jud = ordem.num_ord_jud
          and pdet_ordem.flg_status = 'V'
          and efeito.cod_ins = 1
          and efeito.num_ord_jud = ordem.num_ord_jud
          and efeito.cod_tip_efeito = pdet_ordem.cod_tipo_efeito
          and pdet_ordem.cod_tipo_efeito = 79

          and   pdet_ordem.dat_ini_vig<= par_per_pro
          and   nvl(pdet_ordem.dat_fim_vig,par_per_pro) >=par_per_pro

          and   ordem.dat_efeito <=par_per_pro
          and   nvl(ordem.dat_fim_efeito, par_per_pro)  >=par_per_pro;

     END;

        IF W_QTD_ORDEM_JUD > 0 THEN
            FOR ORDEM_JUDICIAL_LIM_CONST IN (
                    select
                         pdet_ordem.cod_poder       , --- tipo de limite (1,2,3,4)
                         pdet_ordem.val_percentual , --- % para aplicar
                         pdet_ordem.val_fixo            --- valor fixo

                    from
                         tb_ordem_judicial        ordem        ,
                         tb_ord_jud_det_param     pdet_ordem   ,
                         tb_ordem_jud_tipo_efeito efeito       ,
                         tb_ord_jud_pessoa_fisica fordem

                    where fordem.cod_ins           = par_cod_ins
                    and   fordem.cod_ide_cli        = ant_ide_cli
                    and   fordem.num_ord_jud         = ordem.num_ord_jud
                    and   fordem.cod_beneficio       = i_cod_benef
                    and   ordem.cod_ins              =  par_cod_ins
                    and   pdet_ordem.cod_ins = ordem.cod_ins
                    and   pdet_ordem.num_ord_jud = ordem.num_ord_jud
                    and   pdet_ordem.flg_status = 'V'
                    and   efeito.cod_ins = 1
                    and   efeito.num_ord_jud = ordem.num_ord_jud
                    and   efeito.cod_tip_efeito = pdet_ordem.cod_tipo_efeito
                    and   pdet_ordem.cod_tipo_efeito = 79

                    and   pdet_ordem.dat_ini_vig<= par_per_pro
                    and   nvl(pdet_ordem.dat_fim_vig,par_per_pro) >=par_per_pro

                    and   ordem.dat_efeito <=par_per_pro
                    and   nvl(ordem.dat_fim_efeito, par_per_pro)  >=par_per_pro
              ) LOOP
                  CASE  ORDEM_JUDICIAL_LIM_CONST.cod_poder
                            WHEN   1 THEN  -- Executivo
                                  SP_OBTEM_PARVAL_FOLHA2('TETO_GOV',1000,'TETO_GOV',W_TETO_PODER);
                            WHEN   2 THEN  -- Legislativo
                                 SP_OBTEM_PARVAL_FOLHA2('SUBDEPEST',1000,'SUB_DEPUT_EST',W_TETO_PODER);
                            WHEN   3 THEN  -- Judicial
                                 SP_OBTEM_PARVAL_FOLHA2('TETO_MIN',1000,'TETO_MIN',W_TETO_PODER);
                            WHEN   5 THEN   --Teto Fixo
                                  W_TETO_PODER:=ORDEM_JUDICIAL_LIM_CONST.val_fixo;
                            -- COMENTADO EM 26/07/2016 POR LJUNIOR.
                            -- ALTERACAO NO CAMPO TETO_MIN PARA TETO_MIN_C E TIPO 7 CONFORME DEFINIDO POR PMIRANDA
                            /*
                            WHEN   6 THEN  -- Outros Poderes - Valor Teto - Ministro Sup
                                 SP_OBTEM_PARVAL_FOLHA2('TETO_MIN',1000,'TETO_MIN_C',W_TETO_PODER);
                            */
                            WHEN   7 THEN  -- Outros Poderes - Valor Teto - Ministro Sup
                                 SP_OBTEM_PARVAL_FOLHA2('TETO_MIN_C',1000,'TETO_MIN_C',W_TETO_PODER);

                            ELSE
                                 W_TETO_PODER:=0;
                    END CASE;

                        IF ORDEM_JUDICIAL_LIM_CONST.cod_poder!=5 THEN
                          W_TETO_PODER:=ROUND((W_TETO_PODER * ORDEM_JUDICIAL_LIM_CONST.val_percentual/100),4);

                        END IF;
                     IF W_MAX_TETO_PODER <W_TETO_PODER THEN
                        W_MAX_TETO_PODER :=W_TETO_PODER;
                     END IF;

              END LOOP;
              o_teto_fixo:=W_MAX_TETO_PODER;

        ELSE
                select cb.teto_fixo
                 into v_teto_fixo
                from tb_concessao_beneficio cb
                 where cb.cod_beneficio = i_cod_benef ;

                o_teto_fixo := v_teto_fixo;
        END IF;
       EXCEPTION
                when others then
                  p_coderro       := sqlcode;
                  p_sub_proc_erro := 'Erro Ao Validar Teto '
                                      ||to_char(W_TETO_PODER)  ;
                  p_msgerro       := sqlerrm;
                  INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                        p_coderro,
                                        'Calcula Folha',
                                        sysdate,
                                        p_msgerro,
                                        p_sub_proc_erro,
                                         ant_ide_cli,
                                        0);

       END;

  END SP_VERIFICA_TETO_FIXO;
  ---------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_RUBRICA_EVENTO_ESPEC(itip_evento_especial in varchar2,
                                          i_cod_entidade       in number,
                                          i_flg_natureza       in varchar2,
                                          o_cod_rubrica        out number,
                                          o_seq_vig            out number) as
  BEGIN
    BEGIN
      SELECT rr.cod_rubrica, rr.seq_vig
        INTO o_cod_rubrica, o_seq_vig
        FROM tb_rubricas rr, tb_rubricas_processo rp
       WHERE rr.cod_ins = PAR_COD_INS
         AND rr.tip_evento_especial = itip_evento_especial
         AND rr.tip_evento = decode(PAR_TIP_PRO,
                                    'N','N',
                                    'S','N',
                                    'R','N',
                                    'T','T',
                                    'E','N') -- 'N' --Tip_processo MVL
         AND rr.cod_entidade = rp.cod_entidade
         and rr.cod_entidade = i_cod_entidade
         AND RR.DAT_INI_VIG <= PAR_PER_PRO
         AND (RR.DAT_FIM_VIG >= PAR_PER_PRO OR RR.DAT_FIM_VIG IS NULL)
         AND RP.FLG_PROCESSA = 'S'
         AND rr.cod_ins = rp.cod_ins
         AND rr.cod_rubrica = rp.cod_rubrica
         AND rp.tip_processo = decode(PAR_TIP_PRO,
                                    'N','N',
                                    'S','N',
                                    'R','N',
                                    'T','T',
                                    'E','N') --PAR_TIP_PRO  --continuar alterar tabela criando as rubricas 'S'
         AND rp.dat_ini_vig <= PAR_PER_PRO
         AND (RR.DAT_FIM_VIG >= PAR_PER_PRO OR RR.DAT_FIM_VIG IS NULL);

    exception
      when no_data_found then
      BEGIN
         SELECT rr.cod_rubrica, rr.seq_vig
           INTO o_cod_rubrica, o_seq_vig
         FROM tb_rubricas rr, tb_rubricas_processo rp
         WHERE rr.cod_ins = PAR_COD_INS
           AND rr.tip_evento_especial = itip_evento_especial
           AND rr.tip_evento = decode(PAR_TIP_PRO,
                                      'N','N',
                                      'S','N',
                                      'R','N',
                                      'T','N',
                                      'E','N') -- 'N' --Tip_processo MVL
           AND rr.cod_entidade = rp.cod_entidade
           and rr.cod_entidade = i_cod_entidade
           AND RR.DAT_INI_VIG <= PAR_PER_PRO
           AND (RR.DAT_FIM_VIG >= PAR_PER_PRO OR RR.DAT_FIM_VIG IS NULL)
           AND RP.FLG_PROCESSA = 'S'
           AND rr.cod_ins = rp.cod_ins
           AND rr.cod_rubrica = rp.cod_rubrica
           AND rp.tip_processo = decode(PAR_TIP_PRO,
                                      'N','N',
                                      'S','N',
                                      'R','N',
                                      'T','T',
                                      'E','N') --PAR_TIP_PRO  --continuar alterar tabela criando as rubricas 'S'
           AND rp.dat_ini_vig <= PAR_PER_PRO
           AND (RR.DAT_FIM_VIG >= PAR_PER_PRO OR RR.DAT_FIM_VIG IS NULL);
      exception
            when others then
            p_sub_proc_erro := 'SP_OBTEM_RUBRICA_EVENTO_ESPECIAL';
            p_coderro       := SQLCODE;
            P_MSGERRO       := 'Erro ao obter a rubrica evento especial' ||
                               ' Entidade : ' || ant_entidade ||
                               'Evento Especial' || itip_evento_especial;
            INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                  p_coderro,
                                  'Calcula Folha',
                                  sysdate,
                                  p_msgerro,
                                  p_sub_proc_erro,
                                  ant_ide_cli,
                                  0);
             VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
        end;
      -----------------------
      when others then
        p_sub_proc_erro := 'SP_OBTEM_RUBRICA_EVENTO_ESPECIAL';
        p_coderro       := SQLCODE;
        P_MSGERRO       := 'Erro ao obter a rubrica evento especial' ||
                           ' Entidade : ' || ant_entidade ||
                           'Evento Especial' || itip_evento_especial;
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              ant_ide_cli,
                              0);
        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;

    end;

  END SP_OBTEM_RUBRICA_EVENTO_ESPEC;
  ---------------------------------------------------------------------------------
  FUNCTION SP_OBTEM_PODER(o_cod_entidade in number) RETURN VARCHAR2 as

    v_desc_curta tb_codigo.des_descricao_curta%type;

  BEGIN
    BEGIN
      select en.cod_poder
        into v_desc_curta
        from --tb_codigo cc,
             tb_entidade en
       where --cc.cod_num = 2021
      -- and cc.cod_par = en.cod_poder
       en.cod_ins = PAR_COD_INS
       and en.cod_entidade = o_cod_entidade;

    EXCEPTION
      WHEN OTHERS THEN
        v_desc_curta := ' ';
    END;

    RETURN(v_desc_curta);

  END SP_OBTEM_PODER;
  --------------------------------------------------------------------------------
  PROCEDURE SP_INCLUI_RESULTADO_CALC_RET(i_rdcn in tb_det_calculado_ESTRUC%rowtype) as --tb_det_calculado%rowtype  ) AS

  BEGIN

    BEGIN
      INSERT /*+ append */
      INTO TB_RESULTADO_CALC_RET
      VALUES
        (i_RDCN.cod_ins,
         i_RDCN.tip_processo,
         PAR_PER_REAL,
         i_RDCN.cod_ide_cli,
         i_RDCN.cod_beneficio,
         i_RDCN.seq_pagamento,
         i_RDCN.cod_fcrubrica,
         i_RDCN.seq_vig,
         trunc(i_RDCN.val_rubrica, 2),
         i_RDCN.num_quota,
         i_RDCN.flg_natureza,
         i_RDCN.tot_quota,
         i_RDCN.dat_ini_ref ,
         i_RDCN.dat_fim_ref,
         i_RDCN.cod_ide_cli_ben,
         i_RDCN.num_ord_jud,
         i_RDCN.dat_ing,
         i_RDCN.dat_ult_atu,
         i_RDCN.nom_usu_ult_atu,
         i_RDCN.nom_pro_ult_atu,
         i_RDCN.seq_detalhe,
         i_RDCN.des_informacao,
         i_RDCN.des_complemento,
         v_val_percentual,
         v_qtd_horas,
         trunc(i_rdcn.cod_fcrubrica / 100, 000),
         trunc(i_RDCN.VAL_RUBRICA_CHEIO, 2));
      --
    EXCEPTION
      WHEN OTHERS THEN
        p_sub_proc_erro := 'SP_GRAVA_RESULTADO_RET A';
        p_coderro       := SQLCODE;
        P_MSGERRO       := 'Erro ao incluir o resultado do calculo retroativo';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              i_RDCN.COD_IDE_CLI,
                              i_RDCN.COD_FCRUBRICA);
        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
    END;

  END SP_INCLUI_RESULTADO_CALC_RET;
  --------------------------------------------------------------------------------
  PROCEDURE SP_INCLUI_TB_DET_RET(i_rdcn in tb_DET_CALCULADO_ESTRUC%rowtype) as

  BEGIN

    BEGIN
      INSERT /*+ append */
      INTO TB_DET_RET
      (
      COD_INS  ,
      TIP_PROCESSO  ,
      PER_PROCESSO  ,
      COD_IDE_CLI  ,
      COD_BENEFICIO  ,
      SEQ_PAGAMENTO  ,
      COD_FCRUBRICA  ,
      SEQ_VIG  ,
      VAL_RUBRICA  ,
      NUM_QUOTA  ,
      FLG_NATUREZA  ,
      TOT_QUOTA  ,
      DAT_INI_REF  ,
      DAT_FIM_REF  ,
      COD_IDE_CLI_BEN  ,
      NUM_ORD_JUD  ,
      DAT_ING  ,
      DAT_ULT_ATU  ,
      NOM_USU_ULT_ATU  ,
      NOM_PRO_ULT_ATU  ,
      SEQ_DETALHE  ,
      DES_INFORMACAO  ,
      DES_COMPLEMENTO  ,
      VAL_RUBRICA_CHEIO  ,
      VAL_INIDADE  ,
      VAL_PORC  ,
      NUM_CARGA  ,
      NUM_SEQ_CONTROLE_CARGA

      )
      VALUES
        (i_RDCN.cod_ins,
         i_RDCN.tip_processo,
         i_RDCN.Per_Processo,
         i_RDCN.cod_ide_cli,
         i_RDCN.cod_beneficio,
         i_RDCN.seq_pagamento,
         i_RDCN.cod_fcrubrica,
         i_RDCN.seq_vig,
         trunc(i_RDCN.val_rubrica, 2),
         i_RDCN.num_quota,
         i_RDCN.flg_natureza,
         i_RDCN.tot_quota,
         i_RDCN.Dat_Ini_Ref,
         i_RDCN.dat_fim_ref,
         i_RDCN.cod_ide_cli_ben,
         i_RDCN.num_ord_jud,
         i_RDCN.dat_ing,
         i_RDCN.dat_ult_atu,
         i_RDCN.nom_usu_ult_atu,
         i_RDCN.nom_pro_ult_atu,
         i_RDCN.seq_detalhe,
         i_RDCN.des_informacao,
         i_RDCN.des_complemento,
         trunc(i_RDCN.VAL_RUBRICA_CHEIO, 2),
         i_rdcn.val_inidade,
         i_rdcn.val_porc,
         i_rdcn.num_carga,
         i_rdcn.num_seq_controle_carga);
      --
    EXCEPTION
      WHEN OTHERS THEN
        p_sub_proc_erro := 'SP_GRAVA_TB_DET_RET A';
        p_coderro       := SQLCODE;
        P_MSGERRO       := 'Erro ao incluir o detalhe retroativo';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              i_RDCN.COD_IDE_CLI,
                              i_RDCN.COD_FCRUBRICA);
        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
    END;

  END SP_INCLUI_TB_DET_RET;
  --------------------------------------------------------------------------------
  PROCEDURE SP_INCLUI_VALOR_NPAGO_RET(i_rdcn in tb_det_calculado_estruc%rowtype) as

  BEGIN

    BEGIN
      INSERT /*+ append */
      INTO TB_VALOR_NPAGO_RET
      VALUES
        (i_RDCN.cod_ins,
         i_RDCN.tip_processo,
         i_RDCN.Per_Processo,
         i_RDCN.cod_ide_cli,
         i_RDCN.cod_beneficio,
         i_RDCN.seq_pagamento,
         i_RDCN.cod_fcrubrica,
         i_RDCN.seq_vig,
         trunc(i_RDCN.val_rubrica, 2),
         i_RDCN.num_quota,
         i_RDCN.flg_natureza,
         i_RDCN.tot_quota,
         i_RDCN.Dat_Ini_Ref,
         i_RDCN.dat_fim_ref,
         i_RDCN.cod_ide_cli_ben,
         i_RDCN.num_ord_jud,
         i_RDCN.dat_ing,
         i_RDCN.dat_ult_atu,
         i_RDCN.nom_usu_ult_atu,
         i_RDCN.nom_pro_ult_atu,
         i_RDCN.seq_detalhe,
         i_RDCN.des_informacao,
         i_RDCN.des_complemento,
         'S',
         'S',
         --trunc(i_RDCN.VAL_RUBRICA_CHEIO, 2));
         trunc(nvl(i_RDCN.VAL_RUBRICA_CHEIO,i_RDCN.val_rubrica), 2));
      --
    EXCEPTION
      WHEN OTHERS THEN
        p_sub_proc_erro := 'SP_GRAVA_TB_VALOR_NPAGO_RET A';
        p_coderro       := SQLCODE;
        P_MSGERRO       := 'Erro :'||sqlerrm;
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              i_RDCN.COD_IDE_CLI,
                              i_RDCN.COD_FCRUBRICA);
        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
    END;
    commit;

  END SP_INCLUI_VALOR_NPAGO_RET;
  --------------------------------------------------------------------------------
  PROCEDURE SP_INCLUI_REDUTOR_2100600(i_ide_cli           in VARCHAR2,
                                      valor_teto_aplicado in number) As

    v_Vlr18601    number(18, 4) := 0;
    v_Vlr21005    number(18, 4) := 0;
    v_Vlr65074    number(18, 4) := 0;
    v_Vlr21603    number(18, 4) := 0;
    v_Vlr21006    number(18, 4) := 0;
    v_Vlr70603    number(18, 4) := 0;
    v_Vlr70006    number(18, 4) := 0;
    v_Vlr2100504  number(18, 4) := 0;


    v_Vlr_Base_Redu        number(18, 4) := 0;
    vi_rubrica             number := 0;
    vi_seq_vig             number := 0;
    w_valor_teto_aplicado  number := 0;
    rdcn_temp     TB_DET_CALCULADO_ESTRUC%rowtype;
    contaa        number(3);
    i_cod_benef   number;
    o_val_externo number;
    vi_sem_acumlar char(1);

  BEGIN

    --FOR i IN 1 .. v_cod_beneficio.count LOOP
    FOR i IN 1 .. vfolha.count LOOP
      rfol := vfolha(i);
     -- i_cod_benef := v_cod_beneficio(i);
      i_cod_benef := rfol.cod_beneficio;
      SP_OBTEM_TIPO_BENEFICIO(i_cod_benef);

      SP_OBTEM_DATA_OBITO(i_cod_benef, v_dat_obito);
      vi_sem_acumlar:='N';
      SP_OBTEM_ESENCAOEC40(RFOL.COD_IDE_CLI,vi_sem_acumlar);
      IF (v_dat_obito > to_date('31/12/2003', 'dd/mm/yyyy') and
         vi_sem_acumlar='N')  THEN

      SP_VERIFICA_VALOR_EXTERNO(i_cod_benef, ANT_IDE_CLI, o_val_externo);
      rfol := vfolha(i);
      v_Vlr18601 := 0;
      v_Vlr21005 := 0;
      v_Vlr65074 := 0;
      v_Vlr21603 := 0;
      v_Vlr21006 := 0;
      v_Vlr70603 := 0;
      v_Vlr70006 := 0;
      v_Vlr2100504:=0;
      IF O_VAL_EXTERNO > valor_teto_aplicado AND
        valor_teto_aplicado!=0 THEN
        O_VAL_EXTERNO := valor_teto_aplicado;
      END IF;
      IF (o_val_externo > 0 or valor_teto_aplicado =0)
        and rfol.tip_beneficio='PENSIONISTA'
        --- Evitar calculo de 2100600 24-05-2017
        and rfol.cod_entidade!=5
      THEN
        -- Se SIM calcula rubrica de redutor 2100600
        v_Vlr65074 := o_val_externo;
        contaa     := tdcn.count; -- .................continuar depois deve criar uma rubrica composta com formula
        IF contaa > 0 then
          FOR I IN 1 .. contaa LOOP
            rdcn_temp := tdcn(I);
            IF rdcn_temp.cod_beneficio = i_cod_benef THEN
              IF rdcn_temp.COD_FCRUBRICA IN( 1860100 ) OR (PAR_TIP_PRO = 'T' and rdcn_temp.COD_FCRUBRICA = 1861102) THEN
                v_Vlr18601 := v_Vlr18601 + rdcn_temp.val_rubrica;
              END IF;
              IF rdcn_temp.COD_FCRUBRICA = 2160300 THEN
                v_Vlr21603 := v_Vlr21603 + rdcn_temp.val_rubrica;
              END IF;
              IF rdcn_temp.COD_FCRUBRICA = 2100500 THEN
                v_Vlr21005 := v_Vlr21005 + rdcn_temp.val_rubrica;
              END IF;
              IF rdcn_temp.COD_FCRUBRICA = 7000600 THEN
                v_Vlr70006 := v_Vlr70006 + rdcn_temp.val_rubrica;
              END IF;
              IF rdcn_temp.COD_FCRUBRICA = 2100504 THEN
                 v_Vlr2100504:=v_Vlr2100504 + rdcn_temp.val_rubrica;
              END IF;
              IF (rdcn_temp.COD_FCRUBRICA = 7060300 or rdcn_temp.COD_FCRUBRICA = 7060500
                  OR rdcn_temp.COD_FCRUBRICA = 7005600) THEN
                v_Vlr70603 := v_Vlr70603 + rdcn_temp.val_rubrica;
              END IF;
            END IF;
          END LOOP;
          SP_OBTEM_RUBRICA_EVENTO_ESPEC('E',
                                  rfol.cod_entidade,
                                  'C',
                                  vi_rubrica,
                                  vi_seq_vig);

          sp_composicao(vi_rubrica,
                              'BASE_REDUT',
                              rfol.cod_beneficio,
                              rfol.cod_entidade,
                              'N',
                              v_Vlr_Base_Redu);

 ------------  Si 18601 > Base 2100500
          -- Novo Algorimo
          -- Se atual.

       IF valor_teto_aplicado =0 Then
          w_valor_teto_aplicado:=v_Vlr18601;
       ELSE
         w_valor_teto_aplicado:=valor_teto_aplicado;
       END IF;

          --- 18-05-2013 Se Muda Teto aplicado para calculo 2100504.
       IF  v_Vlr2100504 > 0 THEN
         w_valor_teto_aplicado :=v_Vlr18601  - v_Vlr21603;
       END IF;

       IF v_Vlr18601 <=  v_Vlr_Base_Redu Then

          IF v_Vlr65074 > w_valor_teto_aplicado THEN
            v_Vlr21006 := v_Vlr18601 - v_Vlr21603 ;

          ELSE
            IF v_Vlr65074 + v_Vlr18601 >= w_valor_teto_aplicado THEN
              v_Vlr21006 := v_Vlr18601 + v_Vlr65074  -
                            (v_Vlr21603 + w_valor_teto_aplicado);
            ELSE
              v_Vlr21006 := 0;
            END IF;
          END IF;
       Else
           IF (v_Vlr65074+v_Vlr_Base_Redu ) > valor_teto_aplicado THEN
               v_Vlr21006 := (v_Vlr65074+v_Vlr_Base_Redu ) -w_valor_teto_aplicado ;
           Else
              v_Vlr21006 :=0;
           End if;

       End if;


          idx_cald               := nvl(idx_cald, 0) + 1;
          rdcd.cod_ins           := PAR_COD_INS;
          rdcd.tip_processo      := PAR_TIP_PRO;
          rdcd.per_processo      := PAR_PER_PRO;
          rdcd.cod_ide_cli       := i_ide_cli;
          rdcd.cod_beneficio     := i_cod_benef;
          rdcd.seq_pagamento     := vi_seq_pagamento; --
          rdcd.seq_detalhe       := idx_cald;
          rdcd.cod_fcrubrica     := '2100600';
          rdcd.seq_vig           := 1;
          rdcd.val_rubrica       := v_Vlr21006;
          rdcd.num_quota         := 1;
          rdcd.flg_natureza      := 'D';
          rdcd.tot_quota         := 1;
          rdcd.dat_ini_ref       := par_per_pro;
          rdcd.dat_fim_ref       := null;
          rdcd.num_ord_jud       := null;
          rdcd.dat_ing           := sysdate;
          rdcd.dat_ult_atu       := sysdate;
          rdcd.nom_usu_ult_atu   := 'REDUT_ESP';
          rdcd.nom_pro_ult_atu   := 'FOLHA ENVIO';
          rdcd.val_rubrica_cheio := v_Vlr21006;

          IF v_Vlr21006 > 0 THEN
            --RDCD.VAL_RUBRICA := v_val_rubrica_desc;
            tdcn.extend;
            idx_caln        := nvl(idx_caln, 0) + 1;
            idx_seq_detalhe := nvl(idx_seq_detalhe, 0) + 1;
            --tdcd(i).val_rubrica := 0;
            COM_VAL_RUBRICA_CHEIO := rdcd.val_rubrica;

            SP_INCLUI_DETALHE_PAG(rdcd.cod_beneficio,
                                  rdcd.cod_fcrubrica,
                                  rdcd.val_rubrica,
                                  rdcd.seq_vig,
                                  rdcd.flg_natureza);
            commit;
          END IF;
        END IF;
      END IF;
      END IF;
    END LOOP;



  END SP_INCLUI_REDUTOR_2100600;

  --------------------------------------------------------------------------------
  FUNCTION CALCULA_MARGEM_CONSIG RETURN NUMBER is
      O_VALOR               NUMBER(18, 4);
      i_cod_benef           NUMBER;
      v_tip_composicao      tb_rubricas.tip_composicao%TYPE;
      v_tip_evento_especial tb_rubricas.tip_evento_especial%TYPE;
      vi_val_rubrica        number := 0;
      vi_seq_vig            number := 0;
      V_rub_irpf            number; --rubrica de ir
      V_rub_prev            number; --rubrica de prev
      V_rub_pali            number; --rubrica de pensao alim
      vlr_irpf              NUMBER(18, 4);
      vlr_prev              NUMBER(18, 4);
      vlr_pali              NUMBER(18, 4);
      vi_rubrica            number := 0;
      contaa                number :=0;
      tot_rqbr              NUMBER(18, 4) :=0;
      tot_rqdeb             NUMBER(18, 4) :=0;
      rdcn_temp             TB_DET_CALCULADO_ESTRUC%rowtype;
      tot_final             NUMBER(18, 4) :=0;
  BEGIN
    --obtem rubrica imposto de renda
    SP_OBTEM_RUBRICA_EVENTO_ESPEC('I', ANT_ENTIDADE, '', vi_rubrica, vi_seq_vig);
    V_rub_IRPF := vi_rubrica;
    --obtem rubrica cont.previdenciaria
    SP_OBTEM_RUBRICA_EVENTO_ESPEC('R', ANT_ENTIDADE, '', vi_rubrica, vi_seq_vig);
    v_rub_prev := vi_rubrica;
    --obtem rubrica PENS?O ALIMENTICIA
    --SP_OBTEM_RUBRICA_EVENTO_ESPEC('P', ANT_ENTIDADE, '', vi_rubrica, vi_seq_vig);
    v_rub_pali := '7800100'; -- vi_rubrica; continuar ... deve pegar e considerar todas as rubricas de pens?o alim. abaixo

    FOR i IN 1 .. v_cod_beneficio.count LOOP
      i_cod_benef := v_cod_beneficio(i);
      VI_MARGEM_CONSIG(i_cod_benef)(1) := 0;
      tot_rqbr  :=0;
      tot_rqdeb :=0;
      contaa     := tdcn.count;
      IF contaa > 0 then
         FOR I IN 1 .. contaa LOOP
            rdcn_temp := tdcn(I);
            IF rdcn_temp.cod_beneficio = i_cod_benef THEN
               v_tip_composicao := null;
               v_tip_evento_especial := null;
               begin
                select ru.tip_composicao, ru.tip_evento_especial
                 into v_tip_composicao, v_tip_evento_especial
                 from tb_rubricas ru
                 where ru.cod_rubrica = rdcn_temp.COD_FCRUBRICA and ru.cod_entidade=ANT_ENTIDADE
                 and   (ru.dat_fim_vig >=par_per_pro or ru.dat_fim_vig is null) ;
               exception
                when others then
                  null;
               end;
               IF v_tip_composicao = 'B' AND v_tip_evento_especial NOT IN ('A','Y') THEN
                  tot_rqbr  := tot_rqbr + rdcn_temp.val_rubrica;
               END IF;
               IF rdcn_temp.COD_FCRUBRICA in ( V_rub_IRPF, V_rub_PREV, V_rub_pali ) THEN
                  tot_rqdeb := tot_rqdeb + rdcn_temp.val_rubrica;
               END IF;
            END IF;
         END LOOP;
      END IF;

      IF tot_rqbr*0.4 > (tot_rqbr-tot_rqdeb)*0.7 THEN
         tot_final := (tot_rqbr-tot_rqdeb)*0.7;
      ELSE
         tot_final := tot_rqbr*0.4;
      END IF;

      VI_MARGEM_CONSIG(i_cod_benef)(1) := Tot_final;

    END LOOP;
  RETURN(O_VALOR);
  END CALCULA_MARGEM_CONSIG;

  --------------------------------------------------------------------------------
  PROCEDURE SP_VERIFICA_VALOR_EXTERNO(i_cod_benef   in number,
                                      i_ide_cli     in VARCHAR2,
                                      o_val_externo out number) As

    --VI_IDE_CLI number(18, 4) := 0;
    VI_IDE_CLI   VARCHAR2(20);
    W_val_externo number(18, 4) := 0;
    w_rubrica    number;
    w_seq_vig    number;
  BEGIN
         VI_IDE_CLI :=null;
         BEGIN
          SELECT CI.COD_IDE_CLI, sum(val_fixo)
            INTO VI_IDE_CLI,W_val_externo
            FROM  TB_COMPOSICAO_INDIV CI
           WHERE CI.COD_INS = PAR_COD_INS
             AND CI.COD_IDE_CLI = i_ide_cli
             AND CI.COD_BEN = i_cod_benef
             AND CI.COD_FCRUBRICA = '6507400' --vi_rubrica_s
             AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
                 to_char(CI.DAT_INI_VIG, 'YYYYMM') and
                 to_char(PAR_PER_PRO, 'YYYYMM') <=
                 to_char(nvl(CI.DAT_FIM_VIG,
                              to_date('01/01/2045', 'dd/mm/yyyy')),
                          'YYYYMM'))
              AND NVL( CI.FLG_STATUS,'V')='V'
           GROUP BY CI.COD_IDE_CLI;
           o_val_externo:=W_val_externo;
        EXCEPTION
          when others then
            o_val_externo := 0;
        END;

       o_val_externo := 0;
       w_seq_vig:=1;
      FOR i2 IN 1 .. vfolha.count LOOP
           rfol := vfolha(i2);
           W_val_externo:=0;
           IF RFOL.TIP_BENEFICIO='APOSENTADO' THEN
             SP_OBTEM_RUBRICA_EVENTO_ESPEC('E',
                                   RFOL.COD_ENTIDADE,
                                    'C',
                                    w_rubrica,
                                    w_seq_vig);
             sp_composicao(w_rubrica,
                           'BASE_REDUT',
                           RFOL.COD_BENEFICIO,
                           RFOL.COD_ENTIDADE,
                           'N',
                           W_val_externo);
                 o_val_externo:= o_val_externo+ w_val_externo;
           END IF;

      END LOOP;
      w_val_externo:=0;
      BEGIN
          SELECT CI.COD_IDE_CLI, sum(val_fixo)
            INTO VI_IDE_CLI, w_val_externo
            FROM TB_COMPOSICAO_INDIV CI
           WHERE CI.COD_INS = PAR_COD_INS
             AND CI.COD_IDE_CLI = i_ide_cli
             AND CI.COD_BEN = i_cod_benef
             AND CI.COD_FCRUBRICA = '6507400' --vi_rubrica_s
             AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
                 to_char(CI.DAT_INI_VIG, 'YYYYMM') and
                 to_char(PAR_PER_PRO, 'YYYYMM') <=
                 to_char(nvl(CI.DAT_FIM_VIG,
                              to_date('01/01/2045', 'dd/mm/yyyy')),
                          'YYYYMM'))
           GROUP BY CI.COD_IDE_CLI;
       EXCEPTION
          when others then
            w_val_externo := 0;
       END;
       o_val_externo:= o_val_externo+ w_val_externo;



  END SP_VERIFICA_VALOR_EXTERNO;


-------------------------------------------------------------------------------------------------------------------------------
  PROCEDURE SP_ATUALIZA_DECIMOTERC(
                                   i_cod_ins                in number,
                                   i_per_pro                in date, -- Periodo a processar
                                   i_cod_usu                in varchar2,
                                   i_tip_pro                in varchar2, -- TIPO DE PROCESSO: N (normal), S (Suplementar), T (13 Salario)
                                   i_par_per_real           in date,
                                   i_des_tipos_benef        in varchar2,
                                   i_cod_tipo_ben           in varchar2,
                                   i_num_processo           in number, --ROD6 :: Indica o grupo a ser processado
                                   i_num_grp                in number, --ROD7 :: numero do grupo de pagamento a processar
                                   i_seq_pag                in number,
                                   i_num_cpf                in varchar2,
                                   i_num_seq_proc           in number,
                                   i_flg_retorno            out varchar2) AS

   --CARREGA VARIAVEIS INICIAIS:
   v_cod_proc_grp_pag      char(2);
   cod_benef               number := 0;
   v_rubantecip13          number;
   vi_seq_vig              number;
   conta                   number := 0;
   v_tipo_beneficio        varchar2(1);
   v_cod_entidade          number(8);
   v_val_rubrica           number(18,4);
   v_val_rubrica_c         number(18,4);
   v_val_rubrica_d         number(18,4);
   v_val_rubrica_AGRUPADA  number(18,4);
   v_conta_ok              number(18) :=0;
   v_conta_nok             number(18) :=0;
   v_soma1                 number(18,4) :=0;
   v_soma2                 number(18,4) :=0;
   v_max_seq_det           number :=0;
   DAT_INICIO_BENEFICIO    date;
   v_dat_ini_p13           date;
   v_qtddias_13prop        number := 0;
   FATORP13                number(18, 4) := 0;
   v_seq_detalhe           number :=0;
   v_cod_variavel          varchar2(20);
   v_soma_valantecip13     number(18, 4) := 0;
   v_flag_natureza         char(1);
   v_desc_prev             number(18, 4) := 0;
   v_valor_incapacidade    number(18, 4) := 0;
   v_cargo                 tb_concessao_beneficio.cod_cargo%type;
   v_entidade              tb_concessao_beneficio.cod_entidade%type;
   v_matricula             tb_concessao_beneficio.num_matricula%type;
   v_perc_prev             number(10, 4) := 0;
   vi_rubrica_prev         tb_det_calculado_ESTRUC.cod_fcrubrica%type;
   V_VAL_RUBRICA_PREV      tb_det_calculado_ESTRUC.val_rubrica%type;
   V_VAL_RUBRICA_PREV_C    tb_det_calculado_ESTRUC.val_rubrica%type;
   V_VAL_RUBRICA_PREV_D    tb_det_calculado_ESTRUC.val_rubrica%type;
   o_str                   char(1);
   vi_val_rubrica          tb_det_calculado_ESTRUC.val_rubrica%type;
   --v_desc_prev             tb_det_calculado.val_rubrica%type;
   V_NOVO_BENEF            boolean := false;

  BEGIN

  PAR_COD_INS := i_cod_ins;
  PAR_PER_PRO := i_per_pro;
  PAR_TIP_PRO := i_tip_pro;

  -- IDENTIFICA O GRUPO DE PAGAMENTO
   select cod_proc_grp_pago into v_cod_proc_grp_pag
         from tb_grupo_pagamento where num_grp_pag= i_num_grp;

  -- Identifica o valor de Descinto do calculo de previdencia
   SP_OBTEM_PARVAL_FOLHA2('TASCO', 2000, 'DESC_CONTR', v_desc_prev);
   SP_OBTEM_PARVAL_FOLHA2('TASCO', 2000, 'PERC_CONTR', v_perc_prev); --  0,11


  -------------------------------- FOLHA NORMAL OU SUPLEMENTAR
  IF PAR_TIP_PRO = 'N' OR PAR_TIP_PRO = 'S' THEN
     -- SELECIONA O GRUPO DE BENEFICIARIOS A ATUALIZAR
     -- LACO LENDO E CALCULANDO PARA CADA UM A ANTECIPAC?O
     FOR zsel IN (SELECT DISTINCT D.COD_IDE_CLI, D.COD_BENEFICIO
                    FROM TB_DET_CALCULADO D, TB_PESSOA_FISICA P,
                         TB_BENEFICIARIO B , TB_CONTROLE_PROCESSAMENTO CP
                   WHERE D.COD_INS = i_cod_ins
                     AND D.TIP_PROCESSO = i_tip_pro
                     AND D.PER_PROCESSO = i_per_pro
                     AND D.COD_IDE_CLI=P.COD_IDE_CLI
                     and B.Cod_Proc_Grp_Pag = v_cod_proc_grp_pag
                     and p.num_cpf = nvl(i_num_cpf, p.num_cpf )
                     and B.cod_beneficio=d.cod_beneficio and b.cod_ide_cli_ben=d.cod_ide_cli
                     AND to_number(to_char(P.DAT_NASC,'MM'))=to_number(to_char( i_per_pro,'MM'))+1
                     AND cp.seq_processamento=i_num_seq_proc
                     AND p.num_cpf>=cp.num_cpf_inicial and p.num_cpf<cp.num_cpf_final
                     ) loop

        conta:=conta+1;
     -- CARREGA VALOR NA VAR cod_benef com o codigo de beneficio atual
        cod_benef := zsel.cod_beneficio;

     -- PEGA COD_ENTIDADE E TIPO_BENEFICIO deste IDE_CLI
        select cb.cod_tipo_beneficio,cb.cod_entidade, cb.cod_cargo,cb.num_matricula
               into v_tipo_beneficio, v_cod_entidade, v_cargo, v_matricula
               from tb_concessao_beneficio cb
               where cb.cod_beneficio=cod_benef;

     -- (VERIFICAR SE JA RECEBEU ANTECIPAC?O ESTE ANO)
     -- IDENTIFICA VALOR DE COM_TIP_BENEFICIO PARA CADA UM LIDO NO LACO
        SP_OBTEM_TIPO_BENEFICIO(cod_benef);
     -- IDENTIFICA A RUBRICA A UTILIZAR (PENS?O OU APOSENTADO)
        IF COM_TIP_BENEFICIO = 'APOSENTADO' THEN
                          SP_OBTEM_RUBRICA_EVENTO_ESPEC('G',
                                                v_cod_entidade,
                                                'C',
                                                v_rubantecip13,
                                                vi_seq_vig);
                          v_cod_variavel:='BASE_COMP';
        ELSE
                          SP_OBTEM_RUBRICA_EVENTO_ESPEC('D',
                                                v_cod_entidade,
                                                'C',
                                                v_rubantecip13,
                                                vi_seq_vig);
                          IF v_cod_entidade <> 5 THEN
                             v_cod_variavel:='BASE_DEC13_PENCIV';
                          ELSE
                             v_cod_variavel:='BASE_DEC13_PENMIL';
                          END IF;
        END IF;


     -- IDENTIFICA SEQUENCIA
     BEGIN
        v_seq_detalhe := 0 ;
        SELECT d.seq_detalhe
            INTO v_seq_detalhe
            FROM TB_DET_CALCULADO d
            where            D.cod_fcrubrica=v_rubantecip13
                         AND D.COD_INS = i_cod_ins
                         AND D.TIP_PROCESSO = i_tip_pro
                         AND D.PER_PROCESSO = i_per_pro
                         AND D.COD_IDE_CLI=zsel.cod_ide_cli and D.cod_beneficio=zsel.cod_beneficio;

      -- APAGA RUBRICAS DE 13o NA TB_DET_CALCULADO
        DELETE tb_det_calculado d where d.cod_fcrubrica=v_rubantecip13
                         AND D.COD_INS = i_cod_ins
                         AND D.TIP_PROCESSO = i_tip_pro
                         AND D.PER_PROCESSO = i_per_pro
                         AND D.FLG_NATUREZA = 'C'
                         AND D.COD_IDE_CLI=zsel.cod_ide_cli and D.cod_beneficio=zsel.cod_beneficio;
        commit;
        EXCEPTION
            WHEN OTHERS THEN
            p_sub_proc_erro := 'SP_ATUALIZA_DECIMOTERC';
            p_coderro       := SQLCODE;
            P_MSGERRO       := 'Aviso N?o localizada rubrica antecip.13o';
            INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                p_coderro,
                                'Calcula Folha Pos',
                                sysdate,
                                p_msgerro,
                                p_sub_proc_erro,
                                zsel.cod_ide_cli,
                                null);
            commit;
            VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
            v_seq_detalhe :=0;
            SELECT max(d.seq_detalhe)
              INTO v_seq_detalhe
              FROM TB_DET_CALCULADO d
              where          D.COD_INS = i_cod_ins
                         AND D.TIP_PROCESSO = i_tip_pro
                         AND D.PER_PROCESSO = i_per_pro
                         AND D.COD_IDE_CLI=zsel.cod_ide_cli
                         AND D.cod_beneficio=zsel.cod_beneficio;
        END;

     -- SOMA RUBRICAS PAGAS - DEFINE VALOR A PAGAR
        SELECT DISTINCT sum(VAL_RUBRICA)
                        INTO V_VAL_RUBRICA_C
                        FROM TB_DET_CALCULADO D
                       WHERE D.COD_INS = i_cod_ins
                         AND D.TIP_PROCESSO = i_tip_pro
                         AND D.PER_PROCESSO = i_per_pro
                         AND D.FLG_NATUREZA = 'C'
                         AND D.COD_IDE_CLI=zsel.cod_ide_cli and D.cod_beneficio=zsel.cod_beneficio
                         AND exists(select * from tb_compoe_det cd
                                     where cd.cod_fcrubrica_composta=v_rubantecip13
                                       and cd.cod_fcrubrica_compoe=d.cod_fcrubrica
                                       and cd.cod_variavel = v_cod_variavel
                                       and cd.cod_entidade_composta=v_cod_entidade);

        SELECT DISTINCT sum(VAL_RUBRICA)
                        INTO V_VAL_RUBRICA_D
                        FROM TB_DET_CALCULADO D
                       WHERE D.COD_INS = i_cod_ins
                         AND D.TIP_PROCESSO = i_tip_pro
                         AND D.PER_PROCESSO = i_per_pro
                         AND D.FLG_NATUREZA = 'D'
                         AND D.COD_IDE_CLI=zsel.cod_ide_cli and D.cod_beneficio=zsel.cod_beneficio
                         AND exists(select * from tb_compoe_det cd
                                     where cd.cod_fcrubrica_composta=v_rubantecip13
                                       and cd.cod_fcrubrica_compoe=d.cod_fcrubrica
                                       and cd.cod_variavel = v_cod_variavel
                                       and cd.cod_entidade_composta=v_cod_entidade);

      --Calcula Proporcionalidade inicial do adiantamento de 13o -ROD12 em:050809
        select cb.dat_ini_ben
          into v_dat_ini_p13
          from tb_beneficiario cb
         where cod_beneficio = zsel.cod_beneficio and cb.cod_ins=PAR_COD_INS
               AND CB.COD_IDE_CLI_BEN=zsel.cod_ide_cli;


        /*     -- comentado por JTS 14-05-2010
            if (v_dat_ini_p13 >= to_date('01/01/'||to_char( PAR_PER_PRO,'YYYY'),'dd/mm/yyyy')) then
                select par_per_pro - v_dat_ini_p13
                  into v_qtddias_13prop
                  from dual;
                FATORP13 := v_qtddias_13prop / (30 * 12);
              else
                FATORP13 := 0.5;
              end if;
        */
         ----- Codigo Novo JTS 24-05-2010 ---
          FATORP13 :=1;
          IF v_dat_ini_p13 <= TO_DATE('01/01/2009','DD/MM/YYYY') THEN
              FATORP13 :=1;
           ELSE
              IF to_char(v_dat_ini_p13,'dd') > 15   THEN
                 FATORP13 :=  (12 - to_char(v_dat_ini_p13,'mm') ) /12  ;

               ELSE
                       FATORP13 :=  (12 - (to_char(v_dat_ini_p13 ,'mm')-1) ) /12 ;


              END IF;
           END IF;


        V_VAL_RUBRICA := ((nvl(V_VAL_RUBRICA_C,0) - nvl(V_VAL_RUBRICA_D,0)) * FATORP13)/2 ;

        SELECT DISTINCT max(SEQ_DETALHE)
                        INTO V_MAX_SEQ_DET
                        FROM TB_DET_CALCULADO D
                       WHERE D.COD_INS = i_cod_ins
                         AND D.TIP_PROCESSO = i_tip_pro
                         AND D.PER_PROCESSO = i_per_pro
                         AND D.COD_IDE_CLI=zsel.cod_ide_cli
                         AND D.cod_beneficio=zsel.cod_beneficio;
         IF nvl(V_seq_detalhe,0) <> 0 THEN
            V_MAX_SEQ_DET := V_seq_detalhe;
         ELSE
            V_MAX_SEQ_DET := V_MAX_SEQ_DET + 1;
         END IF;

       IF V_VAL_RUBRICA > 0  THEN

       -- (GRAVA NOVA RUBRICA NA TB_DET_CALCULADO)
        BEGIN
            INSERT /*+ append */
                  INTO TB_DET_CALCULADO ---> FFRANCO 03/2007
                  VALUES
                    (PAR_cod_ins,
                     PAR_TIP_PRO,
                     PAR_PER_PRO,
                     zsel.cod_ide_cli,
                     zsel.cod_beneficio,
                     i_seq_pag,
                     v_rubantecip13,
                     1,
                     trunc(V_VAL_RUBRICA, 2),
                     1,
                     'C',
                     0,
                     PAR_PER_PRO,
                     null,
                     null, --rdcn.cod_ide_cli_ben
                     null,
                     sysdate,
                     sysdate,
                     'FOLHA',
                     'FOLHA_POS',
                     nvl(V_MAX_SEQ_DET,0),
                     null,
                     null,
                     trunc(V_VAL_RUBRICA, 2),
                     0,
                     0,
                     0,
                     0,
                     null, -- IR_ACUMULADO
    ----- Pasagem de Task 37101 Contribuição previdencia ...
                      null,
                     null

                     );
                     commit;
        EXCEPTION
            WHEN OTHERS THEN
            p_sub_proc_erro := 'SP_ATUALIZA_DECIMOTERC';
            p_coderro       := SQLCODE;
            P_MSGERRO       := 'Erro ao incluir o decimo terceiro';
            INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                p_coderro,
                                'Calcula Folha Pos',
                                sysdate,
                                p_msgerro,
                                p_sub_proc_erro,
                                zsel.cod_ide_cli,
                                null);
            VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
            commit;
        END;

        -----------------------------------------------------------------------
        --GERA PREVIDENCIA DA ANTECIPAC?O DO 13o SE APOSENTADO
         BEGIN
          IF COM_TIP_BENEFICIO = 'APOSENTADO' THEN

            SP_OBTEM_RUBRICA_EVENTO_ESPEC('O',
                                         v_cod_entidade,
                                         '',
                                         vi_rubrica_prev,
                                         vi_seq_vig);

            -- SOMA RUBRICAS - DEFINE VALOR A DEDUZIR
            SELECT DISTINCT sum(VAL_RUBRICA)
                        INTO V_VAL_RUBRICA_PREV_C
                        FROM TB_DET_CALCULADO D
                       WHERE D.COD_INS = i_cod_ins
                         AND D.TIP_PROCESSO = i_tip_pro
                         AND D.PER_PROCESSO = i_per_pro
                         AND D.FLG_NATUREZA = 'C'
                         AND D.COD_IDE_CLI=zsel.cod_ide_cli and D.cod_beneficio=zsel.cod_beneficio
                         AND exists(select * from tb_compoe_det cd
                                     where cd.cod_fcrubrica_composta=v_rubantecip13
                                       and cd.cod_fcrubrica_compoe=d.cod_fcrubrica
                                       and cd.cod_variavel = v_cod_variavel
                                       and cd.cod_entidade_composta=v_cod_entidade)
                         AND exists(select * from tb_compoe_det cd
                                     where cd.cod_fcrubrica_composta=7005600
                                       and cd.cod_fcrubrica_compoe=d.cod_fcrubrica
                                       and cd.cod_variavel = 'BASE_PREV'
                                       and cd.cod_entidade_composta=v_cod_entidade);

            SELECT DISTINCT sum(VAL_RUBRICA)
                        INTO V_VAL_RUBRICA_PREV_D
                        FROM TB_DET_CALCULADO D
                       WHERE D.COD_INS = i_cod_ins
                         AND D.TIP_PROCESSO = i_tip_pro
                         AND D.PER_PROCESSO = i_per_pro
                         AND D.FLG_NATUREZA = 'D'
                         AND D.COD_IDE_CLI=zsel.cod_ide_cli and D.cod_beneficio=zsel.cod_beneficio
                         AND exists(select * from tb_compoe_det cd
                                     where cd.cod_fcrubrica_composta=v_rubantecip13
                                       and cd.cod_fcrubrica_compoe=d.cod_fcrubrica
                                       and cd.cod_variavel = v_cod_variavel
                                       and cd.cod_entidade_composta=v_cod_entidade)
                         AND exists(select * from tb_compoe_det cd
                                     where cd.cod_fcrubrica_composta=7005600
                                       and cd.cod_fcrubrica_compoe=d.cod_fcrubrica
                                       and cd.cod_variavel = 'BASE_PREV'
                                       and cd.cod_entidade_composta=v_cod_entidade);

            V_VAL_RUBRICA_PREV := (nvl(V_VAL_RUBRICA_PREV_C,0) - nvl(V_VAL_RUBRICA_PREV_D,0)) * FATORP13;

            --Verifica se possui Atributo de Incapacidade
            SP_OBTEM_TIPOS_ATRIBUTOS_prev(37,
                                        v_matricula,
                                        v_entidade,
                                        v_cargo,
                                        o_str);
            if o_str = 'S' then
               SP_OBTEM_PARVAL_FOLHA2('TASCO',
                                   2000,
                                   'DESC_CONTR',
                                   v_valor_incapacidade); --$3218,90
               if v_valor_incapacidade is null then
                  v_valor_incapacidade := 0;
               end if;
            else
               v_valor_incapacidade := 0;
            end if;
            ----------------------------------------------
            v_val_rubrica := (V_VAL_RUBRICA_PREV  - (v_DESC_PREV + v_VALOR_INCAPACIDADE )) * v_perc_prev;

            --vi_val_rubrica := (((valor_prev_tot * i_perc / 100) -
            --                   ((DESC_PREV + VALOR_INCAPACIDADE ) )))
            --                     * perc_prev * VI_FATOR_MES * VI_PERCENTUAL_RATEIO  ;
            --             valor_prev_calc := valor_prev_calc + vi_val_rubrica;
            --             v_base_prev(cod_benef)(1) := ((valor_prev_tot) * i_perc / 100);

            --valor_prev_calc := valor_prev_calc + vi_val_rubrica;
            --v_base_prev(cod_benef)(1) := ((valor_prev_tot) * i_perc / 100);

            IF v_val_rubrica >= 0 THEN
               SELECT DISTINCT max(SEQ_DETALHE)
                 INTO V_MAX_SEQ_DET
                 FROM TB_DET_CALCULADO D
                WHERE D.COD_INS = i_cod_ins
                  AND D.TIP_PROCESSO = i_tip_pro
                  AND D.PER_PROCESSO = i_per_pro
                  AND D.COD_IDE_CLI=zsel.cod_ide_cli
                  AND D.cod_beneficio=zsel.cod_beneficio;
                IF nvl(V_seq_detalhe,0) <> 0 THEN
                   V_MAX_SEQ_DET := V_seq_detalhe + 1;
                ELSE
                   V_MAX_SEQ_DET := V_MAX_SEQ_DET + 1;
                END IF;

                INSERT /*+ append */
                  INTO TB_DET_CALCULADO
                  VALUES
                    (PAR_cod_ins,
                     PAR_TIP_PRO,
                     PAR_PER_PRO,
                     zsel.cod_ide_cli,
                     zsel.cod_beneficio,
                     i_seq_pag,
                     vi_rubrica_prev,
                     1,
                     trunc(V_VAL_RUBRICA, 2),
                     1,
                     'D',
                     0,
                     PAR_PER_PRO,
                     null,
                     null,
                     null,
                     sysdate,
                     sysdate,
                     'FOLHA',
                     'FOLHA_POS',
                     nvl(V_MAX_SEQ_DET,0),
                     null,
                     null,
                     trunc(V_VAL_RUBRICA,2),
                     0,
                     0,
                     0,
                     0,
                     null, -- IR_ACUMULADO
      ----- Pasagem de Task 37101 Contribuição previdencia ...

                     null,
                     null

                     );
                     commit;

            END IF;
          END IF;

          EXCEPTION
            WHEN OTHERS THEN
            p_sub_proc_erro := 'SP_ATUALIZA_DECIMOTERC';
            p_coderro       := SQLCODE;
            P_MSGERRO       := 'Erro ao criar Prev.Antecip 13o';
            INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                p_coderro,
                                'Calcula Folha Pos',
                                sysdate,
                                p_msgerro,
                                p_sub_proc_erro,
                                zsel.cod_ide_cli,
                                null);
            VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
            commit;
          END;

       END IF;

     END LOOP;
   ELSE
   ------------------------------- SE RETROATIVO -------------------------------
     IF PAR_TIP_PRO = 'R' THEN
     -- SELECIONA O GRUPO DE BENEFICIARIOS A ATUALIZAR
     -- LACO LENDO E CALCULANDO PARA CADA UM A ANTECIPAC?O
     FOR zsel IN (SELECT DISTINCT D.COD_IDE_CLI, D.COD_BENEFICIO
                        FROM TB_RESULTADO_CALC_RET D, TB_PESSOA_FISICA P,TB_BENEFICIARIO B ,TB_CONTROLE_PROCESSAMENTO CP
                       WHERE D.COD_INS = i_cod_ins
                         AND D.TIP_PROCESSO = i_tip_pro
                         AND D.PER_PROCESSO = PAR_PER_REAL
                         AND D.DAT_INI_REF  = PAR_PER_PRO
                         AND D.COD_IDE_CLI=P.COD_IDE_CLI
                         and B.Cod_Proc_Grp_Pag = v_cod_proc_grp_pag
                         and p.num_cpf = nvl(i_num_cpf, p.num_cpf )
                         and B.cod_beneficio=d.cod_beneficio and b.cod_ide_cli_ben=d.cod_ide_cli
                         AND to_number(to_char(P.DAT_NASC,'MM'))=to_number(to_char( i_per_pro,'MM'))+1
                         AND cp.seq_processamento=i_num_seq_proc
                         AND p.num_cpf>=cp.num_cpf_inicial and p.num_cpf<cp.num_cpf_final
                         ) loop

             conta:=conta+1;
     -- CARREGA VALOR NA VAR cod_benef com o codigo de beneficio atual
             cod_benef := zsel.cod_beneficio;

     -- PEGA COD_ENTIDADE E TIPO_BENEFICIO deste IDE_CLI
             select cb.cod_tipo_beneficio,cb.cod_entidade
                      into v_tipo_beneficio, v_cod_entidade
                      from tb_concessao_beneficio cb
                      where cb.cod_beneficio=cod_benef;

     -- (VERIFICAR SE JA RECEBEU ANTECIPAC?O ESTE ANO)
     -- IDENTIFICA VALOR DE COM_TIP_BENEFICIO PARA CADA UM LIDO NO LACO
        SP_OBTEM_TIPO_BENEFICIO(cod_benef);
     -- IDENTIFICA A RUBRICA A UTILIZAR (PENS?O OU APOSENTADO)
        IF COM_TIP_BENEFICIO = 'APOSENTADO' THEN
                          SP_OBTEM_RUBRICA_EVENTO_ESPEC('G',
                                                v_cod_entidade,
                                                'C',
                                                v_rubantecip13,
                                                vi_seq_vig);
                          v_cod_variavel:='BASE_DEC13_APOCIV';
        ELSE
                          SP_OBTEM_RUBRICA_EVENTO_ESPEC('D',
                                                v_cod_entidade,
                                                'C',
                                                v_rubantecip13,
                                                vi_seq_vig);
                          IF v_cod_entidade <> 5 THEN
                             v_cod_variavel:='BASE_DEC13_PENCIV';
                          ELSE
                             v_cod_variavel:='BASE_DEC13_PENMIL';
                          END IF;
        END IF;

     -- IDENTIFICA SEQUENCIA
     BEGIN
        v_seq_detalhe := 0 ;
        SELECT d.seq_detalhe
            INTO v_seq_detalhe
            FROM TB_RESULTADO_CALC_RET d
            where            d.cod_fcrubrica=v_rubantecip13
                         AND D.COD_INS = i_cod_ins
                         AND D.TIP_PROCESSO = i_tip_pro
                         AND D.PER_PROCESSO = PAR_PER_REAL
                         AND D.DAT_INI_REF = PAR_PER_PRO
                         AND D.COD_IDE_CLI=zsel.cod_ide_cli and D.cod_beneficio=zsel.cod_beneficio;

      -- APAGA RUBRICAS DE 13o NA TB_RESULTADO_CALC_RET e na TB_VALOR_NPAGO_RET
        DELETE tb_resultado_calc_ret d where d.cod_fcrubrica=v_rubantecip13
                         AND D.COD_INS = i_cod_ins
                         AND D.TIP_PROCESSO = i_tip_pro
                         AND D.PER_PROCESSO = PAR_PER_REAL
                         AND D.DAT_INI_REF = PAR_PER_PRO
                         AND D.FLG_NATUREZA = 'C'
                         AND D.COD_IDE_CLI=zsel.cod_ide_cli and D.cod_beneficio=zsel.cod_beneficio;
        DELETE tb_valor_npago_ret d where d.cod_fcrubrica=v_rubantecip13
                         AND D.COD_INS = i_cod_ins
                         AND D.TIP_PROCESSO = i_tip_pro
                         AND D.PER_PROCESSO = PAR_PER_REAL
                         AND D.DAT_INI_REF = PAR_PER_PRO
                         AND D.FLG_NATUREZA = 'C'
                         AND D.COD_IDE_CLI=zsel.cod_ide_cli and D.cod_beneficio=zsel.cod_beneficio;
        COMMIT;
        EXCEPTION
            WHEN OTHERS THEN
            p_sub_proc_erro := 'SP_ATUALIZA_DECIMOTERC';
            p_coderro       := SQLCODE;
            P_MSGERRO       := 'Aviso N?o localizada rubrica antecip.13o';
            INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                p_coderro,
                                'Calcula Folha Pos',
                                sysdate,
                                p_msgerro,
                                p_sub_proc_erro,
                                zsel.cod_ide_cli,
                                null);
            VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
            v_seq_detalhe :=0;
            SELECT max(d.seq_detalhe)
              INTO v_seq_detalhe
              FROM TB_RESULTADO_CALC_RET d
              where          D.COD_INS = i_cod_ins
                         AND D.TIP_PROCESSO = i_tip_pro
                         AND D.PER_PROCESSO = PAR_PER_REAL
                         AND D.COD_IDE_CLI=zsel.cod_ide_cli
                         AND D.cod_beneficio=zsel.cod_beneficio;
        END;

     -- SOMA RUBRICAS PAGAS - DEFINE VALOR A PAGAR
        SELECT DISTINCT sum(VAL_RUBRICA)
                        INTO V_VAL_RUBRICA_C
                        FROM TB_RESULTADO_CALC_RET D
                       WHERE D.COD_INS = i_cod_ins
                         AND D.TIP_PROCESSO = i_tip_pro
                         AND D.PER_PROCESSO = PAR_PER_REAL
                         AND D.DAT_INI_REF = PAR_PER_PRO
                         AND D.FLG_NATUREZA = 'C'
                         AND D.COD_IDE_CLI=zsel.cod_ide_cli and D.cod_beneficio=zsel.cod_beneficio
                         AND exists(select * from tb_compoe_det cd
                                     where cd.cod_fcrubrica_composta=v_rubantecip13
                                       and cd.cod_fcrubrica_compoe=d.cod_fcrubrica
                                       and cd.cod_variavel = v_cod_variavel
                                       and cd.cod_entidade_composta=v_cod_entidade);
        SELECT DISTINCT sum(VAL_RUBRICA)
                        INTO V_VAL_RUBRICA_D
                        FROM TB_RESULTADO_CALC_RET D
                       WHERE D.COD_INS = i_cod_ins
                         AND D.TIP_PROCESSO = i_tip_pro
                         AND D.PER_PROCESSO = PAR_PER_REAL
                         AND D.DAT_INI_REF = PAR_PER_PRO
                         AND D.FLG_NATUREZA = 'D'
                         AND D.COD_IDE_CLI=zsel.cod_ide_cli and D.cod_beneficio=zsel.cod_beneficio
                         AND exists(select * from tb_compoe_det cd
                                     where cd.cod_fcrubrica_composta=v_rubantecip13
                                       and cd.cod_fcrubrica_compoe=d.cod_fcrubrica
                                       and cd.cod_variavel = v_cod_variavel
                                       and cd.cod_entidade_composta=v_cod_entidade);

     --Calcula Proporcionalidade inicial do adiantamento de 13o -ROD12 em:050809
        select cb.dat_concessao
          into v_dat_ini_p13
          from tb_concessao_beneficio cb
         where cod_beneficio = zsel.cod_beneficio and cb.cod_ins=PAR_COD_INS;
        if (v_dat_ini_p13 >= to_date('01/01/'||to_char( PAR_PER_PRO,'YYYY'),'dd/mm/yyyy')) then
          select par_per_pro - v_dat_ini_p13
            into v_qtddias_13prop
            from dual;
          FATORP13 := v_qtddias_13prop / (30 * 12);
        else
          FATORP13 := 0.5;
        end if;

        V_VAL_RUBRICA := (nvl(V_VAL_RUBRICA_C,0) - nvl(V_VAL_RUBRICA_D,0)) * FATORP13 ;

        SELECT DISTINCT max(SEQ_DETALHE)
                        INTO V_MAX_SEQ_DET
                        FROM TB_RESULTADO_CALC_RET D
                       WHERE D.COD_INS = i_cod_ins
                         AND D.TIP_PROCESSO = i_tip_pro
                         AND D.PER_PROCESSO = PAR_PER_REAL
                         AND D.COD_IDE_CLI=zsel.cod_ide_cli
                         AND D.cod_beneficio=zsel.cod_beneficio;
         IF nvl(V_seq_detalhe,0) <> 0 THEN
            V_MAX_SEQ_DET := V_seq_detalhe + 1;
         ELSE
            V_MAX_SEQ_DET := V_MAX_SEQ_DET + 1;
         END IF;

       --VERIFICA SE E O PRIMEIRO RECEBIMENTO SE SIM N?O GERA ADIANTAMENTO
    --   BEGIN
    --      select * from tb_folha f
    --       where f.cod_beneficio = zsel.cod_beneficio
    --         and f.cod_ide_cli   = zsel.cod_ide_cli
    --         and f.num_conta is not null
    --         and f.num_banco is not null;


    --   EXCEPTION
    --        WHEN OTHERS THEN

    --   END

       -- controle temporario para n?o gerar antecipac?o para novos .. continuar
       IF   v_cod_proc_grp_pag in ('05','07') THEN
          V_NOVO_BENEF := TRUE;
       ELSE
          V_NOVO_BENEF := FALSE;
       END IF;

       IF V_VAL_RUBRICA > 0  THEN
       -- (GRAVA NOVA RUBRICA NA TB_DET_CALCULADO)
        BEGIN

          IF V_NOVO_BENEF THEN
            INSERT /*+ append */
                  INTO TB_RESULTADO_CALC_RET ---> FFRANCO 03/2007
                  VALUES
                    (PAR_cod_ins,
                     PAR_TIP_PRO,
                     PAR_PER_REAL,
                     zsel.cod_ide_cli,
                     zsel.cod_beneficio,
                     i_seq_pag,
                     v_rubantecip13,
                     1,
                     trunc(V_VAL_RUBRICA, 2),
                     1,
                     'C',
                     0,
                     PAR_PER_PRO,
                     null,
                     null, --rdcn.cod_ide_cli_ben
                     null,
                     sysdate,
                     sysdate,
                     'FOLHA',
                     'FOLHA_POS',
                     nvl(V_MAX_SEQ_DET,0),
                     null,
                     null,
                     0,
                     0,
                     0,
                     trunc(V_VAL_RUBRICA, 2)
                     );
                     commit;
          END IF;
        EXCEPTION
            WHEN OTHERS THEN
            p_sub_proc_erro := 'SP_ATUALIZA_DECIMOTERC';
            p_coderro       := SQLCODE;
            P_MSGERRO       := 'Erro ao incluir o decimo terceiro';
            INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                p_coderro,
                                'Calcula Folha Pos',
                                sysdate,
                                p_msgerro,
                                p_sub_proc_erro,
                                zsel.cod_ide_cli,
                                null);
            VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
        END;

        --Atualiza diferenca
     BEGIN
        v_seq_detalhe := 0 ;
        SELECT d.seq_detalhe
            INTO v_seq_detalhe
            FROM TB_VALOR_NPAGO_RET d
            where            D.cod_fcrubrica=v_rubantecip13
                         AND D.COD_INS = i_cod_ins
                         AND D.TIP_PROCESSO = i_tip_pro
                         AND D.PER_PROCESSO = PAR_PER_REAL
                         AND D.DAT_INI_REF = PAR_PER_PRO
                         AND D.COD_IDE_CLI=zsel.cod_ide_cli
                         AND D.cod_beneficio=zsel.cod_beneficio;

      -- APAGA RUBRICAS DE 13o NA TB_RESULTADO_CALC_RET e na TB_VALOR_NPAGO_RET
        DELETE tb_valor_npago_ret d
                       WHERE trunc(d.cod_fcrubrica/100)=trunc(v_rubantecip13/100)
                         AND D.COD_INS = i_cod_ins
                         AND D.TIP_PROCESSO = i_tip_pro
                         AND D.PER_PROCESSO = PAR_PER_REAL
                         AND D.DAT_INI_REF = PAR_PER_PRO
                         AND D.COD_IDE_CLI=zsel.cod_ide_cli
                         AND D.cod_beneficio=zsel.cod_beneficio;
        COMMIT;
        EXCEPTION
            WHEN OTHERS THEN
            p_sub_proc_erro := 'SP_ATUALIZA_DECIMOTERC';
            p_coderro       := SQLCODE;
            P_MSGERRO       := 'Aviso N?o localizada rubrica antecip.13o';
            INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                p_coderro,
                                'Calcula Folha Pos',
                                sysdate,
                                p_msgerro,
                                p_sub_proc_erro,
                                zsel.cod_ide_cli,
                                null);
            VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
            v_seq_detalhe :=0;
            SELECT max(d.seq_detalhe)
              INTO v_seq_detalhe
              FROM TB_VALOR_NPAGO_RET d
              where          D.COD_INS = i_cod_ins
                         AND D.TIP_PROCESSO = i_tip_pro
                         AND D.PER_PROCESSO = PAR_PER_REAL
                         AND D.COD_IDE_CLI=zsel.cod_ide_cli
                         AND D.cod_beneficio=zsel.cod_beneficio;
             DELETE tb_valor_npago_ret d
                       WHERE trunc(d.cod_fcrubrica/100)=trunc(v_rubantecip13/100)
                         AND D.COD_INS = i_cod_ins
                         AND D.TIP_PROCESSO = i_tip_pro
                         AND D.PER_PROCESSO = PAR_PER_REAL
                         AND D.DAT_INI_REF = PAR_PER_PRO
                         AND D.COD_IDE_CLI=zsel.cod_ide_cli
                         AND D.cod_beneficio=zsel.cod_beneficio;
             COMMIT;


        END;

        -- IDENTIFICA VALOR PAGO ORIGINAL
        SELECT sum(dd.val_rubrica)
          INTO v_soma_valantecip13
          FROM TB_DET_CALCULADO DD
          WHERE dd.cod_ins = PAR_COD_INS
            AND dd.tip_processo = 'N'
            AND dd.dat_ini_ref = PAR_PER_PRO
            AND dd.cod_fcrubrica = v_rubantecip13
            AND dd.COD_IDE_CLI=zsel.cod_ide_cli
            AND dd.cod_beneficio=zsel.cod_beneficio;

        V_VAL_RUBRICA := nvl(V_VAL_RUBRICA,0) - v_soma_valantecip13 ;
        IF V_VAL_RUBRICA < 0 THEN
           v_rubantecip13 := trunc(v_rubantecip13/100) || '50';
           V_VAL_RUBRICA := abs(V_VAL_RUBRICA);
           v_flag_natureza := 'D';
        ELSE
           v_rubantecip13 := trunc(v_rubantecip13/100) || '51';
           v_flag_natureza := 'C';
        END IF;

        SELECT DISTINCT max(SEQ_DETALHE)
                        INTO V_MAX_SEQ_DET
                        FROM TB_VALOR_NPAGO_RET D
                       WHERE D.COD_INS = i_cod_ins
                         AND D.TIP_PROCESSO = i_tip_pro
                         AND D.PER_PROCESSO = PAR_PER_REAL
                         AND D.COD_IDE_CLI=zsel.cod_ide_cli
                         AND D.cod_beneficio=zsel.cod_beneficio;
         IF nvl(V_seq_detalhe,0) <> 0 THEN
            V_MAX_SEQ_DET := V_seq_detalhe + 1;
         ELSE
            V_MAX_SEQ_DET := V_MAX_SEQ_DET + 1;
         END IF;

         IF V_VAL_RUBRICA > 0 AND NOT V_NOVO_BENEF THEN
            BEGIN
                INSERT /*+ append */
                      INTO TB_VALOR_NPAGO_RET
                      VALUES
                        (PAR_cod_ins,
                         PAR_TIP_PRO,
                         PAR_PER_REAL,
                         zsel.cod_ide_cli,
                         zsel.cod_beneficio,
                         i_seq_pag,
                         v_rubantecip13,
                         1,
                         trunc(V_VAL_RUBRICA, 2),
                         1,
                         v_flag_natureza,
                         0,
                         PAR_PER_PRO,
                         null,
                         null, --rdcn.cod_ide_cli_ben
                         null,
                         sysdate,
                         sysdate,
                         'FOLHA',
                         'FOLHA_POS',
                         nvl(V_MAX_SEQ_DET,0),
                         null,
                         'Ret.',
                         'S',
                         'S',
                         trunc(V_VAL_RUBRICA, 2)
                         );
                         commit;
            EXCEPTION
                WHEN OTHERS THEN
                p_sub_proc_erro := 'SP_ATUALIZA_DECIMOTERC';
                p_coderro       := SQLCODE;
                P_MSGERRO       := 'Erro ao incluir o 13o RETROAT';
                INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                    p_coderro,
                                    'Calcula Folha Pos',
                                    sysdate,
                                    p_msgerro,
                                    p_sub_proc_erro,
                                    zsel.cod_ide_cli,
                                    null);
                VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
                commit;
            END;
         END IF;

       END IF;
     END LOOP;
    END IF;
   END IF;

  END SP_ATUALIZA_DECIMOTERC;
  --------------------------------------------------------------------------------------
  PROCEDURE SP_ATUALIZA_PENSAOALIMENTICIA(
                                   i_cod_ins                in number,
                                   i_per_pro                in date, -- Periodo a processar
                                   i_cod_usu                in varchar2,
                                   i_tip_pro                in varchar2, -- TIPO DE PROCESSO: N (normal), S (Suplementar), T (13 Salario)
                                   i_par_per_real           in date,
                                   i_des_tipos_benef        in varchar2,
                                   i_cod_tipo_ben           in varchar2,
                                   i_num_processo           in number, --ROD6 :: Indica o grupo a ser processado
                                   i_num_grp                in number, --ROD7 :: numero do grupo de pagamento a processar
                                   i_seq_pag                in number,
                                   i_num_cpf                in varchar2,
                                   i_num_seq_proc           in number,
                                   i_flg_retorno            out varchar2) AS
      --DECLARAC?O DE VARIAVEIS
      v_nom_serv              TB_PESSOA_FISICA.NOM_PESSOA_FISICA%TYPE;
      v_cod_ide_serv          TB_PESSOA_FISICA.COD_IDE_CLI%TYPE;
      v_nom_ben               TB_PESSOA_FISICA.NOM_PESSOA_FISICA%TYPE;
      v_cod_ide_ben           TB_PESSOA_FISICA.COD_IDE_CLI%TYPE;
      v_cod_proc_grp_pag      char(2);
      v_rubrica               number := 0 ;
      cod_benef               number := 0;
      vi_seq_vig              number;
      conta                   number := 0;
      v_tipo_beneficio        varchar2(1);
      v_cod_entidade          number(8);
      v_val_rubrica           number(18,4);
      v_val_rubrica_c         number(18,4);
      v_val_rubrica_d         number(18,4);
      v_val_rubrica_AGRUPADA  number(18,4);
      v_conta_ok              number(18) :=0;
      v_conta_nok             number(18) :=0;
      v_soma1                 number(18,4) :=0;
      v_soma2                 number(18,4) :=0;
      v_max_seq_det           number :=0;
      DAT_INICIO_BENEFICIO    date;
      v_dat_ini_p13           date;
      v_qtddias_13prop        number := 0;
      FATORP13                number(18, 4) := 0;
      v_seq_detalhe           number :=0;
      v_cod_variavel          varchar2(20);
      v_soma_valantecip13     number(18, 4) := 0;
      v_flag_natureza         char(1);
      v_rubrica_contraria     number;
      v_val_tot_cred          number(18, 4) := 0;
      v_val_tot_deb           number(18, 4) := 0;
      v_conta_ben             number;
      v_num_cpf               varchar2(11);
      v_num_cpf_serv          varchar2(11);

      BEGIN
      PAR_COD_INS := i_cod_ins;
      PAR_PER_PRO := i_per_pro;
      PAR_TIP_PRO := i_tip_pro;

      -- IDENTIFICA O GRUPO DE PAGAMENTO
       select cod_proc_grp_pago into v_cod_proc_grp_pag
             from tb_grupo_pagamento where num_grp_pag= i_num_grp;

      -------------------------------- FOLHA NORMAL
      IF PAR_TIP_PRO = 'N' THEN
         -- SELECIONA O GRUPO DE BENEFICIARIOS A ATUALIZAR
         -- LACO LENDO E CALCULANDO PARA CADA UM A ANTECIPAC?O

        FOR zsel IN (SELECT DISTINCT D.COD_IDE_CLI, D.COD_BENEFICIO, D.COD_IDE_CLI_BEN
                            FROM TB_DET_CALCULADO D, TB_PESSOA_FISICA P,TB_BENEFICIARIO B, TB_CONTROLE_PROCESSAMENTO CP
                           WHERE D.COD_INS = i_cod_ins
                             AND D.TIP_PROCESSO = i_tip_pro
                             AND D.PER_PROCESSO = i_per_pro
                             AND D.COD_IDE_CLI=P.COD_IDE_CLI
                             and B.Cod_Proc_Grp_Pag = v_cod_proc_grp_pag
                             and p.num_cpf = nvl(i_num_cpf, p.num_cpf )
                             and B.cod_beneficio=d.cod_beneficio and
                             b.cod_ide_cli_ben=d.cod_ide_cli
                             AND trunc(D.cod_fcrubrica/100) = 78001 --trunc(v_rubrica/100)
                             AND cp.seq_processamento=i_num_seq_proc
                             AND p.num_cpf>=cp.num_cpf_inicial and p.num_cpf<cp.num_cpf_final
                             ) loop

                 conta:=conta+1;
         -- CARREGA VALOR NA VAR cod_benef com o codigo de beneficio atual
          cod_benef := zsel.cod_beneficio;

         -- PEGA COD_ENTIDADE E TIPO_BENEFICIO deste IDE_CLI
         select cb.cod_tipo_beneficio,cb.cod_entidade
                into  v_tipo_beneficio, v_cod_entidade
                from  tb_concessao_beneficio cb
                where cb.cod_beneficio=cod_benef;

         -- OBTEM RUBRICA DE PA
         SP_OBTEM_RUBRICA_EVENTO_ESPEC('P',
                                     v_cod_entidade,
                                     'C',
                                     v_rubrica,
                                     vi_seq_vig);


         -- (VERIFICAR SE JA RECEBEU ANTECIPAC?O ESTE ANO)
         -- IDENTIFICA VALOR DE COM_TIP_BENEFICIO PARA CADA UM LIDO NO LACO
          SP_OBTEM_TIPO_BENEFICIO(cod_benef);

          -- LIMPA TABELAS
          DELETE TB_DET_CALCULADO_PA dpa
                   WHERE dpa.cod_ins        = i_cod_ins
                     AND Dpa.TIP_PROCESSO   = i_tip_pro
                     AND Dpa.PER_PROCESSO   = i_per_pro
                     AND Dpa.COD_IDE_CLI    =zsel.COD_IDE_CLI
                     AND DPA.COD_IDE_CLI_BEN=zsel.cod_ide_cli_ben
                     AND Dpa.COD_BENEFICIO  =zsel.cod_beneficio ;
          DELETE TB_FOLHA_PA dpa
                   WHERE dpa.cod_ins        = i_cod_ins
                     AND Dpa.TIP_PROCESSO   = i_tip_pro
                     AND Dpa.PER_PROCESSO   = i_per_pro
                     AND Dpa.COD_IDE_CLI    =zsel.COD_IDE_CLI
                     AND DPA.COD_IDE_CLI_BEN=zsel.cod_ide_cli_ben
                     AND Dpa.COD_BENEFICIO  =zsel.cod_beneficio ;
          COMMIT;

             v_val_tot_cred := 0;
             v_val_tot_deb  := 0;
             v_conta_ben := 0;
             v_conta_ben := v_conta_ben + 1;
             FOR y IN ( SELECT df.cod_fcrubrica,df.val_rubrica,df.val_rubrica_cheio,
                                 df.flg_natureza,df.dat_ini_ref,df.dat_fim_ref,df.cod_ide_cli_ben
                            FROM  TB_DET_CALCULADO Df
                            WHERE Df.COD_INS = i_cod_ins
                                AND Df.TIP_PROCESSO = i_tip_pro
                                AND Df.PER_PROCESSO = i_per_pro
                                AND Df.COD_IDE_CLI=zsel.COD_IDE_CLI
                                AND Df.COD_BENEFICIO=zsel.cod_beneficio
                                AND zsel.COD_IDE_CLI_BEN = df.cod_ide_cli_ben
                                AND trunc(Df.COD_FCRUBRICA/100)= trunc(v_rubrica/100)
                                ) loop

                   SELECT RU.COD_RUBRICA_CONTRARIA
                            INTO v_rubrica_contraria
                            FROM TB_RUBRICAS RU
                            WHERE RU.COD_RUBRICA = y.COD_FCRUBRICA
                              AND RU.Cod_Entidade = v_cod_entidade
                              AND (RU.DAT_FIM_VIG IS NULL
                                   OR (RU.DAT_FIM_VIG >= i_per_pro AND RU.DAT_FIM_VIG < i_per_pro));

               BEGIN
                   INSERT
                         INTO TB_DET_CALCULADO_PA PA
                         (COD_INS, TIP_PROCESSO, PER_PROCESSO, COD_IDE_CLI, COD_BENEFICIO,SEQ_PAGAMENTO,
                          COD_FCRUBRICA,  SEQ_VIG,  VAL_RUBRICA,  NUM_QUOTA,  FLG_NATUREZA,  TOT_QUOTA,
                          DAT_INI_REF, DAT_FIM_REF, COD_IDE_CLI_BEN, NUM_ORD_JUD, DAT_ING, DAT_ULT_ATU,
                          NOM_USU_ULT_ATU, NOM_PRO_ULT_ATU,  SEQ_DETALHE,  DES_INFORMACAO, DES_COMPLEMENTO)
                         VALUES
                           (PAR_cod_ins,
                            PAR_TIP_PRO,
                            PAR_PER_REAL,
                            zsel.cod_ide_cli,
                            zsel.cod_beneficio,
                            i_seq_pag,
                            nvl(v_rubrica_contraria,y.cod_fcrubrica),
                            1,
                            trunc(y.VAL_RUBRICA, 2),
                            1,
                            'C',
                            0,
                            PAR_PER_PRO,
                            null,
                            zsel.cod_ide_cli_ben, --rdcn.cod_ide_cli_ben
                            '10',
                            sysdate,
                            sysdate,
                            'FOLHA_POS',
                            'FOLHA_POS',
                            nvl(v_conta_ben,0),
                            null,
                            null
                            );
                            commit;
               EXCEPTION
                   WHEN OTHERS THEN
                   p_sub_proc_erro := 'SP_ATUALIZA_PENSAOALIMENTICIA';
                   p_coderro       := SQLCODE;
                   P_MSGERRO       := 'Erro ao incluir o DET_CALCULADO_PA';
                   INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                       p_coderro,
                                       'Calcula Folha Pos',
                                       sysdate,
                                       p_msgerro,
                                       p_sub_proc_erro,
                                       zsel.cod_ide_cli,
                                       null);
                   VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
               END;

                  v_val_tot_cred := v_val_tot_cred + trunc(y.VAL_RUBRICA, 2);
                  v_val_tot_deb := 0;

             END LOOP; -- y

             select p.nom_pessoa_fisica,p.cod_ide_cli, p.num_cpf
                    into v_nom_serv, v_cod_ide_serv, v_num_cpf_serv
                    from tb_concessao_beneficio cb, tb_pessoa_fisica p
                    where cb.cod_beneficio=zsel.cod_beneficio
                    and p.cod_ide_cli=cb.cod_ide_cli_serv
                    and rownum =1;

             select p.nom_pessoa_fisica, p.cod_ide_cli, p.num_cpf
                    into v_nom_ben, v_cod_ide_ben, v_num_cpf
                    from tb_pessoa_fisica p
                    where p.cod_ide_cli=zsel.cod_ide_cli_ben
                    and rownum =1;

          --SP_OBTEM_DADOS_PF(IDE_CLI, 'S', rfol.cod_ide_serv, v_nom_serv);
          --SP_OBTEM_DADOS_PF(IDE_CLI, 'B', zsel.cod_ide_ben, v_nom_ben);
          --SP_OBTEM_DADOS_PF(IDE_CLI, 'T', rfol.cod_ide_tut, v_nom_tut);

          BEGIN
              INSERT
                    INTO TB_FOLHA_PA PA
                    (COD_INS, TIP_PROCESSO, PER_PROCESSO, SEQ_PAGAMENTO, COD_IDE_CLI, COD_BENEFICIO,
                     NUM_GRP, NUM_SEQ_BENEF, COD_IDE_CLI_BEN, COD_IDE_SERV, NOM_SERV, COD_IDE_BEN,
                     NOM_BEN, COD_IDE_TUT, NOM_TUT, DAT_PROCESSO,VAL_SAL_BASE,TOT_CRED,TOT_DEB,VAL_LIQUIDO,
                     VAL_BASE_IR, VAL_IR_RET, DED_BASE_IR,DED_IR_OJ, DED_IR_DOENCA, DED_IR_PA, FLG_PAG,
                     FLG_IND_PAGO, FLG_IND_ULTIMO_PAG, TOT_CRED_PAG, TOT_DEB_PAG, VAL_LIQUIDO_PAG,
                     VAL_BASE_IR_PAG, VAL_IR_RET_PAG, VAL_BASE_IR_13, VAL_IR_13_RET, VAL_BASE_IR_13_PAG,
                     VAL_BASE_IR_13_RET_PAG,VAL_BASE_ISENCAO,IND_PROCESSO,COD_BANCO,NUM_AGENCIA,
                     NUM_DV_AGENCIA,NUM_CONTA,NUM_DV_CONTA,COD_TIPO_CONTA,VAL_BASE_PREV,FLG_IND_CHEQ,
                     FLG_IND_ANALISE,MARGEN_CONSIG)
                    VALUES
                      (PAR_cod_ins,
                       PAR_TIP_PRO,
                       PAR_PER_REAL,
                       i_seq_pag,
                       zsel.cod_ide_cli,
                       zsel.cod_beneficio,
                       to_number(v_cod_proc_grp_pag),
                       v_conta_ben,
                       zsel.cod_ide_cli_ben,
                       v_num_cpf_serv,
                       v_nom_serv,
                       v_num_cpf,
                       v_nom_ben,
                       null,
                       null,
                       PAR_PER_PRO,
                       null,  --val_sal_base
                       v_val_tot_cred,
                       v_val_tot_deb,
                       v_val_tot_cred-v_val_tot_deb,
                       null,
                       null,
                       null,
                       null,
                       null,
                       null,
                       'S', -- flag_PAG
                       'N',
                       'N',
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       'S', -- ind_processo
                       null,null,null,null,null,null,
                       0,
                       'R',
                       'R',
                       null);
                       commit;
          EXCEPTION
              WHEN OTHERS THEN
              p_sub_proc_erro := 'SP_ATUALIZA_PENSAOALIMENTICIA';
              p_coderro       := SQLCODE;
              P_MSGERRO       := 'Erro ao incluir o DET_CALCULADO_PA';
              INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                  p_coderro,
                                  'Calcula Folha Pos',
                                  sysdate,
                                  p_msgerro,
                                  p_sub_proc_erro,
                                  zsel.cod_ide_cli,
                                  null);
              VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
              commit;
          END;
        END LOOP;
      END IF;
  END SP_ATUALIZA_PENSAOALIMENTICIA;
------------------------------------------------------------------------------------------------------
  PROCEDURE SP_ATUALIZA_TOTAIS_FOLHA(
                                   i_cod_ins                in number,
                                   i_per_pro                in date,     -- Periodo a processar
                                   i_cod_usu                in varchar2,
                                   i_tip_pro                in varchar2, -- TIPO DE PROCESSO: N (normal), S (Suplementar), T (13 Salario)
                                   i_par_per_real           in date,
                                   i_des_tipos_benef        in varchar2,
                                   i_cod_tipo_ben           in varchar2,
                                   i_num_processo           in number,   --ROD6 :: Indica o grupo a ser processado
                                   i_num_grp                in number,   --ROD7 :: numero do grupo de pagamento a processar
                                   i_seq_pag                in number,
                                   i_num_cpf                in varchar2,
                                   i_num_seq_proc           in number,
                                   i_flg_retorno            out varchar2) AS

      v_cod_beneficio         TB_BENEFICIARIO.COD_BENEFICIO%TYPE;
      v_cod_ide_cli           TB_BENEFICIARIO.COD_IDE_CLI_BEN%TYPE;
      v_per_processo          date;
      v_vlr_cred              number(18,4);
      v_vlr_deb               number(18,4);
      v_vlr_liq               number(18,4);
      v_cod_proc_grp_pag      char(2);
      v_tipo_beneficio        TB_CONCESSAO_BENEFICIO.COD_TIPO_BENEFICIO%TYPE;
      v_cod_entidade          TB_CONCESSAO_BENEFICIO.COD_ENTIDADE%TYPE;

   BEGIN

     -- IDENTIFICA O GRUPO DE PAGAMENTO
     select cod_proc_grp_pago into v_cod_proc_grp_pag
             from tb_grupo_pagamento where num_grp_pag= i_num_grp;

     FOR zsel IN (SELECT DISTINCT D.COD_IDE_CLI, D.COD_BENEFICIO
                    FROM TB_DET_CALCULADO D, TB_PESSOA_FISICA P,TB_BENEFICIARIO B , TB_CONTROLE_PROCESSAMENTO CP
                   WHERE D.COD_INS = i_cod_ins
                     AND D.TIP_PROCESSO = i_tip_pro
                     AND D.PER_PROCESSO = i_per_pro
                     AND D.COD_IDE_CLI=P.COD_IDE_CLI
                     and B.Cod_Proc_Grp_Pag = v_cod_proc_grp_pag
                     and p.num_cpf = nvl(i_num_cpf, p.num_cpf )
                     and B.cod_beneficio=d.cod_beneficio and b.cod_ide_cli_ben=d.cod_ide_cli
                     AND cp.seq_processamento=i_num_seq_proc
                     AND p.num_cpf>=cp.num_cpf_inicial and p.num_cpf<cp.num_cpf_final
                     ) loop

        BEGIN

         v_cod_ide_cli   := zsel.cod_ide_cli;
         v_cod_beneficio := zsel.cod_beneficio;

         -- PEGA COD_ENTIDADE E TIPO_BENEFICIO deste IDE_CLI
         select cb.cod_tipo_beneficio,cb.cod_entidade
                into  v_tipo_beneficio, v_cod_entidade
                from  tb_concessao_beneficio cb
                where cb.cod_beneficio=v_cod_beneficio
                and   rownum = 1;

         IF i_tip_pro in('N','S') THEN
           IF v_tipo_beneficio = 'M' THEN
             IF v_cod_entidade <> '05' THEN
              SELECT DISTINCT
                  cod_beneficio,
                  cod_ide_cli,
                  per_processo,
                  sum(decode(flg_natureza,'C',val_rubrica,0)) valor_credito,
                  sum(decode(flg_natureza,'D',val_rubrica,0)) valor_debito,
                  sum(decode(flg_natureza,'C',val_rubrica,0)) - sum(decode(flg_natureza,'D',val_rubrica,0)) valor_liquido
                  into v_cod_beneficio, v_cod_ide_cli, v_per_processo, v_vlr_cred, v_vlr_deb, v_vlr_liq
               from tb_det_calculado ff
               where ff.cod_ins    = i_cod_ins
               and ff.cod_ide_cli= zsel.cod_ide_cli and ff.cod_beneficio = zsel.cod_beneficio
               and ff.per_processo = i_per_pro
               and ff.tip_processo = i_tip_pro
               and ff.seq_pagamento = 1
               and exists (select 1 from tb_impresao_rub  ir
                       where ir.cod_rubrica  = ff.cod_fcrubrica
                         and ir.cod_entidade = 1
                         and ir.flg_imprime  = 'S')
           --    and ff.cod_fcrubrica not in (6507400, 6507451, 6510600, 6510651, 602400, 1860751, 1863003,7001203)--, 1863003,7060303,7000603,7001203)
               and exists (select 1 from tb_beneficiario bb
                      where bb.cod_ins         = ff.cod_ins
                      and bb.cod_beneficio     = ff.cod_beneficio
                      and bb.cod_ide_cli_ben   = ff.cod_ide_cli
                      and bb.flg_status in ('A', 'X'))
               AND EXISTS (SELECT 1 FROM TB_CONCESSAO_BENEFICIO CB  WHERE FF.COD_BENEFICIO = CB.COD_BENEFICIO
                            AND CB.COD_TIPO_BENEFICIO = 'M')
               group by cod_beneficio, cod_ide_cli, per_processo;
             ELSE
               select DISTINCT
                   cod_beneficio,
                   cod_ide_cli,
                   per_processo,
                   sum(decode(flg_natureza,'C',val_rubrica,0)) valor_credito,
                   sum(decode(flg_natureza,'D',val_rubrica,0)) valor_debito,
                   sum(decode(flg_natureza,'C',val_rubrica,0)) - sum(decode(flg_natureza,'D',val_rubrica,0)) valor_liquido
                  into v_cod_beneficio, v_cod_ide_cli, v_per_processo, v_vlr_cred, v_vlr_deb, v_vlr_liq
                from tb_det_calculado ff
                where cod_ins    = i_cod_ins
                   and ff.cod_ide_cli= zsel.cod_ide_cli and ff.cod_beneficio = zsel.cod_beneficio
                   and ff.per_processo = i_per_pro
                   and tip_processo = i_tip_pro
          --         and cod_fcrubrica not in (6500102,6500150, 6500202,6500302, 6500402, 6500502, 1860100, 1861151, 1861150, 1861102)
                   and exists (select 1 from tb_impresao_rub  ir
                               where ir.cod_rubrica  = ff.cod_fcrubrica
                                 and ir.cod_entidade = 5
                                 and ir.flg_imprime  in ('A','S'))
                   and exists (select 1 from tb_beneficiario bb
                               where bb.cod_ins         = ff.cod_ins
                                 and bb.cod_beneficio     = ff.cod_beneficio
                                 and bb.cod_ide_cli_ben   = ff.cod_ide_cli
                                 --and bb.cod_proc_grp_pag in ('03', '07')
                                 and bb.flg_status in ('A', 'X'))
                   group by cod_beneficio, cod_ide_cli, per_processo;
             END IF;
           ELSE
             IF i_cod_tipo_ben = 'G' THEN
               select DISTINCT
                   cod_beneficio,
                   cod_ide_cli,
                   per_processo,
                   sum(decode(flg_natureza,'C',val_rubrica,0)) valor_credito,
                   sum(decode(flg_natureza,'D',val_rubrica,0)) valor_debito,
                   sum(decode(flg_natureza,'C',val_rubrica,0)) - sum(decode(flg_natureza,'D',val_rubrica,0)) valor_liquido
                  into v_cod_beneficio, v_cod_ide_cli, v_per_processo, v_vlr_cred, v_vlr_deb, v_vlr_liq
                from tb_det_calculado ff
                where cod_ins    = 1
                   and ff.cod_ide_cli= zsel.cod_ide_cli and ff.cod_beneficio = zsel.cod_beneficio
                   and ff.per_processo = i_per_pro
                   and tip_processo = i_tip_pro
             --      and cod_fcrubrica not in (6500102,6500150, 6500202,6500302, 6500402, 6500502, 1860100, 1861151, 1861150, 1861102)
                   and exists (select 1 from tb_beneficiario bb
                               where bb.cod_ins         = ff.cod_ins
                                 and bb.cod_beneficio     = ff.cod_beneficio
                                 and bb.cod_ide_cli_ben   = ff.cod_ide_cli
                                 and bb.flg_status in ('A', 'X'))
                   group by cod_beneficio, cod_ide_cli, per_processo;

             END IF;
           END IF;
         END IF;

         UPDATE TB_FOLHA F SET F.TOT_CRED     = v_vlr_cred,
                               F.TOT_DEB      = v_vlr_deb,
                               F.VAL_LIQUIDO  = v_vlr_liq,
                               F.FLG_IND_ANALISE=1
                       WHERE F.COD_INS       = i_cod_ins
                         AND F.TIP_PROCESSO  = i_tip_pro
                         AND F.PER_PROCESSO  = i_per_pro
                         AND F.COD_BENEFICIO = zsel.cod_beneficio
                         AND F.COD_IDE_CLI   = zsel.cod_ide_cli;
         COMMIT;
       EXCEPTION
              WHEN OTHERS THEN
              p_sub_proc_erro := 'SP_ATUALIZA_TOTAIS_FOLHA';
              p_coderro       := SQLCODE;
              P_MSGERRO       := 'Erro ao incluir o DET_CALCULADO';
              INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                  p_coderro,
                                  'Calcula Folha Pos',
                                  sysdate,
                                  p_msgerro,
                                  p_sub_proc_erro,
                                  v_cod_ide_cli,
                                  null);
              VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
              commit;
       END;

     END LOOP;

  END SP_ATUALIZA_TOTAIS_FOLHA;

  FUNCTION  SP_VALOR_PORCENTUAL13(

                       I_COD_BENEFICIO VARCHAR2
                       ) Return number IS
  por_13   number(18,10) :=0;
  I_DAT_INI_REF   DATE;
  BEGIN
      I_DAT_INI_REF :=NULL;
      FOR indice_i IN 1 .. T_BENEFICIARIO.count LOOP
        R_BENEFICIARIO:=T_BENEFICIARIO(indice_i);
        IF R_BENEFICIARIO.COD_BENEFICIO=I_COD_BENEFICIO THEN
           I_DAT_INI_REF :=R_BENEFICIARIO.DAT_INI_BEN;
        END IF;
      END LOOP;
      por_13:=1;
      IF TO_CHAR(I_DAT_INI_REF,'YYYY') != TO_CHAR(PAR_PER_PRO,'YYYY') THEN
            return(1);
      ELSE
         IF TO_CHAR(PAR_PER_PRO,'MM') !='12' THEN
            IF to_char(I_DAT_INI_REF  ,'dd') > 15   THEN
                por_13:=  (12 - to_char(I_DAT_INI_REF,'mm') ) /12  ;

             ELSE
                     por_13:=  (12 - (to_char(I_DAT_INI_REF ,'mm')-1) ) /12 ;
            END IF;
         ELSE
            return(1);
         END IF;
       END IF;

  RETURN (por_13);

  END SP_VALOR_PORCENTUAL13;
------------------------------------------------------------------------------------------------------
  PROCEDURE SP_GRAVA_FOLHA_PARAM(ind in number) AS

      v_ini_ben               date;
      v_fim_ben               date;
      v_flg_status            char(1);
      v_val_perc              number(8,5) :=0;

     BEGIN
       BEGIN
         IF PAR_TIP_PRO = 'N' THEN
           IF ind = 1 THEN
              INSERT INTO TB_FOLHA_PARAM
              (cod_ins,tip_processo,per_processo,seq_pagamento,cod_ide_cli,cod_beneficio,
               cod_proc_grp_pag,num_seq_benef,cod_ide_cli_ben,dta_nasc,dta_ini_ben,dta_fim_ben,
               flg_status_ben,val_percentual_ben,perc_rateio,perc_saida,perc_beneficio,
               qtd_dependentes,perc_pecunia,flg_composicao,cod_entidade,cod_cargo,cod_referencia,
               cod_jornada,cod_tipo_beneficio,tot_cred,tot_deb,proc_erros,vlr_externo,desc_prev,
               vlr_incapacidade,fator_mes,vlr_base_redut,cod_poder,par_per_real,flg_rubrica_excl,
               data_obito, base_teto, redutor_ir, perc_ir,qtd_dep_ir, DTA_ING
               ) VALUES (
               PAR_COD_INS, PAR_TIP_PRO, PAR_PER_PRO, 1,BEN_IDE_CLI,COM_COD_BENEFICIO,
               PAR_NUM_GRP_PAG,null,null,BEN_DTA_NASC,null,null,
               BEN_FLG_STATUS,null,null,null,null,
               null,null,null,null,null,null,
               null,null,null,null,null,null,null,
               null,null,null,null,PAR_PER_REAL,null,
               null,null,null,null,null,sysdate
               );
               commit;
               select b.dat_ini_ben, b.dat_fim_ben, b.flg_status, b.val_percentual
                into v_ini_ben, v_fim_ben, v_flg_status, v_val_perc
                from tb_beneficiario b
                where b.cod_beneficio = COM_COD_BENEFICIO and
                      b.cod_ide_cli_ben = BEN_IDE_CLI and
                      (b.dat_fim_ben is null or b.dat_fim_ben>=PAR_PER_PRO);

               UPDATE TB_FOLHA_PARAM F SET f.dta_ini_ben=v_ini_ben,
                                           f.dta_fim_ben=v_fim_ben,
                                           f.flg_status_ben=v_flg_status,
                                           f.perc_beneficio=v_val_perc,
                                           f.val_percentual_ben=v_val_perc
                WHERE f.cod_beneficio=COM_COD_BENEFICIO and f.cod_ide_cli=BEN_IDE_CLI
                  AND f.cod_ins=PAR_COD_INS and f.tip_processo=PAR_TIP_PRO
                  AND f.per_processo=PAR_PER_PRO;
                commit;
           END IF;
         END IF;
       EXCEPTION
              WHEN OTHERS THEN
              p_sub_proc_erro := 'SP_GRAVA_FOLHA_PARAM';
              p_coderro       := SQLCODE;
              P_MSGERRO       := 'Erro ao gravar TB_FOLHA_PARAM';
              INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                  p_coderro,
                                  'PARAM FOLHA',
                                  sysdate,
                                  p_msgerro,
                                  p_sub_proc_erro,
                                  BEN_IDE_CLI,
                                  null);
              VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
       END;

  END SP_GRAVA_FOLHA_PARAM;



PROCEDURE SP_GERA_PA_LIQ IS

    vi_rubrica         number := 0;
    vi_val_rubrica     number(18, 2) := 0;
    vi_seq_vig         number := 0;
    i_perc             number(18, 6) := 0;
    i                  number := 0;
    cod_benef          number := 0;
    v_processa_rubrica boolean;
    rdcn_temp          TB_DET_CALCULADO_ESTRUC%rowtype;
    possui_evento_X    number := 0;
    contaa             number := 0;
    possui_evento_y    number := 0;
    tmp_entidade       number := 0;

    PORCETUAL_13       number(10,5):=0;

  BEGIN


    ------------------ CALCULA PA POR LIQUIDO -------------------------

    begin

      FOR I IN 1 .. v_cod_beneficio.count LOOP
        cod_benef          := v_cod_beneficio(i);
        SP_OBTEM_TIPO_BENEFICIO(cod_benef);

        select cb.cod_entidade into tmp_entidade
          from tb_concessao_beneficio cb
         where cod_benef=cb.cod_beneficio;
        if tmp_entidade is null then
           tmp_entidade := 1;
        end if;
        COM_ENTIDADE := tmp_entidade;

        SP_OBTEM_RUBRICA_EVENTO_ESPEC('M',
                                    tmp_ENTIDADE,
                                    'D',
                                    vi_rubrica,
                                    vi_seq_vig);

        possui_evento_X := 0;
        contaa          := tdcn.count;
        IF contaa > 0 then
          FOR X IN 1 .. contaa LOOP
            rdcn_temp := tdcn(X);
            IF rdcn_temp.COD_FCRUBRICA = vi_rubrica
               AND rdcn_temp.cod_beneficio = cod_benef THEN
              possui_evento_X := X;
            END IF;
          END LOOP;
        END IF;

        IF possui_evento_x > 0 THEN
          COM_COD_RUBRICA    := vi_rubrica;
          COM_COD_FCRUBRICA  := vi_rubrica;
          COM_COD_BENEFICIO  := cod_benef;
          v_processa_rubrica := true;
          rdcn_temp := tdcn(possui_evento_x);
          COM_VAL_PORC_IND   :=rdcn_temp.val_porc ;
          rdcn_temp.val_rubrica := 0;
          tdcn(possui_evento_x) := rdcn_temp;
          SP_PROCESSA_RUBRICA(v_processa_rubrica);
          SP_CALCULA_VALOR_RUBRICA;

          rdcn_temp := tdcn(possui_evento_x);
          rdcn_temp.val_rubrica := mon_calculo;
          rdcn_temp.val_rubrica_cheio := mon_calculo;
          tdcn(possui_evento_x) := rdcn_temp;
        END IF;
      END LOOP;

    exception
      when others then
        null;
    end;

  END SP_GERA_PA_LIQ;


-------------------------------------------------------------

   PROCEDURE SP_OBTEM_DEDUCOES_BASICAS(ide_cli in varchar2, deducao_ir out number) AS
    VI_VAL_PAGOS   NUMBER(18, 4) := 0;
    VI_ISENTO      boolean := TRUE;
    nEdad          number;
    nIni           number;
    nFin           number;
    vi_rubrica     number := 0;
    vi_val_rubrica number := 0;
    vi_seq_vig     number := 0;

  BEGIN

    --- Obtem valores deduc?es
    -- Enfermidade grave
    -- judicial (isenc?o)
    IF sp_isenta_irrf(ide_cli) <> VI_ISENTO THEN
      -- Maior 65
      deducao_ir := 0;
      nFin       := to_char(ANT_DTA_NASC, 'yyyymmdd');
      nIni       := to_char(PAR_PER_PRO, 'yyyymmdd');
      nEdad      := (nIni - nFin) / 10000;
      IF nEdad >= 65 THEN
        deducao_ir := V_DED_IR_65;
      END IF;

      -- Dependentes
      VI_NUM_DEP_ECO := 0;
      IF COM_TIP_BENEFICIO = 'APOSENTADO' THEN
        VI_NUM_DEP_ECO := SP_OBTEM_DEP_DED_IR(ide_cli, 'A');
      ELSE
        VI_NUM_DEP_ECO := SP_OBTEM_DEP_DED_IR(ide_cli, 'P');
      END IF;

      IF VI_NUM_DEP_ECO > 0 THEN
        deducao_ir := nvl(deducao_ir, 0) + (V_DED_IR_DEP * VI_NUM_DEP_ECO);
      END IF;


    else
      deducao_ir := 0;
    end if;

    select nvl(deducao_ir, 0) into deducao_ir from dual;

  END SP_OBTEM_DEDUCOES_BASICAS;

-------------------------------------------------------------
  PROCEDURE SP_VERIFICA_TOTAIS IS

  LCOMPOE_CUR     curform;
  cod_rubrica_tot number;
  cod_entidade_tot number;
  qtd_rubrucas     number(3);
  jind             number(3);
  TOTAL_CREDITO    NUMBER(10,2);
  TOTAL_DEBITOS    NUMBER(10,2);
 BEGIN

  /*   --- ALT JTS25
    LCOMPOE_DET       TB_COMPOE_DET%ROWTYPE;           --- Linha de Tipo Compoe DET
    type COMPOE_DET is table of TB_COMPOE_DET%ROWTYPE; --- TABELA EM MEMRIA DE TIPO TB_COMPOE_DET
    vCOMPOE_DET        COMPOE_DET :=COMPOE_DET();
    idx_COMPOE_DET     number(3);
  */

 ------------ Calcula Creditos -------
    Open  LCOMPOE_CUR for

         SELECT cd.cod_fcrubrica_compoe,
                cd.cod_entidade_composta
        FROM tb_compoe_det cd
       WHERE cd.cod_ins = 1
         AND cd.cod_fcrubrica_composta = 99700
         AND cd.cod_variavel = 'TOT_CRED'
         AND cd.cod_entidade_composta = 1
         AND (PAR_PER_PRO >= cd.dat_ini_vig AND
             PAR_PER_PRO <=
             nvl(cd.dat_fim_vig, to_date('01/01/2045', 'dd/mm/yyyy')));

    FETCH LCOMPOE_CUR
      into cod_rubrica_tot,cod_entidade_tot ;
    WHILE LCOMPOE_CUR%FOUND LOOP
          vCOMPOE_DET.extend;
          idx_COMPOE_DET := nvl( idx_COMPOE_DET , 0) + 1;
          LCOMPOE_DET.COD_FCRUBRICA_COMPOE:=cod_rubrica_tot;
          LCOMPOE_DET.COD_ENTIDADE_COMPOSTA:=cod_entidade_tot;
          vCOMPOE_DET (idx_COMPOE_DET) := LCOMPOE_DET ;

         FETCH LCOMPOE_CUR
         into cod_rubrica_tot,cod_entidade_tot ;

    END LOOP;

   FOR jind in 1 .. tdcn.count LOOP
    rdcn := tdcn(jind);

      qtd_rubrucas   :=vCOMPOE_DET.count;
       FOR I IN 1..qtd_rubrucas LOOP
            LCOMPOE_DET:= vCOMPOE_DET(I);
            IF LCOMPOE_DET.COD_FCRUBRICA_COMPOE=RDCN.COD_FCRUBRICA  AND
               RDCN.FLG_NATUREZA='C' THEN
             TOTAL_CREDITO:=NVL(TOTAL_CREDITO,0)+RDCN.VAL_RUBRICA;

            END IF;

       END LOOP;
   END LOOP;

 ------------ Calcula Debitos -------

   Open  LCOMPOE_CUR for

         SELECT cd.cod_fcrubrica_compoe,
                cd.cod_entidade_composta
        FROM tb_compoe_det cd
       WHERE cd.cod_ins = 1
         AND cd.cod_fcrubrica_composta = 99800
         AND cd.cod_variavel = 'TOT_DEBIT'
         AND cd.cod_entidade_composta = 1
         AND (PAR_PER_PRO >= cd.dat_ini_vig AND
             PAR_PER_PRO <=
             nvl(cd.dat_fim_vig, to_date('01/01/2045', 'dd/mm/yyyy')));

    FETCH LCOMPOE_CUR
      into cod_rubrica_tot,cod_entidade_tot ;
    WHILE LCOMPOE_CUR%FOUND LOOP
          vCOMPOE_DET.extend;
          idx_COMPOE_DET := nvl( idx_COMPOE_DET , 0) + 1;
          LCOMPOE_DET.COD_FCRUBRICA_COMPOE:=cod_rubrica_tot;
          LCOMPOE_DET.COD_ENTIDADE_COMPOSTA:=cod_entidade_tot;
          vCOMPOE_DET (idx_COMPOE_DET) := LCOMPOE_DET ;

         FETCH LCOMPOE_CUR
         into cod_rubrica_tot,cod_entidade_tot ;

    END LOOP;

   FOR jind in 1 .. tdcn.count LOOP
    rdcn := tdcn(jind);

      qtd_rubrucas   :=vCOMPOE_DET.count;
       FOR I IN 1..qtd_rubrucas LOOP
            LCOMPOE_DET:= vCOMPOE_DET(I);
            IF LCOMPOE_DET.COD_FCRUBRICA_COMPOE=RDCN.COD_FCRUBRICA  AND
               RDCN.FLG_NATUREZA='D' THEN
             TOTAL_DEBITOS:=NVL(TOTAL_DEBITOS,0)+RDCN.VAL_RUBRICA;

            END IF;

       END LOOP;
   END LOOP;







  END SP_VERIFICA_TOTAIS;

  PROCEDURE SP_OBTEM_ESENCAOEC40 ( VI_COD_IDE_CLI IN  VARCHAR2 ,
                                   vi_ind_atb out CHAR         ) AS

  BEGIN
    -- Agregado para Excluir Acumulac?o dos Beneficios para o
    -- Calculo do Teto
    vi_ind_atb:='N';
      begin
      select distinct 'S' into vi_ind_atb from tb_atributos_pf b
      where exists (
      select 1
        from tb_atributos_pf    ats,
             tb_tipos_atributos ta
       where

           ats.cod_ins = par_cod_ins
       and b.cod_ide_cli = ats.cod_ide_cli
       and ats.cod_ide_cli = VI_COD_IDE_CLI
       and ats.cod_atributo = ta.cod_atributo
       and nvl(ats.flg_status,'V')='V'
       and ats.dat_ini_vig <=PAR_PER_PRO
       and (ats.dat_fim_vig is null or ats.dat_fim_vig >= PAR_PER_PRO)
       and TA.COD_ATRIBUTO=9000);
        vi_ind_atb:='S';
    exception
      when no_data_found then
        vi_ind_atb := 'N';
    end;
   END SP_OBTEM_ESENCAOEC40 ;

  PROCEDURE SP_OBTEM_FATOR_MES_PRO (VI_BEN_DAT_INICIO  IN   DATE  ,
                                    VI_DIA_MES         OUT  CHAR    ) AS

  BEGIN

      VI_DIA_MES:=1;
    BEGIN
     SELECT
        CASE
            --- Quando proporc?o no mes 16-08-2013
            WHEN TO_CHAR(VI_BEN_DAT_INICIO  ,'YYYYMM')= TO_CHAR(PAR_PER_PRO,'YYYYMM') AND
                   BEN_DAT_FIM IS NULL AND TO_CHAR(VI_BEN_DAT_INICIO  ,'DD')!='31' THEN
                         trunc((31 - TO_NUMBER(TO_CHAR(TO_DATE(VI_BEN_DAT_INICIO ,'DD/MM/YYYY'),'DD')))/30,4)

            WHEN TO_CHAR(VI_BEN_DAT_INICIO  ,'YYYYMM')< TO_CHAR(PAR_PER_PRO,'YYYYMM') AND
                   BEN_DAT_FIM IS NOT NULL  THEN
                  trunc((TO_NUMBER(TO_CHAR(TO_DATE(BEN_DAT_FIM ,'DD/MM/YYYY'),'DD') - 1))/30,4)

            WHEN TO_CHAR(VI_BEN_DAT_INICIO  ,'YYYYMM')= TO_CHAR(PAR_PER_PRO,'YYYYMM') AND
                   BEN_DAT_FIM IS NULL  AND TO_CHAR(VI_BEN_DAT_INICIO  ,'DD')='31'  THEN
                        trunc(1/30,4)

            ELSE
                  1
         END
         into  VI_DIA_MES
       FROM DUAL;

    exception
      when no_data_found then
        VI_DIA_MES:= 1;
    end;
   END SP_OBTEM_FATOR_MES_PRO  ;

 PROCEDURE SP_GRAVA_DETALHE_PA  AS
   type typcalpa is table of TB_FOLHA_PA%rowtype;
   PAcd            typcalpa := typcalpa();
   idx_pa        number(8);
   i             number(8);
   j             number(8);
   PA_ENCONTRADO NUMBER;
   idx_dpa       number;
   idx_DETALHE   number;
  BEGIN
   rfol:=null;
   PACD.delete;
   tdcn_pa.delete;
   idx_dpa :=0;

   FOR i in 1 .. tdcn.count LOOP
   BEGIN
     rdcn := tdcn(i);
      IF rdcn.cod_ide_cli_ben is not null    AND
         to_char(rdcn.cod_ide_cli_ben) !=0   AND
         rdcn.tip_evento_especial    ='P'    AND
         rdcn.flg_natureza   in ('D','C')    AND
         rdcn.FLG_STATUS='A'                 THEN
         PA_ENCONTRADO:=0;
         FOR j in 1 ..  PAcd.count LOOP
            IF PACD(J).COD_IDE_CLI    =rdcn.cod_ide_cli     AND
               PACD(J).COD_IDE_CLI_BEN=rdcn.cod_ide_cli_ben AND
               PACD(J).COD_IDE_CLI!=0                   AND
               PACD(J).COD_BENEFICIO=rdcn.cod_BENEFICIO AND
               rdcn.FLG_STATUS='A'                      AND
               rdcn.tip_evento_especial    ='P'         AND
               rdcn.flg_natureza           in ('D','C')
             THEN
               PA_ENCONTRADO:=1;
               IF rdcn.flg_natureza ='D' THEN
                  PACD(J).tot_cred     := rdcn.val_rubrica+NVL(PACD(J).tot_cred,0);
               ELSE
                  PACD(J).tot_deb      := rdcn.val_rubrica+NVL(PACD(J).tot_deb,0) ;
               END IF;
               PACD(J).val_liquido  := nvl( PACD(J).tot_cred,0) - nvl(PACD(J).tot_deb,0) ;
               tdcn_pa.extend;
               idx_dpa :=nvl(idx_dpa , 0) + 1;
               tdcn_pa(idx_dpa):=rdcn;
             END IF;
         END LOOP;
         IF PA_ENCONTRADO = 0 THEN
            PACD.extend;
            idx_pa               := nvl(idx_pa , 0) + 1;
            rfol.COD_INS         := PAR_COD_INS;
            rfol.TIP_PROCESSO    := PAR_TIP_PRO;
            rfol.PER_PROCESSO    := PAR_PER_PRO;
            rfol.SEQ_PAGAMENTO   := vi_seq_pagamento;
            rfol.COD_IDE_CLI     := rdcn.cod_ide_cli ;  --IDE_CLI;
            rfol.COD_BENEFICIO   := rdcn.cod_BENEFICIO; -- MVL8
            rfol.NUM_GRP         := null;
            rfol.NUM_SEQ_BENEF   := null;
            rfol.cod_ide_cli_ben := rdcn.cod_ide_cli_ben;

            SP_OBTEM_DADOS_PF( rdcn.cod_ide_cli    , 'B', rfol.cod_ide_serv, rfol.nom_serv);
            SP_OBTEM_DADOS_PF( rdcn.cod_ide_cli_ben, 'B', rfol.cod_ide_ben , rfol.nom_ben );
            SP_OBTEM_DADOS_PF( rdcn.cod_ide_cli_ben, 'T', rfol.cod_ide_tut , rfol.nom_tut );

            rfol.dat_processo := PAR_PER_PRO;

            rfol.val_sal_base := 0;
            rfol.tot_cred     := 0;
            rfol.tot_deb      := 0;
            rfol.val_liquido  := 0;
            IF rdcn.flg_natureza ='D' THEN
               rfol.tot_cred  := rdcn.val_rubrica;
            ELSE
               rfol.tot_deb   := rdcn.val_rubrica;
            END IF;
            rfol.val_liquido  := nvl(rfol.tot_cred,0) -nvl(rfol.tot_deb,0);

            rfol.ded_ir_oj          := 0; --V_DED_IR_OJ;
            rfol.ded_ir_doenca      := null;
            rfol.ded_ir_pa          := null;
            rfol.flg_pag            := 'S';
            rfol.flg_ind_pago       := 'N';
            rfol.flg_ind_ultimo_pag := 'N';
            rfol.tot_cred_pag       := 0;
            rfol.tot_deb_pag        := 0;
            rfol.val_liquido_pag    := 0;
            rfol.ind_processo       := 'S';
            PACD(idx_pa)            := rfol;
            tdcn_pa.extend;
            idx_dpa :=nvl(idx_dpa , 0) + 1;
            tdcn_pa(idx_dpa):=rdcn;
         END IF;
      END IF;
      EXCEPTION
                         WHEN OTHERS THEN
                         p_sub_proc_erro := 'SP_GRAVA_FOLHA_PA';
                         p_coderro       := SQLCODE;
                         P_MSGERRO       := 'Erro ao analizar dados para FOLHA PA';
                         INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                    p_coderro,
                                    'Calcula Folha',
                                    sysdate,
                                    p_msgerro,
                                    p_sub_proc_erro,
                                    rdcn.cod_ide_cli,
                                    rdcn.cod_fcrubrica);
                      VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
              --       RAISE ERRO;
        END;
   END LOOP;

   ------- Grava tabela tb_folha_pa ----------------
      FOR j in 1 ..  PAcd.count LOOP
          rfol :=  PACD(j);
        BEGIN
          idx_DETALHE:=0;
          BEGIN
              delete tb_folha_pa fpa
               where --> ffranco 03/2007
               fpa.cod_ins           = PAR_COD_INS
               and fpa.tip_processo  = PAR_TIP_PRO
               AND fpa.per_processo  = PAR_PER_PRO
               AND fpa.seq_pagamento = vi_seq_pagamento
               AND fpa.cod_beneficio =  rfol.cod_beneficio
               AND fpa.cod_ide_cli   =   rfol.cod_ide_cli
               AND FPA.cod_ide_cli_ben=rfol.cod_ide_cli_ben;

              delete tb_DET_CALCULADO_PA fpa
               where --> ffranco 03/2007
               fpa.cod_ins = PAR_COD_INS
               and fpa.tip_processo = PAR_TIP_PRO
               AND fpa.per_processo = PAR_PER_PRO
               AND fpa.seq_pagamento = vi_seq_pagamento
               AND fpa.cod_ide_cli   = rfol.cod_ide_cli
               AND fpa.cod_beneficio =rfol.cod_beneficio
               AND fpa.cod_ide_cli_ben=rfol.cod_ide_cli_ben;
         END ;

          INSERT /*+ append */
          INTO TB_FOLHA_PA
            (cod_ins,
             tip_processo,
             per_processo,
             seq_pagamento,
             cod_ide_cli,
             cod_beneficio,
             num_grp,
             num_seq_benef,
             cod_ide_cli_ben,
             cod_ide_serv,
             nom_serv,
             cod_ide_ben,
             nom_ben,
             cod_ide_tut,
             nom_tut,
             dat_processo,
             val_sal_base,
             tot_cred,
             tot_deb,
             val_liquido,
             val_base_ir,
             val_ir_ret,
             ded_base_ir,
             ded_ir_oj,
             ded_ir_doenca,
             ded_ir_pa,
             flg_pag,
             flg_ind_pago,
             flg_ind_ultimo_pag,
             tot_cred_pag,
             tot_deb_pag,
             val_liquido_pag,
             val_base_ir_pag,
             val_ir_ret_pag,
             val_base_ir_13,
             VAL_IR_13_RET,
             val_base_ir_13_pag,
             VAL_BASE_IR_13_RET_PAG,
             val_base_isencao,
             IND_PROCESSO,
             val_base_prev)

          VALUES
            (rfol.COD_INS,
             rfol.TIP_PROCESSO,
             rfol.PER_PROCESSO,
             rfol.SEQ_PAGAMENTO,
             rfol.COD_IDE_CLI,
             rfol.COD_BENEFICIO,
             rfol.NUM_GRP,
             rfol.NUM_SEQ_BENEF,
             rfol.cod_ide_cli_ben,
             rfol.cod_ide_serv,
             rfol.nom_serv,
             rfol.cod_ide_ben,
             rfol.nom_ben,
             rfol.cod_ide_tut,
             rfol.nom_tut,
             rfol.dat_processo,
             trunc(rfol.val_sal_base, 2),
             --trunc(rfol.tot_cred, 2),
             trunc(rfol.tot_cred  ,2),
             trunc(rfol.tot_deb, 2),
             trunc(rfol.val_liquido, 2),
             trunc(rfol.val_base_ir, 2),
             trunc(rfol.val_ir_ret, 2),
             trunc(rfol.ded_base_ir, 2),
             trunc(rfol.ded_ir_oj, 2),
             trunc(rfol.ded_ir_doenca, 2),
             trunc(rfol.ded_ir_pa, 2),
             rfol.flg_pag,
             rfol.flg_ind_pago,
             rfol.flg_ind_ultimo_pag,
             trunc(rfol.tot_cred_pag, 2),
             trunc(rfol.tot_deb_pag, 2),
             trunc(rfol.val_liquido_pag, 2),
             trunc(rfol.val_base_ir_pag, 2),
             trunc(rfol.val_ir_ret_pag, 2),
             trunc(rfol.val_base_ir_13, 2),
             trunc(rfol.val_ir_13_ret, 2),
             trunc(rfol.val_base_ir_13_pag, 2),
             trunc(rfol.val_base_ir_13_ret_pag, 2),
             trunc(rfol.val_base_isencao, 2),
             rfol.ind_processo,
             trunc(rfol.val_base_prev, 2)  );
             EXCEPTION
                         WHEN OTHERS THEN
                         p_sub_proc_erro := 'SP_GRAVA_FOLHA_PA';
                         p_coderro       := SQLCODE;
                         P_MSGERRO       := 'Erro ao gravar o RESUMO da rubricas de pensao alimenticia';
                         INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                    p_coderro,
                                    'Calcula Folha',
                                    sysdate,
                                    p_msgerro,
                                    p_sub_proc_erro,
                                    rdcn.cod_ide_cli,
                                    rdcn.cod_fcrubrica);
                      VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
              --       RAISE ERRO;
              END;


             FOR i in 1 ..  tdcn_pa.count LOOP
                IF tdcn_pa(i).cod_ide_cli    = rfol.COD_IDE_CLI     AND
                   tdcn_pa(i).cod_ide_cli_ben= rfol.cod_ide_cli_ben AND
                   tdcn_pa(i).COD_BENEFICIO  = rfol.COD_BENEFICIO   AND
                   tdcn_pa(i).flg_natureza IN ('D','C')  THEN


                  IF tdcn_pa(i).flg_natureza  ='D' THEN
                     tdcn_pa(i).flg_natureza :='C';
                  ELSE
                    tdcn_pa(i).flg_natureza :='D';
                  END IF;
                  idx_DETALHE              :=idx_DETALHE+1;
                  tdcn_pa(i).seq_detalhe   := idx_DETALHE;
                  begin
                   INSERT /*+ append */
                    INTO TB_DET_CALCULADO_PA
                    VALUES
                      (tdcn_pa(i).cod_ins,
                       tdcn_pa(i).tip_processo,
                       tdcn_pa(i).per_processo,
                       tdcn_pa(i).cod_ide_cli,
                       tdcn_pa(i).cod_beneficio,
                       tdcn_pa(i).seq_pagamento,
                       tdcn_pa(i).cod_fcrubrica,
                       tdcn_pa(i).SEQ_PAGAMENTO,
                       trunc(tdcn_pa(i).val_rubrica, 2),
                       tdcn_pa(i).num_quota,
                       tdcn_pa(i).flg_natureza,
                       tdcn_pa(i).tot_quota,
                       tdcn_pa(i).dat_ini_ref,
                       tdcn_pa(i).dat_fim_ref,
                       tdcn_pa(i).cod_ide_cli_ben,
                       tdcn_pa(i).num_ord_jud,
                       tdcn_pa(i).dat_ing,
                       tdcn_pa(i).dat_ult_atu,
                       tdcn_pa(i).nom_usu_ult_atu,
                       tdcn_pa(i).nom_pro_ult_atu,
                       idx_DETALHE ,--tdcn_pa(i).SEQ_DETALHE ,
                       tdcn_pa(i).des_informacao,
                       tdcn_pa(i).des_complemento);
                      EXCEPTION
                         WHEN OTHERS THEN
                         p_sub_proc_erro := 'SP_GRAVA_DET_PAG_PA';
                         p_coderro       := SQLCODE;
                         P_MSGERRO       := sqlerrm;--'Erro ao gravar o detalhe da rubricas de pensao alimenticia';
                         INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                    p_coderro,
                                    'Calcula Folha',
                                    sysdate,
                                    p_msgerro,
                                    p_sub_proc_erro,
                                    rdcn.cod_ide_cli,
                                    rdcn.cod_fcrubrica);
                      VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
              --       RAISE ERRO;
                    END;

               END IF;
             END LOOP;


      END LOOP;

  END;
 PROCEDURE SP_SEPARA_IRRF (    IDX_IRRF2       OUT NUMBER,
                               IDX_IRRF2_RETRO OUT NUMBER,
                               IDX_IRRF2_HISTO OUT NUMBER
                            ) AS

   IDX_IRRF             NUMBER;
   IDX_IRRF_RETRO       NUMBER;
   IDX_IRRF_HISTO       NUMBER;

      ----- suplemetar do MES
    CUR_COMPBEN_SEP     curform;
    RFOL_SEPARA        TB_FOLHA%ROWTYPE;
    SEP_COD_INS         NUMBER;
    SEP_TIP_PROCESSO    VARCHAR2(1);
    SEP_PER_PROCESSO    DATE;
    SEP_COD_IDE_CLI     VARCHAR2(20);
    SEP_COD_BENEFICIO   NUMBER;
    SEP_SEQ_PAGAMENTO   NUMBER;
    SEP_COD_FCRUBRICA   NUMBER;
    SEP_COD_ENTIDADE    NUMBER(8);
    SEP_TIP_EVENTO_ESPECIAL CHAR(1);
    SEP_SEQ_VIG         NUMBER;
    SEP_VAL_RUBRICA     NUMBER;
    SEP_NUM_QUOTA       NUMBER;
    SEP_FLG_NATUREZA    VARCHAR2(1);
    SEP_TOT_QUOTA       NUMBER;
    SEP_DAT_INI_REF     DATE;
    SEP_DAT_FIM_REF     DATE;
    SEP_COD_IDE_CLI_BEN VARCHAR2(20);
    SEP_NUM_ORD_JUD     NUMBER;
    SEP_DAT_ING         DATE;
    SEP_DAT_ULT_ATU     DATE;
    SEP_NOM_USU_ULT_ATU VARCHAR2(20);
    SEP_NOM_PRO_ULT_ATU VARCHAR2(20);
    SEP_RET_SUP         CHAR(1);
    SEP_COMPLEMENTO     VARCHAR2(15);
    SEP_INFORMACAO      VARCHAR2(10);
        

  BEGIN

   --------------- Atualizado  11-12-2015 ---------
   ---- Considera o Meses anterios a dez com RRA no mes 12 do ano
   --------------------------------------------------
   --- EM esta rotina se separam os Valores Lancados por periodo
    -- Periodo Atual
    -- Periodo Anteriol


      tdcn_IRRF.DELETE;
      tdcn_IRRF_RETRO.DELETE;
      tdcn_IRRF_RETRO13.DELETE;

      IDX_IRRF            :=0;
      IDX_IRRF_RETRO      :=0;
      IDX_IRRF_RETRO13    :=0;
      IDX_IRRF_HISTO      :=0;

      DAT_INI_IRRF_RETRO  :=NULL;
      DAT_FIM_IRRF_RETRO  :=NULL;


      PER_ANTERIOR        := ADD_MONTHS(TO_DATE('01/01/'||TO_CHAR(PAR_PER_REAL,'YYYY'),'DD/MM/YYYY'),-1);
      PER_HANTERIOR       := ADD_MONTHS(TO_DATE('01/01/'||TO_CHAR(PER_ANTERIOR,'YYYY'),'DD/MM/YYYY'),-1);

      FOR i in 1 .. tdcn.count LOOP
         rdcn := tdcn(i);


             IDX_IRRF:=IDX_IRRF+1;
             tdcn_IRRF.extend;

             IDX_IRRF_RETRO:=IDX_IRRF_RETRO+1;
             tdcn_IRRF_RETRO.extend;
             tdcn_ACUMULADO_13.extend;

             IDX_IRRF_RETRO13:=IDX_IRRF_RETRO13+1;
             tdcn_IRRF_RETRO13.extend;

          -- N?o separa as rubricas geradas pelo processo 13
         IF NVL(RDCN.TIP_PROCESSO_REAL,'N') <> 'T'  AND NVL(RDCN.TIP_EVENTO_ESPECIAL,' ')<>'3' THEN

               ------------------------ Bloco Sequndario -------
              IF
                     PAR_PER_REAL                    = rdcn.PER_PROCESSO
               AND   TO_CHAR(PAR_PER_REAL,'MM')      =  12
               AND   (TO_CHAR(rdcn.dat_ini_ref,'MM') != '12' OR
                      TO_CHAR(rdcn.dat_ini_ref,'YYYY')!=TO_CHAR(rdcn.PER_PROCESSO,'YYYY')
                     )
               AND NOT (  VI_IR_EXTERIOR   ) ---- Calculo de Ir para Residentes no Exterior

             THEN
                  tdcn_IRRF_RETRO(IDX_IRRF_RETRO):=rdcn;
             ELSE
               IF (
                     ( TO_CHAR(PAR_PER_REAL,'YYYY')= TO_CHAR(rdcn.PER_PROCESSO,'YYYY')
                     ) AND
                     (
                       TO_CHAR(PAR_PER_REAL,'YYYY')= TO_CHAR(rdcn.dat_ini_ref,'YYYY')
                      )
                   ) OR

                   (  nvl(rdcn.tip_evento_especial,'0') IN ('H' ) AND
                      TO_CHAR(rdcn.dat_ini_ref,'YYYY')=TO_CHAR(PER_ANTERIOR ,'YYYY')

                   )
                  OR

                   (  VI_IR_EXTERIOR   )  ---- Calculo de Ir para Residentes no Exterior

                  OR -- AGREGADO PARA ATENDER TASK 1768 CONSIDERAR DEC ANO ANTERIOR COM
                      -- IR DO PERIODO -06-08-2913 JTS
                    (
                      TO_CHAR(rdcn.dat_ini_ref,'YYYY')=TO_CHAR(PER_ANTERIOR ,'YYYY')
                         AND
                       (TO_CHAR(rdcn.dat_ini_ref,'MM')='12' )
                     )

               THEN
                  tdcn_IRRF(IDX_IRRF):= rdcn;
                 ELSE
                       IF DAT_INI_IRRF_RETRO  IS NULL OR rdcn.dat_ini_ref <DAT_INI_IRRF_RETRO  THEN
                          DAT_INI_IRRF_RETRO :=rdcn.dat_ini_ref ;
                       END IF;
                       IF DAT_FIM_IRRF_RETRO  IS NULL OR rdcn.dat_fim_ref >DAT_fim_IRRF_RETRO  THEN
                          DAT_FIM_IRRF_RETRO :=case when rdcn.dat_FIM_ref is null then
                                                          rdcn.dat_ini_ref else
                                                          rdcn.dat_FIM_ref end;
                       END IF;
                       tdcn_IRRF_RETRO(IDX_IRRF_RETRO):=rdcn;

              END IF;
              ------------------------ Fim Bloco Sequndario -------
             END IF;

         ELSE
            --- Bloco agregado para atender  ir 13

             tdcn_IRRF_RETRO13(IDX_IRRF_RETRO13):=rdcn;
         END IF;
      END LOOP;
      
          ------------- carrega Valores Do Mes ------
          ---- Ticket 49431 --- Acumulatividade    RFOL_SUP             TB_FOLHA%ROWTYPE;
    
          
       FOR  INDEX_BEN   IN 1 .. vfolha.count LOOP
       RFOL_SEPARA := vFOLHA( INDEX_BEN  );

           OPEN CUR_COMPBEN_SEP FOR

                        SELECT RET.cod_ins,
                               tip_processo,
                               per_processo,
                               RET.cod_ide_cli,
                               RET.cod_beneficio,
                               seq_pagamento,
                               RET.cod_fcrubrica,
                               RET.seq_vig,
                               RET.val_rubrica,
                               RET.num_quota,
                               RET.flg_natureza,
                               RET.tot_quota,
                               RET.dat_ini_ref,
                               RET.dat_fim_ref,
                               RET.cod_ide_cli_ben,
                               RET.num_ord_jud,
                               RET.dat_ing,
                               RET.dat_ult_atu,
                               RET.nom_usu_ult_atu,
                               RET.nom_pro_ult_atu,
                               'R',
                               DES_INFORMACAO,
                               DES_COMPLEMENTO,
                               CC.COD_ENTIDADE,
                               RR. TIP_EVENTO_ESPECIAL
                          INTO SEP_COD_INS,
                               SEP_TIP_PROCESSO,
                               SEP_PER_PROCESSO,
                               SEP_COD_IDE_CLI,
                               SEP_COD_BENEFICIO,
                               SEP_SEQ_PAGAMENTO,
                               SEP_COD_FCRUBRICA,
                               SEP_SEQ_VIG,
                               SEP_VAL_RUBRICA,
                               SEP_NUM_QUOTA,
                               SEP_FLG_NATUREZA,
                               SEP_TOT_QUOTA,
                               SEP_DAT_INI_REF,
                               SEP_DAT_FIM_REF,
                               SEP_COD_IDE_CLI_BEN,
                               SEP_NUM_ORD_JUD,
                               SEP_DAT_ING,
                               SEP_DAT_ULT_ATU,
                               SEP_NOM_USU_ULT_ATU,
                               SEP_NOM_PRO_ULT_ATU,
                               SEP_RET_SUP,
                               SEP_INFORMACAO,
                               SEP_COMPLEMENTO,
                               SEP_COD_ENTIDADE,
                               SEP_TIP_EVENTO_ESPECIAL

                          FROM tb_hdet_calculado RET, TB_CONCESSAO_BENEFICIO CC
                               , tb_rubricas rr
                         WHERE RET.cod_ins     = PAR_COD_INS
                           AND cod_ide_cli     =RFOL_SEPARA.COD_IDE_CLI
                           AND per_processo    = PAR_PER_PRO
                           AND tip_processo IN ('N', 'S')
                           AND RET.cod_beneficio > 0
                           AND CC.COD_INS       = PAR_COD_INS
                           AND CC.COD_BENEFICIO = RFOL_SEPARA.COD_BENEFICIO
                           AND CC.COD_BENEFICIO = RET.COD_BENEFICIO
                           AND RR.COD_INS       =CC.COD_INS
                           AND RR.COD_RUBRICA   =RET.COD_FCRUBRICA
                           AND RR.COD_ENTIDADE  =RFOL_SEPARA.COD_ENTIDADE
                           AND substr(RET.DES_COMPLEMENTO,1,3)='Ret'
                           AND RET.DAT_INI_REF!=PAR_PER_PRO
                           ----- Rubricas Dec 13
                           AND RR.tip_evento_especial not in  (/*'T',*/'B','3');


                      FETCH  CUR_COMPBEN_SEP
                        INTO  SEP_COD_INS,
                               SEP_TIP_PROCESSO,
                               SEP_PER_PROCESSO,
                               SEP_COD_IDE_CLI,
                               SEP_COD_BENEFICIO,
                               SEP_SEQ_PAGAMENTO,
                               SEP_COD_FCRUBRICA,
                               SEP_SEQ_VIG,
                               SEP_VAL_RUBRICA,
                               SEP_NUM_QUOTA,
                               SEP_FLG_NATUREZA,
                               SEP_TOT_QUOTA,
                               SEP_DAT_INI_REF,
                               SEP_DAT_FIM_REF,
                               SEP_COD_IDE_CLI_BEN,
                               SEP_NUM_ORD_JUD,
                               SEP_DAT_ING,
                               SEP_DAT_ULT_ATU,
                               SEP_NOM_USU_ULT_ATU,
                               SEP_NOM_PRO_ULT_ATU,
                               SEP_RET_SUP,
                               SEP_INFORMACAO,
                               SEP_COMPLEMENTO,
                               SEP_COD_ENTIDADE,
                               SEP_TIP_EVENTO_ESPECIAL;

                      WHILE CUR_COMPBEN_SEP%FOUND LOOP
                        BEGIN
                            rdcn.cod_ins            := SEP_COD_INS;
                            rdcn.tip_processo       := PAR_TIP_PRO;
                            rdcn.per_processo       := PAR_PER_PRO;
                            rdcn.cod_ide_cli        := SEP_COD_IDE_CLI;
                            rdcn.cod_beneficio      := SEP_COD_BENEFICIO;
                            rdcn.seq_pagamento      := SEP_seq_pagamento;
                            rdcn.seq_detalhe        := 1;--SUP_seq_detalhe;
                            rdcn.cod_fcrubrica      := SEP_COD_FCRUBRICA;
                            rdcn.seq_vig            := SEP_SEQ_VIG;
                            rdcn.val_rubrica        := SEP_VAL_RUBRICA;
                            rdcn.val_rubrica_cheio  := SEP_VAL_RUBRICA;
                            rdcn.num_quota          := SEP_NUM_QUOTA;
                            rdcn.flg_natureza       := SEP_flg_natureza;
                            rdcn.tot_quota          := SEP_tot_quota;
                            rdcn.dat_ini_ref        := SEP_DAT_INI_REF;
                            rdcn.dat_fim_ref        := SEP_dat_fim_ref;
                            rdcn.num_ord_jud        := SEP_NUM_ORD_JUD;
                            rdcn.cod_ide_cli_ben    := SEP_COD_IDE_CLI_BEN;
                            rdcn.dat_ing            := sysdate;
                            rdcn.dat_ult_atu        := sysdate;
                            rdcn.nom_usu_ult_atu    := SEP_nom_usu_ult_atu;
                            rdcn.nom_pro_ult_atu    := 'FOLHA SEPARA';
                            rdcn.des_informacao     := SEP_informacao;
                            rdcn.des_complemento    := SEP_complemento;
                            rdcn.cod_entidade       := SEP_cod_entidade;
                            rdcn.tip_evento_especial:= SEP_TIP_EVENTO_ESPECIAL;


                             IDX_IRRF:=IDX_IRRF+1;
                             tdcn_IRRF.extend;

                             IDX_IRRF_RETRO:=IDX_IRRF_RETRO+1;
                             tdcn_IRRF_RETRO.extend;
                             tdcn_ACUMULADO_13.extend;
 
                                       ------------------------ Bloco Sequndario -------
                              IF
                                     PAR_PER_REAL                    = rdcn.PER_PROCESSO
                               AND   TO_CHAR(PAR_PER_REAL,'MM')      =  12
                               AND   (TO_CHAR(rdcn.dat_ini_ref,'MM') != '12' OR
                                      TO_CHAR(rdcn.dat_ini_ref,'YYYY')!=TO_CHAR(rdcn.PER_PROCESSO,'YYYY')
                                     )
                               AND NOT (  VI_IR_EXTERIOR   ) ---- Calculo de Ir para Residentes no Exterior

                             THEN
                                  tdcn_IRRF_RETRO(IDX_IRRF_RETRO):=rdcn;
                             ELSE
                               IF (
                                     ( TO_CHAR(PAR_PER_REAL,'YYYY')= TO_CHAR(rdcn.PER_PROCESSO,'YYYY')
                                     ) AND
                                     (
                                       TO_CHAR(PAR_PER_REAL,'YYYY')= TO_CHAR(rdcn.dat_ini_ref,'YYYY')
                                      )
                                   ) OR

                                   (  nvl(rdcn.tip_evento_especial,'0') IN ('H' ) AND
                                      TO_CHAR(rdcn.dat_ini_ref,'YYYY')=TO_CHAR(PER_ANTERIOR ,'YYYY')

                                   )
                                  OR

                                   (  VI_IR_EXTERIOR   )  ---- Calculo de Ir para Residentes no Exterior

                                  OR -- AGREGADO PARA ATENDER TASK 1768 CONSIDERAR DEC ANO ANTERIOR COM
                                      -- IR DO PERIODO -06-08-2913 JTS
                                    (
                                      TO_CHAR(rdcn.dat_ini_ref,'YYYY')=TO_CHAR(PER_ANTERIOR ,'YYYY')
                                         AND
                                       (TO_CHAR(rdcn.dat_ini_ref,'MM')='12' )
                                     )



                               THEN
                                  tdcn_IRRF(IDX_IRRF):= rdcn;
                                 ELSE
                                       IF DAT_INI_IRRF_RETRO  IS NULL OR rdcn.dat_ini_ref <DAT_INI_IRRF_RETRO  THEN
                                          DAT_INI_IRRF_RETRO :=rdcn.dat_ini_ref ;
                                       END IF;
                                       IF DAT_FIM_IRRF_RETRO  IS NULL OR rdcn.dat_fim_ref >DAT_fim_IRRF_RETRO  THEN
                                          DAT_FIM_IRRF_RETRO :=case when rdcn.dat_FIM_ref is null then
                                                                          rdcn.dat_ini_ref else
                                                                          rdcn.dat_FIM_ref end;
                                       END IF;
                                       tdcn_IRRF_RETRO(IDX_IRRF_RETRO):=rdcn;

                                 END IF;
                           END IF;

                          END;
                        ----> FETCH
                        FETCH  CUR_COMPBEN_SEP
                        INTO  SEP_COD_INS,
                               SEP_TIP_PROCESSO,
                               SEP_PER_PROCESSO,
                               SEP_COD_IDE_CLI,
                               SEP_COD_BENEFICIO,
                               SEP_SEQ_PAGAMENTO,
                               SEP_COD_FCRUBRICA,
                               SEP_SEQ_VIG,
                               SEP_VAL_RUBRICA,
                               SEP_NUM_QUOTA,
                               SEP_FLG_NATUREZA,
                               SEP_TOT_QUOTA,
                               SEP_DAT_INI_REF,
                               SEP_DAT_FIM_REF,
                               SEP_COD_IDE_CLI_BEN,
                               SEP_NUM_ORD_JUD,
                               SEP_DAT_ING,
                               SEP_DAT_ULT_ATU,
                               SEP_NOM_USU_ULT_ATU,
                               SEP_NOM_PRO_ULT_ATU,
                               SEP_RET_SUP,
                               SEP_INFORMACAO,
                               SEP_COMPLEMENTO,
                               SEP_COD_ENTIDADE,
                               SEP_TIP_EVENTO_ESPECIAL;
                       END LOOP;
                close CUR_COMPBEN_SEP;
      END LOOP;

      
      
      IDX_IRRF2:=IDX_IRRF;
      IDX_IRRF2_RETRO:=IDX_IRRF_RETRO;
      tdcn_IRRF.extend;
      tdcn_IRRF_RETRO.extend;

    --- Bloco agregado para atender  ir 13
      tdcn_IRRF_RETRO13.extend;
      IDX_IRRF2_HISTO:=IDX_IRRF_RETRO13;


  END SP_SEPARA_IRRF;

  PROCEDURE SP_OBTEM_IRRF_RETRO(ide_cli         IN  varchar2,
                          idx_val               IN  number,
                          FLG_PA                IN  varchar2,
                          O_VALOR               OUT number,
                          O_VALOR_13            OUT number,
                          O_BASE_BRUTA_IRRF     OUT number,
                          O_BASE_BRUTA_13_IRRF  OUT number,
                          O_QTA_MES             OUT number
                               ) AS

    VI_VAL_PAGOS        NUMBER(18, 4) := 0;
    VI_ISENTO           boolean := TRUE;
    nEdad               number;
    nIni                number;
    nFin                number;
    vi_rubrica          number := 0;
    vi_val_rubrica      number := 0;
    vi_seq_vig          number := 0;
    valor_proc_especial NUMBER(18, 4) := 0;

    vi_base_ir_IRRF       NUMBER:=0;
    vi_base_ir_13_IRRF    NUMBER:=0;
    vi_base_bruta_irrf    NUMBER:=0;
    vi_base_bruta_13_irrf NUMBER:=0;
    VI_BASE_IR_ACUMULADA  NUMBER:=0;
    GLS_ERR  VARCHAR(1000):=NULL;
    PARAMETRO_IR          CHAR(1);
  BEGIN

    vi_val_pagos := 0;

    nEdad    := 0;
    nIni     := 0;
    nFin     := 0;
    o_valor  := 0;
    o_QTA_MES:=0;

      FOR  x  in 1 ..v_cod_beneficio.COUNT LOOP
        VI_BASE_IR_ARR(v_cod_beneficio(x))(1):=0;
        VI_BASE_IR_ARR_13(v_cod_beneficio(x))(1):=0;
      END LOOP;
      IF  FLG_PA  ='A' THEN
          PARAMETRO_IR:='A';
       ELSIF FLG_PA ='D' THEN
          PARAMETRO_IR:='D';
        ELSE
         PARAMETRO_IR:='R';
      END IF;


     SP_OBTEM_BASE_IR(idx_val, PARAMETRO_IR , vi_base_ir_irrf, vi_base_ir_13_irrf);

      vi_base_bruta_irrf    := vi_base_ir_irrf;
      V_BASE_IR_IRRF        := vi_base_ir_irrf;

      vi_base_bruta_13_irrf := vi_base_ir_13_irrf;
      O_BASE_BRUTA_13_IRRF  :=vi_base_ir_13_irrf;

      O_BASE_BRUTA_IRRF     :=vi_base_ir_irrf;
       VI_TOT_DED            := 0;
       VI_TOT_DED_RUB        := 0;

    IF sp_isenta_irrf(ide_cli) <> VI_ISENTO THEN
      ---- Valida 65 Anos. N?o Aplica 65 em IRRF ANOS ANTERIORES
    /*  nFin  := to_char(ANT_DTA_NASC, 'yyyymmdd');
      nIni  := to_char(last_day(PAR_PER_REAL), 'yyyymmdd');
      nEdad := (nIni - nFin) / 10000;
      IF nEdad >= 65 THEN
        VI_TOT_DED := V_DED_IR_65;
      END IF;*/

      VI_NUM_DEP_ECO := 0;
       ---- Valida Dep IR. N?o Aplica Dep Ir em IRRF ANOS ANTERIORES
/*      IF COM_TIP_BENEFICIO = 'APOSENTADO' THEN
        VI_NUM_DEP_ECO := SP_OBTEM_DEP_DED_IR(IDE_CLI, 'A');
      ELSE
        VI_NUM_DEP_ECO := SP_OBTEM_DEP_DED_IR(IDE_CLI, 'P');
      END IF;
      IF VI_NUM_DEP_ECO > 0 THEN
        VI_TOT_DED := nvl(VI_TOT_DED, 0) + (V_DED_IR_DEP * VI_NUM_DEP_ECO);
      END IF;*/

       -- Rubricas que deduzem no IR
      vi_val_pagos := SP_OBTEM_DED_PAGOS_IRRF(PARAMETRO_IR) ;

      IF vi_val_pagos > 0 THEN
        VI_TOT_DED_RUB  :=vi_val_pagos;
        VI_TOT_DED := VI_TOT_DED + vi_val_pagos;
      END IF;
      VI_BASE_IR_ACUMULADA:=0;

     IF PARAMETRO_IR <> 'D' THEN
       SP_OBTEM_BASE_IR_ACUM(FLG_PA,VI_BASE_IR_ACUMULADA );

       SP_OBTEM_IR_ACUM     (FLG_PA,
                             VI_IR_ACUMULADA ,
                             VI_DAT_INI_IR   ,
                             VI_DAT_TER_IR );

      END IF;
      --- Obtem Base IRRF
        IF PARAMETRO_IR <> 'D' THEN
              IF V_BASE_IR_IRRF > VI_TOT_DED THEN
                V_BASE_IR_irrf := nvl(V_BASE_IR_IRRF, 0)+ (nvl(VI_BASE_IR_ACUMULADA, 0)- VI_TOT_DED);
               --- Obtem valor IR
               --BEGIN
                O_QTA_MES:=SP_OBTEM_MESES_PAG_IRRF( PARAMETRO_IR);
              -- exception
               --   when OTHERS then
                --    GLS_ERR:= SQLERRM;
                --end;
               SP_CALCULA_IMPOSTO2_RETRO(v_base_ir_irrf,O_QTA_MES, o_valor);
                o_valor :=o_valor-VI_IR_ACUMULADA ;

              END IF;
        ELSE
               IF vi_base_ir_13_irrf  > VI_TOT_DED THEN
                vi_base_ir_13_irrf    := nvl(vi_base_ir_13_irrf, 0)  - VI_TOT_DED ;
                V_BASE_BRUTA_13_IRRF :=vi_base_ir_13_irrf ;
               --- Obtem valor IR
               --BEGIN
                O_QTA_MES:=SP_OBTEM_MESES_PAG_IRRF( PARAMETRO_IR);
              -- exception
               --   when OTHERS then
                --    GLS_ERR:= SQLERRM;
                --end;
                SP_CALCULA_IMPOSTO2_RETRO(vi_base_ir_13_irrf,O_QTA_MES,  O_VALOR_13);
               END IF;
        END IF;

    ELSE
      IF VI_DOENCA THEN
        V_DED_IR_DOENCA := V_BASE_IR_irrf;
        VI_BASE_IR      := 0;
      ELSE
        V_BASE_ISENCAO  := V_BASE_IR_irrf;
        V_DED_IR_DOENCA := 0;
        VI_BASE_IR      := 0;
      END IF;
    END IF;

  END SP_OBTEM_IRRF_RETRO;

  PROCEDURE SP_OBTEM_DETALHE_PAG_IRRF(IDE_CLI         IN VARCHAR2,
                                 FLG_PA               IN VARCHAR2,
                                 TP_EVENTO_ESPECIAL   IN VARCHAR2,
                                 TP_EVENTO            IN VARCHAR2,
                                 TP_IRRF              IN VARCHAR,
                                 V_BASE_BRUTA_IRRF    IN NUMBER ,
                                 V_BASE_BRUTA_13_IRRF IN NUMBER) as

    vi_rubrica      number := 0;
    vi_val_rubrica  number(18, 2) := 0;
    vi_seq_vig      number := 0;
    i_perc          number(18, 6) := 0;
    i               number := 0;
    cod_benef       number := 0;
    vi_flg_natureza varchar2(1) := null;
    val_13          number(18, 2) := 0;
    v_erro          varchar2(500) := null;
    -- variavel para diferenca havendo pagamento especial
    v_val_rub_dif number(18, 4) := 0;
    -- variavel para obter o ir do pagamento normal
    v_val_rub_pgto_normal number(18, 4) := 0;
    -- utilizar o processo para inclus?o de mais rubricas, 13?
   VAR_APOIO NUMBER;
   AA NUMBER;
   BB NUMBER;
  BEGIN

    IF (PAR_TIP_PRO = 'N' OR PAR_TIP_PRO = 'S' OR PAR_TIP_PRO = 'E') AND
       ((TP_EVENTO_ESPECIAL IN ('J', 'I')  AND TP_EVENTO = 'N') OR
       TP_EVENTO_ESPECIAL = 'S') THEN

      SELECT rr.cod_rubrica, rr.seq_vig
        INTO vi_rubrica, vi_seq_vig
        FROM tb_rubricas rr
       WHERE rr.cod_ins = PAR_COD_INS
         AND rr.tip_evento_especial = TP_EVENTO_ESPECIAL --Fixo
         AND rr.cod_entidade = COM_ENTIDADE
         AND rr.tip_evento = decode(par_tip_pro, 'S', 'N', tp_evento) --Tip_processo
         AND RR.DAT_INI_VIG <= PAR_PER_PRO
         AND (RR.DAT_FIM_VIG >= PAR_PER_PRO OR RR.DAT_FIM_VIG IS NULL);
    ELSIF (TP_EVENTO_ESPECIAL IN ('J', 'I','B')  AND TP_EVENTO = 'T') THEN
      BEGIN
        SELECT rr.cod_rubrica, rr.seq_vig
          INTO vi_rubrica, vi_seq_vig
          FROM tb_rubricas rr
         WHERE rr.cod_ins = PAR_COD_INS
           AND rr.tip_evento_especial = TP_EVENTO_ESPECIAL --Fixo
           AND rr.tip_evento = decode(par_tip_pro, 'S', 'N', tp_evento) --Tip_processo
           AND rr.cod_entidade = COM_ENTIDADE
           AND RR.DAT_INI_VIG <= PAR_PER_PRO
           AND (RR.DAT_FIM_VIG >= PAR_PER_PRO OR RR.DAT_FIM_VIG IS NULL);
      EXCEPTION
        WHEN OTHERS THEN

          return;

      END;
    END IF;

    IF TP_EVENTO_ESPECIAL IN ('J', 'I','B')  OR TP_EVENTO_ESPECIAL = 'A' OR
       TP_EVENTO_ESPECIAL = 'T' OR TP_EVENTO_ESPECIAL = 'S' THEN
      vi_flg_natureza := 'D';
    ELSE
      vi_flg_natureza := 'C';
    END IF;

    COM_VAL_RUBRICA_CHEIO := 0;

    FOR i IN 1 .. vfolha.count LOOP

      IF FLG_PA = 'S' THEN
        tdcn_pa.extend;
        vi_ir_ret.extend;
        idx_caln_pa     := nvl(idx_caln_pa, 0) + 1;
        idx_seq_detalhe := nvl(idx_seq_detalhe, 0) + 1;

      ELSE
        tdcn.extend;
        vi_ir_ret.extend;

        idx_caln        := nvl(idx_caln, 0) + 1;
        idx_seq_detalhe := nvl(idx_seq_detalhe, 0) + 1;
      END IF;
      -- Inicializacao da variavel do ir retido, recebendo o valor do ir calculado
      vi_ir_ret(i) := V_VAL_IR;
      -- n?o existindo IR , o valor da variavel ir retido ficara com zero.

      cod_benef := v_cod_beneficio(i);
       VAR_APOIO:=VI_BASE_IR_ARR(cod_benef) (1);

      IF TP_EVENTO_ESPECIAL IN ('J', 'I','B')   THEN
         /* Comentado em 14/05/2018*/
           -- i_perc := (VI_BASE_IR_ARR(cod_benef) (1) / V_BASE_BRUTA_IRRF  ) * 100;
           -- VI_PERC_IR(cod_benef)(1) := i_perc;
            --VAR_APOIO:=VI_BASE_IR_ARR(cod_benef) (1);
           -- CASE
           -- WHEN  FLG_PA  = 'R'  THEN  vfolha(i).VAL_BASE_IR_ACUM:=(v_base_ir_irrf * i_perc/100);
            -- ELSE null;
           -- END CASE;
           ---- Incluido 14/05/20188 ----- 
            i_perc := ((
                     VI_BASE_IR_ARR(cod_benef) (1) -VI_BASE_IR_ARR_DED(cod_benef) (1) )/ ( V_BASE_BRUTA_IRRF -VI_TOT_DED_RUB ) * 100);
             ---VI_PERC_IR(cod_benef)(1) := i_perc;
             AA:=VI_BASE_IR_ARR(cod_benef) (1);
             BB:=VI_BASE_IR_ARR_DED(cod_benef) (1);
             IF i_perc > 100 THEN
               i_perc:=100;
            END IF;
            IF i_perc < 0 THEN
               i_perc:=0;
             END IF; 

             CASE
               WHEN  FLG_PA  = 'R'  THEN  vfolha(i).VAL_BASE_IR_ACUM:=(v_base_ir_irrf * i_perc/100);
               ELSE null;
             END CASE;

             
        IF VI_BASE_IR_ARR(cod_benef) (1) <> 0 THEN
          IF VI_SUPLEMENTAR AND cont_benef > 1 THEN
              /* Comentado em 14/05/2018*/
              i_perc := (VI_BASE_IR_ARR(cod_benef) (1) / V_BASE_BRUTA_IRRF  ) * 100;
               ---- Incluido 14/05/20188 -----
           -- i_perc := ((
           --        VI_BASE_IR_ARR(cod_benef) (1) -VI_BASE_IR_ARR_DED(cod_benef) (1) )/ ( V_BASE_BRUTA_IRRF -VI_TOT_DED_RUB ) * 100);
             --------------------------------
            VI_PERC_IR(cod_benef)(1) := i_perc;
          ELSE
            IF cont_benef = 1 AND VI_SUPLEMENTAR THEN
              i_perc := 100;
              VI_PERC_IR(cod_benef)(1) := 100;
            ELSE
              /* Comentado em 14/05/2018*/
              -- i_perc := (VI_BASE_IR_ARR(cod_benef) (1) / V_BASE_BRUTA_IRRF  ) * 100;
             
              -- i_perc := (VI_BASE_IR_ARR(cod_benef) (1) / V_BASE_BRUTA_IRRF  ) * 100;
               ---- Incluido 14/05/20188 -----
               i_perc := ((
                   VI_BASE_IR_ARR(cod_benef) (1) -VI_BASE_IR_ARR_DED(cod_benef) (1) )/ ( V_BASE_BRUTA_IRRF -VI_TOT_DED_RUB ) * 100);
             --------------------------------
                /* Comentado em 14/05/2018*/
               --  VI_PERC_IR(cod_benef)(1) := i_perc;
            END IF;
          END IF;
          rdcn.val_rubrica := (V_VAL_IR * i_perc) / 100;
          vi_ir_ret(i)   := rdcn.val_rubrica;
          vi_val_rubrica := rdcn.val_rubrica;
          COM_VAL_RUBRICA_CHEIO := COM_VAL_RUBRICA_CHEIO + vi_val_rubrica;
        ELSE
          vi_val_rubrica := 0;
        END IF;

      END IF;

      IF vi_rubrica > 0 THEN
        IF FLG_PA <> 'S' THEN
          begin
            IF VI_SUPLEMENTAR and tp_evento_especial NOT IN    ('J', 'I')  THEN
              IF v_base_prev(cod_benef) (1) = 0 THEN
                null;
              ELSE
                COM_VAL_RUBRICA_CHEIO := vi_val_rubrica;
                SP_INCLUI_DETALHE_PAG_IRRF(cod_benef,
                                      vi_rubrica,
                                      vi_val_rubrica,
                                      vi_seq_vig,
                                      vi_flg_natureza,
                                      TP_IRRF );

              END IF;
            ELSE
              COM_VAL_RUBRICA_CHEIO := vi_val_rubrica;
              SP_INCLUI_DETALHE_PAG_IRRF(cod_benef,
                                    vi_rubrica,
                                    vi_val_rubrica,
                                    vi_seq_vig,
                                    vi_flg_natureza,
                                    TP_IRRF );
            END IF;

          exception
            when no_data_found then
              v_erro := sqlerrm;
          end;

        ELSE
          COM_VAL_RUBRICA_CHEIO := vi_val_rubrica;
          SP_INCLUI_DETALHE_PAG_PA(ide_cli,
                                   cod_benef,
                                   vi_rubrica,
                                   vi_val_rubrica,
                                   vi_seq_vig,
                                   vi_flg_natureza);
        END IF;
      END IF;

    END LOOP;

    --  verifica se houve pagamento especial e efetua a diferenca do IR

    For w in 1 .. tdcn.count LOOP

      rdcn := tdcn(w);

      if rdcn.cod_fcrubrica = vi_rubrica and rdcn.tip_processo = 'E' then
        v_val_rub_dif := rdcn.val_rubrica;
      elsif rdcn.cod_fcrubrica = vi_rubrica and rdcn.tip_processo = 'N' then
        v_val_rub_pgto_normal := rdcn.val_rubrica;

        IF v_val_rub_dif > 0 and v_val_rub_pgto_normal > 0 then
          rdcn.val_rubrica := v_val_rub_pgto_normal - v_val_rub_dif;
          tdcn(w).val_rubrica := rdcn.val_rubrica;
          exit;
        END IF;

      end if;

    End Loop;

  END SP_OBTEM_DETALHE_PAG_IRRF;

  FUNCTION SP_OBTEM_DED_PAGOS_IRRF(tipo_irr IN VARCHAR)   RETURN NUMBER IS
    O_VALOR NUMBER(18, 4);
    i       number := 0;
    limit_dedu number:=0;
    v_calculo  NUMBER(18, 4):=0;
  --  tipo_irr varchar (1);
  BEGIN
    O_VALOR := 0;

     limit_dedu := case
                             when tipo_irr ='A' then  tdcn_irrf.count
                             when tipo_irr ='R' then  tdcn_irrf_RETRO.count
                             when tipo_irr ='D' then  tdcn_irrf_RETRO13.count
                             else  tdcn.count  end;


    FOR i IN 1 .. limit_dedu  LOOP
      rdcn := case           when tipo_irr ='A' then  tdcn_irrf(i)
                             when tipo_irr ='R' then  tdcn_irrf_RETRO(i)
                             when tipo_irr ='D' then  tdcn_irrf_RETRO13(i)

                             else  tdcn(i)  end;

      ant_entidade:=RDCN.COD_ENTIDADE;
      IF SP_DED_IR(rdcn.cod_fcrubrica) and rdcn.per_processo = PAR_PER_PRO THEN
        o_valor := o_valor + rdcn.val_rubrica;
        VI_BASE_IR_ARR_DED(rdcn.cod_beneficio)(1):=VI_BASE_IR_ARR_DED(rdcn.cod_beneficio)(1)+rdcn.val_rubrica;
          v_calculo:= VI_BASE_IR_ARR_DED(rdcn.cod_beneficio)(1);
         IF  tipo_irr ='R' THEN
             tdcn_irrf_RETRO(I).flg_ir_acumulado:='S';
             tdcn(I).flg_ir_acumulado           :='S';
          END IF;

      END IF;
    END LOOP;

    RETURN(O_VALOR);
  END SP_OBTEM_DED_PAGOS_IRRF;


  PROCEDURE SP_OBTEM_BASE_IR_ACUM (tipo_irr IN VARCHAR , V_BASE_IR_ACUMULADA OUT NUMBER)  AS
  CUR_COMPBEN_ACUM     curform;

   ------- VARIAVEIS ------
   IR_ACUM_cod_ins       NUMBER;
   IR_ACUM_tip_processo  CHAR(1);
   IR_ACUM_per_processo  DATE;
   IR_ACUM_cod_ide_cli   VARCHAR2(20);
   IR_ACUM_cod_beneficio NUMBER(8);
   IR_ACUM_seq_pagamento NUMBER(8);
   IR_ACUM_cod_fcrubrica NUMBER(8);
   IR_ACUM_seq_vig       NUMBER;
   IR_ACUM_val_rubrica   NUMBER(12,4);
   IR_ACUM_num_quota     NUMBER;
   IR_ACUM_flg_natureza  CHAR(1);
   IR_ACUM_dat_ini_ref   DATE;
   IR_ACUM_dat_fim_ref   DATE;
   idx_acum              NUMBER:=0;
   PERIODO_ACUMULADO     NUMBER:=0;

  BEGIN

   --- EM esta rotina se separam os Valores Lancados por periodo
    -- Ano Atual
    -- Ano Anteriol
    -- Outros Anos.
   tdcn_acumulado.delete;
   rdcn:=null;
   V_BASE_IR_ACUMULADA:=0;
 IF tipo_irr = 'R' THEN
  OPEN  CUR_COMPBEN_ACUM FOR

      SELECT
             IR_ACUM.cod_ins,
             IR_ACUM.tip_processo,
             IR_ACUM.per_processo,
             IR_ACUM.cod_ide_cli,
             IR_ACUM.cod_beneficio,
             IR_ACUM.seq_pagamento,
             IR_ACUM.cod_fcrubrica,
             IR_ACUM.seq_vig,
             IR_ACUM.val_rubrica,
             IR_ACUM.num_quota,
             IR_ACUM.flg_natureza,
             IR_ACUM.dat_ini_ref,
             IR_ACUM.dat_fim_ref

            INTO
             IR_ACUM_cod_ins,
             IR_ACUM_tip_processo,
             IR_ACUM_per_processo,
             IR_ACUM_cod_ide_cli,
             IR_ACUM_cod_beneficio,
             IR_ACUM_seq_pagamento,
             IR_ACUM_cod_fcrubrica,
             IR_ACUM_seq_vig,
             IR_ACUM_val_rubrica,
             IR_ACUM_num_quota,
             IR_ACUM_flg_natureza,
             IR_ACUM_dat_ini_ref,
             IR_ACUM_dat_fim_ref

       FROM tb_det_Calculado IR_ACUM
       WHERE IR_ACUM.cod_ins    = PAR_COD_INS
         AND IR_ACUM.PER_PROCESSO <  TO_DATE('01/01/'||TO_CHAR(PAR_PER_REAL,'YYYY'),'DD/MM/YYYY')
         AND IR_ACUM.PER_PROCESSO >= TO_DATE('01/01/'||TO_CHAR(PER_ANTERIOR,'YYYY'),'DD/MM/YYYY')
         AND IR_ACUM.cod_ide_cli = ANT_IDE_CLI
         AND IR_ACUM.FLG_IR_ACUMULADO='S'
         -- Agregado 03-06-2012
         AND 1=2
         AND  NOT  EXISTS (
         SELECT 1 FROM TB_RUBRICAS RU
         WHERE RU.COD_INS=PAR_COD_INS                 AND
               RU.COD_RUBRICA =IR_ACUM.COD_FCRUBRICA  AND
               RU.TIP_EVENTO_ESPECIAL='J'             AND
               RU.DAT_INI_VIG<=PAR_PER_PRO  AND
               NVL(RU.DAT_FIM_VIG,TO_DATE('01/01/2099','DD/MM/YYYY'))>=PAR_PER_PRO
         );
   ELSE
      OPEN  CUR_COMPBEN_ACUM FOR
           SELECT
             IR_ACUM.cod_ins,
             IR_ACUM.tip_processo,
             IR_ACUM.per_processo,
             IR_ACUM.cod_ide_cli,
             IR_ACUM.cod_beneficio,
             IR_ACUM.seq_pagamento,
             IR_ACUM.cod_fcrubrica,
             IR_ACUM.seq_vig,
             IR_ACUM.val_rubrica,
             IR_ACUM.num_quota,
             IR_ACUM.flg_natureza,
             IR_ACUM.dat_ini_ref,
             IR_ACUM.dat_fim_ref

            INTO
             IR_ACUM_cod_ins,
             IR_ACUM_tip_processo,
             IR_ACUM_per_processo,
             IR_ACUM_cod_ide_cli,
             IR_ACUM_cod_beneficio,
             IR_ACUM_seq_pagamento,
             IR_ACUM_cod_fcrubrica,
             IR_ACUM_seq_vig,
             IR_ACUM_val_rubrica,
             IR_ACUM_num_quota,
             IR_ACUM_flg_natureza,
             IR_ACUM_dat_ini_ref,
             IR_ACUM_dat_fim_ref

       FROM tb_det_Calculado IR_ACUM
       WHERE IR_ACUM.cod_ins    = PAR_COD_INS
         AND IR_ACUM.PER_PROCESSO < TO_DATE('01/01/'||TO_CHAR(PAR_PER_REAL,'YYYY'),'DD/MM/YYYY')
         AND IR_ACUM.PER_PROCESSO >= TO_DATE('01/01/'||TO_CHAR(PER_ANTERIOR,'YYYY'),'DD/MM/YYYY')
         AND IR_ACUM.cod_ide_cli = ANT_IDE_CLI
         AND IR_ACUM.FLG_IR_ACUMULADO='S'
          -- Agregado 03-06-2012
         AND 1=2
         AND    EXISTS (
         SELECT 1 FROM TB_RUBRICAS RU
         WHERE RU.COD_INS=PAR_COD_INS                 AND
               RU.COD_RUBRICA =IR_ACUM.COD_FCRUBRICA  AND
               RU.TIP_EVENTO ='T'                     AND
               RU.TIP_EVENTO_ESPECIAL NOT IN ('J','I','T') AND   -- VER ADIANTAMENTO 13
               RU.DAT_INI_VIG<=PAR_PER_PRO  AND
               NVL(RU.DAT_FIM_VIG,TO_DATE('01/01/2099','DD/MM/YYYY'))>=PAR_PER_PRO
         );
   END IF;

      FETCH CUR_COMPBEN_ACUM
      INTO
             IR_ACUM_cod_ins,
             IR_ACUM_tip_processo,
             IR_ACUM_per_processo,
             IR_ACUM_cod_ide_cli,
             IR_ACUM_cod_beneficio,
             IR_ACUM_seq_pagamento,
             IR_ACUM_cod_fcrubrica,
             IR_ACUM_seq_vig,
             IR_ACUM_val_rubrica,
             IR_ACUM_num_quota,
             IR_ACUM_flg_natureza,
             IR_ACUM_dat_ini_ref,
             IR_ACUM_dat_fim_ref;




    WHILE CUR_COMPBEN_ACUM%FOUND LOOP
      BEGIN
         PERIODO_ACUMULADO:=0;
         FOR I IN 1.. tdcn_IRRF_RETRO.COUNT LOOP
            rdcn:=case when tipo_irr ='R' then  tdcn_IRRF_RETRO(I)
                       else  tdcn_ACUMULADO_13(I)  end;
          IF (
                  (
                    RDCN.DAT_INI_REF<= IR_ACUM_dat_ini_ref AND
                    RDCN.DAT_FIM_REF>= IR_ACUM_dat_ini_ref
                   ) OR
                   (
                    RDCN.DAT_INI_REF<= IR_ACUM_dat_FIM_ref AND
                    RDCN.DAT_FIM_REF>= IR_ACUM_dat_FIM_ref
                   )
             )
             AND
                 RDCN.FLG_IR_ACUMULADO='S' THEN
                 PERIODO_ACUMULADO:=1;
          END IF;


        END LOOP;
        IF PERIODO_ACUMULADO=1 THEN

                  idx_acum := idx_acum + 1;


                  tdcn_acumulado.extend;

                  rdcn.cod_ins           := IR_ACUM_cod_ins;
                  rdcn.tip_processo      := IR_ACUM_tip_processo ;
                  rdcn.per_processo      := IR_ACUM_per_processo ;
                  rdcn.cod_ide_cli       := IR_ACUM_cod_ide_cli ;
                  rdcn.cod_beneficio     := IR_ACUM_cod_beneficio;
                  rdcn.seq_pagamento     := IR_ACUM_seq_pagamento ;

                  rdcn.cod_fcrubrica     := IR_ACUM_cod_fcrubrica ;
                  rdcn.seq_vig           := IR_ACUM_seq_vig ;
                  rdcn.val_rubrica       := IR_ACUM_val_rubrica ;
                  rdcn.flg_natureza      := IR_ACUM_flg_natureza ;
                  rdcn.dat_ini_ref       := IR_ACUM_dat_ini_ref ;
                  rdcn.dat_fim_ref       := IR_ACUM_dat_fim_ref ;
                  IF  rdcn.flg_natureza ='C' THEN
                    V_BASE_IR_ACUMULADA := V_BASE_IR_ACUMULADA +rdcn.val_rubrica;
                  ELSE
                     V_BASE_IR_ACUMULADA := V_BASE_IR_ACUMULADA +(rdcn.val_rubrica*-1);
                  END IF;
                   tdcn_acumulado(idx_acum)   := rdcn;
          END IF;
      END;

      FETCH CUR_COMPBEN_ACUM
      INTO
             IR_ACUM_cod_ins,
             IR_ACUM_tip_processo,
             IR_ACUM_per_processo,
             IR_ACUM_cod_ide_cli,
             IR_ACUM_cod_beneficio,
             IR_ACUM_seq_pagamento,
             IR_ACUM_cod_fcrubrica,
             IR_ACUM_seq_vig,
             IR_ACUM_val_rubrica,
             IR_ACUM_num_quota,
             IR_ACUM_flg_natureza,
             IR_ACUM_dat_ini_ref,
             IR_ACUM_dat_fim_ref;
   END LOOP;


  END SP_OBTEM_BASE_IR_ACUM;

  PROCEDURE SP_OBTEM_IR_ACUM (tipo_irr      IN VARCHAR,
                             V_IR_ACUMULADA OUT NUMBER,
                             V_DAT_INI_IR   OUT DATE  ,
                             V_DAT_TER_IR   OUT DATE)  AS


   ------- VARIAVEIS ------
    IR_ACUM_val_rubrica   NUMBER(12,4);
    IR_ACUM_FLG_NATUREZA  CHAR(1);
    IR_ACUM_dat_ini_ref   DATE;
    IR_ACUM_dat_fim_ref   DATE;
    CUR_COMPBEN_IR_ACUM   curform;
  BEGIN

   --- EM esta rotina se separam os Valores Lancados por periodo
    -- Ano Atual
    -- Ano Anteriol
    -- Outros Anos.

   V_IR_ACUMULADA:=0;

 IF tipo_irr  ='R' THEN
  OPEN  CUR_COMPBEN_IR_ACUM FOR
      SELECT
             IR_ACUM.FLG_NATUREZA,
             IR_ACUM.VAL_RUBRICA ,
             IR_ACUM.dat_ini_ref ,
             IR_ACUM.dat_fim_ref

            INTO
             IR_ACUM_FLG_NATUREZA,
             IR_ACUM_VAL_RUBRICA ,
             IR_ACUM_dat_ini_ref ,
             IR_ACUM_dat_fim_ref

       FROM tb_det_Calculado IR_ACUM
       WHERE IR_ACUM.cod_ins    = PAR_COD_INS
         AND IR_ACUM.PER_PROCESSO < TO_DATE('01/01/'||TO_CHAR(PAR_PER_REAL,'YYYY'),'DD/MM/YYYY')
         AND IR_ACUM.PER_PROCESSO > TO_DATE('01/01/'||TO_CHAR(PER_ANTERIOR,'YYYY'),'DD/MM/YYYY')

         AND IR_ACUM.cod_ide_cli = ANT_IDE_CLI
          -- Agregado 03-06-2012
         AND 1=2
         AND EXISTS (
         SELECT 1 FROM TB_RUBRICAS RU
         WHERE RU.COD_INS=PAR_COD_INS                 AND
               RU.COD_RUBRICA =IR_ACUM.COD_FCRUBRICA  AND
               RU.TIP_EVENTO_ESPECIAL='J'             AND
               RU.DAT_INI_VIG<=PAR_PER_PRO  AND
               NVL(RU.DAT_FIM_VIG,TO_DATE('01/01/2099','DD/MM/YYYY'))>=PAR_PER_PRO
         );
  ELSE
      OPEN  CUR_COMPBEN_IR_ACUM FOR
      SELECT
             IR_ACUM.FLG_NATUREZA,
             IR_ACUM.VAL_RUBRICA ,
             IR_ACUM.dat_ini_ref ,
             IR_ACUM.dat_fim_ref

            INTO
             IR_ACUM_FLG_NATUREZA,
             IR_ACUM_VAL_RUBRICA ,
             IR_ACUM_dat_ini_ref ,
             IR_ACUM_dat_fim_ref

       FROM tb_det_Calculado IR_ACUM
       WHERE IR_ACUM.cod_ins    = PAR_COD_INS
         AND IR_ACUM.PER_PROCESSO < TO_DATE('01/01/'||TO_CHAR(PAR_PER_REAL,'YYYY'),'DD/MM/YYYY')
         AND IR_ACUM.PER_PROCESSO > TO_DATE('01/01/'||TO_CHAR(PER_ANTERIOR,'YYYY'),'DD/MM/YYYY')
         AND IR_ACUM.cod_ide_cli = ANT_IDE_CLI
         -- Agregado 03-06-2012
         AND 1=2
         AND EXISTS (
         SELECT 1 FROM TB_RUBRICAS RU
         WHERE RU.COD_INS=PAR_COD_INS                 AND
               RU.COD_RUBRICA =IR_ACUM.COD_FCRUBRICA  AND
               RU.TIP_EVENTO_ESPECIAL='B'             AND
               RU.DAT_INI_VIG<=PAR_PER_PRO  AND
               NVL(RU.DAT_FIM_VIG,TO_DATE('01/01/2099','DD/MM/YYYY'))>=PAR_PER_PRO
         );
  END IF;

      FETCH CUR_COMPBEN_IR_ACUM
      INTO
             IR_ACUM_FLG_NATUREZA,
             IR_ACUM_VAL_RUBRICA ,
             IR_ACUM_dat_ini_ref ,
             IR_ACUM_dat_fim_ref;


    WHILE CUR_COMPBEN_IR_ACUM%FOUND LOOP
    BEGIN
         FOR I IN 1.. tdcn_IRRF_RETRO.COUNT LOOP
              rdcn:=case when tipo_irr ='R' then  tdcn_IRRF_RETRO(I)
                       else  tdcn_ACUMULADO_13(I)  end;
          IF (
                  (
                    RDCN.DAT_INI_REF<= IR_ACUM_dat_ini_ref AND
                    RDCN.DAT_FIM_REF>= IR_ACUM_dat_ini_ref
                   ) OR
                   (
                    RDCN.DAT_INI_REF<= IR_ACUM_dat_FIM_ref AND
                    RDCN.DAT_FIM_REF>= IR_ACUM_dat_FIM_ref
                   )
             )
             AND
                 RDCN.FLG_IR_ACUMULADO='S' THEN
                IF IR_ACUM_FLG_NATUREZA ='D' THEN
                   V_IR_ACUMULADA :=V_IR_ACUMULADA+IR_ACUM_val_rubrica;
                ELSE
                  V_IR_ACUMULADA :=V_IR_ACUMULADA-IR_ACUM_val_rubrica;
                END IF;

                V_DAT_INI_IR   :=IR_ACUM_dat_ini_ref;
                V_DAT_TER_IR   := IR_ACUM_dat_fim_ref;
           END IF;
         END LOOP;
        FETCH CUR_COMPBEN_IR_ACUM
        INTO
             IR_ACUM_FLG_NATUREZA,
             IR_ACUM_VAL_RUBRICA ,
             IR_ACUM_dat_ini_ref ,
             IR_ACUM_dat_fim_ref;



     END;
   END LOOP;
  END SP_OBTEM_IR_ACUM;

 FUNCTION  SP_OBTEM_MESES_PAG_IRRF (TP_IRRF    IN VARCHAR
                                     ) RETURN NUMBER IS
       limit_dedu       NUMBER;
     MES_INICIO       NUMBER;
     MES_TERMINO      NUMBER;
     DAT_ANO_INICIO   DATE;
     DAT_ANO_TERMINO  DATE;
     ANO_INICIO       NUMBER;
     ANO_TERMINO      NUMBER;
     PERIODO          NUMBER;
     MES_IRRF         NUMBER;
     TOTAL_MESES      NUMBER;
     II               NUMBER;
     DET_MESES_IRRF   CHAR(13);
  BEGIN
        II:=0;
        limit_dedu := case
                             when tp_irrf ='A' then  tdcn_irrf.count
                             when tp_irrf ='R' then  tdcn_irrf_RETRO.count
                             when tp_irrf ='H' then  tdcn_ACUMULADO_13.count
                             when tp_irrf ='D' then  tdcn_irrf_RETRO13.count

                             else tdcn.count end;

       FOR i IN 1 .. limit_dedu  LOOP
          rdcn :=  case
                       when tp_irrf ='A' then  tdcn_irrf (I)
                       when tp_irrf ='R' then  tdcn_irrf_RETRO(I)
                       when tp_irrf ='H' then  tdcn_ACUMULADO_13(I)
                       when tp_irrf ='D' then  tdcn_irrf_RETRO13(I)

                       else tdcn(I)  end;

          IF (rdcn.flg_IR_ACUMULADO ='S' OR tp_irrf='D' ) and rdcn.FLG_NATUREZA ='C'   THEN

            IF TO_CHAR(RDCN.DAT_INI_REF,'YYYYMM')< TO_CHAR(DAT_ANO_INICIO,'YYYYMM')
              OR DAT_ANO_INICIO IS NULL  THEN
                 DAT_ANO_INICIO := RDCN.DAT_INI_REF ;
            END IF;
            IF RDCN.DAT_FIM_REF IS NULL THEN
               RDCN.DAT_FIM_REF:=RDCN.DAT_INI_REF;
            END IF;
            IF TO_CHAR(RDCN.DAT_FIM_REF,'YYYYMM')>TO_CHAR(DAT_ANO_TERMINO,'YYYYMM') OR
              DAT_ANO_TERMINO IS NULL THEN
                 DAT_ANO_TERMINO := RDCN.DAT_FIM_REF;
            END IF;

          END IF;

       END LOOP;

       FOR i IN 1 .. tdcn_acumuladO.count  LOOP
          rdcn := tdcn_acumulado(i);
            IF rdcn.flg_IR_ACUMULADO ='S' and rdcn.FLG_NATUREZA ='C' THEN
            IF TO_CHAR(RDCN.DAT_INI_REF,'YYYYMM')< TO_CHAR(DAT_ANO_INICIO,'YYYYMM')
              OR DAT_ANO_INICIO IS NULL  THEN
                 DAT_ANO_INICIO := RDCN.DAT_INI_REF ;
            END IF;
            IF TO_CHAR(RDCN.DAT_FIM_REF,'YYYYMM')>TO_CHAR(DAT_ANO_TERMINO,'YYYYMM') OR
              DAT_ANO_TERMINO IS NULL THEN
                 DAT_ANO_TERMINO := RDCN.DAT_FIM_REF;
            END IF;
           END IF;
       END LOOP;

        ANO_INICIO  :=TO_CHAR(DAT_ANO_INICIO,'YYYY');
        ANO_TERMINO :=TO_CHAR(DAT_ANO_TERMINO,'YYYY');
         TOTAL_MESES:=0;
       IF ANO_INICIO IS NOT NULL AND   ANO_TERMINO IS NOT NULL THEN
           FOR  PERIODO IN  ANO_INICIO  .. ANO_TERMINO  LOOP
                    MESES_IRRF:=VETOR_MES (0,0,0,0,0,0,0,0,0,0,0,0,0);
                    FOR i IN 1 .. limit_dedu  LOOP
                            rdcn :=  case
                                     when tp_irrf ='A' then  tdcn_irrf (I)
                                     when tp_irrf ='R' then  tdcn_irrf_RETRO(I)
                                     when tp_irrf ='H' then  tdcn_ACUMULADO_13(I)
                                     when tp_irrf ='D' then  tdcn_irrf_RETRO13(I)
                                     else tdcn(I)  end;

                        IF  RDCN.FLG_NATUREZA IN ('C','D') THEN
                            IF rdcn.flg_IR_ACUMULADO ='S' OR  tp_irrf ='D' THEN

                              IF TO_CHAR(RDCN.DAT_INI_REF,'YYYY')= PERIODO OR
                                 TO_CHAR(RDCN.DAT_FIM_REF,'YYYY')= PERIODO THEN
                                 IF    rdcn.cod_fcrubrica !=1860159  THEN
                                       IF TO_CHAR(RDCN.DAT_INI_REF,'YYYY')=PERIODO
                                       THEN
                                          MES_INICIO:=TO_CHAR(RDCN.DAT_INI_REF,'MM');
                                       ELSE
                                          MES_INICIO:=1;
                                       END IF;
                                       IF TO_CHAR(RDCN.DAT_FIM_REF,'YYYY')=PERIODO
                                        THEN
                                          MES_TERMINO:=TO_CHAR(RDCN.DAT_FIM_REF,'MM');
                                       ELSE
                                         IF TO_CHAR(RDCN.DAT_FIM_REF,'YYYY') IS NOT NULL THEN
                                            MES_TERMINO:=12;
                                         ELSE
                                            MES_TERMINO:=TO_CHAR(RDCN.DAT_INI_REF,'MM');
                                         END IF;
                                       END IF;
                                 END IF;
                                 IF    MES_INICIO IS NOT NULL AND
                                       MES_TERMINO IS NOT NULL THEN
                                         FOR MES_IRRF  IN MES_INICIO .. MES_TERMINO LOOP
                                            MESES_IRRF(MES_IRRF):=1;
                                         END LOOP;
                                 END IF;
                                   ---- Comentado por existir calculo automatico de IR 13 atrasado

                                --  IF  RDCN.COD_FCRUBRICA IN (2300155,2302000,1860159,2302051) THEN
                                --    MESES_IRRF(13):=1;
                                --  END IF;
                              ELSE
                                 IF TO_CHAR(RDCN.DAT_INI_REF,'YYYY')< PERIODO AND
                                    TO_CHAR(RDCN.DAT_FIM_REF,'YYYY')> PERIODO THEN
                                       IF    rdcn.cod_fcrubrica !=1860159  THEN
                                          IF TO_CHAR(RDCN.DAT_INI_REF,'YYYY')=PERIODO
                                             THEN
                                              MES_INICIO:=TO_CHAR(RDCN.DAT_INI_REF,'MM');
                                           ELSE
                                              MES_INICIO:=1;
                                           END IF;
                                           IF TO_CHAR(RDCN.DAT_FIM_REF,'YYYY')=PERIODO
                                              THEN
                                              MES_TERMINO:=TO_CHAR(RDCN.DAT_FIM_REF,'MM');
                                           ELSE
                                              MES_TERMINO:=12;
                                           END IF;
                                           IF MES_INICIO IS NOT NULL AND
                                              MES_TERMINO IS NOT NULL THEN
                                               FOR MES_IRRF  IN MES_INICIO .. MES_TERMINO LOOP
                                                  MESES_IRRF(MES_IRRF):=1;
                                               END LOOP;
                                           END IF;
                                       END IF;
                                       ---- Comentado por existir calculo automatico de IR 13 atrasado

                                       --IF  RDCN.COD_FCRUBRICA IN(2300155,2302000,1860159,2302051)  THEN
                                        --    MESES_IRRF(13):=1;
                                       --END IF;
                                  END IF;

                              END IF;
                             END IF;
                           END IF;
                      END LOOP;
                      FOR i IN 1 .. tdcn_acumuladO.count  LOOP
                        rdcn := tdcn_acumulado(i);
                           IF RDCN.FLG_NATUREZA ='C' THEN
                              IF TO_CHAR(RDCN.DAT_INI_REF,'YYYY')= PERIODO OR
                                 TO_CHAR(RDCN.DAT_FIM_REF,'YYYY')= PERIODO THEN
                                  IF    rdcn.cod_fcrubrica !=1860159  THEN
                                     IF TO_CHAR(RDCN.DAT_INI_REF,'YYYY')=PERIODO THEN
                                        MES_INICIO:=TO_CHAR(RDCN.DAT_INI_REF,'MM');
                                     ELSE
                                        MES_INICIO:=1;
                                     END IF;
                                     IF TO_CHAR(RDCN.DAT_FIM_REF,'YYYY')=PERIODO THEN
                                        MES_TERMINO:=TO_CHAR(RDCN.DAT_FIM_REF,'MM');
                                     ELSE
                                        MES_TERMINO:=12;
                                     END IF;
                                     IF MES_INICIO IS NOT NULL AND
                                        MES_TERMINO IS NOT NULL THEN
                                       FOR MES_IRRF  IN MES_INICIO .. MES_TERMINO LOOP
                                          MESES_IRRF(MES_IRRF):=1;
                                       END LOOP;
                                     END IF;
                                 END IF;
                              ---- Comentado por existir calculo automatico de IR 13 atrasado
                              --   IF  RDCN.COD_FCRUBRICA IN (2300155,2302000,1860159,2302051)  THEN
                              --             MESES_IRRF(13):=1;
                              --   END IF;
                              ELSE

                                 IF TO_CHAR(RDCN.DAT_INI_REF,'YYYY')< PERIODO AND
                                    TO_CHAR(RDCN.DAT_FIM_REF,'YYYY')> PERIODO THEN
                                        IF    rdcn.cod_fcrubrica !=1860159  THEN
                                            IF TO_CHAR(RDCN.DAT_INI_REF,'YYYY')=PERIODO THEN
                                                MES_INICIO:=TO_CHAR(RDCN.DAT_INI_REF,'MM');
                                             ELSE
                                                MES_INICIO:=1;
                                             END IF;
                                             IF TO_CHAR(RDCN.DAT_FIM_REF,'YYYY')=PERIODO THEN
                                                MES_TERMINO:=TO_CHAR(RDCN.DAT_FIM_REF,'MM');
                                             ELSE
                                                MES_TERMINO:=12;
                                             END IF;
                                             IF MES_INICIO IS NOT NULL AND
                                                MES_TERMINO IS NOT NULL THEN
                                                FOR MES_IRRF  IN MES_INICIO .. MES_TERMINO LOOP
                                                  MESES_IRRF(MES_IRRF):=1;
                                                END LOOP;
                                             END IF;
                                         END IF;
                                         ---- Comentado por existir calculo automatico de IR 13 atrasado
                                        -- IF  RDCN.COD_FCRUBRICA IN (2300155,2302000,1860159,2302051) THEN
                                        --    MESES_IRRF(13):=1;
                                        -- END IF;
                                  END IF;


                              END IF;
                            END IF;
                     END LOOP;


                      FOR ii in 1..12 LOOP
                         TOTAL_MESES:= TOTAL_MESES+ MESES_IRRF(II);
                      END LOOP;

                       TOTAL_MESES:=TOTAL_MESES+MESES_IRRF(13);

           END LOOP;
       END IF;
        IF  tp_irrf ='R' THEN
          DAT_INI_IRRF_RETRO:=DAT_ANO_INICIO;
          DAT_FIM_IRRF_RETRO:=DAT_ANO_TERMINO;
        ELSE
          DAT_INI_IRRF_HIST:=DAT_ANO_INICIO;
          DAT_FIM_IRRF_HIST:=DAT_ANO_TERMINO;
        END IF;


       RETURN TOTAL_MESES;
     ---- Obter Ano Minimo e Ano Maximo  --OK
     ---- Iterar desde Ano Minimo a Ano Maximo
     ------> Para cada registro de lancamento contar os meses no ano
     ------> Ao final dos registro de lancamento contar os meses do Ano
     --- Ao Final da Iterac?o contar o total de meses.

  END    SP_OBTEM_MESES_PAG_IRRF;

PROCEDURE SP_CALCULA_IMPOSTO2_RETRO(TotBru in number,qta_meses in number , MonImp out number) AS

    idx_ir number;
    contir number;
    valor_proc_especial number(18,4) :=0;
    LIM_SUP1 number;
    VAL_IMP1 number;
    AJUS1    number;
    LIM_SUP2 number;
    VAL_IMP2 number;
    AJUS2    number;
    LIM_SUP3 number;
    VAL_IMP3 number;
    AJUS3    number;

    PorImp  number;
    Redutor number;

    var1 number := 1;
    var2 number := 2;
    var3 number := 3;
    faixa number:=0;
    valorxx number:=null;
  BEGIN
    PorImp  := 0;
    Redutor := 0;
    MonImp  := 0;


    BEGIN
      BEGIN
        IF reg_ttypir(1) (1).val_elemento <= 0 THEN
          NULL;
        END IF;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN

          reg_ttypir.delete;
          contir := vparam.count;
          FOR c IN 1 .. contir LOOP
            rpval := vparam(c);
            IF rpval.cod_param = 'TRAM' AND rpval.cod_estrutura = 2000 THEN
              IF rpval.cod_elemento = 'IRLIM_SUP' THEN
                reg_ttypir(var1)(rpval.num_faixa) := rpval;
              ELSIF rpval.cod_elemento = 'IRVAL_AJUS' THEN
                reg_ttypir(var2)(rpval.num_faixa) := rpval;
              ELSIF rpval.cod_elemento = 'IRVAL_IMP' THEN
                reg_ttypir(var3)(rpval.num_faixa) := rpval;
              END IF;
              --              reg_ttypir.extend;
              --              idx_ir:= nvl(idx_ir,0) + 1;
              --              typir(idx_ir) := rpval;
            END IF;
          END LOOP;

      END;

      FOR c IN 1 .. 5 loop
        --reg_ttypir.count LOOP
        faixa:=reg_ttypir(var1) (c).val_elemento;
        IF TotBru <= ( reg_ttypir(var1) (c).val_elemento * qta_meses)  THEN
          --LIM_SUP1 THEN
          Redutor := reg_ttypir(var2) (c).val_elemento; --AJUS1;
          PorImp  := reg_ttypir(var3) (c).val_elemento; --VAL_IMP1;
          EXIT;
        END IF;

      END LOOP;

      MonImp := (TotBru  * (PorImp) / 100);
      MonImp := MonImp - (Redutor * qta_meses);
    END;

    --Verifica se possui Processamento Especial ocorrido neste mes se sim deduz o IR processado
    valor_proc_especial :=0;

    IF valor_proc_especial >0 AND valor_proc_especial IS NOT NULL THEN
       MonImp := MonImp - valor_proc_especial;
    END IF;
  END SP_CALCULA_IMPOSTO2_RETRO;

  PROCEDURE SP_INCLUI_DETALHE_PAG_IRRF(TP_COD_BENEFICIO IN NUMBER,
                                  TP_RUBRICA       IN NUMBER,
                                  TP_VAL_RUBRICA   IN NUMBER,
                                  TP_SEQ_VIG       IN NUMBER,
                                  TP_FLG_NATUREZA  IN VARCHAR2,
                                  TP_IRRF          IN VARCHAR) as

  BEGIN

    rdcn.cod_ins         := PAR_COD_INS;
    rdcn.tip_processo    := PAR_TIP_PRO;
    rdcn.per_processo    := PAR_PER_PRO;
    rdcn.cod_ide_cli     := ANT_IDE_CLI;
    rdcn.cod_beneficio   := TP_COD_BENEFICIO;
    rdcn.seq_pagamento   := vi_seq_pagamento;
    rdcn.seq_detalhe     := idx_seq_detalhe;
    rdcn.cod_fcrubrica   := tp_rubrica;
    rdcn.val_rubrica     := tp_val_rubrica;
    rdcn.seq_vig         := tp_seq_vig;
    rdcn.num_quota       := 0;
    rdcn.flg_natureza    := tp_flg_natureza;
    rdcn.tot_quota       := 0;

    IF TP_IRRF ='R' THEN
       rdcn.dat_ini_ref     := DAT_INI_IRRF_RETRO;
       rdcn.dat_fim_ref     := DAT_FIM_IRRF_RETRO;
    ELSE
      rdcn.dat_ini_ref     := DAT_INI_IRRF_HIST;
      rdcn.dat_fim_ref     := DAT_INI_IRRF_HIST;
    END IF;


    rdcn.cod_ide_cli_ben := NULL; --verificar
    rdcn.num_ord_jud     := NULL; --varificar
    rdcn.dat_ing         := sysdate;
    rdcn.dat_ult_atu     := sysdate;
    rdcn.nom_usu_ult_atu := PAR_COD_USU;
    rdcn.nom_pro_ult_atu := 'FOLHA CALCULADA';
    rdcn.des_informacao  :=null;
    FOR i IN 1 .. vfolha.count LOOP
      rfol := vfolha(i);
      IF RFOL.COD_BENEFICIO=rdcn.cod_beneficio   THEN
         rdcn.cod_entidade := RFOL.COD_ENTIDADE;
      END IF;
    END LOOP;

    rdcn.des_complemento := null;

    rdcn.val_rubrica_cheio := COM_VAL_RUBRICA_CHEIO;

    CASE
      WHEN  QTA_MESES = 1                        THEN rdcn.des_informacao := rpad(to_char(QTA_MESES),3,' ') || '   Mes';
      WHEN  QTA_MESES < 10  AND  QTA_MESES != 1  THEN rdcn.des_informacao := rpad(to_char(QTA_MESES),3,' ') || '  Meses';
      WHEN  QTA_MESES < 100 AND  QTA_MESES > 10  THEN rdcn.des_informacao := rpad(to_char(QTA_MESES),3,' ') || ' Meses';
      ELSE  rdcn.des_informacao := to_char(QTA_MESES)  || ' Meses';
    END CASE;
    rdcn.flg_ir_acumulado:='S';

    --- Controle de Carga de consignataria 20-01-2011
    rdcn.num_carga              :=COM_NUM_CARGA;
    rdcn.num_seq_controle_carga :=COM_NUM_SEQ_CONTROLE_CARGA;  --NUM_SEQ_CONTROLE_CARGA

    tdcn(idx_caln) := rdcn;

  END SP_INCLUI_DETALHE_PAG_IRRF;

  PROCEDURE   SP_CARREGA_DAT_PAGAMENTO AS
    NUM_PAG      NUMBER;
    c_grupo_pag  curform;
  BEGIN


       tgrup.delete;
       NUM_PAG:=1;
       OPEN c_grupo_pag FOR
          SELECT  pag.NUM_GRP_PAG ,pag.DAT_PAGAMENTO
          FROM USER_IPESP.TB_GRUPO_PAGAMENTO  pag;

        FETCH c_grupo_pag
          INTO PAG_NUM_GRP_PAG , PAG_DAT_PAGAMENTO ;

        WHILE c_grupo_pag%FOUND LOOP

           tgrup.extend;
            tgrup(NUM_PAG).NUM_GRP_PAG   :=PAG_NUM_GRP_PAG ;
            tgrup(NUM_PAG).DAT_PAGAMENTO :=PAG_DAT_PAGAMENTO;
          FETCH c_grupo_pag
           INTO PAG_NUM_GRP_PAG , PAG_DAT_PAGAMENTO  ;
           NUM_PAG:=NUM_PAG+1;
       END LOOP;
       CLOSE c_grupo_pag;
  END  SP_CARREGA_DAT_PAGAMENTO;
 ------------------------------------------------------------
 PROCEDURE SP_INCLUI_DETALHE_PAG_CONSIG(TP_COD_BENEFICIO IN NUMBER,
                                  TP_RUBRICA       IN NUMBER,
                                  TP_VAL_RUBRICA   IN NUMBER,
                                  TP_SEQ_VIG       IN NUMBER,
                                  TP_FLG_NATUREZA  IN VARCHAR2,
                                  TP_INI_REF       IN DATE,
                                  TP_FIM_REF       IN DATE,
                                  TP_DES_COMPLEMENTO IN VARCHAR,
                                  TP_DES_INFORMACAO IN VARCHAR) as
  rfol_pag      TB_FOLHA%ROWTYPE; -- Armazena Totais
  BEGIN

    rdcn.cod_ins         := PAR_COD_INS;
    rdcn.tip_processo    := PAR_TIP_PRO;
    rdcn.per_processo    := PAR_PER_PRO;
    rdcn.cod_ide_cli     := ANT_IDE_CLI;
    rdcn.cod_beneficio   := TP_COD_BENEFICIO;
    rdcn.seq_pagamento   := vi_seq_pagamento;
    rdcn.seq_detalhe     := idx_seq_detalhe;
    rdcn.cod_fcrubrica   := tp_rubrica;
    rdcn.val_rubrica     := tp_val_rubrica;
    rdcn.seq_vig         := tp_seq_vig;
    rdcn.num_quota       := 0;
    rdcn.flg_natureza    := tp_flg_natureza;
    rdcn.tot_quota       := 0;
    rdcn.dat_ini_ref     := TP_INI_REF;
    rdcn.dat_fim_ref     := TP_FIM_REF;
    rdcn.cod_ide_cli_ben := NULL; --verificar
    rdcn.num_ord_jud     := NULL; --varificar
    rdcn.dat_ing         := sysdate;
    rdcn.dat_ult_atu     := sysdate;
    rdcn.nom_usu_ult_atu := PAR_COD_USU;
    rdcn.nom_pro_ult_atu := 'FOLHA CONSIG';
    rdcn.des_complemento :=TP_DES_COMPLEMENTO;
    rdcn.des_informacao  :=TP_DES_INFORMACAO;

    FOR i IN 1 .. vfolha.count LOOP
      rfol_pag := vfolha(i);
      IF rfol_pag.COD_BENEFICIO=rdcn.cod_beneficio   THEN
         rdcn.cod_entidade :=rfol_pag.COD_ENTIDADE;
      END IF;
    END LOOP;



    rdcn.val_rubrica_cheio := COM_VAL_RUBRICA_CHEIO;

    IF VI_NUM_DEP_ECO > 0 AND trunc(tp_rubrica / 100, 000) in (70012,70014) THEN
      rdcn.des_informacao := to_char(VI_NUM_DEP_ECO, '09') || ' Dep.';
    END IF;
    --- Controle de Carga de consignataria 20-01-2011
    rdcn.num_carga              :=COM_NUM_CARGA;
    rdcn.num_seq_controle_carga :=COM_NUM_SEQ_CONTROLE_CARGA;  --NUM_SEQ_CONTROLE_CARGA

    tdcn(idx_caln) := rdcn;

  END SP_INCLUI_DETALHE_PAG_CONSIG;


PROCEDURE SP_SEPARA_IRRF_SUP ( IDX_IRRF2       OUT NUMBER,
                               IDX_IRRF2_RETRO OUT NUMBER,
                               IDX_IRRF2_HISTO OUT NUMBER
                            ) AS

   IDX_IRRF             NUMBER;
   IDX_IRRF_RETRO       NUMBER;
   IDX_IRRF_HISTO       NUMBER;
   CUR_COMPBEN_RET      curform;
   RFOL_SUP             TB_FOLHA%ROWTYPE;
       ----- suplemetar do MES
    SUP_COD_INS         NUMBER;
     SUP_TIP_PROCESSO   VARCHAR2(1);
    SUP_PER_PROCESSO    DATE;
    SUP_COD_IDE_CLI     VARCHAR2(20);
    SUP_COD_BENEFICIO   NUMBER;
    SUP_SEQ_PAGAMENTO   NUMBER;
    SUP_COD_FCRUBRICA   NUMBER;
    SUP_COD_ENTIDADE    NUMBER(8);
    SUP_TIP_EVENTO_ESPECIAL CHAR(1);
    SUP_SEQ_VIG         NUMBER;
    SUP_VAL_RUBRICA     NUMBER;
    SUP_NUM_QUOTA       NUMBER;
    SUP_FLG_NATUREZA    VARCHAR2(1);
    SUP_TOT_QUOTA       NUMBER;
    SUP_DAT_INI_REF     DATE;
    SUP_DAT_FIM_REF     DATE;
    SUP_COD_IDE_CLI_BEN VARCHAR2(20);
    SUP_NUM_ORD_JUD     NUMBER;
    SUP_DAT_ING         DATE;
    SUP_DAT_ULT_ATU     DATE;
    SUP_NOM_USU_ULT_ATU VARCHAR2(20);
    SUP_NOM_PRO_ULT_ATU VARCHAR2(20);
    SUP_RET_SUP         CHAR(1);
    SUP_COMPLEMENTO     VARCHAR2(15);
    SUP_INFORMACAO      VARCHAR2(10);
    PAR_REAL_TEM        DATE;

  BEGIN

   --- EM esta rotina se separam os Valores Lancados por periodo
    -- Periodo Atual
    -- Periodo Anteriol


      tdcn_IRRF.DELETE;
      tdcn_IRRF_RETRO.DELETE;


      IDX_IRRF            :=0;
      IDX_IRRF_RETRO      :=0;
      IDX_IRRF_HISTO      :=0;

      DAT_INI_IRRF_RETRO  :=NULL;
      DAT_FIM_IRRF_RETRO  :=NULL;

    -------------------------
/*     PAR_REAL_TEM :=PAR_PER_REAL;
     IF PAR_TIP_PRO ='S' AND TO_CHAR(PAR_PER_REAL,'MM') =12 THEN
       PAR_PER_REAL :=ADD_MONTHS(PAR_PER_REAL,1);
     END IF; */

      PER_ANTERIOR        := ADD_MONTHS(TO_DATE('01/01/'||TO_CHAR(PAR_PER_REAL,'YYYY'),'DD/MM/YYYY'),-1);
      PER_HANTERIOR       := ADD_MONTHS(TO_DATE('01/01/'||TO_CHAR(PER_ANTERIOR,'YYYY'),'DD/MM/YYYY'),-1);

      FOR i in 1 .. tdcn.count LOOP
         rdcn := tdcn(i);

         IDX_IRRF:=IDX_IRRF+1;
         tdcn_IRRF.extend;

         IDX_IRRF_RETRO:=IDX_IRRF_RETRO+1;
         tdcn_IRRF_RETRO.extend;
         tdcn_ACUMULADO_13.extend;
/*           IF (
                 ( TO_CHAR(PAR_PER_REAL,'YYYY')= TO_CHAR(rdcn.PER_PROCESSO,'YYYY')
                 ) AND
                 (
                   TO_CHAR(PAR_PER_REAL,'YYYY')= TO_CHAR(rdcn.dat_ini_ref,'YYYY')
                  )
               ) OR
                --- 20130312 AGREGADO EVENTO '1' ANTES -- ='H
               ( nvl(rdcn.tip_evento_especial,'0') IN ('H','1')  AND
                  TO_CHAR(rdcn.dat_ini_ref,'YYYY')=TO_CHAR(PER_ANTERIOR ,'YYYY')

               )
               --
               OR (  ---- O Residente no Extrangeiro n?o calcula RRA
                     VI_IR_EXTERIOR
                   )
           THEN
              tdcn_IRRF(IDX_IRRF):= rdcn;

             ELSE
                   IF DAT_INI_IRRF_RETRO  IS NULL OR rdcn.dat_ini_ref <DAT_INI_IRRF_RETRO  THEN
                      DAT_INI_IRRF_RETRO :=rdcn.dat_ini_ref ;
                   END IF;
                   IF DAT_FIM_IRRF_RETRO  IS NULL OR rdcn.dat_fim_ref >DAT_fim_IRRF_RETRO  THEN
                      DAT_FIM_IRRF_RETRO :=case when rdcn.dat_FIM_ref is null then
                                                      rdcn.dat_ini_ref else
                                                      rdcn.dat_FIM_ref end;
                   END IF;
                   tdcn_IRRF_RETRO(IDX_IRRF_RETRO):=rdcn;

          END IF;*/
                       ------------------------ Bloco Sequndario -------
              IF
                     PAR_PER_REAL                    = rdcn.PER_PROCESSO
               AND   TO_CHAR(PAR_PER_REAL,'MM')      =  12
               AND   (TO_CHAR(rdcn.dat_ini_ref,'MM') != '12' OR
                      TO_CHAR(rdcn.dat_ini_ref,'YYYY')!=TO_CHAR(rdcn.PER_PROCESSO,'YYYY')
                     )
               AND NOT (  VI_IR_EXTERIOR   ) ---- Calculo de Ir para Residentes no Exterior

             THEN
                  tdcn_IRRF_RETRO(IDX_IRRF_RETRO):=rdcn;
             ELSE
               IF (
                     ( TO_CHAR(PAR_PER_REAL,'YYYY')= TO_CHAR(rdcn.PER_PROCESSO,'YYYY')
                     ) AND
                     (
                       TO_CHAR(PAR_PER_REAL,'YYYY')= TO_CHAR(rdcn.dat_ini_ref,'YYYY')
                      )
                   ) OR

                   (  nvl(rdcn.tip_evento_especial,'0') IN ('H' ) AND
                      TO_CHAR(rdcn.dat_ini_ref,'YYYY')=TO_CHAR(PER_ANTERIOR ,'YYYY')

                   )
                  OR

                   (  VI_IR_EXTERIOR   )  ---- Calculo de Ir para Residentes no Exterior

                  OR -- AGREGADO PARA ATENDER TASK 1768 CONSIDERAR DEC ANO ANTERIOR COM
                      -- IR DO PERIODO -06-08-2913 JTS
                    (
                      TO_CHAR(rdcn.dat_ini_ref,'YYYY')=TO_CHAR(PER_ANTERIOR ,'YYYY')
                         AND
                       (TO_CHAR(rdcn.dat_ini_ref,'MM')='12' )
                     )

               THEN
                  tdcn_IRRF(IDX_IRRF):= rdcn;
                 ELSE
                       IF DAT_INI_IRRF_RETRO  IS NULL OR rdcn.dat_ini_ref <DAT_INI_IRRF_RETRO  THEN
                          DAT_INI_IRRF_RETRO :=rdcn.dat_ini_ref ;
                       END IF;
                       IF DAT_FIM_IRRF_RETRO  IS NULL OR rdcn.dat_fim_ref >DAT_fim_IRRF_RETRO  THEN
                          DAT_FIM_IRRF_RETRO :=case when rdcn.dat_FIM_ref is null then
                                                          rdcn.dat_ini_ref else
                                                          rdcn.dat_FIM_ref end;
                       END IF;
                       tdcn_IRRF_RETRO(IDX_IRRF_RETRO):=rdcn;

                 END IF;
           END IF;


      END LOOP;

      ------------- carrega Valores Do Mes ------

       FOR  INDEX_BEN   IN 1 .. vfolha.count LOOP
       RFOL_SUP := vFOLHA( INDEX_BEN  );

           OPEN CUR_COMPBEN_RET FOR

                        SELECT RET.cod_ins,
                               tip_processo,
                               per_processo,
                               RET.cod_ide_cli,
                               RET.cod_beneficio,
                               seq_pagamento,
                               RET.cod_fcrubrica,
                               RET.seq_vig,
                               RET.val_rubrica,
                               RET.num_quota,
                               RET.flg_natureza,
                               RET.tot_quota,
                               RET.dat_ini_ref,
                               RET.dat_fim_ref,
                               RET.cod_ide_cli_ben,
                               RET.num_ord_jud,
                               RET.dat_ing,
                               RET.dat_ult_atu,
                               RET.nom_usu_ult_atu,
                               RET.nom_pro_ult_atu,
                               'R',
                               DES_INFORMACAO,
                               DES_COMPLEMENTO,
                               CC.COD_ENTIDADE,
                               RR. TIP_EVENTO_ESPECIAL
                          INTO SUP_COD_INS,
                               SUP_TIP_PROCESSO,
                               SUP_PER_PROCESSO,
                               SUP_COD_IDE_CLI,
                               SUP_COD_BENEFICIO,
                               SUP_SEQ_PAGAMENTO,
                               SUP_COD_FCRUBRICA,
                               SUP_SEQ_VIG,
                               SUP_VAL_RUBRICA,
                               SUP_NUM_QUOTA,
                               SUP_FLG_NATUREZA,
                               SUP_TOT_QUOTA,
                               SUP_DAT_INI_REF,
                               SUP_DAT_FIM_REF,
                               SUP_COD_IDE_CLI_BEN,
                               SUP_NUM_ORD_JUD,
                               SUP_DAT_ING,
                               SUP_DAT_ULT_ATU,
                               SUP_NOM_USU_ULT_ATU,
                               SUP_NOM_PRO_ULT_ATU,
                               SUP_RET_SUP,
                               SUP_INFORMACAO,
                               SUP_COMPLEMENTO,
                               SUP_COD_ENTIDADE,
                               SUP_TIP_EVENTO_ESPECIAL

                          FROM tb_hdet_calculado RET, TB_CONCESSAO_BENEFICIO CC
                               , tb_rubricas rr
                         WHERE RET.cod_ins = PAR_COD_INS
                           AND cod_ide_cli =RFOL_SUP.COD_IDE_CLI
                           AND per_processo = PAR_PER_PRO
                           AND tip_processo IN ('N', 'S')
                           AND RET.cod_beneficio > 0
                           AND CC.COD_INS       = PAR_COD_INS
                           AND CC.COD_BENEFICIO = RFOL_SUP.COD_BENEFICIO
                           AND CC.COD_BENEFICIO =RET.COD_BENEFICIO
                           AND RR.COD_INS =CC.COD_INS
                           AND RR.COD_RUBRICA=RET.COD_FCRUBRICA
                           AND RR.COD_ENTIDADE=RFOL_SUP.COD_ENTIDADE
                           ----- Rubricas Dec 13
                           AND RR.tip_evento_especial not in  (/*'T',*/'B','3');


                      FETCH  CUR_COMPBEN_RET
                        INTO  SUP_COD_INS,
                               SUP_TIP_PROCESSO,
                               SUP_PER_PROCESSO,
                               SUP_COD_IDE_CLI,
                               SUP_COD_BENEFICIO,
                               SUP_SEQ_PAGAMENTO,
                               SUP_COD_FCRUBRICA,
                               SUP_SEQ_VIG,
                               SUP_VAL_RUBRICA,
                               SUP_NUM_QUOTA,
                               SUP_FLG_NATUREZA,
                               SUP_TOT_QUOTA,
                               SUP_DAT_INI_REF,
                               SUP_DAT_FIM_REF,
                               SUP_COD_IDE_CLI_BEN,
                               SUP_NUM_ORD_JUD,
                               SUP_DAT_ING,
                               SUP_DAT_ULT_ATU,
                               SUP_NOM_USU_ULT_ATU,
                               SUP_NOM_PRO_ULT_ATU,
                               SUP_RET_SUP,
                               SUP_INFORMACAO,
                               SUP_COMPLEMENTO,
                               SUP_COD_ENTIDADE,
                               SUP_TIP_EVENTO_ESPECIAL;

                      WHILE CUR_COMPBEN_RET%FOUND LOOP
                        BEGIN
                             rdcn.cod_ins            := SUP_COD_INS;
                            rdcn.tip_processo       := PAR_TIP_PRO;
                            rdcn.per_processo       := PAR_PER_PRO;
                            rdcn.cod_ide_cli        := SUP_COD_IDE_CLI;
                            rdcn.cod_beneficio      := SUP_COD_BENEFICIO;
                            rdcn.seq_pagamento      := SUP_seq_pagamento;
                            rdcn.seq_detalhe        := 1;--SUP_seq_detalhe;
                            rdcn.cod_fcrubrica      := SUP_COD_FCRUBRICA;
                            rdcn.seq_vig            := SUP_SEQ_VIG;
                            rdcn.val_rubrica        := SUP_VAL_RUBRICA;
                            rdcn.val_rubrica_cheio  := SUP_VAL_RUBRICA;
                            rdcn.num_quota          := SUP_NUM_QUOTA;
                            rdcn.flg_natureza       := SUP_flg_natureza;
                            rdcn.tot_quota          := SUP_tot_quota;
                            rdcn.dat_ini_ref        := SUP_DAT_INI_REF;
                            rdcn.dat_fim_ref        := SUP_dat_fim_ref;
                            rdcn.num_ord_jud        := SUP_NUM_ORD_JUD;
                            rdcn.cod_ide_cli_ben    := SUP_COD_IDE_CLI_BEN;
                            rdcn.dat_ing            := sysdate;
                            rdcn.dat_ult_atu        := sysdate;
                            rdcn.nom_usu_ult_atu    := SUP_nom_usu_ult_atu;
                            rdcn.nom_pro_ult_atu    := 'FOLHA CALCULADA';
                            rdcn.des_informacao     := SUP_informacao;
                            rdcn.des_complemento    := SUP_complemento;
                            rdcn.cod_entidade       := SUP_cod_entidade;
                            rdcn.tip_evento_especial:= SUP_TIP_EVENTO_ESPECIAL;


                             IDX_IRRF:=IDX_IRRF+1;
                             tdcn_IRRF.extend;

                             IDX_IRRF_RETRO:=IDX_IRRF_RETRO+1;
                             tdcn_IRRF_RETRO.extend;
                             tdcn_ACUMULADO_13.extend;
/*                             IF (
                                   ( TO_CHAR(PAR_PER_REAL,'YYYY')= TO_CHAR(rdcn.PER_PROCESSO,'YYYY')
                                   ) AND
                                   (
                                     TO_CHAR(PAR_PER_REAL,'YYYY')= TO_CHAR(rdcn.dat_ini_ref,'YYYY')
                                    )
                                 ) OR
                                 (  nvl(rdcn.tip_evento_especial,'0') ='H' AND
                                    TO_CHAR(rdcn.dat_ini_ref,'YYYY')=TO_CHAR(PER_ANTERIOR ,'YYYY')

                                 )
                                 OR (  ---- O Residente no Extrangeiro n?o calcula RRA
                                      VI_IR_EXTERIOR
                                    )
                             THEN
                                tdcn_IRRF(IDX_IRRF):= rdcn;
                               ELSE
                                     IF DAT_INI_IRRF_RETRO  IS NULL OR rdcn.dat_ini_ref <DAT_INI_IRRF_RETRO  THEN
                                        DAT_INI_IRRF_RETRO :=rdcn.dat_ini_ref ;
                                     END IF;
                                     IF DAT_FIM_IRRF_RETRO  IS NULL OR rdcn.dat_fim_ref >DAT_fim_IRRF_RETRO  THEN
                                        DAT_FIM_IRRF_RETRO :=case when rdcn.dat_FIM_ref is null then
                                                                        rdcn.dat_ini_ref else
                                                                        rdcn.dat_FIM_ref end;
                                     END IF;
                                     tdcn_IRRF_RETRO(IDX_IRRF_RETRO):=rdcn;

                            END IF;*/

                                       ------------------------ Bloco Sequndario -------
                              IF
                                     PAR_PER_REAL                    = rdcn.PER_PROCESSO
                               AND   TO_CHAR(PAR_PER_REAL,'MM')      =  12
                               AND   (TO_CHAR(rdcn.dat_ini_ref,'MM') != '12' OR
                                      TO_CHAR(rdcn.dat_ini_ref,'YYYY')!=TO_CHAR(rdcn.PER_PROCESSO,'YYYY')
                                     )
                               AND NOT (  VI_IR_EXTERIOR   ) ---- Calculo de Ir para Residentes no Exterior

                             THEN
                                  tdcn_IRRF_RETRO(IDX_IRRF_RETRO):=rdcn;
                             ELSE
                               IF (
                                     ( TO_CHAR(PAR_PER_REAL,'YYYY')= TO_CHAR(rdcn.PER_PROCESSO,'YYYY')
                                     ) AND
                                     (
                                       TO_CHAR(PAR_PER_REAL,'YYYY')= TO_CHAR(rdcn.dat_ini_ref,'YYYY')
                                      )
                                   ) OR

                                   (  nvl(rdcn.tip_evento_especial,'0') IN ('H' ) AND
                                      TO_CHAR(rdcn.dat_ini_ref,'YYYY')=TO_CHAR(PER_ANTERIOR ,'YYYY')

                                   )
                                  OR

                                   (  VI_IR_EXTERIOR   )  ---- Calculo de Ir para Residentes no Exterior

                                  OR -- AGREGADO PARA ATENDER TASK 1768 CONSIDERAR DEC ANO ANTERIOR COM
                                      -- IR DO PERIODO -06-08-2913 JTS
                                    (
                                      TO_CHAR(rdcn.dat_ini_ref,'YYYY')=TO_CHAR(PER_ANTERIOR ,'YYYY')
                                         AND
                                       (TO_CHAR(rdcn.dat_ini_ref,'MM')='12' )
                                     )



                               THEN
                                  tdcn_IRRF(IDX_IRRF):= rdcn;
                                 ELSE
                                       IF DAT_INI_IRRF_RETRO  IS NULL OR rdcn.dat_ini_ref <DAT_INI_IRRF_RETRO  THEN
                                          DAT_INI_IRRF_RETRO :=rdcn.dat_ini_ref ;
                                       END IF;
                                       IF DAT_FIM_IRRF_RETRO  IS NULL OR rdcn.dat_fim_ref >DAT_fim_IRRF_RETRO  THEN
                                          DAT_FIM_IRRF_RETRO :=case when rdcn.dat_FIM_ref is null then
                                                                          rdcn.dat_ini_ref else
                                                                          rdcn.dat_FIM_ref end;
                                       END IF;
                                       tdcn_IRRF_RETRO(IDX_IRRF_RETRO):=rdcn;

                                 END IF;
                           END IF;

                          END;
                        ----> FETCH
                        FETCH  CUR_COMPBEN_RET
                        INTO  SUP_COD_INS,
                               SUP_TIP_PROCESSO,
                               SUP_PER_PROCESSO,
                               SUP_COD_IDE_CLI,
                               SUP_COD_BENEFICIO,
                               SUP_SEQ_PAGAMENTO,
                               SUP_COD_FCRUBRICA,
                               SUP_SEQ_VIG,
                               SUP_VAL_RUBRICA,
                               SUP_NUM_QUOTA,
                               SUP_FLG_NATUREZA,
                               SUP_TOT_QUOTA,
                               SUP_DAT_INI_REF,
                               SUP_DAT_FIM_REF,
                               SUP_COD_IDE_CLI_BEN,
                               SUP_NUM_ORD_JUD,
                               SUP_DAT_ING,
                               SUP_DAT_ULT_ATU,
                               SUP_NOM_USU_ULT_ATU,
                               SUP_NOM_PRO_ULT_ATU,
                               SUP_RET_SUP,
                               SUP_INFORMACAO,
                               SUP_COMPLEMENTO,
                               SUP_COD_ENTIDADE,
                               SUP_TIP_EVENTO_ESPECIAL;
                       END LOOP;
                close CUR_COMPBEN_RET;
      END LOOP;

      --------------------------------------------


      IDX_IRRF2:=IDX_IRRF;
      IDX_IRRF2_RETRO:=IDX_IRRF_RETRO;
      tdcn_IRRF.extend;
      tdcn_IRRF_RETRO.extend;
     -- PAR_PER_REAL   :=PAR_REAL_TEM;
  END SP_SEPARA_IRRF_SUP;

  ----------------CORRECAO MONETARIA ---
    -- SP_OBTEM_FATOR_CORRECAO: Obtem fator de correc?o nos casos de retroativo
  PROCEDURE SP_OBTEM_FATOR_CORRECAO_UFESP(
                                    ANO_ATUAL in NUMBER,
                                    ANO_RETRO in NUMBER,
                                    O_FATOR_CORRECAO OUT NUMBER) AS
    O_FATOR_MES_ATUAL NUMBER(18, 4);
    O_FATOR_MES_RETRO NUMBER(18, 4);
  BEGIN


    BEGIN
        SELECT op.val_fator
          INTO O_FATOR_MES_ATUAL
          FROM user_ipesp.tb_ufesp_aposentado op
         WHERE op.ano_ufesp = ANO_ATUAL;


    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        O_FATOR_MES_ATUAL  := 0;
        O_FATOR_CORRECAO   := 0;
      WHEN OTHERS THEN
        p_sub_proc_erro := 'SP_OBTEM_FATOR_CORRECAOATUAL';
        p_coderro       := SQLCODE;
        P_MSGERRO       := 'Erro ao obter o fator de correcao mes';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              0,
                              0);
        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
    END;

    BEGIN
        SELECT
                     op.val_fator
                INTO O_FATOR_MES_RETRO
                FROM  user_ipesp.tb_ufesp_aposentado op
                WHERE op.ano_ufesp=ANO_RETRO;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        O_FATOR_MES_RETRO := 0;
        O_FATOR_CORRECAO  := 0;
       WHEN OTHERS THEN
        p_sub_proc_erro := 'SP_OBTEM_FATOR_CORRECAOATUAL';
        p_coderro       := SQLCODE;
        P_MSGERRO       := 'Erro ao obter o fator de correcao mes';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              0,
                              0);
        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
    END;

        O_FATOR_CORRECAO :=0;

   IF O_FATOR_MES_RETRO <>0  AND
      O_FATOR_MES_ATUAL <> 0 THEN
      O_FATOR_CORRECAO :=round((O_FATOR_MES_ATUAL-O_FATOR_MES_RETRO )/O_FATOR_MES_RETRO,6);
   END IF;

    RETURN;

  END SP_OBTEM_FATOR_CORRECAO_UFESP ;

   PROCEDURE SP_CALCULA_CORRECAO_UFESP AS
    W_FLG_CORRECAO BOOLEAN;
    W_ANO_INICIO      NUMBER;
    W_ANO_ANTERIOR    NUMBER(4);
    W_ANO_TERMINO     NUMBER(4);
    W_VAL_RUBRICA     NUMBER(10,4);
    W_TOT_RUBRICA     NUMBER(10,4);
    W_FATOR_CORRECAO  NUMBER(10,6);
    W_COD_ENTIDADE    NUMBER;
    W_ITERA_ANO       NUMBER;
    COD_BENEFICIO_RET NUMBER;

    V_ANO_INICIO    CHAR(4);
    V_ANO_ANTERIOR  CHAR(4);
   BEGIN

    BEGIN

      COD_BENEFICIO_RET:=0;
      FOR  INDEX_BEN   IN 1 .. vfolha.count LOOP
       IF vfolha( INDEX_BEN).TIP_BENEFICIO!='PENSIONISTA' AND
          vfolha( INDEX_BEN).COD_ENTIDADE !=5 THEN
          COD_BENEFICIO_RET := v_cod_beneficio( INDEX_BEN);
          W_COD_ENTIDADE    := vfolha(INDEX_BEN).cod_entidade;
           W_ANO_TERMINO:=TO_NUMBER(TO_CHAR(PAR_PER_REAL,'YYYY'));
           SP_VERIFICA_CORRECAO_MONETARIA(ANT_IDE_CLI,W_ANO_INICIO  ,W_FLG_CORRECAO );
           IF W_FLG_CORRECAO  THEN
                     V_ANO_INICIO   := TO_CHAR(W_ANO_INICIO);
                     V_ANO_ANTERIOR := TO_CHAR((W_ANO_INICIO-1));
              FOR W_ITERA_ANO IN W_ANO_INICIO .. (W_ANO_TERMINO-1)  LOOP
                      V_ANO_INICIO   := TO_CHAR(W_ITERA_ANO);
                      V_ANO_ANTERIOR := TO_CHAR(W_ITERA_ANO -1);

                 BEGIN
                      SELECT
                             SUM(DECODE(FLG_NATUREZA,
                                       'C',
                                       val_rubrica,
                                       val_rubrica * -1)) val_rubrica
                      INTO W_VAL_RUBRICA
                       FROM (

                             SELECT
                                     RET.val_rubrica,
                                     RET.flg_natureza

                               FROM tb_det_ret             RET,
                                     TB_CONCESSAO_BENEFICIO CC,
                                     TB_RUBRICAS            RU
                              WHERE RET.cod_ins =  PAR_COD_INS
                                AND cod_ide_cli =ANT_IDE_CLI
                                AND CC.COD_BENEFICIO =  COD_BENEFICIO_RET
                                AND RET.PER_PROCESSO = PAR_PER_PRO
                                AND tip_processo IN ('R', 'T')
                                AND RET.cod_beneficio > 0
                                AND CC.COD_INS =   PAR_COD_INS
                                AND CC.COD_BENEFICIO = RET.COD_BENEFICIO
                                AND RU.COD_INS = CC.COD_INS
                                AND RU.COD_ENTIDADE = CC.COD_ENTIDADE
                                AND RU.COD_RUBRICA = RET.COD_FCRUBRICA
                                AND
                                (
                                  (    TO_CHAR(RET.DAT_INI_REF,'YYYY')= V_ANO_INICIO
                                   AND TO_CHAR(RET.DAT_INI_REF,'MM') <12
                                   ) OR
                                  (    TO_CHAR(RET.DAT_INI_REF,'YYYY')= V_ANO_ANTERIOR
                                   AND TO_CHAR(RET.DAT_INI_REF,'MM') =12
                                   )

                                )

                                AND EXISTS  (
                                 SELECT 1 FROM  TB_COMPOE_DET  TT
                                 WHERE
                                    TT.COD_INS=PAR_COD_INS                      AND
                                    TT.COD_FCRUBRICA_COMPOSTA=1300200 AND  -- 1300500
                                    TT.COD_FCRUBRICA_COMPOE =RET.COD_FCRUBRICA AND
                                    TT.COD_ENTIDADE_COMPOSTA=CC.COD_ENTIDADE   AND
                                    TT.DAT_INI_VIG <=PAR_PER_PRO AND
                                    NVL (TT.DAT_FIM_VIG,PAR_PER_PRO) >=PAR_PER_PRO
                                )

                             union all
                             SELECT  RET.val_rubrica,
                                     RET.flg_natureza
                               FROM tb_valor_npago_ret     RET,
                                    TB_CONCESSAO_BENEFICIO CC,
                                    USER_IPESP.TB_RUBRICAS RU
                              WHERE RET.cod_ins =  PAR_COD_INS
                                AND cod_ide_cli =ANT_IDE_CLI
                                AND CC.COD_BENEFICIO =  COD_BENEFICIO_RET
                                AND RET.PER_PROCESSO = PAR_PER_PRO
                                AND tip_processo IN ('R', 'T')
                                AND ind_processo = 'S'
                                AND ind_inclui_folha = 'S'
                                AND RET.cod_beneficio > 0
                                AND CC.COD_INS =  PAR_COD_INS
                                AND CC.COD_BENEFICIO = RET.COD_BENEFICIO
                                AND RU.COD_INS = CC.COD_INS
                                AND RU.COD_ENTIDADE = CC.COD_ENTIDADE
                                AND RU.COD_RUBRICA = RET.COD_FCRUBRICA
                                AND
                                (
                                  (    TO_CHAR(RET.DAT_INI_REF,'YYYY')= V_ANO_INICIO
                                   AND TO_CHAR(RET.DAT_INI_REF,'MM') <'12'
                                   ) OR
                                  (    TO_CHAR(RET.DAT_INI_REF,'YYYY')= V_ANO_ANTERIOR
                                   AND TO_CHAR(RET.DAT_INI_REF,'MM') ='12'
                                   )

                                )
                                AND EXISTS  (
                                 SELECT 1 FROM  TB_COMPOE_DET  TT
                                 WHERE
                                    TT.COD_INS=PAR_COD_INS                      AND
                                    TT.COD_FCRUBRICA_COMPOSTA=1300200 AND  -- 1300500
                                    TT.COD_FCRUBRICA_COMPOE =RET.COD_FCRUBRICA AND
                                    TT.COD_ENTIDADE_COMPOSTA=CC.COD_ENTIDADE   AND
                                    TT.DAT_INI_VIG <=PAR_PER_PRO               AND
                                    NVL (TT.DAT_FIM_VIG,PAR_PER_PRO) >=PAR_PER_PRO
                                )

                              )
                     HAVING ABS(SUM(DECODE(FLG_NATUREZA, 'C', val_rubrica, val_rubrica * -1))) > 0;
                   EXCEPTION
                      WHEN NO_DATA_FOUND THEN
                       W_VAL_RUBRICA:=0;
                       WHEN OTHERS THEN
                        p_sub_proc_erro := 'SP_OBTEM_FATOR_CORRECAOATUAL';
                        p_coderro       := SQLCODE;
                        P_MSGERRO       := 'Erro ao obter o fator de correcao mes';
                        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                              p_coderro,
                                              'Calcula Folha',
                                              sysdate,
                                              p_msgerro,
                                              p_sub_proc_erro,
                                              0,
                                              0);
                        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;

                   END;
                  ---------------------------
                  IF W_VAL_RUBRICA >0 THEN
                      SP_OBTEM_FATOR_CORRECAO_UFESP(
                                        W_ANO_TERMINO      ,
                                        W_ITERA_ANO        ,
                                        W_FATOR_CORRECAO  );


                   -----------------------------------

                     tdcn.extend;
                     idx_caln := nvl(idx_caln, 0) + 1;
                     idx_seq_detalhe := idx_seq_detalhe + 1;

                      rdcn.cod_ins            := PAR_COD_INS;
                      rdcn.tip_processo       := PAR_TIP_PRO;
                      rdcn.per_processo       := PAR_PER_PRO;
                      rdcn.cod_ide_cli        := ANT_IDE_CLI;
                      rdcn.cod_beneficio      := COD_BENEFICIO_RET;
                      rdcn.seq_pagamento      := vi_seq_pagamento;
                      rdcn.seq_detalhe        := idx_seq_detalhe;
                      rdcn.cod_fcrubrica      := 1300200;
                      rdcn.seq_vig            := 1;
                      rdcn.val_rubrica        := ROUND(W_VAL_RUBRICA*W_FATOR_CORRECAO,2) ;
                      rdcn.val_rubrica_cheio  := ROUND(W_VAL_RUBRICA*W_FATOR_CORRECAO,2);
                      rdcn.num_quota          := 1;
                      rdcn.flg_natureza       := 'C';
                      rdcn.tot_quota          := 1;
                      rdcn.dat_ini_ref        := PAR_PER_PRO;
                      rdcn.dat_fim_ref        := TO_DATE('01/12/'|| V_ANO_INICIO,'DD/MM/YYYY');
                      rdcn.num_ord_jud        := NULL;
                      rdcn.cod_ide_cli_ben    := NULL;
                      rdcn.dat_ing            := sysdate;
                      rdcn.dat_ult_atu        := sysdate;
                      rdcn.nom_usu_ult_atu    := 'FOLHA';
                      rdcn.nom_pro_ult_atu    := 'FOLHA CALCULADA';
                      rdcn.des_informacao     := null;
                      rdcn.des_complemento    := 'Ret.Corr';
                      rdcn.cod_entidade       := W_COD_ENTIDADE;
                      rdcn.tip_evento_especial:='V';
                      rdcn.TIP_PROCESSO_REAL  :='N';
                      tdcn(idx_caln):= rdcn;
                    -----------------------------------



                  END IF;
              ------ RUBRICA DE 13 SALARIO -----
                  W_VAL_RUBRICA :=0;
                  BEGIN
                      SELECT
                             SUM(DECODE(FLG_NATUREZA,
                                       'C',
                                       val_rubrica,
                                       val_rubrica * -1)) val_rubrica
                      INTO W_VAL_RUBRICA
                       FROM (

                             SELECT
                                     RET.val_rubrica,
                                     RET.flg_natureza

                               FROM tb_det_ret             RET,
                                     TB_CONCESSAO_BENEFICIO CC,
                                     TB_RUBRICAS            RU
                              WHERE RET.cod_ins =  PAR_COD_INS
                                AND cod_ide_cli =ANT_IDE_CLI
                                AND CC.COD_BENEFICIO =  COD_BENEFICIO_RET
                                AND RET.PER_PROCESSO = PAR_PER_PRO
                                AND tip_processo IN ('R', 'T')
                                AND RET.cod_beneficio > 0
                                AND CC.COD_INS =   PAR_COD_INS
                                AND CC.COD_BENEFICIO = RET.COD_BENEFICIO
                                AND RU.COD_INS = CC.COD_INS
                                AND RU.COD_ENTIDADE = CC.COD_ENTIDADE
                                AND RU.COD_RUBRICA = RET.COD_FCRUBRICA
                                 AND
                                (
                                  TO_CHAR(RET.DAT_INI_REF,'YYYY')= V_ANO_INICIO
                                    AND TO_CHAR(RET.DAT_INI_REF,'MM') =12
                                 )

                                AND EXISTS  (
                                 SELECT 1 FROM  TB_COMPOE_DET  TT
                                 WHERE
                                    TT.COD_INS=PAR_COD_INS                      AND
                                    TT.COD_FCRUBRICA_COMPOSTA=1300500  AND  -- 1300500
                                     TT.COD_FCRUBRICA_COMPOE =RET.COD_FCRUBRICA AND
                                    TT.COD_ENTIDADE_COMPOSTA=CC.COD_ENTIDADE   AND
                                    TT.DAT_INI_VIG <=PAR_PER_PRO AND
                                    NVL (TT.DAT_FIM_VIG,PAR_PER_PRO) >=PAR_PER_PRO
                                )

                             union all
                             SELECT  RET.val_rubrica,
                                     RET.flg_natureza
                               FROM tb_valor_npago_ret     RET,
                                    TB_CONCESSAO_BENEFICIO CC,
                                    USER_IPESP.TB_RUBRICAS RU
                              WHERE RET.cod_ins =  PAR_COD_INS
                                AND cod_ide_cli =ANT_IDE_CLI
                                AND CC.COD_BENEFICIO =  COD_BENEFICIO_RET
                                AND RET.PER_PROCESSO = PAR_PER_PRO
                                AND tip_processo IN ('R', 'T')
                                AND ind_processo = 'S'
                                AND ind_inclui_folha = 'S'
                                AND RET.cod_beneficio > 0
                                AND CC.COD_INS =  PAR_COD_INS
                                AND CC.COD_BENEFICIO = RET.COD_BENEFICIO
                                AND RU.COD_INS = CC.COD_INS
                                AND RU.COD_ENTIDADE = CC.COD_ENTIDADE
                                AND RU.COD_RUBRICA = RET.COD_FCRUBRICA
                                AND
                                (
                                  TO_CHAR(RET.DAT_INI_REF,'YYYY')= V_ANO_INICIO
                                 AND TO_CHAR(RET.DAT_INI_REF,'MM') ='12'
                                 )
                                AND EXISTS  (
                                 SELECT 1 FROM  TB_COMPOE_DET  TT
                                 WHERE
                                    TT.COD_INS=PAR_COD_INS                      AND
                                    TT.COD_FCRUBRICA_COMPOSTA=1300500  AND  -- 1300500
                                    TT.COD_FCRUBRICA_COMPOE =RET.COD_FCRUBRICA  AND
                                    TT.COD_ENTIDADE_COMPOSTA=CC.COD_ENTIDADE AND
                                    TT.DAT_INI_VIG <=PAR_PER_PRO               AND
                                    NVL (TT.DAT_FIM_VIG,PAR_PER_PRO) >=PAR_PER_PRO
                                )

                              )
                     HAVING ABS(SUM(DECODE(FLG_NATUREZA, 'C', val_rubrica, val_rubrica * -1))) > 0;
                   EXCEPTION
                      WHEN NO_DATA_FOUND THEN
                          W_VAL_RUBRICA:=0;
                       WHEN OTHERS THEN
                        p_sub_proc_erro := 'SP_OBTEM_FATOR_CORRECAOATUAL';
                        p_coderro       := SQLCODE;
                        P_MSGERRO       := 'Erro ao obter o fator de correcao mes';
                        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                              p_coderro,
                                              'Calcula Folha',
                                              sysdate,
                                              p_msgerro,
                                              p_sub_proc_erro,
                                              0,
                                              0);
                        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;

                   END;
                  ---------------------------
                  IF W_VAL_RUBRICA >0 THEN
                      SP_OBTEM_FATOR_CORRECAO_UFESP(
                                        W_ANO_TERMINO      ,
                                        W_ITERA_ANO        ,
                                        W_FATOR_CORRECAO  );


                   -----------------------------------

                     tdcn.extend;
                     idx_caln := nvl(idx_caln, 0) + 1;
                     idx_seq_detalhe := idx_seq_detalhe + 1;

                      rdcn.cod_ins            := PAR_COD_INS;
                      rdcn.tip_processo       := PAR_TIP_PRO;
                      rdcn.per_processo       := PAR_PER_PRO;
                      rdcn.cod_ide_cli        := ANT_IDE_CLI;
                      rdcn.cod_beneficio      := COD_BENEFICIO_RET;
                      rdcn.seq_pagamento      := vi_seq_pagamento;
                      rdcn.seq_detalhe        := idx_seq_detalhe;
                      rdcn.cod_fcrubrica      := 1300500;
                      rdcn.seq_vig            := 1;
                      rdcn.val_rubrica        := ROUND(W_VAL_RUBRICA*W_FATOR_CORRECAO,2) ;
                      rdcn.val_rubrica_cheio  := ROUND(W_VAL_RUBRICA*W_FATOR_CORRECAO,2);
                      rdcn.num_quota          := 1;
                      rdcn.flg_natureza       := 'C';
                      rdcn.tot_quota          := 1;
                      rdcn.dat_ini_ref        := PAR_PER_PRO;
                      rdcn.dat_fim_ref        := TO_DATE('01/12/'|| V_ANO_INICIO,'DD/MM/YYYY');
                      rdcn.num_ord_jud        := NULL;
                      rdcn.cod_ide_cli_ben    := NULL;
                      rdcn.dat_ing            := sysdate;
                      rdcn.dat_ult_atu        := sysdate;
                      rdcn.nom_usu_ult_atu    := 'FOLHA';
                      rdcn.nom_pro_ult_atu    := 'FOLHA CALCULADA';
                      rdcn.des_informacao     := null;
                      rdcn.des_complemento    := 'Ret.Corr';
                      rdcn.cod_entidade       := W_COD_ENTIDADE;
                      rdcn.tip_evento_especial:='V';
                      tdcn(idx_caln):= rdcn;
                    -----------------------------------

                  END IF;



              END LOOP;
           END IF;
         END IF;-- DE VERIFICA CORREC?O
     END LOOP;
     exception
     when others then
          p_sub_proc_erro := 'SP_OBTEM_CORRECAO';
          p_coderro       := SQLCODE;
          P_MSGERRO       := 'Erro Correc?o Monetaria:'||SQLERRM;
          INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                p_coderro,
                                'Calcula Folha',
                                sysdate,
                                p_msgerro,
                                p_sub_proc_erro,
                                ANT_IDE_CLI,
                                rdcn.cod_fcrubrica );

       end;

  END  SP_CALCULA_CORRECAO_UFESP;

  FUNCTION SP_OBTEM_PERC_FEQ  RETURN NUMBER IS
    O_VALOR              NUMBER(18, 4);
    v_val_porcentual     number(18, 4) := 0;
   BEGIN

    BEGIN
     
        SELECT
             VAL_PORCENTUAL
        INTO v_val_porcentual
           from tb_conceito_rub_det_dominio  cf
        WHERE cf.cod_ins      = PAR_COD_INS       AND
              cf.cod_entidade = COM_ENTIDADE      AND
              cf.cod_conceito = COM_COD_CONCEITO  AND
              cf.cod_func     = COM_COD_FUNCAO    AND
              ---- 2018-10-15  Ajuste para cargos comissionados 
              cf.cod_cargo    is null             AND
              (to_char(PAR_PER_PRO, 'YYYYMM') >=
                     to_char(cf.dat_ini_vig, 'YYYYMM') AND
                     to_char(PAR_PER_PRO, 'YYYYMM') <=
                     to_char(nvl(cf.DAT_FIM_VIG,
                                  to_date('01/01/2045', 'dd/mm/yyyy')),
                              'YYYYMM'))          AND
                              ROWNUM <2;
                              
                              
      O_VALOR := v_val_porcentual;

    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        O_VALOR              := 0;
        v_val_porcentual     := 0;

      WHEN OTHERS THEN
        p_sub_proc_erro := 'SP_OBTEM_PERC_FEQ';
        p_coderro       := SQLCODE;
        P_MSGERRO       := 'Erro ao obter o  PERC_FEQ';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              BEN_IDE_CLI,
                              COM_COD_FCRUBRICA);

        --          RAISE ERRO;
        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
    END;
    RETURN(O_VALOR);
  END SP_OBTEM_PERC_FEQ;
  
 -- TICKET 46395: Criar função de código 551.
 --  12/09/2018
 FUNCTION SP_OBTEM_PERC_FEQ_CARGO  RETURN NUMBER IS
    O_VALOR              NUMBER(18, 4);
    v_val_porcentual     number(18, 4) := 0;
   BEGIN

    BEGIN
     
        SELECT
             VAL_PORCENTUAL
        INTO v_val_porcentual
           from tb_conceito_rub_det_dominio  cf
        WHERE cf.cod_ins      = PAR_COD_INS       AND
              cf.cod_entidade = COM_ENTIDADE      AND
              cf.cod_conceito = COM_COD_CONCEITO  AND
              cf.cod_func     = COM_COD_FUNCAO    AND
              cf.cod_cargo    = COM_COD_CARGO_RUB AND
              (to_char(PAR_PER_PRO, 'YYYYMM') >=
                     to_char(cf.dat_ini_vig, 'YYYYMM') AND
                     to_char(PAR_PER_PRO, 'YYYYMM') <=
                     to_char(nvl(cf.DAT_FIM_VIG,
                                  to_date('01/01/2045', 'dd/mm/yyyy')),
                              'YYYYMM'))          AND
                              ROWNUM <2;
                              
                              
      O_VALOR := v_val_porcentual;

    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        O_VALOR              := 0;
        v_val_porcentual     := 0;

      WHEN OTHERS THEN
        p_sub_proc_erro := 'SP_OBTEM_PERC_FEQ';
        p_coderro       := SQLCODE;
        P_MSGERRO       := 'Erro ao obter o  PERC_FEQ';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              BEN_IDE_CLI,
                              COM_COD_FCRUBRICA);

        --          RAISE ERRO;
        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
    END;
    RETURN(O_VALOR);
  END SP_OBTEM_PERC_FEQ_CARGO;

PROCEDURE SP_OBTEM_SIM_CNT(COM_COD_BENEFICIO IN NUMBER ,   O_VALOR OUT NUMBER) AS
 BEGIN
    IF COM_COD_BENEFICIO >=40000000 AND
       COM_COD_BENEFICIO <=41000000 AND
       ANT_BEN_ENVIO_CORREIO='S'    AND
       PAR_PER_PRO =PAR_PER_REAL THEN
         O_VALOR :=1 ;
         IF O_VALOR=1 THEN
           BEGIN
             SELECT 1
             INTO O_VALOR
               FROM USER_IPESP.TB_ENVIO_CORREIO_HIST A
              WHERE A.COD_INS = PAR_COD_INS
                AND A.COD_IDE_CLI = ANT_IDE_CLI
                AND A.FLG_ENVIO_CORREIO = 'S'
                AND A.COD_TIPO_ENVIO = '01'
                AND A.DAT_ULT_ATU IN (

                                      SELECT MAX(B.DAT_ULT_ATU)
                                        FROM USER_IPESP.TB_ENVIO_CORREIO_HIST B
                                       WHERE A.COD_INS =  PAR_COD_INS
                                         AND B.COD_INS =  PAR_COD_INS
                                         AND B.COD_IDE_CLI = A.COD_IDE_CLI
                                         AND B.COD_TIPO_ENVIO = '01');
                   O_VALOR   :=1;
             EXCEPTION
              WHEN no_data_found THEN
                      O_VALOR   :=0;

            END;
         END IF;
    ELSE
          O_VALOR:= 0 ;
    END IF;
 END;
 ------ Artigo 133 Novo procedimentos ---
 ---------------- DESENVOLVIMENTO ART 133 -----
  PROCEDURE  SP_OBTEM_BASE_133(
                        VAL_CONCEITO_DIF_VENC IN NUMBER ,
                        VAL_ENTIDADE_DIF_VENC IN NUMBER ,
                        VAL_CARGO_DIF_VENC    IN NUMBER ,
                        o_valor out number)  AS

   idx_dif_venc  number :=1;
   VAL_BASE_133 number(10,4):=0;
    SAM_IDE_CLI              VARCHAR2(20);
    SAM_FLG_STATUS           CHAR(1);
    SAM_COD_BENEFICIO        NUMBER(8) := 0;
    SAN_TIP_BENEFICIO        VARCHAR2(20);
    SAN_COD_RUBRICA          NUMBER(8);
    SAN_COD_FCRUBRICA        NUMBER(8);
    SAN_SEQ_VIG_FC           NUMBER(8);
    SAN_NAT_COMP             CHAR(1);
    SAN_NUM_ORD_JUD          NUMBER(8);
    SAN_IDE_CLI_INSTITUIDOR  VARCHAR2(20);
    SAN_VAL_FIXO_IND         NUMBER(18, 4);
    SAN_VAL_PORC_IND         NUMBER(18, 4);
    SAN_VAL_PORC2            NUMBER(18, 4);
    SAN_QTY_UNID_IND         NUMBER(18, 4);
    SAN_VAL_UNID             NUMBER(8);
    SAN_TIPO_VALOR           CHAR(1);
    SAN_IND_QTAS             CHAR(1);
    SAN_NUM_QTAS_PAG         NUMBER(8);
    SAN_TOT_QTAS_PAG         NUMBER(8);
    SAN_IND_COMP_RUB         CHAR(1);
    SAN_NAT_RUB              CHAR(1);
    SAN_INI_REF              DATE;
    SAN_FIM_REF              DATE;
    SAN_PRIORIDADE           NUMBER(8);
    SAN_DED_IR               CHAR(1);
    SAN_NUM_FUNCAO           NUMBER;
    SAN_FLG_PROCESSA         CHAR(1);
    SAN_NAT_VAL              CHAR(1);
    SAN_TIPO_APLICACAO       CHAR(1);
    SAN_PERCENT_BEN          NUMBER(18, 4);
    SAN_TIPO_EVENTO_ESPECIAL VARCHAR2(2);
    SAN_VAL_STR1             VARCHAR2(30);
    SAN_VAL_STR2             VARCHAR2(30);
    SAN_MATRICULA            VARCHAR2(20);
    SAN_ENTIDADE             NUMBER(8);
    SAN_CARGO                NUMBER(8);
    SAN_CARGO_APOS           NUMBER(8);
    SAN_PCCS                 NUMBER(8);
    SAN_COD_JORNADA          varchar2(10);
    SAN_DAT_INI_VIG          DATE;
    SAN_DAT_FIM_VIG          DATE;
    SAN_COD_VINCULO          NUMBER(8);
    SAN_COD_REGIME_JUR       NUMBER(8);
    SAN_TIP_PROVIMENTO       VARCHAR2(5);
    SAN_COD_JORNADA_REL      VARCHAR2(10);
    SAN_COD_ENTIDADE         NUMBER(8);
    SAN_NUM_MATRICULA        VARCHAR2(20);
    SAN_COD_IDE_CLI_BEN      VARCHAR2(20);
    SAN_MSC_INFORMACAO       VARCHAR2(10);
    SAN_COL_INFORMACAO       VARCHAR2(25);
    SAN_DAT_INI              DATE;
    SAN_DAT_FIM              DATE;
    SAN_SEQ_VIG              NUMBER;
    SAN_DAT_INCORP_RUB       DATE;
    SAN_ERRO                 NUMBER;
    SAN_COD_REFERENCIA_RUB   NUMBER;
    SAN_COD_TABELA           VARCHAR2(3);
    SAN_APLICA_PROP_PENSAO   VARCHAR(1);

   SAN_cod_ref_pad_venc      tb_referencia.cod_ref_pad_venc%type;

   BEGIN
    COM_COD_BENE_DIF_VENC := ANT_COD_BENEFICIO ;
    COM_CARGO_DIF_VENC    := COM_COD_CARGO_RUB ;

    SAN_cod_ref_pad_venc  := vi_cod_ref_pad_venc;
    --- ABRE CURSOS DE RUBRICAS 133

    SAM_IDE_CLI              := BEN_IDE_CLI;
    SAM_FLG_STATUS           := BEN_FLG_STATUS;
    SAM_COD_BENEFICIO        := COM_COD_BENEFICIO;
    SAN_TIP_BENEFICIO        := COM_TIP_BENEFICIO;
    SAN_COD_RUBRICA          := COM_COD_RUBRICA;
    SAN_COD_FCRUBRICA        := COM_COD_FCRUBRICA;
    SAN_SEQ_VIG_FC           := COM_SEQ_VIG_FC;
    SAN_NAT_COMP             := COM_NAT_COMP;
    SAN_NUM_ORD_JUD          := COM_NUM_ORD_JUD;
    SAN_IDE_CLI_INSTITUIDOR  := COM_IDE_CLI_INSTITUIDOR;
    SAN_VAL_FIXO_IND         := COM_VAL_FIXO_IND;
    SAN_VAL_PORC_IND         := COM_VAL_PORC_IND;
    SAN_VAL_PORC2            := COM_VAL_PORC2;
    SAN_QTY_UNID_IND         := COM_QTY_UNID_IND;
    SAN_VAL_UNID             := COM_VAL_UNID;
    SAN_TIPO_VALOR           := COM_TIPO_VALOR;
    SAN_IND_QTAS             := COM_IND_QTAS;
    SAN_NUM_QTAS_PAG         := COM_NUM_QTAS_PAG;
    SAN_TOT_QTAS_PAG         := COM_TOT_QTAS_PAG;
    SAN_IND_COMP_RUB         := COM_IND_COMP_RUB;
    SAN_NAT_RUB              := COM_NAT_RUB;
    SAN_INI_REF              := COM_INI_REF;
    SAN_FIM_REF              := COM_FIM_REF;
    SAN_PRIORIDADE           := COM_PRIORIDADE;
    SAN_DED_IR               := COM_DED_IR;
    SAN_NUM_FUNCAO           := COM_NUM_FUNCAO;
    SAN_FLG_PROCESSA         := COM_FLG_PROCESSA;
    SAN_NAT_VAL              := COM_NAT_VAL;
    SAN_TIPO_APLICACAO       := COM_TIPO_APLICACAO;
    SAN_PERCENT_BEN          := COM_PERCENT_BEN;
    SAN_TIPO_EVENTO_ESPECIAL := COM_TIPO_EVENTO_ESPECIAL;
    SAN_VAL_STR1             := COM_VAL_STR1;
    SAN_VAL_STR2             := COM_VAL_STR2;
    SAN_MATRICULA            := COM_MATRICULA;
    SAN_ENTIDADE             := COM_ENTIDADE;
    SAN_CARGO                := COM_CARGO;
    SAN_CARGO_APOS           := COM_CARGO_APOS;
    SAN_PCCS                 := COM_PCCS;
    SAN_COD_JORNADA          := COM_COD_JORNADA;
    SAN_DAT_INI_VIG          := COM_DAT_INI_VIG;
    SAN_DAT_FIM_VIG          := COM_DAT_FIM_VIG;
    SAN_COD_VINCULO          := COM_COD_VINCULO;
    SAN_COD_REGIME_JUR       := COM_COD_REGIME_JUR;
    SAN_TIP_PROVIMENTO       := COM_TIP_PROVIMENTO;
    SAN_COD_JORNADA_REL      := COM_COD_JORNADA_REL;
    SAN_COD_ENTIDADE         := COM_COD_ENTIDADE;
    SAN_NUM_MATRICULA        := COM_NUM_MATRICULA;
    SAN_COD_IDE_CLI_BEN      := COM_COD_IDE_CLI_BEN;
    SAN_MSC_INFORMACAO       := COM_MSC_INFORMACAO;
    SAN_COL_INFORMACAO       := COM_COL_INFORMACAO;
    SAN_SEQ_VIG              := COM_SEQ_VIG;
    SAN_DAT_INCORP_RUB       := COM_DAT_INCORP_RUB;
    SAN_COD_REFERENCIA_RUB   := COM_COD_REFERENCIA_RUB;
    SAN_COD_TABELA           := COM_COD_TABELA;
    SAN_APLICA_PROP_PENSAO   := COM_APLICA_PROP_PENSAO;
    tdvenc.delete;
    COM_FLG_MUDA_BASE:='N';


    --LEE CURSOS E GRAVA RUBRICAS
    COM_COD_RUBRICA_DIF    :=  COM_COD_RUBRICA;
    COM_COD_REFERENCIA_DIF :=  COM_COD_REFERENCIA_RUB;
    COM_VAL_PORC_IND_133   :=  COM_VAL_PORC_IND;
    BEGIN
      SAN_ERRO:=0;
     OPEN CUR_COMPBEN_DIFVEN;
     SP_LER_RDIFF_VENC(1);
      EXCEPTION
      WHEN OTHERS THEN
           SAN_ERRO:=1;
          p_coderro       := sqlcode;
          p_sub_proc_erro := 'SP_OBTEM_VALOR_FORMULA';
          p_msgerro       := 'Erro formula' ||sqlerrm  ;


    END;
    COM_TIPO_BASE :=1;
    WHILE CUR_COMPBEN_DIFVEN %FOUND AND SAN_ERRO<> 1
      LOOP
      SP_CALCULA_RDIFF_VENC;
      IF mon_dif_venc_calculo  > 0 THEN
         tdvenc.extend;
         tdvenc(idx_dif_venc).cod_fcrubrica:=com_cod_fcrubrica;
         tdvenc(idx_dif_venc).cod_beneficio:=com_cod_beneficio;
         tdvenc(idx_dif_venc).cod_ide_cli   :=ben_ide_cli;
         tdvenc(idx_dif_venc).val_rubrica   :=mon_dif_venc_calculo ;
         tdvenc(idx_dif_venc).flg_natureza  :=COM_NAT_RUB ;
         tdvenc(idx_dif_venc).seq_vig       :=COM_SEQ_VIG ;
         idx_dif_venc :=idx_dif_venc +1;
         IF COM_NAT_RUB ='C' THEN
            VAL_BASE_133 := VAL_BASE_133+mon_dif_venc_calculo ;
         ELSE
            VAL_BASE_133 := VAL_BASE_133-mon_dif_venc_calculo ;
         END IF;
      END IF;
      SP_LER_RDIFF_VENC(1);
    END LOOP;
    CLOSE CUR_COMPBEN_DIFVEN;
   o_valor :=VAL_BASE_133;
   --------GRAVA COMPOSICAO_DE RUBRICAS-----------
   -- Comentado o 21-02-2014 Para agilizar Calculo
      FOR i IN 1 ..  tdvenc.count LOOP
       BEGIN
           INSERT INTO TB_DET_CALCULADO_BASRUB2
           (
                COD_INS       ,
                TIP_PROCESSO  ,
                PER_PROCESSO_REAL,
                PER_PROCESSO  ,
                SEQ_PAGAMENTO ,
                COD_BENEFICIO ,
                COD_IDE_CLI   ,
                COD_RUBRICA   ,
                SEQ_VIG       ,
                COD_FCRUBRICA ,
                VAL_RUBRICA   ,
                FLG_NATUREZA  ,
                DAT_ING       ,
                BASE_RUB      ,
                DAT_INCORP_RUB ,
                COD_CARGO      ,
                COD_REFERENCIA ,
                VAL_UNIDADE

            )
            VALUES
            (
             PAR_COD_INS     ,
             PAR_TIP_PRO     ,
             PAR_PER_REAL    ,
             PAR_PER_PRO     ,
             1 ,
             tdvenc(i).cod_beneficio,
             tdvenc(i).cod_ide_cli  ,
             SAN_COD_FCRUBRICA,
             SAN_SEQ_VIG      ,
             tdvenc(i).cod_fcrubrica,
             tdvenc(i).val_rubrica  ,
             tdvenc(i).flg_natureza ,
             sysdate,
             'BASE_133',
              SAN_DAT_INCORP_RUB ,
              COM_CARGO_DIF_VENC   ,
              COM_COD_REFERENCIA_DIF,
              SAN_QTY_UNID_IND
            );
         EXCEPTION
         WHEN OTHERS THEN

          p_coderro       := sqlcode;
          p_msgerro       := SQLERRM;
        END;
      END LOOP;

   -----------------------------------------------
    COM_COD_BENEFICIO        := SAM_COD_BENEFICIO;
    COM_TIP_BENEFICIO        := SAN_TIP_BENEFICIO;
    COM_COD_RUBRICA          := SAN_COD_RUBRICA;
    COM_COD_FCRUBRICA        := SAN_COD_FCRUBRICA;
    COM_SEQ_VIG_FC           := SAN_SEQ_VIG_FC;
    COM_NAT_COMP             := SAN_NAT_COMP;
    COM_NUM_ORD_JUD          := SAN_NUM_ORD_JUD;
    COM_IDE_CLI_INSTITUIDOR  := SAN_IDE_CLI_INSTITUIDOR;
    COM_VAL_FIXO_IND         := SAN_VAL_FIXO_IND;
    COM_VAL_PORC_IND         := SAN_VAL_PORC_IND;
    COM_VAL_PORC2            := SAN_VAL_PORC2;
    COM_QTY_UNID_IND         := SAN_QTY_UNID_IND;
    COM_VAL_UNID             := SAN_VAL_UNID;
    COM_TIPO_VALOR           := SAN_TIPO_VALOR;
    COM_IND_QTAS             := SAN_IND_QTAS;
    COM_NUM_QTAS_PAG         := SAN_NUM_QTAS_PAG;
    COM_TOT_QTAS_PAG         := SAN_TOT_QTAS_PAG;
    COM_IND_COMP_RUB         := SAN_IND_COMP_RUB;
    COM_NAT_RUB              := SAN_NAT_RUB;
    COM_INI_REF              := SAN_INI_REF;
    COM_FIM_REF              := SAN_FIM_REF;
    COM_PRIORIDADE           := SAN_PRIORIDADE;
    COM_DED_IR               := SAN_DED_IR;
    COM_NUM_FUNCAO           := SAN_NUM_FUNCAO;
    COM_FLG_PROCESSA         := SAN_FLG_PROCESSA;
    COM_NAT_VAL              := SAN_NAT_VAL;
    COM_TIPO_APLICACAO       := SAN_TIPO_APLICACAO;
    COM_PERCENT_BEN          := SAN_PERCENT_BEN;
    COM_TIPO_EVENTO_ESPECIAL := SAN_TIPO_EVENTO_ESPECIAL;
    COM_VAL_STR1             := SAN_VAL_STR1;
    COM_VAL_STR2             := SAN_VAL_STR2;
    COM_MATRICULA            := SAN_MATRICULA;
    COM_ENTIDADE             := SAN_ENTIDADE;
    COM_CARGO                := SAN_CARGO;
    COM_CARGO_APOS           := SAN_CARGO_APOS;
    COM_PCCS                 := SAN_PCCS;
    COM_COD_JORNADA          := SAN_COD_JORNADA;
    COM_DAT_INI_VIG          := SAN_DAT_INI_VIG;
    COM_DAT_FIM_VIG          := SAN_DAT_FIM_VIG;
    COM_COD_VINCULO          := SAN_COD_VINCULO;
    COM_COD_REGIME_JUR       := SAN_COD_REGIME_JUR;
    COM_TIP_PROVIMENTO       := SAN_TIP_PROVIMENTO;
    COM_COD_JORNADA_REL      := SAN_COD_JORNADA_REL;
    COM_COD_ENTIDADE         := SAN_COD_ENTIDADE;
    COM_NUM_MATRICULA        := SAN_NUM_MATRICULA;
    COM_COD_IDE_CLI_BEN      := SAN_COD_IDE_CLI_BEN;
    COM_MSC_INFORMACAO       := SAN_MSC_INFORMACAO;
    COM_COL_INFORMACAO       := SAN_COL_INFORMACAO;
    COM_SEQ_VIG              := SAN_SEQ_VIG;
    COM_COD_REFERENCIA_RUB   := SAN_COD_REFERENCIA_RUB;
    COM_COD_TABELA           := SAN_COD_TABELA;
    COM_APLICA_PROP_PENSAO   := SAN_APLICA_PROP_PENSAO;
    vi_cod_ref_pad_venc      := SAN_cod_ref_pad_venc;

  END   SP_OBTEM_BASE_133;


  PROCEDURE SP_OBTEM_BASE_NORMAL133(VAL_CARGO_DIF_VENC IN NUMBER ,o_valor out number) AS
   idx_dif_venc  number :=1;
   VAL_BASE_133 number(10,4):=0;
    SAM_IDE_CLI              VARCHAR2(20);
    SAM_FLG_STATUS           CHAR(1);
    SAM_COD_BENEFICIO        NUMBER(8) := 0;
    SAN_TIP_BENEFICIO        VARCHAR2(20);
    SAN_COD_RUBRICA          NUMBER(8);
    SAN_COD_FCRUBRICA        NUMBER(8);
    SAN_SEQ_VIG_FC           NUMBER(8);
    SAN_NAT_COMP             CHAR(1);
    SAN_NUM_ORD_JUD          NUMBER(8);
    SAN_IDE_CLI_INSTITUIDOR  VARCHAR2(20);
    SAN_VAL_FIXO_IND         NUMBER(18, 4);
    SAN_VAL_PORC_IND         NUMBER(18, 4);
    SAN_VAL_PORC2            NUMBER(18, 4);
    SAN_QTY_UNID_IND         NUMBER(18, 4);
    SAN_VAL_UNID             NUMBER(8);
    SAN_TIPO_VALOR           CHAR(1);
    SAN_IND_QTAS             CHAR(1);
    SAN_NUM_QTAS_PAG         NUMBER(8);
    SAN_TOT_QTAS_PAG         NUMBER(8);
    SAN_IND_COMP_RUB         CHAR(1);
    SAN_NAT_RUB              CHAR(1);
    SAN_INI_REF              DATE;
    SAN_FIM_REF              DATE;
    SAN_PRIORIDADE           NUMBER(8);
    SAN_DED_IR               CHAR(1);
    SAN_NUM_FUNCAO           NUMBER;
    SAN_FLG_PROCESSA         CHAR(1);
    SAN_NAT_VAL              CHAR(1);
    SAN_TIPO_APLICACAO       CHAR(1);
    SAN_PERCENT_BEN          NUMBER(18, 4);
    SAN_TIPO_EVENTO_ESPECIAL VARCHAR2(2);
    SAN_VAL_STR1             VARCHAR2(30);
    SAN_VAL_STR2             VARCHAR2(30);
    SAN_MATRICULA            VARCHAR2(20);
    SAN_ENTIDADE             NUMBER(8);
    SAN_CARGO                NUMBER(8);
    SAN_CARGO_APOS           NUMBER(8);
    SAN_PCCS                 NUMBER(8);
    SAN_COD_JORNADA          varchar2(10);
    SAN_DAT_INI_VIG          DATE;
    SAN_DAT_FIM_VIG          DATE;
    SAN_COD_VINCULO          NUMBER(8);
    SAN_COD_REGIME_JUR       NUMBER(8);
    SAN_TIP_PROVIMENTO       VARCHAR2(5);
    SAN_COD_JORNADA_REL      VARCHAR2(10);
    SAN_COD_ENTIDADE         NUMBER(8);
    SAN_NUM_MATRICULA        VARCHAR2(20);
    SAN_COD_IDE_CLI_BEN      VARCHAR2(20);
    SAN_MSC_INFORMACAO       VARCHAR2(10);
    SAN_COL_INFORMACAO       VARCHAR2(25);
    SAN_DAT_INI              DATE;
    SAN_DAT_FIM              DATE;
    SAN_SEQ_VIG              NUMBER;
    SAN_DAT_INCORP_RUB       DATE;
    SAN_COD_TABELA           VARCHAR2(3);
    SAN_APLICA_PROP_PENSAO   VARCHAR(1);
    ii                       NUMBER;
    SAN_COD_REFERENCIA_RUB   NUMBER;
    --- Para rubricas no Calculadas ainda na Folha Normal que forman parte da
    --- Base do Servidor Variaveis de Calculo.
    FLG_CALCULADA_NA_FOLHA NUMBER;
    SAN_cod_ref_pad_venc      tb_referencia.cod_ref_pad_venc%type;
  BEGIN
    COM_COD_BENE_DIF_VENC := ANT_COD_BENEFICIO ;
    COM_CARGO_DIF_VENC    := VAL_CARGO_DIF_VENC;
    SAN_cod_ref_pad_venc  := vi_cod_ref_pad_venc;

    --- ABRE CURSOS DE RUBRICAS 133
    SAM_IDE_CLI              := BEN_IDE_CLI;
    SAM_FLG_STATUS           := BEN_FLG_STATUS;
    SAM_COD_BENEFICIO        := COM_COD_BENEFICIO;
    SAN_TIP_BENEFICIO        := COM_TIP_BENEFICIO;
    SAN_COD_RUBRICA          := COM_COD_RUBRICA;
    SAN_COD_FCRUBRICA        := COM_COD_FCRUBRICA;
    SAN_SEQ_VIG_FC           := COM_SEQ_VIG_FC;
    SAN_NAT_COMP             := COM_NAT_COMP;
    SAN_NUM_ORD_JUD          := COM_NUM_ORD_JUD;
    SAN_IDE_CLI_INSTITUIDOR  := COM_IDE_CLI_INSTITUIDOR;
    SAN_VAL_FIXO_IND         := COM_VAL_FIXO_IND;
    SAN_VAL_PORC_IND         := COM_VAL_PORC_IND;
    SAN_VAL_PORC2            := COM_VAL_PORC2;
    SAN_QTY_UNID_IND         := COM_QTY_UNID_IND;
    SAN_VAL_UNID             := COM_VAL_UNID;
    SAN_TIPO_VALOR           := COM_TIPO_VALOR;
    SAN_IND_QTAS             := COM_IND_QTAS;
    SAN_NUM_QTAS_PAG         := COM_NUM_QTAS_PAG;
    SAN_TOT_QTAS_PAG         := COM_TOT_QTAS_PAG;
    SAN_IND_COMP_RUB         := COM_IND_COMP_RUB;
    SAN_NAT_RUB              := COM_NAT_RUB;
    SAN_INI_REF              := COM_INI_REF;
    SAN_FIM_REF              := COM_FIM_REF;
    SAN_PRIORIDADE           := COM_PRIORIDADE;
    SAN_DED_IR               := COM_DED_IR;
    SAN_NUM_FUNCAO           := COM_NUM_FUNCAO;
    SAN_FLG_PROCESSA         := COM_FLG_PROCESSA;
    SAN_NAT_VAL              := COM_NAT_VAL;
    SAN_TIPO_APLICACAO       := COM_TIPO_APLICACAO;
    SAN_PERCENT_BEN          := COM_PERCENT_BEN;
    SAN_TIPO_EVENTO_ESPECIAL := COM_TIPO_EVENTO_ESPECIAL;
    SAN_VAL_STR1             := COM_VAL_STR1;
    SAN_VAL_STR2             := COM_VAL_STR2;
    SAN_MATRICULA            := COM_MATRICULA;
    SAN_ENTIDADE             := COM_ENTIDADE;
    SAN_CARGO                := COM_CARGO;
    SAN_CARGO_APOS           := COM_CARGO_APOS;
    SAN_PCCS                 := COM_PCCS;
    SAN_COD_JORNADA          := COM_COD_JORNADA;
    SAN_DAT_INI_VIG          := COM_DAT_INI_VIG;
    SAN_DAT_FIM_VIG          := COM_DAT_FIM_VIG;
    SAN_COD_VINCULO          := COM_COD_VINCULO;
    SAN_COD_REGIME_JUR       := COM_COD_REGIME_JUR;
    SAN_TIP_PROVIMENTO       := COM_TIP_PROVIMENTO;
    SAN_COD_JORNADA_REL      := COM_COD_JORNADA_REL;
    SAN_COD_ENTIDADE         := COM_COD_ENTIDADE;
    SAN_NUM_MATRICULA        := COM_NUM_MATRICULA;
    SAN_COD_IDE_CLI_BEN      := COM_COD_IDE_CLI_BEN;
    SAN_MSC_INFORMACAO       := COM_MSC_INFORMACAO;
    SAN_COL_INFORMACAO       := COM_COL_INFORMACAO;
    SAN_SEQ_VIG              := COM_SEQ_VIG;
    SAN_DAT_INCORP_RUB       := COM_DAT_INCORP_RUB;
    SAN_COD_REFERENCIA_RUB   := COM_COD_REFERENCIA_RUB;
    SAN_COD_TABELA           := COM_COD_TABELA;
    SAN_APLICA_PROP_PENSAO   := COM_APLICA_PROP_PENSAO;
    tdvenc_nor.delete;

    --LEE CURSOS E GRAVA RUBRICAS
     COM_COD_RUBRICA_DIF    :=  COM_COD_RUBRICA;
     COM_COD_REFERENCIA_DIF :=  COM_COD_REFERENCIA_RUB;

    OPEN CUR_COMPBEN_BADIFVEN;
    SP_LER_RDIFF_VENC(2);
    FLG_CALCULADA_NA_FOLHA:=0;
   COM_TIPO_BASE :=2;
   WHILE CUR_COMPBEN_BADIFVEN  %FOUND LOOP
      FOR ii IN 1 .. tdcn.count LOOP
       rdcn := tdcn(ii);
        IF rdcn.cod_fcrubrica =COM_COD_FCRUBRICA AND
           rdcn.cod_beneficio =COM_COD_BENEFICIO  AND
           NVL(rdcn.flg_marca_calculo,0) != 1     THEN
          tdvenc_nor.extend;
          tdvenc_nor(idx_dif_venc).cod_fcrubrica:=rdcn.cod_fcrubrica;
          tdvenc_nor(idx_dif_venc).cod_beneficio:=rdcn.cod_beneficio;
          tdvenc_nor(idx_dif_venc).cod_ide_cli  :=ben_ide_cli;
          tdvenc_nor(idx_dif_venc).val_rubrica  :=rdcn.val_rubrica ;
          tdvenc_nor(idx_dif_venc).flg_natureza :=rdcn.flg_natureza ;
          FLG_CALCULADA_NA_FOLHA:=1;
           IF COM_FLG_MUDA_BASE ='S' THEN
              SP_CALCULA_RDIFF_VENC;
              tdvenc_nor(idx_dif_venc).val_rubrica  :=mon_dif_venc_calculo ;
              tdvenc_nor(idx_dif_venc).flg_natureza :=rdcn.flg_natureza ;
           END IF;

          tdvenc_nor(idx_dif_venc).seq_vig      :=rdcn.seq_vig  ;
          tdvenc_nor(idx_dif_venc).DES_INFORMACAO:='CARREGADA';
          tdcn(ii).flg_marca_calculo              :=1;
          IF tdvenc_nor(idx_dif_venc).flg_natureza ='C' THEN
             VAL_BASE_133 := VAL_BASE_133+ tdvenc_nor(idx_dif_venc).val_rubrica ;
           ELSE
             VAL_BASE_133 := VAL_BASE_133- tdvenc_nor(idx_dif_venc).val_rubrica ;
           END IF;
           idx_dif_venc :=idx_dif_venc +1;
          END IF;
      END LOOP;
      --- Para rubricas no Calculadas ainda na Folha Normal que forman parte da
      --- Base do Servidor.
      IF  FLG_CALCULADA_NA_FOLHA=0 AND  COM_FLG_MUDA_BASE ='S' THEN
         tdvenc_nor.extend;
          tdvenc_nor(idx_dif_venc).cod_fcrubrica:=COM_COD_FCRUBRICA ;
          tdvenc_nor(idx_dif_venc).cod_beneficio:=COM_COD_BENEFICIO;
          tdvenc_nor(idx_dif_venc).cod_ide_cli  :=ben_ide_cli;
          tdvenc_nor(idx_dif_venc).val_rubrica  :=0 ;
          tdvenc_nor(idx_dif_venc).flg_natureza :=NULL ;
          FLG_CALCULADA_NA_FOLHA:=1;
           IF COM_FLG_MUDA_BASE ='S' THEN
              SP_CALCULA_RDIFF_VENC;
              tdvenc_nor(idx_dif_venc).val_rubrica  :=mon_dif_venc_calculo ;
              tdvenc_nor(idx_dif_venc).flg_natureza :=COM_NAT_RUB  ;
           END IF;

          tdvenc_nor(idx_dif_venc).seq_vig      :=COM_SEQ_VIG  ;
          tdvenc_nor(idx_dif_venc).DES_INFORMACAO:='CARREGADA';
           IF tdvenc_nor(idx_dif_venc).flg_natureza='C' THEN
           VAL_BASE_133 := VAL_BASE_133+ tdvenc_nor(idx_dif_venc).val_rubrica ;
          ELSE
            VAL_BASE_133 := VAL_BASE_133- tdvenc_nor(idx_dif_venc).val_rubrica ;
          END IF;
           idx_dif_venc :=idx_dif_venc +1;
       END IF;


       SP_LER_RDIFF_VENC(2);
       FLG_CALCULADA_NA_FOLHA:=0;
    END LOOP;
    CLOSE CUR_COMPBEN_BADIFVEN;
   o_valor :=VAL_BASE_133;
   ----------------------------
   --- Comentado 0 21-02-2014 Para agilizar Calculo
    FOR i IN 1 ..  tdvenc_nor.count LOOP
       BEGIN
           INSERT INTO TB_DET_CALCULADO_BASRUB2
           (
                COD_INS       ,
                TIP_PROCESSO  ,
                PER_PROCESSO_REAL,
                PER_PROCESSO  ,
                SEQ_PAGAMENTO ,
                COD_BENEFICIO ,
                COD_IDE_CLI   ,
                COD_RUBRICA   ,
                SEQ_VIG       ,
                COD_FCRUBRICA ,
                VAL_RUBRICA   ,
                FLG_NATUREZA  ,
                DAT_ING       ,
                BASE_RUB      ,
                DAT_INCORP_RUB,
                COD_CARGO,
                COD_REFERENCIA,
                VAL_UNIDADE

            )
            VALUES
            (
             PAR_COD_INS     ,
             PAR_TIP_PRO     ,
             PAR_PER_REAL    ,
             PAR_PER_PRO     ,
             1               ,
             tdvenc_nor(i).cod_beneficio,
             tdvenc_nor(i).cod_ide_cli  ,
             SAN_COD_FCRUBRICA,
             SAN_SEQ_VIG      ,
             tdvenc_nor(i).cod_fcrubrica,
             tdvenc_nor(i).val_rubrica  ,
             tdvenc_nor(i).flg_natureza ,
             sysdate,
             'BASE_SERV',
              SAN_DAT_INCORP_RUB,
              COM_CARGO_DIF_VENC   ,
              COM_COD_REFERENCIA_DIF,
               SAN_QTY_UNID_IND
            );
         EXCEPTION
         WHEN OTHERS THEN

          p_coderro       := sqlcode;
          p_msgerro       := SQLERRM;
        END;
      END LOOP;
      FOR ii IN 1 .. tdcn.count LOOP
          tdcn(ii).flg_marca_calculo :=0;
      END  LOOP;
    ----------------------------------------------
    COM_COD_BENEFICIO        := SAM_COD_BENEFICIO;
    COM_TIP_BENEFICIO        := SAN_TIP_BENEFICIO;
    COM_COD_RUBRICA          := SAN_COD_RUBRICA;
    COM_COD_FCRUBRICA        := SAN_COD_FCRUBRICA;
    COM_SEQ_VIG_FC           := SAN_SEQ_VIG_FC;
    COM_NAT_COMP             := SAN_NAT_COMP;
    COM_NUM_ORD_JUD          := SAN_NUM_ORD_JUD;
    COM_IDE_CLI_INSTITUIDOR  := SAN_IDE_CLI_INSTITUIDOR;
    COM_VAL_FIXO_IND         := SAN_VAL_FIXO_IND;
    COM_VAL_PORC_IND         := SAN_VAL_PORC_IND;
    COM_VAL_PORC2            := SAN_VAL_PORC2;
    COM_QTY_UNID_IND         := SAN_QTY_UNID_IND;
    COM_VAL_UNID             := SAN_VAL_UNID;
    COM_TIPO_VALOR           := SAN_TIPO_VALOR;
    COM_IND_QTAS             := SAN_IND_QTAS;
    COM_NUM_QTAS_PAG         := SAN_NUM_QTAS_PAG;
    COM_TOT_QTAS_PAG         := SAN_TOT_QTAS_PAG;
    COM_IND_COMP_RUB         := SAN_IND_COMP_RUB;
    COM_NAT_RUB              := SAN_NAT_RUB;
    COM_INI_REF              := SAN_INI_REF;
    COM_FIM_REF              := SAN_FIM_REF;
    COM_PRIORIDADE           := SAN_PRIORIDADE;
    COM_DED_IR               := SAN_DED_IR;
    COM_NUM_FUNCAO           := SAN_NUM_FUNCAO;
    COM_FLG_PROCESSA         := SAN_FLG_PROCESSA;
    COM_NAT_VAL              := SAN_NAT_VAL;
    COM_TIPO_APLICACAO       := SAN_TIPO_APLICACAO;
    COM_PERCENT_BEN          := SAN_PERCENT_BEN;
    COM_TIPO_EVENTO_ESPECIAL := SAN_TIPO_EVENTO_ESPECIAL;
    COM_VAL_STR1             := SAN_VAL_STR1;
    COM_VAL_STR2             := SAN_VAL_STR2;
    COM_MATRICULA            := SAN_MATRICULA;
    COM_ENTIDADE             := SAN_ENTIDADE;
    COM_CARGO                := SAN_CARGO;
    COM_CARGO_APOS           := SAN_CARGO_APOS;
    COM_PCCS                 := SAN_PCCS;
    COM_COD_JORNADA          := SAN_COD_JORNADA;
    COM_DAT_INI_VIG          := SAN_DAT_INI_VIG;
    COM_DAT_FIM_VIG          := SAN_DAT_FIM_VIG;
    COM_COD_VINCULO          := SAN_COD_VINCULO;
    COM_COD_REGIME_JUR       := SAN_COD_REGIME_JUR;
    COM_TIP_PROVIMENTO       := SAN_TIP_PROVIMENTO;
    COM_COD_JORNADA_REL      := SAN_COD_JORNADA_REL;
    COM_COD_ENTIDADE         := SAN_COD_ENTIDADE;
    COM_NUM_MATRICULA        := SAN_NUM_MATRICULA;
    COM_COD_IDE_CLI_BEN      := SAN_COD_IDE_CLI_BEN;
    COM_MSC_INFORMACAO       := SAN_MSC_INFORMACAO;
    COM_COL_INFORMACAO       := SAN_COL_INFORMACAO;
    COM_SEQ_VIG              := SAN_SEQ_VIG;
    COM_COD_REFERENCIA_RUB   := SAN_COD_REFERENCIA_RUB;
    COM_COD_TABELA           := SAN_COD_TABELA;
    COM_APLICA_PROP_PENSAO   := SAN_APLICA_PROP_PENSAO;
    vi_cod_ref_pad_venc      := SAN_cod_ref_pad_venc;

  END   SP_OBTEM_BASE_NORMAL133;

  PROCEDURE SP_CALCULA_RDIFF_VENC  AS

    valor13 number(18, 4) := 0;
    valor_temp number(18, 4) := 0;
  BEGIN

    mon_dif_venc_calculo := 0;
     -- PROCURAR O TIPO DO BENEFICIARIO.

      SP_VERIFICA_EXISTE_RATEIO;
      SP_CARREGA_FORMULA_RECUR;

      ----- SP_VERIFICA_VAR_RUBRICA;

      IF vi_condicao_rec or vi_sem_condicao_rec THEN
        SP_OBTEM_VALOR_FORMULA_RECUR;
        mon_dif_venc_calculo:=mon_calculo;
        mon_calculo:=0;
        IF (COM_NAT_RUB = 'C' AND COM_FLG_PROCESSA = 'S') THEN

          IF APLICAR_RATEIO_BENEFICIO = TRUE THEN
                    -- Calculo do valor da rubrica com Rateio e mudanca no percentual
                    -- do rateio no mesmo mes do periodo
                    -- o Fator traz somado a proporc?o do mes
                    -- IF  SUBSTR(LPAD(TO_CHAR(COM_COD_FCRUBRICA),7,0),6,2) in ('01','02','03','04','05') then
                    IF SUBSTR(LPAD(TO_CHAR(COM_COD_FCRUBRICA), 7, 0), 6, 2) in
                       ('01','03', '05','55','56') then
                      -- ROD4 removido '02'-04 (09/06/09)-22-09-2010
                     mon_dif_venc_calculo:= (mon_dif_venc_calculo * VI_PROP_SAIDA * VI_PERC_PECUNIA);
                    ELSE
                      mon_dif_venc_calculo := (mon_dif_venc_calculo * VI_PROP_BEN * VI_PROP_SAIDA *
                                     VI_PERC_PECUNIA);
                    END IF;
                    IF VI_PROP_BEN = 1 and VI_PROP_SAIDA = 1 THEN
                      HOUVE_RATEIO := FALSE;
                    ELSE
                      HOUVE_RATEIO := TRUE; --efv pensao 20060918
                    END IF;

                    IF APLICAR_ENTRADA THEN
                      mon_dif_venc_calculo := mon_dif_venc_calculo;
                    ELSE
                      IF HOUVE_RATEIO = FALSE AND VI_TEM_SAIDA = FALSE AND
                         PAR_TIP_PRO = 'T' THEN
                        HOUVE_RATEIO := TRUE;
                        SP_RATEIO_BENEFICIO(COM_COD_BENEFICIO,
                                            ANT_IDE_CLI,
                                            mon_dif_venc_calculo,
                                            mon_dif_venc_calculo,
                                            VI_PERCENTUAL_RATEIO); -- salario base com rateio
                      ELSE
                        IF (APLICAR_DEC_TERCEIRO = TRUE OR APLICAR_RATEIO_BENEFICIO) AND
                           PAR_TIP_PRO = 'T' AND HOUVE_RATEIO = FALSE THEN
                          SP_RATEIO_BENEFICIO(COM_COD_BENEFICIO,
                                              ANT_IDE_CLI,
                                              mon_dif_venc_calculo,
                                              mon_dif_venc_calculo,
                                              VI_PERCENTUAL_RATEIO); -- salario base com rateio
                        ELSIF (APLICAR_DEC_TERCEIRO = TRUE OR
                              APLICAR_RATEIO_BENEFICIO) AND
                              COM_TIP_BENEFICIO = 'PENSIONISTA' AND
                              HOUVE_RATEIO = FALSE THEN
                          SP_RATEIO_BENEFICIO(COM_COD_BENEFICIO,
                                              ANT_IDE_CLI,
                                              mon_dif_venc_calculo,
                                              mon_dif_venc_calculo,
                                              VI_PERCENTUAL_RATEIO); -- salario base com rateio
                        END IF;
                      END IF;
                    END IF;
          ELSIF APLICAR_DEC_TERCEIRO AND COM_TIP_BENEFICIO = 'APOSENTADO' AND
                APLICAR_ENTRADA = FALSE AND COM_IND_COMP_RUB = 'N' AND
                COM_TIPO_EVENTO_ESPECIAL <> 'S' THEN
            -- aplicar proporcao somente para o salario base
            --IF SUBSTR(LPAD(TO_CHAR(COM_COD_FCRUBRICA),7,0),6,2) not in ('01','02','03','04','05') THEN
            IF SUBSTR(LPAD(TO_CHAR(COM_COD_FCRUBRICA), 7, 0), 6, 2) not in
               ('01','03', '05','55','56') THEN
              --ROD4
              mon_dif_venc_calculo := (mon_dif_venc_calculo * VI_PROP_BEN * VI_PROP_SAIDA *
                             VI_PERC_PECUNIA);
            else
              mon_dif_venc_calculo := (mon_dif_venc_calculo * VI_PROP_SAIDA * VI_PERC_PECUNIA);
            END IF;
          ELSIF APLICAR_ENTRADA AND COM_TIP_BENEFICIO = 'APOSENTADO' AND
                COM_IND_COMP_RUB = 'N' AND COM_TIPO_EVENTO_ESPECIAL <> 'S' THEN
                IF V_QTD_DIAS > V_DIAS_MES THEN
                   V_QTD_DIAS := V_DIAS_MES;
                END IF;
                 -- Cod Novo
                             -- Codigo Gerado por JTS 24-05-2010 agregamos criterio de por% 22-09
                  IF     SUBSTR(LPAD(TO_CHAR(COM_COD_FCRUBRICA), 7, 0), 6, 2) not in  ('50' ,'51')
                    and  SUBSTR(LPAD(TO_CHAR(COM_COD_FCRUBRICA), 7, 0), 6, 2) not in
                     ('01','03', '05','55','56')
                   THEN
                         mon_dif_venc_calculo:= ((mon_dif_venc_calculo * (V_QTD_DIAS / V_DIAS_MES)) *
                           ROUND(COM_PERCENT_BEN / 100,4));
                   ELSE
                     mon_dif_venc_calculo := ((mon_dif_venc_calculo* (V_QTD_DIAS / V_DIAS_MES)));
                  END IF;

         ELSIF APLICAR_ENTRADA = FALSE AND
                COM_TIP_BENEFICIO = 'APOSENTADO' AND COM_IND_COMP_RUB = 'N' AND
                COM_NAT_VAL <> 'L' AND COM_TIPO_EVENTO_ESPECIAL <> 'S' AND
                COM_TIPO_EVENTO_ESPECIAL <> 'F' THEN
            -- Aplicar somente o percentual proporcional para os pensionistas
              --Cod Novo
                 ----- ajuste 30092010
                 IF NOT (COM_COD_BENEFICIO >=80000000 AND  COM_COD_BENEFICIO <=81000000 ) THEN
                      -- Codigo Gerado por JTS 24-05-2010 agregamos criterio de por% 22-09
                       IF SUBSTR(LPAD(TO_CHAR(COM_COD_FCRUBRICA), 7, 0), 6, 2) not in  ('50'

,'51','55','56')
                       THEN
                          IF (COM_COD_BENEFICIO >=40000000 AND  COM_COD_BENEFICIO <=41000000 )
                               AND (SUBSTR(LPAD(TO_CHAR(COM_COD_FCRUBRICA), 7, 0), 6, 2) IN ('01')
                               OR COM_COD_FCRUBRICA IN (200403,200407)
                            ) THEN
                            mon_dif_venc_calculo := mon_dif_venc_calculo * VI_PROP_COMPOSICAO;
                          ELSE
                            mon_dif_venc_calculo:= mon_dif_venc_calculo* ROUND(COM_PERCENT_BEN / 100,4) *
                                           VI_PROP_COMPOSICAO;
                          END IF;
                       ELSE
                                     mon_dif_venc_calculo := mon_dif_venc_calculo * VI_PROP_COMPOSICAO;
                      END IF;
                  ELSE
                      IF SUBSTR(LPAD(TO_CHAR(COM_COD_FCRUBRICA), 7, 0), 6, 2) not in  ('50' ,'51')
                         and  SUBSTR(LPAD(TO_CHAR(COM_COD_FCRUBRICA), 7, 0), 6, 2) not in
                         ('01','03', '05','55','56') THEN
                            mon_dif_venc_calculo := mon_dif_venc_calculo * ROUND(COM_PERCENT_BEN / 100,4) *
                                           VI_PROP_COMPOSICAO;
                       ELSE
                                     mon_dif_venc_calculo :=mon_dif_venc_calculo * VI_PROP_COMPOSICAO;
                      END IF;

                 END IF;

          ELSIF COM_NAT_VAL = 'L' AND COM_IND_COMP_RUB = 'S' AND
                COM_NAT_RUB = 'C' AND COM_TIPO_EVENTO_ESPECIAL <> 'S' AND
                (PAR_TIP_PRO = 'T' or APLICAR_DEC_TERCEIRO) THEN
            IF APLICAR_RATEIO_BENEFICIO THEN
              SP_RATEIO_BENEFICIO(COM_COD_BENEFICIO,
                                  ANT_IDE_CLI,
                                  mon_dif_venc_calculo,
                                  mon_dif_venc_calculo,
                                  VI_PERCENTUAL_RATEIO); -- salario base com rateio
            END IF;
            IF APLICAR_DEC_TERCEIRO AND PAR_TIP_PRO = 'T' THEN
              -- VI_FATOR_DIAS + VI_PROP_SAIDA +
              mon_dif_venc_calculo := ((mon_dif_venc_calculo * (QTD_MESES_13)) * VI_PROP_BEN *
                             VI_PERC_PECUNIA) / 12;
            ELSIF PAR_TIP_PRO <> 'T' THEN
              --IF SUBSTR(LPAD(TO_CHAR(COM_COD_FCRUBRICA),7,0),6,2) not  in ('01','02','03','04','05') THEN
              IF SUBSTR(LPAD(TO_CHAR(COM_COD_FCRUBRICA), 7, 0), 6, 2) not in
                 ('01','03','04','05','55','56') THEN
                mon_dif_venc_calculo := (mon_dif_venc_calculo * VI_PROP_BEN * VI_PERC_PECUNIA *
                               VI_PROP_SAIDA * V_FATOR_13_SAIDA);
              ELSE
                mon_dif_venc_calculo:= (mon_dif_venc_calculo* VI_PROP_SAIDA *
                               V_FATOR_13_SAIDA * VI_PERC_PECUNIA);
              END IF;
            END IF;
          ELSIF COM_TIPO_EVENTO_ESPECIAL = 'T' AND PAR_TIP_PRO = 'N' THEN
            mon_dif_venc_calculo := 0;
          ELSIF VI_PROP_COMPOSICAO <> 1 THEN
            mon_dif_venc_calculo          := mon_dif_venc_calculo* VI_PROP_COMPOSICAO;
            IF VI_PERCENTUAL_RATEIO = 0 OR VI_PERCENTUAL_RATEIO IS NULL THEN --ROD incluido 27.out.09
              SP_RATEIO_BENEFICIO(COM_COD_BENEFICIO,
                                  ANT_IDE_CLI,
                                  mon_dif_venc_calculo,
                                  mon_dif_venc_calculo,
                                  VI_PERCENTUAL_RATEIO);
            END IF;                                                          --fim

          ELSIF COM_IND_COMP_RUB = 'N'  THEN
            IF VI_PERCENTUAL_RATEIO = 0 OR VI_PERCENTUAL_RATEIO IS NULL THEN --ROD incluido 27.out.09
              SP_RATEIO_BENEFICIO(COM_COD_BENEFICIO,
                                  ANT_IDE_CLI,
                                  mon_dif_venc_calculo,
                                  mon_dif_venc_calculo,
                                  VI_PERCENTUAL_RATEIO);
            END IF;                                                          --fim

          END IF;
             --------------- Desenvolvimento Task 3689  --------------
            --- Ajuste valor da Rubrica para casos de Aposentadoria
             IF    COM_FLG_PROCESSA = 'S' AND  COM_TIP_BENEFICIO != 'APOSENTADO'
               AND COM_NAT_RUB      = 'C' AND  COM_IND_COMP_RUB = 'N'
               AND  APLICAR_RATEIO_BENEFICIO  THEN

                  mon_dif_venc_calculo    := ( mon_dif_venc_calculo *  VI_PERC_PENSAO);

             END IF;
            --------------- Desenvolvimento Task 3689  --------------


        END IF;
      ELSE
       mon_dif_venc_calculo := 0;
      END IF;


  END SP_CALCULA_RDIFF_VENC;

   PROCEDURE SP_LER_RDIFF_VENC (TIPO_CURSOR IN NUMBER)  AS
    BEGIN
      -- Agregado 21-03-2013
       COM_CARGO_LEIDO:=NULL;
       IF TIPO_CURSOR =1 THEN
           FETCH CUR_COMPBEN_DIFVEN
           INTO  COM_COD_BENEFICIO,
                 COM_TIP_BENEFICIO,
                 COM_COD_RUBRICA  ,
                 COM_COD_FCRUBRICA,
                 COM_SEQ_VIG_FC,
                 COM_NAT_COMP ,
                 COM_NUM_ORD_JUD,
                 COM_IDE_CLI_INSTITUIDOR,
                 COM_VAL_FIXO_IND,
                 COM_VAL_PORC_IND,
                 COM_VAL_PORC2,
                 COM_QTY_UNID_IND,
                 COM_VAL_UNID,
                 COM_TIPO_VALOR,
                 COM_IND_QTAS,
                 COM_NUM_QTAS_PAG,
                 COM_TOT_QTAS_PAG,
                 COM_IND_COMP_RUB,
                 COM_NAT_RUB,
                 COM_INI_REF,
                 COM_FIM_REF,
                 COM_PRIORIDADE,
                 COM_DED_IR,
                 COM_FLG_PROCESSA,
                 COM_NAT_VAL,
                 COM_TIPO_APLICACAO,
                 COM_PERCENT_BEN,
                 COM_TIPO_EVENTO_ESPECIAL,
                 COM_VAL_STR1,
                 COM_VAL_STR2,
                 COM_MATRICULA,
                 COM_ENTIDADE,
                 COM_CARGO,
                 COM_CARGO_APOS,
                 BEN_DAT_INICIO,
                 BEN_DAT_FIM,
                 COM_DAT_INI_VIG,
                 COM_DAT_FIM_VIG,
                 COM_COD_IDE_CLI_BEN,
                 COM_MSC_INFORMACAO,
                 COM_COL_INFORMACAO,
                 COM_PORC_VIG,
                 COM_DAT_VIG_RUBRICA,
                 COM_APLICA_RATEIO,
                 COM_SEQ_VIG,
                 com_cod_entidade ,
                 COM_NUM_CARGA,
                 COM_NUM_SEQ_CONTROLE_CARGA,
                 COM_NUM_GRUPO_PAG,
                 COM_RUBRICA_TIPO,
                 COM_FLG_STATUS,
                 COM_DAT_CONTRATO ,
                 COM_COD_CONVENIO ,
                 COM_DISSOCIACAO  ,
                 COM_FLG_MUDA_BASE,
                 COM_COD_TABELA
   --------------- Desenvolvimento Task 3689  --------------
                ,COM_APLICA_PROP_PENSAO;
   --------------- Desenvolvimento Task 3689  --------------

          ELSE
           FETCH CUR_COMPBEN_BADIFVEN
           INTO  COM_COD_BENEFICIO,
                 COM_TIP_BENEFICIO,
                 COM_COD_RUBRICA  ,
                 COM_COD_FCRUBRICA,
                 COM_SEQ_VIG_FC,
                 COM_NAT_COMP ,
                 COM_NUM_ORD_JUD,
                 COM_IDE_CLI_INSTITUIDOR,
                 COM_VAL_FIXO_IND,
                 COM_VAL_PORC_IND,
                 COM_VAL_PORC2,
                 COM_QTY_UNID_IND,
                 COM_VAL_UNID,
                 COM_TIPO_VALOR,
                 COM_IND_QTAS,
                 COM_NUM_QTAS_PAG,
                 COM_TOT_QTAS_PAG,
                 COM_IND_COMP_RUB,
                 COM_NAT_RUB,
                 COM_INI_REF,
                 COM_FIM_REF,
                 COM_PRIORIDADE,
                 COM_DED_IR,
                 COM_FLG_PROCESSA,
                 COM_NAT_VAL,
                 COM_TIPO_APLICACAO,
                 COM_PERCENT_BEN,
                 COM_TIPO_EVENTO_ESPECIAL,
                 COM_VAL_STR1,
                 COM_VAL_STR2,
                 COM_MATRICULA,
                 COM_ENTIDADE,
                 COM_CARGO,
                 COM_CARGO_APOS,
                 BEN_DAT_INICIO,
                 BEN_DAT_FIM,
                 COM_DAT_INI_VIG,
                 COM_DAT_FIM_VIG,
                 COM_COD_IDE_CLI_BEN,
                 COM_MSC_INFORMACAO,
                 COM_COL_INFORMACAO,
                 COM_PORC_VIG,
                 COM_DAT_VIG_RUBRICA,
                 COM_APLICA_RATEIO,
                 COM_SEQ_VIG,
                 com_cod_entidade ,
                 COM_NUM_CARGA,
                 COM_NUM_SEQ_CONTROLE_CARGA,
                 COM_NUM_GRUPO_PAG,
                 COM_RUBRICA_TIPO,
                 COM_FLG_STATUS,
                 COM_DAT_CONTRATO ,
                 COM_COD_CONVENIO ,
                 COM_DISSOCIACAO  ,
                 COM_FLG_MUDA_BASE,
                 COM_COD_TABELA,
     --------------- Desenvolvimento Task 3689  --------------
                 COM_APLICA_PROP_PENSAO;
     --------------- Desenvolvimento Task 3689  --------------

          END IF;
         COM_CARGO_LEIDO:=COM_CARGO;
  END;
  PROCEDURE SP_CARREGA_FORMULA_DIF_VENC AS

    vi_num_formula  number;
    c_elem          curform;
    c_cond          curform;
    c_dcond         curform;
    vi_cod_elemento varchar2(30);
    vi_tip_elemento varchar2(10);
    vi_num_funcao   number;
    vi_variavel     varchar2(30);
    i               number;

  BEGIN

    i               := 0;
    vi_sem_condicao := TRUE;
    cod_elemento.delete;
    tip_elemento.delete;
    val_elemento.delete;
    vas_elemento.delete;
    num_funcao.delete;

    -- obtem formula
    -- Valida condicao
    OPEN c_cond for
      SELECT distinct CF.COD_FORMULA
        FROM TB_CONDICAO_FORMULA CF
       WHERE CF.COD_INS = PAR_COD_INS
         AND CF.COD_FCRUBRICA = COM_COD_FCRUBRICA
         AND CF.COD_ENTIDADE = COM_COD_ENTIDADE
         AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
             to_char(CF.DAT_INI_VIG, 'YYYYMM') and
             to_char(PAR_PER_PRO, 'YYYYMM') <=
             to_char(nvl(CF.DAT_FIM_VIG,
                          to_date('01/01/2045', 'dd/mm/yyyy')),
                      'YYYYMM'));

    FETCH c_cond
      INTO VI_NUM_FORMULA;

    lim_funcao := 0;

    IF C_COND%FOUND THEN
      vi_sem_condicao := FALSE;
      WHILE C_COND%FOUND LOOP
        OPEN c_dcond FOR
          SELECT DC.COD_ELEMENTO,
                 DC.TIP_ELEMENTO,
                 fv.num_funcao,
                 fv.cod_variavel
            FROM TB_DCONDICAO_FORMULA DC, TB_VARIAVEIS FV
           WHERE DC.COD_INS = PAR_COD_INS
             AND DC.COD_FCRUBRICA = COM_COD_FCRUBRICA
             AND DC.COD_FORMULA = vi_num_formula
             AND DC.COD_ENTIDADE = COM_ENTIDADE
             AND FV.COD_VARIAVEL(+) = DC.COD_ELEMENTO
             AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
                 to_char(DC.DAT_INI_VIG, 'YYYYMM') and
                 to_char(PAR_PER_PRO, 'YYYYMM') <=
                 to_char(nvl(DC.DAT_FIM_VIG,
                              to_date('01/01/2045', 'dd/mm/yyyy')),
                          'YYYYMM'))
           ORDER BY DC.NUM_CONDICAO, DC.NUM_SEQ_COND;

        FETCH C_DCOND
          INTO VI_COD_ELEMENTO, VI_TIP_ELEMENTO, VI_NUM_FUNCAO, VI_VARIAVEL;
        WHILE C_DCOND%FOUND LOOP
          i := i + 1;
          cod_elemento.extend(1);
          tip_elemento.extend(1);
          val_elemento.extend(1);
          vas_elemento.extend(1);
          num_funcao.extend(1);
          cod_elemento(i) := vi_cod_elemento;
          tip_elemento(i) := vi_tip_elemento;

          IF vi_tip_elemento = 'VAR' THEN
            vas_elemento(i) := sp_obtem_valor_var(vi_num_funcao,
                                                  vi_variavel,
                                                  1);
          ELSIF vi_tip_elemento = 'VAL' THEN
            vas_elemento(i) := vi_cod_elemento;
          ELSIF vi_tip_elemento = 'STR' THEN
            vas_elemento(i) := vi_cod_elemento;
          ELSE
            val_elemento(i) := 0;
            vas_elemento(i) := NULL;
          END IF;
          FETCH C_DCOND
            INTO VI_COD_ELEMENTO, VI_TIP_ELEMENTO, VI_NUM_FUNCAO, VI_VARIAVEL;
        END LOOP;
        CLOSE C_DCOND;
        lim_funcao  := i;
        vi_condicao := SP_VALIDA_CONDICAO;
        IF vi_condicao THEN
          EXIT;
        END IF;
        FETCH C_COND
          INTO VI_NUM_FORMULA;
        i := 0;
        --      vi_sem_condicao:=FALSE;
        cod_elemento.delete;
        tip_elemento.delete;
        val_elemento.delete;
        vas_elemento.delete;
        num_funcao.delete;
      END LOOP;
      CLOSE C_COND;
    ELSE
      BEGIN
        -- Formula
        SELECT FF.COD_FORMULA
          INTO vi_num_formula
          FROM TB_FORMULA FF
         WHERE FF.COD_INS = PAR_COD_INS
           AND FF.COD_FCRUBRICA = COM_COD_FCRUBRICA
           AND FF.SEQ_VIG_FC = COM_SEQ_VIG_FC
           AND FF.COD_ENTIDADE = COM_ENTIDADE
           AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
               to_char(FF.DAT_INI_VIG, 'YYYYMM') and
               to_char(PAR_PER_PRO, 'YYYYMM') <=
               to_char(nvl(FF.DAT_FIM_VIG,
                            to_date('01/01/2045', 'dd/mm/yyyy')),
                        'YYYYMM'));

      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          vi_num_formula := 0;
        WHEN OTHERS THEN
          p_sub_proc_erro := 'SP_CARREGA_FORMULA';
          p_coderro       := SQLCODE;
          P_MSGERRO       := 'Erro ao obter o numero da Formula';
          INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                p_coderro,
                                'Calcula Folha',
                                sysdate,
                                p_msgerro,
                                p_sub_proc_erro,
                                BEN_IDE_CLI,
                                COM_COD_FCRUBRICA);

          --       RAISE ERRO;
          VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
      END;

    END IF;
    cod_elemento.delete;
    tip_elemento.delete;
    val_elemento.delete;
    vas_elemento.delete;
    num_funcao.delete;
    idx_elemento := 0;
    IF vi_condicao or vi_sem_condicao THEN
      -- obtem elementos
      OPEN c_elem FOR
        SELECT FE.COD_ELEMENTO,
               FE.TIP_ELEMENTO,
               FV.NUM_FUNCAO,
               FV.COD_VARIAVEL
          FROM TB_ELEMENTOS FE, TB_VARIAVEIS FV
         WHERE FE.COD_INS = PAR_COD_INS
           AND FE.COD_FCRUBRICA = COM_COD_FCRUBRICA
           AND FE.COD_FORMULA = vi_num_formula
           AND FE.COD_ENTIDADE = COM_ENTIDADE
           AND FV.COD_VARIAVEL(+) = FE.COD_ELEMENTO
           AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
               to_char(FE.DAT_INI_VIG, 'YYYYMM') and
               to_char(PAR_PER_PRO, 'YYYYMM') <=
               to_char(nvl(FE.DAT_FIM_VIG,
                            to_date('01/01/2045', 'dd/mm/yyyy')),
                        'YYYYMM'))
         ORDER BY FE.NUM_SEQ_EXEC;

      IF C_ELEM%ISOPEN THEN
        FETCH C_ELEM
          INTO VI_COD_ELEMENTO, VI_TIP_ELEMENTO, VI_NUM_FUNCAO, VI_VARIAVEL;
      END IF;
      i := 0;
      WHILE C_ELEM%FOUND LOOP
        i := i + 1;
        cod_elemento.EXTEND(1);
        tip_elemento.extend(1);
        val_elemento.extend(1);
        vas_elemento.extend(1);
        num_funcao.extend(1);

        cod_elemento(i) := vi_cod_elemento;
        tip_elemento(i) := vi_tip_elemento;

        IF vi_tip_elemento = 'VAR' THEN
          IF vi_num_funcao NOT IN (10,15,29,33,34,35,36,37,70,
                                   78,414,31,42,43,44) THEN
                vas_elemento(i) := sp_obtem_valor_var(vi_num_funcao,
                                                      vi_variavel,
                                                      2);
          ELSE
                vas_elemento(i) := sp_obtem_valor_var_difvenc(vi_num_funcao,
                                                      vi_variavel,
                                                      2);
          END IF;
        ELSIF vi_tip_elemento = 'VAL' THEN
          vas_elemento(i) := vi_cod_elemento;
          IF vi_cod_elemento < '100' THEN
            idx_elemento := i;
          END IF;
        ELSE
          vas_elemento(i) := NULL;
        END IF;
        FETCH C_ELEM
          INTO VI_COD_ELEMENTO, VI_TIP_ELEMENTO, VI_NUM_FUNCAO, VI_VARIAVEL;
      END LOOP;
      lim_funcao := i;
      CLOSE c_elem;
    END IF;
  END;

  FUNCTION SP_OBTEM_VALOR_VAR_DIFVENC(i_num_funcao   in number,
                              i_cod_variavel in varchar2,
                              i_ordem        in number) return varchar2 IS
    o_valor          number(18, 5) := 0;
    o_str            varchar2(30) := null;
    vi_valor         number(18, 5);
    o_valor_13       number(18, 4) := 0;
    cont_ben         number := 0;
    cod_ref          number(8) := 0;
    v_val_base_liqui number(18, 4) := 0;
    o_data           date := null;
    o_padrao         varchar2(15) := null;
    v_referencia     number := 0;

  BEGIN

    o_str    := null;
    vi_valor := 0;
  BEGIN
     IF i_num_funcao = 10 THEN
        IF nvl(COM_FLG_MUDA_BASE,'N') != 'S' THEN
           sp_composicao_difvecn(COM_COD_FCRUBRICA,
              i_cod_variavel,
              COM_COD_BENEFICIO,
              COM_ENTIDADE,
              'N',
              o_valor);
        ELSE
             --CALCULO COM MUDANCA DE BASE
               sp_composicao_difv_mb(COM_COD_FCRUBRICA,
                i_cod_variavel,
                COM_COD_BENEFICIO,
                COM_ENTIDADE,
                 COM_TIPO_BASE ,
                'N',
                o_valor);

        END IF;

    ELSIF i_num_funcao = 6 THEN
      --SALARIO DO CARGO
      --  SP_OBTEM_ORIG_TAB_VENC_CCOMI(v_referencia);
      v_referencia:=COM_COD_REFERENCIA_RUB ;
      o_valor := SP_OBTEM_SALARIO_BASE_CARGO(v_referencia);
      --           o_valor := round(o_valor * PAR_PERCENT_CORRECAO,2);

    ELSIF i_num_FUNCAO in (15, 29, 33, 34, 35, 36, 37, 70, 78, 414) THEN
       SP_OBTEM_TIPOS_ATRIBUTOS(i_num_funcao,
                               replace(com_matricula, '-', ''),
                               com_entidade,
                               com_cargo,
                               o_str); --FFranco 21/11/2006
      if i_num_funcao = 37 then
        if o_str = 'S' then
          SP_OBTEM_PARVAL_FOLHA2('TASCO', 2000, 'DESC_CONTR', o_valor);
          if o_valor is null then
            o_valor := 0;
          end if;
        else
          o_valor := 0;
        end if;
      end if;
      o_str := '''' || o_str || '''';

    ELSIF i_num_funcao = 31 THEN
      --Composicao Individual - Valor Fixo
      o_valor := COM_VAL_FIXO_IND;
      IF COM_NAT_COMP <> 'C' THEN
        APLICAR_PROP_SAIDA := TRUE;
      ELSE
        APLICAR_PROP_SAIDA := FALSE;
      END IF;
       v_sal_base(com_cod_beneficio)(1) := o_valor;
    ELSIF i_num_FUNCAO = 42 THEN
      --Composicao Pensao
      SP_OBTEM_SOMA_PENSAO(o_valor);
      o_valor := o_valor * -1; -- obter o valor positivo para gravar o valor da rubrica correto
    ELSIF i_num_FUNCAO = 43 THEN
      --Composicao Sal. Familia
      SP_OBTEM_SOMA_SALFA(o_valor);
    ELSIF i_num_FUNCAO = 44 THEN
      --Composicao Vencimento
      SP_OBTEM_SOMA_VENCIMENTO(com_cod_beneficio,
                               com_cod_entidade,
                               'N',
                               o_valor);
    ELSIF i_num_FUNCAO = 45 THEN
      -- Obtem cod grupo abono cargo
      SP_OBTEM_CODGRUPO_ABONO(o_valor);
      V_COD_GRUPO_45 := o_valor;
    ELSIF i_num_FUNCAO = 46 THEN
      -- Obtem valor do abono
      SP_OBTEM_VALOR_ABONO(o_valor);

    ELSIF i_num_FUNCAO = 80 THEN
      -- % reajuste ordem judicial --->> FFRANCO 03/2007
      v_cod_beneficio_oj := 0;
      SP_OBTEM_ENQUADRAMENTO(3, v_cod_ref_oj, v_cod_beneficio_oj, o_valor);
      if v_cod_beneficio_oj <> com_cod_beneficio then
        o_valor := 0;
      end if;
    ELSIF i_num_FUNCAO = 81 THEN
      --Enquadramento - Codigo referencia ordem judicial  --->> FFRANCO 03/2007
      v_cod_ref_oj       := null;
      v_cod_beneficio_oj := 0;
      o_valor            := 0;
      SP_OBTEM_ENQUADRAMENTO(4, v_cod_ref_oj, v_cod_beneficio_oj, o_valor);
      if v_cod_ref_oj <> 0 and v_cod_beneficio_oj = com_cod_beneficio then
        o_valor := SP_OBTEM_SALARIO_BASE_CARGO_OJ;
        if PAR_IND_PROC_ENQUADRAMENTO = 1 then
          o_valor := o_valor * PAR_PERCENT_CORRECAO;
        end if;
        v_sal_base(com_cod_beneficio)(1) := o_valor;
      else
        o_valor := 0;
      end if;
    ELSIF i_num_FUNCAO = 82 THEN
      -- quantidade dias do beneficio no mes
      o_valor := SP_OBTEM_DIAS_BENEFICIO;

    ELSIF i_num_funcao = 101 THEN
      IF vi_cod_ref_pad_venc is not null then
        o_str := vi_cod_ref_pad_venc;
      ELSE
        o_str := SP_OBTEM_PADRAO_VENCIMENTO;
      END IF;
      o_str := '''' || o_str || '''';
    ELSIF i_num_funcao = 102 THEN
      o_valor := SP_OBTEM_SALARIO_PADRAO_INI;
    ELSIF i_num_funcao = 103 THEN
      o_valor := COM_PCCS;

    ELSIF i_num_funcao = 112 THEN
      o_valor := SP_OBTEM_SALARIO_PADRAO_INI_A;
    ELSIF i_num_funcao = 119 THEN
      o_valor := SP_OBTEM_SALARIO_BASE_CARGO(COM_COD_REFERENCIA_DIF); --ROD10

        o_valor :=   COM_COD_CARGO_RUB; --COM_CARGO; 2013-03-21 MUDA CARGO DA 3005

   ELSIF i_num_funcao in (17,132, 133, 134, 135, 136,137) THEN
        o_str := SP_OBTEM_PADRAO_VENCIMENTO_DIF;
      IF i_num_funcao = 17 THEN
         o_valor := to_number(substr(vi_cod_ref_pad_venc, 14, 1));
      ELSIF i_num_funcao = 132 THEN
        o_valor := to_number(substr(vi_cod_ref_pad_venc, 10, 3));
      ELSIF i_num_funcao = 133 THEN
        o_valor := to_number(substr(vi_cod_ref_pad_venc, 21, 2));
      ELSIF i_num_funcao = 134 THEN
        o_valor := to_number(substr(vi_cod_ref_pad_venc, 24, 2));
      ELSIF i_num_funcao = 135 THEN
        o_valor := to_number(substr(vi_cod_ref_pad_venc, 16, 2));
      ELSIF i_num_funcao = 136 THEN
        o_str := substr(vi_cod_ref_pad_venc, 19, 1);
        o_str := '''' || o_str || '''';
       ELSIF i_num_funcao = 137 THEN
         SP_OBTEM_PARVAL_FOLHA2('VAL_PISO_F', 1000, i_cod_variavel, o_valor);
      END IF;

  END IF;


   EXCEPTION
    WHEN OTHERS THEN

        p_coderro       := sqlcode;
        p_sub_proc_erro := 'SP_OBTEM_VALOR_FORMULA';
        p_msgerro       := 'Erro ao obter o valor da formula' || ' - '|| TO_CHAR(i_num_FUNCAO ) ;

        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              BEN_IDE_CLI,
                              COM_COD_FCRUBRICA);

        --       RAISE ERRO;
        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
        o_valor:=0;
        o_str:=' ';
   END;

  IF i_num_funcao in
     (99, 1, 2, 3, 4, 8, 16, 19, 25, 15, 29, 48, 51, 33, 34, 35, 36, 37, 38, 39, 47, 67, 70, 72, 78, 94,

101, 105, 108, 109, 113, 114, 118, 136, 201, 210, 211, 212,403,404,411,412,414 ) THEN
    return(o_str);
  ELSE
    return(to_char(o_valor, '0000000.99999'));
  END IF;

  END SP_OBTEM_VALOR_VAR_DIFVENC;

  PROCEDURE SP_COMPOSICAO_DIFVECN(I_COD_RUBRICA   in number,
                          I_VARIAVEL      in varchar2,
                          I_COD_BENEFICIO IN NUMBER,
                          I_COD_ENTIDADE  IN NUMBER,
                          i_ind_val_cheio in varchar2,
                          I_VALOR         OUT NUMBER) AS
    c_comp     curform;
    vi_valor   number(18, 5);
    VI_RUBRICA NUMBER;
    m          number := 0;
    v_soma     char(1) := 'S';
    TIPO_CALC  number;
  BEGIN

    I_VALOR  := 0;
    VI_VALOR := 0;
    --- Obtem rubricas da composic?o


    OPEN c_comp FOR
      SELECT cd.cod_fcrubrica_compoe
        FROM tb_compoe_det cd
       WHERE cd.cod_ins = PAR_COD_INS
         AND cd.cod_fcrubrica_composta = I_COD_RUBRICA
         AND cd.cod_variavel = I_VARIAVEL
         AND cd.cod_entidade_composta = I_COD_ENTIDADE
         AND (PAR_PER_PRO >= cd.dat_ini_vig AND
             PAR_PER_PRO <=
             nvl(cd.dat_fim_vig, to_date('01/01/2045', 'dd/mm/yyyy')));
    FETCH c_comp
      INTO vi_rubrica;
    WHILE C_COMP%FOUND LOOP


        sp_valor_calculado_difvenc(VI_RUBRICA,
                           I_COD_BENEFICIO,
                           I_VARIAVEL,
                           I_COD_ENTIDADE,
                           i_ind_val_cheio,
                           1,
                           vi_valor);
        I_VALOR := I_VALOR + VI_VALOR;


      FETCH c_comp
        INTO vi_rubrica;
    END LOOP;
    CLOSE C_COMP;

  END  SP_COMPOSICAO_DIFVECN;
  ------------------------------------------------------------------------------
 PROCEDURE SP_COMPOSICAO_DIFV_MB(I_COD_RUBRICA   in number,
                          I_VARIAVEL      in varchar2,
                          I_COD_BENEFICIO IN NUMBER,
                          I_COD_ENTIDADE  IN NUMBER,
                           i_tipo_base     in VARCHAR2,
                           i_ind_val_cheio in varchar2,
                           I_VALOR         OUT NUMBER) AS
    c_comp     curform;
    vi_valor   number(18, 5);
    VI_RUBRICA NUMBER;
    m          number := 0;
    v_soma     char(1) := 'S';
    TIPO_CALC  number;
  BEGIN

    I_VALOR  := 0;
    VI_VALOR := 0;
    --- Obtem rubricas da composic?o

    OPEN c_comp FOR
      SELECT cd.cod_fcrubrica_compoe
        FROM tb_compoe_det_RUB cd
       WHERE cd.cod_ins = PAR_COD_INS
         AND cd.cod_conceito_calc =trunc(COM_COD_RUBRICA_DIF/100)
         AND cd.cod_fcrubrica_composta = I_COD_RUBRICA
         AND cd.cod_variavel = I_VARIAVEL
         AND cd.cod_entidade_composta = I_COD_ENTIDADE
         AND (PAR_PER_PRO >= cd.dat_ini_vig AND
             PAR_PER_PRO <=
             nvl(cd.dat_fim_vig, to_date('01/01/2045', 'dd/mm/yyyy')));
    FETCH c_comp
      INTO vi_rubrica;
    WHILE C_COMP%FOUND LOOP


        sp_valor_calculado_difvenc(VI_RUBRICA,
                           I_COD_BENEFICIO,
                           I_VARIAVEL,
                           I_COD_ENTIDADE,
                           i_ind_val_cheio,
                           i_tipo_base,
                           vi_valor);
        I_VALOR := I_VALOR + VI_VALOR;


      FETCH c_comp
        INTO vi_rubrica;
    END LOOP;
    CLOSE C_COMP;

  END  SP_COMPOSICAO_DIFV_MB;
  ------------------------------------------------------------------------------


  PROCEDURE SP_VALOR_CALCULADO_DIFVENC (I_RUBRICA       IN NUMBER,
                               I_COD_BENEFICIO IN NUMBER,
                               I_COD_VARIAVEL  IN VARCHAR2,
                               I_COD_ENTIDADE  IN NUMBER,
                               I_IND_VAL_CHEIO IN VARCHAR2,
                               I_TIPO          IN NUMBER,
                               O_VALOR         OUT NUMBER) AS
    i       integer;
    cont_sp number := 0;
  BEGIN
    O_VALOR := 0;
    cont_sp := tdvenc.count;
    IF  I_TIPO =1 THEN
           cont_sp := tdvenc.count;
     ELSE
           cont_sp := tdvenc_nor.counT ;
    END IF;
    FOR i IN 1 .. cont_sp LOOP
       IF  I_TIPO =1 THEN
         rdcn := tdvenc(i);
       ELSE
         rdcn := tdvenc_nor(i);
       END IF;

        IF rdcn.cod_fcrubrica = i_rubrica AND
           rdcn.cod_beneficio = i_cod_beneficio
        THEN
          IF rdcn.flg_natureza = 'D' then

              o_valor := o_valor - TRUNC(rdcn.val_rubrica,2);
          ELSE
              o_valor := o_valor + TRUNC(rdcn.val_rubrica,2);
          END IF;
        END IF;

    END LOOP;


  END SP_VALOR_CALCULADO_DIFVENC;

   ---------------------------------------------------------------------------------
  PROCEDURE SP_CARREGA_FORMULA_RECUR AS

    vi_num_formula_rec  number;
    c_elem_rec          curform;
    c_cond_rec          curform;
    c_dcond_rec         curform;
    vi_cod_elemento_rec varchar2(30);
    vi_tip_elemento_rec varchar2(10);
    vi_num_funcao_rec   number;
    vi_variavel_rec     varchar2(30);
    i_rec               number;

  BEGIN

    i_rec               := 0;

    vi_sem_condicao_rec := TRUE;
   -- cod_elemento.delete;
    cod_elemento_rec.delete;
    tip_elemento_rec.delete;
    val_elemento_rec.delete;
    vas_elemento_rec.delete;
     num_funcao.delete;
    num_funcao_rec.delete;

    -- obtem formula
    -- Valida condicao

    OPEN c_cond_rec for
      SELECT distinct CF.COD_FORMULA
        FROM TB_CONDICAO_FORMULA CF
       WHERE CF.COD_INS = PAR_COD_INS
         AND CF.COD_FCRUBRICA = COM_COD_FCRUBRICA
         AND CF.COD_ENTIDADE = COM_COD_ENTIDADE
         AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
             to_char(CF.DAT_INI_VIG, 'YYYYMM') and
             to_char(PAR_PER_PRO, 'YYYYMM') <=
             to_char(nvl(CF.DAT_FIM_VIG,
                          to_date('01/01/2045', 'dd/mm/yyyy')),
                      'YYYYMM'));

    FETCH c_cond_rec
      INTO VI_NUM_FORMULA_rec;

    lim_funcao_rec := 0;

    IF C_COND_rec%FOUND THEN
      vi_sem_condicao_rec := FALSE;
      WHILE C_COND_rec%FOUND LOOP
        OPEN c_dcond_rec FOR
          SELECT DC.COD_ELEMENTO,
                 DC.TIP_ELEMENTO,
                 fv.num_funcao,
                 fv.cod_variavel
            FROM TB_DCONDICAO_FORMULA DC, TB_VARIAVEIS FV
           WHERE DC.COD_INS = PAR_COD_INS
             AND DC.COD_FCRUBRICA = COM_COD_FCRUBRICA
             AND DC.COD_FORMULA = vi_num_formula_rec
             AND DC.COD_ENTIDADE = COM_ENTIDADE
             AND FV.COD_VARIAVEL(+) = DC.COD_ELEMENTO
             AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
                 to_char(DC.DAT_INI_VIG, 'YYYYMM') and
                 to_char(PAR_PER_PRO, 'YYYYMM') <=
                 to_char(nvl(DC.DAT_FIM_VIG,
                              to_date('01/01/2045', 'dd/mm/yyyy')),
                          'YYYYMM'))
           ORDER BY DC.NUM_CONDICAO, DC.NUM_SEQ_COND;

        FETCH C_DCOND_rec
          INTO VI_COD_ELEMENTO_rec, VI_TIP_ELEMENTO_rec, VI_NUM_FUNCAO_rec, VI_VARIAVEL_rec;
        WHILE C_DCOND_rec%FOUND LOOP
          i_rec := i_rec + 1;
          cod_elemento_rec.extend(1);
          tip_elemento_rec.extend(1);
          val_elemento_rec.extend(1);
          vas_elemento_rec.extend(1);
          num_funcao_rec.extend(1);
          cod_elemento_rec(i_rec) := vi_cod_elemento_rec;
          tip_elemento_rec(i_rec) := vi_tip_elemento_rec;

          IF vi_tip_elemento_rec = 'VAR' THEN
             --COMENTADO 06-01-2013  -- Motivo a condic?o da 4074 se
             -- pega a referencia da 300504 no da ev funcional
/*            vas_elemento_rec(i_rec) := sp_obtem_valor_var(vi_num_funcao_rec,
                                                  vi_variavel_rec,
                                                  1);*/

              IF vi_num_funcao_rec NOT IN (6,10,15,17,29,33,34,35,36,37,70,
                                       78,414,31,42,43,44,119,132,133,134,135,136,137) THEN
                    vas_elemento_rec(i_rec) := sp_obtem_valor_var(vi_num_funcao_rec,
                                                          vi_variavel_rec,
                                                          2);
              ELSE
                    vas_elemento_rec(i_rec) := sp_obtem_valor_var_difvenc(vi_num_funcao_rec,
                                                          vi_variavel_rec,
                                                          2);
              END IF;

          ELSIF vi_tip_elemento_rec = 'VAL' THEN
            vas_elemento_rec(i_rec) := vi_cod_elemento_rec;
          ELSIF vi_tip_elemento_rec = 'STR' THEN
            vas_elemento_rec(i_rec) := vi_cod_elemento_rec;
          ELSE
            val_elemento_rec(i_rec) := 0;
            vas_elemento_rec(i_rec) := NULL;
          END IF;
          FETCH C_DCOND_rec
            INTO VI_COD_ELEMENTO_rec, VI_TIP_ELEMENTO_rec ,VI_NUM_FUNCAO_rec, VI_VARIAVEL_rec;
        END LOOP;
        CLOSE C_DCOND_rec;
        lim_funcao_rec  := i_rec;
        vi_condicao_rec := SP_VALIDA_CONDICAO_RECUR;
        IF vi_condicao_rec THEN
          EXIT;
        END IF;
        FETCH C_COND_rec
          INTO VI_NUM_FORMULA_rec;
        i_rec := 0;
        --      vi_sem_condicao_rec:=FALSE;
        cod_elemento_rec.delete;
        tip_elemento_rec.delete;
        val_elemento_rec.delete;
        vas_elemento_rec.delete;
        num_funcao_rec.delete;
      END LOOP;
      CLOSE C_COND_rec;
    ELSE
      BEGIN
        -- Formula
        SELECT FF.COD_FORMULA
          INTO vi_num_formula_rec
          FROM TB_FORMULA FF
         WHERE FF.COD_INS = PAR_COD_INS
           AND FF.COD_FCRUBRICA = COM_COD_FCRUBRICA
           AND FF.SEQ_VIG_FC = COM_SEQ_VIG_FC
           AND FF.COD_ENTIDADE = COM_ENTIDADE
           AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
               to_char(FF.DAT_INI_VIG, 'YYYYMM') and
               to_char(PAR_PER_PRO, 'YYYYMM') <=
               to_char(nvl(FF.DAT_FIM_VIG,
                            to_date('01/01/2045', 'dd/mm/yyyy')),
                        'YYYYMM'));

      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          vi_num_formula_rec := 0;
        WHEN OTHERS THEN
          p_sub_proc_erro := 'SP_CARREGA_FORMULA';
          p_coderro       := SQLCODE;
          P_MSGERRO       := 'Erro ao obter o numero da Formula';
          INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                p_coderro,
                                'Calcula Folha',
                                sysdate,
                                p_msgerro,
                                p_sub_proc_erro,
                                BEN_IDE_CLI,
                                COM_COD_FCRUBRICA);

          --       RAISE ERRO;
          VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
      END;

    END IF;
    cod_elemento_rec.delete;
    tip_elemento_rec.delete;
    val_elemento_rec.delete;
    vas_elemento_rec.delete;
    num_funcao_rec.delete;
    idx_elemento_rec := 0;
    idx_elemento  := 0;
    IF vi_condicao_rec or vi_sem_condicao_rec THEN
      -- obtem elementos
      OPEN c_elem_rec FOR
        SELECT FE.COD_ELEMENTO,
               FE.TIP_ELEMENTO,
               FV.NUM_FUNCAO,
               FV.COD_VARIAVEL
          FROM TB_ELEMENTOS FE, TB_VARIAVEIS FV
         WHERE FE.COD_INS = PAR_COD_INS
           AND FE.COD_FCRUBRICA = COM_COD_FCRUBRICA
           AND FE.COD_FORMULA = vi_num_formula_rec
           AND FE.COD_ENTIDADE = COM_ENTIDADE
           AND FV.COD_VARIAVEL(+) = FE.COD_ELEMENTO
           AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
               to_char(FE.DAT_INI_VIG, 'YYYYMM') and
               to_char(PAR_PER_PRO, 'YYYYMM') <=
               to_char(nvl(FE.DAT_FIM_VIG,
                            to_date('01/01/2045', 'dd/mm/yyyy')),
                        'YYYYMM'))
         ORDER BY FE.NUM_SEQ_EXEC;

      IF C_ELEM_rec%ISOPEN THEN
        FETCH C_ELEM_rec
          INTO VI_COD_ELEMENTO_rec, VI_TIP_ELEMENTO_rec, VI_NUM_FUNCAO_rec, VI_VARIAVEL_rec;
      END IF;
      i_rec := 0;
      WHILE C_ELEM_rec%FOUND LOOP
        i_rec := i_rec + 1;
        cod_elemento_rec.EXTEND(1);
        tip_elemento_rec.extend(1);
        val_elemento_rec.extend(1);
        vas_elemento_rec.extend(1);
        num_funcao_rec.extend(1);

        cod_elemento_rec(i_rec) := vi_cod_elemento_rec;
        tip_elemento_rec(i_rec) := vi_tip_elemento_rec;

        IF vi_tip_elemento_rec = 'VAR' THEN
          IF vi_num_funcao_rec NOT IN (6,10,15,17,29,33,34,35,36,37,70,
                                   78,414,31,42,43,44) THEN
                vas_elemento_rec(i_rec) := sp_obtem_valor_var(vi_num_funcao_rec,
                                                      vi_variavel_rec,
                                                      2);
          ELSE
                vas_elemento_rec(i_rec) := sp_obtem_valor_var_difvenc(vi_num_funcao_rec,
                                                      vi_variavel_rec,
                                                      2);
          END IF;
        ELSIF vi_tip_elemento_rec = 'VAL' THEN
          vas_elemento_rec(i_rec) := vi_cod_elemento_rec;
          IF vi_cod_elemento_rec < '100' THEN
            idx_elemento_rec := i_rec;
          END IF;
        ELSE
          vas_elemento_rec(i_rec) := NULL;
        END IF;
        FETCH C_ELEM_rec
          INTO VI_COD_ELEMENTO_rec, VI_TIP_ELEMENTO_rec, VI_NUM_FUNCAO_rec, VI_VARIAVEL_rec;
      END LOOP;
      lim_funcao_rec := i_rec;
      CLOSE c_elem_rec;
    END IF;
  END SP_CARREGA_FORMULA_RECUR;
  ---------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_VALOR_FORMULA_RECUR AS

    i_rec           number;
    vi_formula_rec  varchar2(500);
    vi_valor_rec    number(18, 4);
    vi_str_rec      varchar2(600);
    cur_form_rec    curesp;

  BEGIN

    vi_valor_rec := 0;

    FOR i_rec IN 1 .. lim_funcao_rec LOOP
      IF tip_elemento_rec(i_rec) = 'OPER' or tip_elemento_rec(i_rec) = 'SIMB' THEN
        vi_formula_rec := concat(vi_formula_rec, cod_elemento_rec(i_rec));
      ELSE
        vi_formula_rec := concat(vi_formula_rec, vas_elemento_rec(i_rec));
        IF tip_elemento_rec(i_rec) = 'VAR' THEN
          idx_elemento_rec := i_rec;
        END IF;
      END IF;
    END LOOP;
    vi_str_rec := 'select ' || vi_formula_rec || ' from dual';
    BEGIN
      OPEN cur_form_rec FOR vi_str_rec;
      FETCH cur_form_rec
        INTO vi_valor_rec;
      CLOSE cur_form_rec;
    EXCEPTION
      WHEN OTHERS THEN
        IF SQLCODE = -936 THEN
          vi_valor_rec := 0;
        ELSE
          p_coderro       := sqlcode;
          p_sub_proc_erro := 'SP_OBTEM_VALOR_FORMULA';
          p_msgerro       := 'Erro ao obter o valor da formula' || ' - ' ||
                             vi_str_rec;
          INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                p_coderro,
                                'Calcula Folha',
                                sysdate,
                                p_msgerro,
                                p_sub_proc_erro,
                                BEN_IDE_CLI,
                                COM_COD_FCRUBRICA);

          --       RAISE ERRO;
          VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
        END IF;
    END;

    IF trunc(com_cod_fcrubrica / 100, 000) <> 119 THEN
      mon_calculo := vi_valor_rec * COM_PORC_VIG; --RAO 20060321
    else
      mon_calculo := vi_valor_rec;
    end if;

  END SP_OBTEM_VALOR_FORMULA_RECUR ;


  PROCEDURE SP_OBTEM_ORIG_TAB_VENC_CCOMI(val_referencia_cc out number) AS
  BEGIN

    begin
        select ecg.cod_referencia
         into val_referencia_cc
          from tb_evolu_ccomi_gfuncional ecg,
               tb_concessao_beneficio    cc,
               tb_referencia             rr
         where ecg.cod_ins = PAR_COD_INS
           and ecg.cod_ins = cc.cod_ins
           and ecg.cod_entidade = cc.cod_entidade
           and ecg.num_matricula = cc.num_matricula
           and ecg.cod_ide_rel_func = cc.cod_ide_rel_func
           and ecg.cod_ide_cli = cc.cod_ide_cli_serv
           and rr.cod_ins = cc.cod_ins
           and rr.cod_entidade = cc.cod_entidade
           and rr.cod_referencia = ecg.cod_referencia
           and ecg.cod_cargo_comp =COM_CARGO_DIF_VENC
           and ecg.dat_fim_efeito is null
           and ecg.cod_entidade=COM_COD_ENTIDADE
           and cc.cod_beneficio=COM_COD_BENEFICIO
           and ecg.cod_ide_cli=COM_IDE_CLI_INSTITUIDOR
           and rownum<2;

    exception
      when others then
        val_referencia_cc := 0;
    end;
  END SP_OBTEM_ORIG_TAB_VENC_CCOMI;
  ------------------------
 FUNCTION SP_OBTEM_PADRAO_VENCIMENTO_DIF RETURN VARCHAR2 IS

  BEGIN
    begin
      select rr.cod_ref_pad_venc
        into vi_cod_ref_pad_venc
        from tb_referencia rr
       where rr.cod_entidade = COM_ENTIDADE
         and rr.cod_ins = PAR_COD_INS
         and rr.cod_pccs = COM_PCCS
         and rr.cod_quadro = COM_QUADRO
         and rr.cod_referencia =COM_COD_REFERENCIA_DIF
         and (PAR_PER_PRO >= rr.dat_ini_vig and
             PAR_PER_PRO <=
             nvl(rr.dat_fim_vig, to_date('01/01/2045', 'dd/mm/yyyy')));
    exception
      when others then
        vi_cod_ref_pad_venc := ' ';
    end;

    return vi_cod_ref_pad_venc;

  END SP_OBTEM_PADRAO_VENCIMENTO_DIF;
   FUNCTION SP_VALIDA_CONDICAO_RECUR RETURN BOOLEAN AS

    i          number;
    vi_formula varchar2(700);
    vi_str     varchar2(700);
    cur_form   curesp;
    o_condicao boolean;
    vi_res     number;

  BEGIN
    vi_res     := 0;
    o_condicao := FALSE;
    FOR i IN 1 .. lim_funcao_rec LOOP
      IF tip_elemento_rec(i) = 'OPER' OR tip_elemento_rec(i) = 'SIMB' THEN
        vi_formula := concat(vi_formula, cod_elemento_rec(i));
      ELSE
        vi_formula := concat(vi_formula, vas_elemento_rec(i));
        --         vi_formula:=concat(vi_formula,to_char(val_elemento(i),'0000000.9999'));
      END IF;
    END LOOP;
    vi_str := 'select case when ' || vi_formula ||
              ' then 1 else 0 end from dual';
    begin
      OPEN cur_form FOR vi_str;
      -- fetch cur_form into o_condicao;
      FETCH cur_form
        INTO vi_res;
      CLOSE cur_form;
    exception
      when others then
        IF SQLCODE = -936 THEN
          vi_res := 0;
        ELSE
          p_coderro       := sqlcode;
          p_sub_proc_erro := 'SP_VALIDA_CONDICAO';
          p_msgerro       := 'Erro ao validar a condicao da formula' || '  ' ||
                             vi_str;
          INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                p_coderro,
                                'Calcula Folha',
                                sysdate,
                                p_msgerro,
                                p_sub_proc_erro,
                                BEN_IDE_CLI,
                                COM_COD_FCRUBRICA);

          --       RAISE ERRO;
          VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
        END IF;
    end;
    IF vi_res = 1 THEN
      o_condicao := TRUE;
    ELSE
      o_condicao := FALSE;
    END IF;
    RETURN(o_condicao);

  END SP_VALIDA_CONDICAO_RECUR;
  --- Para calculo de IR 13
    ----------------------------------------------------------------------------------
  PROCEDURE SP_OBTEM_DETALHE_PAG13(IDE_CLI            IN VARCHAR2,
                                   FLG_PA             IN VARCHAR2,
                                   TP_EVENTO_ESPECIAL IN VARCHAR2,
                                   TP_EVENTO          IN VARCHAR2) as

    vi_rubrica      number := 0;
    vi_val_rubrica  number(18, 2) := 0;
    vi_seq_vig      number := 0;
    i_perc          number(18, 6) := 0;
    i               number := 0;
    cod_benef       number := 0;
    vi_flg_natureza varchar2(1) := null;
    val_13          number(18, 2) := 0;
    v_erro          varchar2(500) := null;
    -- variavel para diferenca havendo pagamento especial
    v_val_rub_dif number(18, 4) := 0;
    -- variavel para obter o ir do pagamento normal
    v_val_rub_pgto_normal number(18, 4) := 0;
    -- utilizar o processo para inclus?o de mais rubricas, 13?
   AA NUMBER;
   BB NUMBER;
  BEGIN

    IF (TP_EVENTO_ESPECIAL = 'K' ) THEN
      BEGIN
        SELECT rr.cod_rubrica, rr.seq_vig
          INTO vi_rubrica, vi_seq_vig
          FROM tb_rubricas rr
         WHERE rr.cod_ins = PAR_COD_INS
           AND rr.tip_evento_especial = TP_EVENTO_ESPECIAL --Fixo
           AND rr.tip_evento = decode(par_tip_pro, 'S', 'N', tp_evento) --Tip_processo
           AND rr.cod_entidade = COM_ENTIDADE
           AND RR.DAT_INI_VIG <= PAR_PER_PRO
           AND (RR.DAT_FIM_VIG >= PAR_PER_PRO OR RR.DAT_FIM_VIG IS NULL);
      EXCEPTION
        WHEN OTHERS THEN

          return;

      END;
    END IF;

    IF TP_EVENTO_ESPECIAL = 'K'  THEN
      vi_flg_natureza := 'D';
    ELSE
      vi_flg_natureza := 'C';
    END IF;

    COM_VAL_RUBRICA_CHEIO := 0;

    FOR i IN 1 .. v_cod_beneficio.count LOOP

      IF FLG_PA = 'S' THEN
        tdcn_pa.extend;
        vi_ir_ret.extend;
        idx_caln_pa     := nvl(idx_caln_pa, 0) + 1;
        idx_seq_detalhe := nvl(idx_seq_detalhe, 0) + 1;

      ELSE
        tdcn.extend;
        vi_ir_ret.extend;

        idx_caln        := nvl(idx_caln, 0) + 1;
        idx_seq_detalhe := nvl(idx_seq_detalhe, 0) + 1;
      END IF;
      -- Inicializacao da variavel do ir retido, recebendo o valor do ir calculado
      --vi_ir_ret(i) := V_VAL_IR_13;
      -- n?o existindo IR , o valor da variavel ir retido ficara com zero.

      cod_benef := v_cod_beneficio(i);

      IF TP_EVENTO_ESPECIAL = 'K' then
          AA:=VI_BASE_IR_ARR_13(cod_benef)(1) ;
          BB:=VI_BASE_IR_ARR_DED(cod_benef) (1) ;
           i_perc := ((VI_BASE_IR_ARR_13(cod_benef) (1)-VI_BASE_IR_ARR_DED(cod_benef) (1)  )/   ( V_BASE_BRUTA_13_IRRF -VI_TOT_DED_RUB) ) * 100 ;
           VI_PERC_IR13(cod_benef)(1) := i_perc;
        IF VI_BASE_IR_ARR_13(cod_benef) (1) <> 0 THEN
          IF VI_SUPLEMENTAR AND cont_benef > 1 THEN
           -- i_perc := ((VI_BASE_IR_ARR(cod_benef) (1)-VI_BASE_IR_ARR_DED(cod_benef) (1)  )/ ( VI_BASE_BRUTA- VI_TOT_DED_RUB)) * 100 ;
            VI_PERC_IR(cod_benef)(1) := i_perc;
          ELSE
            IF cont_benef = 1 AND VI_SUPLEMENTAR THEN
              i_perc := 100;
             -- VI_PERC_IR(cod_benef)(1) := 100;
            ELSE
             -- i_perc := ((VI_BASE_IR_ARR(cod_benef) (1)-VI_BASE_IR_ARR_DED(cod_benef) (1)  )/ ( VI_BASE_BRUTA- VI_TOT_DED_RUB)) * 100 ;
              VI_PERC_IR13(cod_benef)(1) := i_perc;
            END IF;
          END IF;
          rdcn.val_rubrica := (V_VAL_IR_13 * i_perc) / 100;
          vi_ir_ret(i) := rdcn.val_rubrica;
          vi_val_rubrica := rdcn.val_rubrica;
          COM_VAL_RUBRICA_CHEIO := COM_VAL_RUBRICA_CHEIO + vi_val_rubrica;
        ELSE
          vi_val_rubrica := 0;
        END IF;


      END IF;

      IF vi_rubrica > 0 THEN
        IF FLG_PA <> 'S' THEN
          begin
            IF VI_SUPLEMENTAR and tp_evento_especial <> 'I' THEN
              IF v_base_prev(cod_benef) (1) = 0 THEN
                null;
              ELSE
                COM_VAL_RUBRICA_CHEIO := vi_val_rubrica;
                SP_INCLUI_DETALHE_PAG(cod_benef,
                                      vi_rubrica,
                                      vi_val_rubrica,
                                      vi_seq_vig,
                                      vi_flg_natureza);
              END IF;
            ELSE
              COM_VAL_RUBRICA_CHEIO := vi_val_rubrica;
              SP_INCLUI_DETALHE_PAG(cod_benef,
                                    vi_rubrica,
                                    vi_val_rubrica,
                                    vi_seq_vig,
                                    vi_flg_natureza);
            END IF;

          exception
            when no_data_found then
              v_erro := sqlerrm;
          end;

        ELSE
          COM_VAL_RUBRICA_CHEIO := vi_val_rubrica;
          SP_INCLUI_DETALHE_PAG_PA(ide_cli,
                                   cod_benef,
                                   vi_rubrica,
                                   vi_val_rubrica,
                                   vi_seq_vig,
                                   vi_flg_natureza);
        END IF;
      END IF;

    END LOOP;

    --  verifica se houve pagamento especial e efetua a diferenca do IR

    For w in 1 .. tdcn.count LOOP

      rdcn := tdcn(w);

      if rdcn.cod_fcrubrica = vi_rubrica and rdcn.tip_processo = 'E' then
        v_val_rub_dif := rdcn.val_rubrica;
      elsif rdcn.cod_fcrubrica = vi_rubrica and rdcn.tip_processo = 'N' then
        v_val_rub_pgto_normal := rdcn.val_rubrica;

        IF v_val_rub_dif > 0 and v_val_rub_pgto_normal > 0 then
          rdcn.val_rubrica := v_val_rub_pgto_normal - v_val_rub_dif;
          tdcn(w).val_rubrica := rdcn.val_rubrica;
          exit;
        END IF;

      end if;

    End Loop;

  END SP_OBTEM_DETALHE_PAG13;

PROCEDURE SP_CALCULA_SALMIN_ANTER(i_valor out number) AS
  BEGIN
    BEGIN

select   max(pmin.val_elemento)
  into  i_valor
  from tb_det_param_estrutura pmin
 where pmin.COD_PARAM = 'SALMIN'
   and pmin.cod_elemento = 'PAR_SAL_MIN'
   and not (pmin.ini_vig >=PAR_PER_PRO  and
        nvl(pmin.fim_vig,PAR_PER_PRO) >=
           PAR_PER_PRO )
   and pmin.fim_vig in
       (
          select max(pmin2.fim_vig)
          from tb_det_param_estrutura pmin2
         where pmin2.COD_PARAM = 'SALMIN'
           and pmin2.cod_elemento = 'PAR_SAL_MIN'
           and rowid not in
               (
                  select rowid
                  from tb_det_param_estrutura pmin3
                 where pmin3.COD_PARAM    = 'SALMIN'
                   and pmin3.cod_elemento = 'PAR_SAL_MIN'
                   and pmin3.ini_vig >= PAR_PER_PRO
                   and nvl(pmin3.fim_vig, PAR_PER_PRO) >=
                       PAR_PER_PRO
               )
        );

    EXCEPTION
      WHEN OTHERS THEN
        i_valor := 0;
    end;

  END SP_CALCULA_SALMIN_ANTER;

 FUNCTION SP_IRRF_EXT(ide_cli in varchar2) return boolean is
   vi_exterior    boolean;
   vi_count       number;
   vi_ind_atb     varchar(1);
   w_cod_atributo number;
 Begin
   vi_exterior := false;
   vi_count    := 0;

   BEGIN

     select distinct 'S'
       into vi_ind_atb
       from tb_atributos_pf b
      where exists (select 1
               from tb_atributos_pf ats, tb_tipos_atributos ta
              where ats.cod_ins = par_cod_ins
                and b.cod_ide_cli = ats.cod_ide_cli
                and ats.cod_ide_cli = ant_ide_cli
                and ats.cod_atributo = ta.cod_atributo
                and nvl(ats.flg_status, 'V') = 'V'
                and ats.dat_ini_vig <= PAR_PER_PRO
                and (ats.dat_fim_vig is null or
                    ats.dat_fim_vig >= PAR_PER_PRO)
                and (ta.cod_atributo = w_cod_atributo OR
                    ta.cod_atributo = 8005));
   exception
     when no_data_found then
       vi_ind_atb := 'N';
   end;

   IF vi_ind_atb = 'S' THEN
     vi_exterior := TRUE;

   END IF;

   return(vi_exterior);

 END SP_IRRF_EXT;

  ----------------------------------------------
  ---- BASE DE IR RECIDENTE EXTERIOR    --------
  ----------------------------------------------

 PROCEDURE SP_OBTEM_IRRF_EXT(ide_cli    in varchar2,
                          idx_val    in number,
                          FLG_PA     IN VARCHAR2,
                          O_VALOR    OUT NUMBER,
                          O_VALOR_13 OUT NUMBER) AS

    VI_VAL_PAGOS        NUMBER(18, 4) := 0;
    VI_ISENTO           boolean := TRUE;
    nEdad               number;
    nIni                number;
    nFin                number;
    vi_rubrica          number := 0;
    vi_val_rubrica      number := 0;
    vi_seq_vig          number := 0;
    valor_proc_especial NUMBER(18, 4) := 0;
    DAT_PERIODO_PAG     date;
    PARAMETRO_IR        CHAR(1);
  BEGIN

    vi_val_pagos := 0;
    nEdad   := 0;
    nIni    := 0;
    nFin    := 0;
    o_valor := 0;
   SP_OBTEM_BASE_IR(idx_val,PARAMETRO_IR, vi_base_ir, vi_base_ir_13);
    vi_base_bruta    := vi_base_ir;
    vi_base_bruta_13 := vi_base_ir_13;

    VI_TOT_DED := 0;
    VI_TOT_DED_RUB:=0;
    IF sp_isenta_irrf(ide_cli) <> VI_ISENTO THEN
      IF FLG_PA = 'S' THEN
        vi_val_pagos := 0;
      else
        -- Rubricas que deduzem no IR
        vi_val_pagos := SP_OBTEM_DED_PAGOS_IRRF(PARAMETRO_IR);--SP_OBTEM_DED_PAGOS;
      end if;
      IF vi_val_pagos > 0 THEN
        VI_TOT_DED_RUB  :=vi_val_pagos;
        VI_TOT_DED := VI_TOT_DED + vi_val_pagos;
      END IF;

      --- Obtem Base IRRF

      IF VI_BASE_IR > VI_TOT_DED THEN
        VI_BASE_IR := nvl(VI_BASE_IR, 0) - VI_TOT_DED;
        --- Obtem valor IR
        SP_CALCULA_IMPOSTO2(vi_base_ir, o_valor);
      END IF;

      IF VI_BASE_IR_13 > VI_TOT_DED THEN
        vi_base_ir_13 := vi_base_ir_13 - VI_TOT_DED;
        IF VI_TEM_SAIDA OR PAR_TIP_PRO = 'T' or  PARAMETRO_IR='D' THEN
          SP_CALCULA_IMPOSTO2(vi_base_ir_13, o_valor_13);
        END IF;
      END IF;
    ELSE
      IF VI_DOENCA THEN
        V_DED_IR_DOENCA := VI_BASE_IR;
        VI_BASE_IR      := 0;
      ELSE
        V_BASE_ISENCAO  := VI_BASE_IR;
        V_DED_IR_DOENCA := 0;
        VI_BASE_IR      := 0;
      END IF;
    END IF;

  END  SP_OBTEM_IRRF_EXT;
----------- Obtem Teto Calculado ----------
PROCEDURE SP_OBTEM_TETO (ide_cli         in varchar2,
                         i_cod_entidade  in number  ,
                         i_cargo         in number  ,
                         o_valor         out number ) AS

 w_poder      char(1)       := 0;
 i_valor      number(18, 4) := 0;
 w_teto_fixo  number(18, 4) := 0;
 w_teto_poder number(18, 4) := 0;
 BEGIN
    o_valor := 0;


        w_poder:='0';
        IF ((i_cargo >= 7866  AND i_cargo  <= 7878)  OR
            (i_cargo  >= 3639 AND i_cargo  <= 3653) OR
             i_cargo  = 7889 OR i_cargo  = 4318     OR
             i_cargo = 3997  OR i_cargo  = 7894     OR
             i_cargo  = 4336 OR i_cargo  = 4474     OR
             i_cargo  = 4758 OR i_cargo  = 4769     OR
             i_cargo  = 4481 OR i_cargo  = 4482     OR
             i_cargo  = 4532 OR i_cargo  = 5031     OR
             i_cargo =  4982 OR i_cargo  = 4983     OR
             i_cargo  = 3623 OR i_cargo  = 5036     OR
             i_cargo  = 4990 OR i_cargo  = 5029     OR
             i_cargo =  5030 OR i_cargo  = 5032     OR
             i_cargo  = 5035 OR i_cargo  = 5037     OR
             i_cargo  = 5038 OR i_cargo  = 5034     OR
             i_cargo  = 5033 OR i_cargo  = 4474     OR
             i_cargo  = 4532 OR i_cargo  = 4758     OR
             i_cargo  = 4769 OR i_cargo  = 4474
             ) AND i_cod_entidade  <> 5 THEN
              w_poder:='3';
            END IF;
       BEGIN
           IF  W_PODER='0' THEN
            select max(nvl(conc.teto_fixo,0)), max(nvl(para.val_elemento,0))
            into w_teto_fixo,w_teto_poder
             from  tb_concessao_beneficio conc,
                   tb_beneficiario        bene,
                   tb_det_param_estrutura para,
                   tb_entidade            enti
            where
                  bene.cod_ins         = par_cod_ins
              and bene.cod_ide_cli_ben = ide_cli
              and bene.cod_ins         = conc.cod_ins
              and bene.cod_beneficio   = conc.cod_beneficio
              and enti.cod_ins         = conc.cod_ins
              and enti.cod_entidade    = conc.cod_entidade
              and para.cod_estrutura   = 1000
              and decode(enti.cod_poder, '1', 'TETO_GOV', '2', 'SUB_DEPUT_EST', '3', 'TETO_MIN') =para.cod_param
              and para.ini_vig         <=PAR_PER_PRO
              and PAR_PER_PRO          <=nvl(para.fim_vig,PAR_PER_PRO);

          ELSE
            select max(nvl(conc.teto_fixo,0)), max(nvl(para.val_elemento,0))
            into w_teto_fixo,w_teto_poder
             from  tb_concessao_beneficio conc,
                   tb_beneficiario        bene,
                   tb_det_param_estrutura para
            where
                  bene.cod_ins         = par_cod_ins
              and bene.cod_ide_cli_ben = ide_cli
              and bene.cod_ins         = conc.cod_ins
              and bene.cod_beneficio   = conc.cod_beneficio
              and para.cod_estrutura   = 1000
              and decode(w_poder, '1', 'TETO_GOV', '2', 'SUB_DEPUT_EST', '3', 'TETO_MIN') =para.cod_param
              and para.ini_vig         <= PAR_PER_PRO
              and PAR_PER_PRO          <=nvl(para.fim_vig,PAR_PER_PRO);
          END IF;

       EXCEPTION
        WHEN OTHERS THEN
        p_coderro       := sqlcode;
        p_sub_proc_erro := 'SP_OBTEM_teto';
        p_msgerro       :=  sqlerrm;
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              BEN_IDE_CLI,
                              COM_COD_FCRUBRICA);

        --       RAISE ERRO;
        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
        END;
      IF w_teto_poder > w_teto_fixo then
         o_valor:=  w_teto_poder;
      ELSE
         o_valor:=  w_teto_fixo;
      END IF;


 END SP_OBTEM_TETO;
-------------------------------------------
  PROCEDURE SP_VERIFICA_TIP_JUDICIAL (I_DE_CLI         IN VARCHAR2  ,
                                      I_NUM_ORD_JUD    IN NUMBER,
                                      O_TIP_ORDEM_JUD OUT VARCHAR) IS

  -- VERIFICA O TIPO DA ORDEM JUDICIAL
  BEGIN
    BEGIN
        SELECT
                TE.COD_TIP_EFEITO
                INTO O_TIP_ORDEM_JUD
                FROM TB_ORDEM_JUDICIAL        OJ ,
                     TB_ORD_JUD_PESSOA_FISICA PJ ,
                     TB_ORDEM_JUD_TIPO_EFEITO TE
        WHERE OJ.COD_INS           = PAR_COD_INS      AND
                    OJ.COD_INS     = PJ.COD_INS       AND
                    OJ.NUM_ORD_JUD = PJ.NUM_ORD_JUD   AND
                    OJ.NUM_ORD_JUD = I_NUM_ORD_JUD    AND
                  --  PJ.COD_IDE_CLI = I_DE_CLI         AND
                    OJ.COD_INS     = TE.COD_INS       AND
                    OJ.NUM_ORD_JUD = TE.NUM_ORD_JUD   AND
                    TO_DATE('01'||TO_CHAR(OJ.DAT_EFEITO,'/MM/RRRR'),'DD/MM/RRRR')<=PAR_PER_PRO  AND
                    NVL(OJ.DAT_FIM_EFEITO,TO_DATE('01/01/2099','DD/MM/YYYY'))>=PAR_PER_PRO
                    AND rownum <2;

    EXCEPTION
      WHEN NO_DATA_FOUND THEN
           O_TIP_ORDEM_JUD:='00';
      WHEN TOO_MANY_ROWS THEN
            O_TIP_ORDEM_JUD:='00';
      WHEN OTHERS THEN
        P_SUB_PROC_ERRO := 'SP_VERIFICA_ORDEM_JUDICIAL';
        P_CODERRO       := SQLCODE;
        P_MSGERRO       := 'ERRO AO OBTER O ORDEM JUDICIAL INDIV';
        INCLUI_LOG_ERRO_FOLHA(PAR_COD_INS,
                              P_CODERRO,
                              'CALCULA FOLHA',
                              SYSDATE,
                              P_MSGERRO,
                              P_SUB_PROC_ERRO,
                              I_DE_CLI  ,
                              1);
        VI_QTD_ERROS := NVL(VI_QTD_ERROS, 0) + 1;
    END;
  END SP_VERIFICA_TIP_JUDICIAL;

 PROCEDURE SP_COMPOSICAO_BENEFICIO(I_COD_RUBRICA   IN NUMBER,
                          I_VARIAVEL      IN VARCHAR2,
                          I_COD_BENEFICIO IN NUMBER,
                          I_COD_ENTIDADE  IN NUMBER,
                          I_IND_VAL_CHEIO IN VARCHAR2,
                          I_VALOR         OUT NUMBER) AS
    c_comp     curform;
    vi_valor   number(18, 5);
    VI_RUBRICA NUMBER;
    m          number := 0;
    v_soma     char(1) := 'S';

  BEGIN

    m := nvl(vrubexc.count, 0);

    I_VALOR  := 0;
    VI_VALOR := 0;
    --- Obtem rubricas da composic?o
    OPEN c_comp FOR
      SELECT cd.cod_fcrubrica_compoe
        FROM tb_compoe_beneficio cd
       WHERE cd.cod_ins = PAR_COD_INS
         AND cd.cod_fcrubrica_composta = I_COD_RUBRICA
         AND cd.cod_variavel           = I_VARIAVEL
         AND cd.cod_entidade           = I_COD_ENTIDADE
         AND cd.cod_beneficio          = I_COD_BENEFICIO
         AND (
                (
                 PAR_PER_PRO >= cd.dat_ini_vig                                   OR
                 to_char(PAR_PER_PRO,'YYYYMM') = TO_CHAR(cd.dat_ini_vig,'YYYYMM')
                )
               AND
               PAR_PER_PRO <=
               nvl(cd.dat_fim_vig, to_date('01/01/2045', 'dd/mm/yyyy'))
             )
        AND NVL(CD.FLG_STATUS,'V')='V'; ---- TASK 2347-Manutenc?o  Tela  composic?o de PA por beneficios

    FETCH c_comp
      INTO vi_rubrica;
    WHILE C_COMP%FOUND LOOP
      IF VI_RUBRICA IN (490004) THEN
        NULL;
      END IF;
      IF m = 0 then
        sp_valor_calculado(VI_RUBRICA,
                           I_COD_BENEFICIO,
                           I_VARIAVEL,
                           I_COD_ENTIDADE,
                           i_ind_val_cheio,
                           vi_valor);
        I_VALOR := I_VALOR + VI_VALOR;
      ELSE
        FOR m IN 1 .. vrubexc.count LOOP

          IF vrubexc(m).cod_fcrubrica = VI_RUBRICA then
            v_soma := 'N';
            exit;
          END IF;

        END LOOP;

        IF v_soma = 'S' THEN
          sp_valor_calculado(VI_RUBRICA,
                             I_COD_BENEFICIO,
                             I_VARIAVEL,
                             I_COD_ENTIDADE,
                             i_ind_val_cheio,
                             vi_valor);
          I_VALOR := I_VALOR + VI_VALOR;
        ELSE
          v_soma := 'S';
        END IF;
      END IF;

      FETCH c_comp
        INTO vi_rubrica;
    END LOOP;
    CLOSE C_COMP;

  END SP_COMPOSICAO_BENEFICIO;

PROCEDURE SP_CALCULA_PREV_DETALHE_AD AS

    vi_rubrica         number := 0;
    vi_val_rubrica     number(18, 2) := 0;
    vi_seq_vig         number := 0;
    i_perc             number(18, 6) := 0;
    i                  number := 0;
    i2                 number := 0;
    i3                 number := 0;
    cod_benef          number := 0;
    valor_prev         number(18, 4)  := 0;
    valor_prev_tot     number(18, 4)  := 0;
    vv_sal_base        number(18, 4)  := 0;
    o_str              char(1)        := null;
    valor_incapacidade number(18, 4)  := 0;
    --valor_prev_calc    number(18,4) := 0;
    perc_prev    number(18, 4)        := 0;
    nao_tem_prev  char(1)             := null;
    nao_TETO_prev char(1)             :=null;

    total_suplementar   number(18, 4) := 0;
    total_folha_supl    number(18, 4) := 0;
    vs_rateio           char(1) := 'N';
    c_evento_S          curform;
    VI_IDE_CLI          TB_COMPOSICAO_INDIV.COD_IDE_CLI%TYPE;
    vi_rubrica_s        number := 0;
    vi_seq_vig_s        number := 0;
    vi_val_rubrica_prev number := 0;
    v_val_prev_externo  number := 0;
    PREV_EXTERNA        number(18, 4) := 0;
    v_possui70606       number := 0;

    --- JTS -- Agregado para Calculo proporcional 13
    PORCETUAL_13        number(10,5):=0;
    FATORP13            number(10,5):=1; ---- Controle de Proporcionalidade de AD Contribuic?o 12 em avos
    VAR_POR_DIA_MES     number(10,5):=1;  ---- Altera variavel AD Contribuic?o 27941


   rdcn_temp           TB_DET_CALCULADO_ESTRUC%rowtype;

  begin

    valor_prev     := 0;
    valor_prev_tot := 0;
    vv_sal_base    := 0;
    --  desc_prev      := 0;
    valor_incapacidade := 0;
    perc_prev          := 0;
    valor_prev_calc    := 0;
    begin


      -- Procura Atributo  4000 -- SEM CALCULO DE PREVIDENCIA

      SP_OBTEM_TIPOS_ATRIBUTOS_prev(34,
                                    ant_matricula,
                                    ant_entidade,
                                    ant_cargo,
                                    nao_tem_prev);

      vs_rateio := 'S';

      IF nao_tem_prev = 'N'
       THEN

        FOR i IN 1 .. v_cod_beneficio.count LOOP

          cod_benef := v_cod_beneficio(i);
           -- PROCURA RUBRICA "CONTRIBUICAO PREVIDENCIARIA PENSAO "
         FOR i2 IN 1 .. vfolha.count LOOP
          rfol := vfolha(i2);
          IF RFOL.COD_BENEFICIO= cod_benef  THEN
            ANT_ENTIDADE := RFOL.COD_ENTIDADE;
          END IF;
         END LOOP;
          SP_OBTEM_TIPO_BENEFICIO(cod_benef);
          IF COM_TIP_BENEFICIO <> 'APOSENTADO' THEN
             SP_OBTEM_RUBRICA_EVENTO_ESPEC('4',  ----- Disponobilizado 2016-03-17
                                    ANT_ENTIDADE,
                                    '',
                                    vi_rubrica,
                                    vi_seq_vig);
          ELSE
             -- PROCURA RUBRICA "CONTRIB. PREVID. 11% - L.C. 1012/2007"

             SP_OBTEM_RUBRICA_EVENTO_ESPEC('4',
                                    ANT_ENTIDADE,
                                    '',
                                    vi_rubrica,
                                    vi_seq_vig);
          END IF;



          IF PAR_TIP_PRO <> 'E' THEN
            begin
              vv_sal_base := v_sal_base(cod_benef) (1);
            exception
              when others then
                p_sub_proc_erro := 'SP_CALCULA_PREV_DETALHE';
                p_coderro       := SQLCODE;
                P_MSGERRO       := 'Erro ao obter o valor do salario base';
                INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                      p_coderro,
                                      'Calcula Folha',
                                      sysdate,
                                      p_msgerro,
                                      p_sub_proc_erro,
                                      BEN_IDE_CLI,
                                      COM_COD_FCRUBRICA);
                VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
            end;
          END IF;

          vs_militar := 'N';
          if vs_militar = 'N' then

            --  Verificar o total do beneficio para n?o ficar negativo
            --  em caso de folha suplementar

            total_suplementar := 0;
            total_folha_supl  := 0;
          ---------- Agregado 26-01-2011---
            FOR i3 IN 1 .. vfolha.count LOOP
                rfol := vfolha(i3);
                EXIT WHEN   RFOL.COD_BENEFICIO=cod_benef;
            END LOOP;
            VI_PERCENTUAL_RATEIO:= RFOL.PER_RATEIO;
            ------------------------------



          ---- Altera variavel AD Contribuic?o 27941
           SP_OBTEM_VALORES_TOTAIS('BASE_PREV_AD',
         --  SP_OBTEM_VALORES_TOTAIS('BASE_PREV',
                                    cod_benef,
                                    vi_rubrica,
                                    'N',
                                    valor_prev);


            IF VI_SUPLEMENTAR THEN
              BEGIN
                select tot_cred
                  into total_folha_supl
                  from tb_folha
                 where cod_ins = PAR_COD_INS
                   and cod_ide_cli = ANT_IDE_CLI
                   and cod_beneficio = cod_benef
                   and per_processo = PAR_PER_PRO
                   and tip_processo = 'N'
                   and seq_pagamento > 0;
              EXCEPTION
                WHEN NO_DATA_FOUND THEN
                  total_folha_supl := 0;
              END;

              SP_OBTEM_VALORES_TOTAIS('TOT_CRED',
                                      cod_benef,
                                      0,
                                      'N',
                                      total_suplementar);

              IF total_suplementar = total_folha_supl THEN
                vs_rateio := 'N';
                i_perc    := 100;

                valor_prev_tot := valor_prev_tot + valor_prev;

                cont_benef := cont_benef + 1;
              ELSE
                vs_rateio := 'S';
                valor_prev_tot := valor_prev_tot + valor_prev;

                cont_benef := cont_benef + 1;
              END IF;
            ELSE
              ----------Quando folha Normal-------------
              ------------------------------------------
              vs_rateio := 'S';
              valor_prev_tot := valor_prev_tot + (valor_prev);

              cont_benef := cont_benef + 1;
            END IF;
            --
          end if;

        END LOOP;

        if valor_prev_tot > 0 THEN

          SP_OBTEM_PARVAL_FOLHA2('TASCO', 2000, 'DESC_CONTR', desc_prev); --Procura o Teto da Previdencia $3218,90

          --- "CONT PREV POR INCAPACIDADE PENS?O'----
          SP_OBTEM_TIPOS_ATRIBUTOS_prev(37,
                                        ant_matricula,
                                        ant_entidade,
                                        ant_cargo,
                                        o_str);

          if o_str = 'S' then
            SP_OBTEM_PARVAL_FOLHA2('TASCO',
                                   2000,
                                   'DESC_CONTR',
                                   valor_incapacidade); --$3218,90 --Procura o Teto da Previdencia $3218,90
            if valor_incapacidade is null then
              valor_incapacidade := 0;
            end if;
          else
            valor_incapacidade := 0;
          end if;

          SP_OBTEM_PARVAL_FOLHA2('TASCO', 2000, 'PERC_CONTR', perc_prev); --  Procura % de desconto 0,11

          IF par_tip_pro = 'R' THEN
            W_COD_PARAM_GERAL_CORRECAO := 'IPCA';
            SP_OBTEM_FATOR_CORRECAO('', PAR_PER_PRO, VI_FATOR_MES);
          END IF;

          -----------------------------------------------------------------------------------
          -- Verifica se possui rubrica 6510600 que s?o previdencias externas pagas pelo bene
          -----------------------------------------------------------------------------------

           BEGIN
            SELECT CI.COD_IDE_CLI, sum(val_fixo)
              INTO VI_IDE_CLI, v_val_prev_externo
              FROM  TB_COMPOSICAO_INDIV CI
             WHERE CI.COD_INS = PAR_COD_INS
               AND CI.COD_IDE_CLI = ANT_IDE_CLI
               AND CI.COD_BEN = cod_benef
               AND CI.COD_FCRUBRICA = '6510600' --vi_rubrica_s
               AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
                   to_char(CI.DAT_INI_VIG, 'YYYYMM') and
                   to_char(PAR_PER_PRO, 'YYYYMM') <=
                   to_char(nvl(CI.DAT_FIM_VIG,
                                to_date('01/01/2045', 'dd/mm/yyyy')),
                            'YYYYMM'))
               AND CI.FLG_STATUS='V'
             GROUP BY CI.COD_IDE_CLI;
          EXCEPTION
            when others then
              v_val_prev_externo := 0;
          END;

          --------------------------------------------------------------------------
          -- Verifica se possui rubrica 70606 se sim muda a formula de calculo prev
          --------------------------------------------------------------------------
          BEGIN
            SELECT distinct 1
              INTO v_possui70606
              FROM TB_COMPOSICAO_INDIV CI
             WHERE CI.COD_INS = PAR_COD_INS
               AND CI.COD_IDE_CLI = ANT_IDE_CLI
               AND CI.COD_BEN = cod_benef
               AND CI.COD_FCRUBRICA = '7060600'
               AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
                   to_char(CI.DAT_INI_VIG, 'YYYYMM') and
                   to_char(PAR_PER_PRO, 'YYYYMM') <=
                   to_char(nvl(CI.DAT_FIM_VIG,
                                to_date('01/01/2045', 'dd/mm/yyyy')),
                            'YYYYMM'))
                            ; --- PAULO MIRANDA VA ESTUDIAR O TEMA 30-01-2014
          EXCEPTION
            when others then
              v_possui70606 := 0;
          END;
          ------------------------------------------------------------------
          ----------  Rotina de Calculo da Previdencia----------------------
          ------------------------------------------------------------------

          valor_prev_calc := 0;



          FOR i IN 1 .. v_cod_beneficio.count LOOP

            cod_benef := v_cod_beneficio(i);
             FOR i2 IN 1 .. vfolha.count LOOP
              rfol := vfolha(i2);
              IF RFOL.COD_BENEFICIO= cod_benef  THEN
                ANT_ENTIDADE := RFOL.COD_ENTIDADE;
              END IF;
             END LOOP;


            SP_OBTEM_TIPO_BENEFICIO(cod_benef);
            IF COM_TIP_BENEFICIO <> 'APOSENTADO' THEN
               SP_OBTEM_RUBRICA_EVENTO_ESPEC('4',  ----- Disponobilizado 2016-03-17
                                    ANT_ENTIDADE,
                                    '',
                                    vi_rubrica,
                                    vi_seq_vig);

                 -----------------------------
                   IF  valor_incapacidade=0 THEN
                           -- "CONT PREV POR INCAPACIDADE PENS?O"

                           SP_OBTEM_TIPOS_ATRIBUTOS_prev(372,
                                        ant_matricula,
                                        ant_entidade,
                                        ant_cargo,
                                        o_str);

                              if o_str = 'S' then
                                SP_OBTEM_PARVAL_FOLHA2('TASCO',
                                                       2000,
                                                       'DESC_CONTR',
                                                       valor_incapacidade); --$3218,90
                                if valor_incapacidade is null then
                                  valor_incapacidade := 0;
                                end if;
                              else
                                valor_incapacidade := 0;
                              end if;
                     END IF;
                 -----------------------------
            ELSE
               SP_OBTEM_RUBRICA_EVENTO_ESPEC('4',
                                    ANT_ENTIDADE,
                                    '',
                                    vi_rubrica,
                                    vi_seq_vig);
               ---------------------------------
               IF  valor_incapacidade=0 THEN

                     ---"CONT PREV POR INCAPACIDADE PENS?O"

                     SP_OBTEM_TIPOS_ATRIBUTOS_prev(371,
                                    ant_matricula,
                                    ant_entidade,
                                    ant_cargo,
                                    o_str);
                    if o_str = 'S' then
                      SP_OBTEM_PARVAL_FOLHA2('TASCO',
                                             2000,
                                             'DESC_CONTR',
                                             valor_incapacidade); --$3218,90
                      if valor_incapacidade is null then
                        valor_incapacidade := 0;
                      end if;
                    else
                      valor_incapacidade := 0;
                    end if;
               END IF;
               ----------------------------------
            END IF;

          ---------- Agregado 26-01-2011--------------------

            FOR i3 IN 1 .. vfolha.count LOOP
                rfol := vfolha(i3);
                EXIT WHEN   RFOL.COD_BENEFICIO=cod_benef;
            END LOOP;
            VI_PERCENTUAL_RATEIO:= RFOL.PER_RATEIO;

          --------------------------------------------------

          ---------- Verifica proporcc?o do Mes -  ---- Altera variavel AD Contribuic?o 27941
              VAR_POR_DIA_MES    := 1;
               FOR i IN 1 .. tdcn.count LOOP
                 rdcn := tdcn(i);
                    IF  RDCN.COD_BENEFICIO = cod_benef THEN
                      IF NVL(RDCN.VAL_PORC,2) <> 1    THEN
                         IF RDCN.VAL_PORC =0 THEN
                           VAR_POR_DIA_MES    :=1;
                          ELSE
                             ---- Ajusta % Do Mes quando >1 n?o foi alterado valor
                             ---- No momento de guardar a Rubrica.
                             IF NVL(RDCN.VAL_PORC,1) >1 THEN
                                VAR_POR_DIA_MES    :=1;
                             ELSE
                                VAR_POR_DIA_MES    :=NVL(RDCN.VAL_PORC,1);
                             END IF;
                          END IF;
                         EXIT;
                      END IF;
                     END IF;
                END LOOP;




            if vs_militar = 'N' then

              IF/* v_base_prev(cod_benef) (1) */ valor_prev_tot <> 0 THEN

                tdcn.extend;
                idx_caln        := nvl(idx_caln, 0) + 1;
                idx_seq_detalhe := nvl(idx_seq_detalhe, 0) + 1;


          ---- Altera variavel AD Contribuic?o 27941
                SP_OBTEM_VALORES_TOTAIS('BASE_PREV_AD',
            --  SP_OBTEM_VALORES_TOTAIS('BASE_PREV',
                                        cod_benef,
                                        vi_rubrica,
                                        'N',
                                        valor_prev);




                IF VI_SUPLEMENTAR AND cont_benef > 1 THEN
                  i_perc := (valor_prev / valor_prev_tot) * 100;
                ELSE
                  IF cont_benef = 1 AND VI_SUPLEMENTAR THEN
                    i_perc := 100;
                  ELSE
                    i_perc := ((valor_prev) / valor_prev_tot) * 100;
                  END IF;
                END IF;

                -------------- Agregado 26-01-2011 por JTS
                ---    "NAO APLICA TETO INSS"
                ----------------------------------------------

                     nao_TETO_prev:='N';
                     SP_OBTEM_TIPOS_ATRIBUTOS_prev(13,
                                          ant_matricula,
                                          ant_entidade,
                                          ant_cargo,
                                          nao_TETO_prev);

                IF nao_TETO_prev ='S' THEN
                   valor_incapacidade:=0;
                   desc_prev         :=0;
                END IF;

                ---------------------------------------------------



                  --------------------------------------------------------------------------------------------------
                  --calculo da previdencia  02/10/2009 este e o calculo segundo a Prodesp --------------------------
                  ----------------------------- este calculo foi alterado em 02/10/2009 ----------------------------
                  --------------------------------------------------------------------------------------------------

                  ---- Controle de Proporcionalidade de AD Contribuic?o 12 em avos
                  FATORP13:=1;
                  FATORP13:=SP_VALOR_PORCENTUAL13(cod_benef);
                  IF COM_TIP_BENEFICIO = 'APOSENTADO' THEN
                      FATORP13:=1;
                  ELSE
                      FATORP13:=SP_VALOR_PORCENTUAL13(cod_benef);
                  END IF;

                  IF PAR_TIP_PRO <> 'T' or i_perc <=100 THEN
                       IF v_val_prev_externo > 0 THEN
                         if v_val_prev_externo > DESC_PREV THEN
                            v_val_prev_externo := DESC_PREV;
                         END IF;
                         vi_val_rubrica := ((
                                           ((((valor_prev_tot  * i_perc / 100)+ (v_val_prev_externo * i_perc /100))-
                                           ((DESC_PREV + VALOR_INCAPACIDADE ) * i_perc /100 )))
                                            * perc_prev * VI_FATOR_MES * VI_PERCENTUAL_RATEIO * FATORP13)/2)/VAR_POR_DIA_MES ;
                         valor_prev_calc := valor_prev_calc + vi_val_rubrica;

                       ELSE
                         vi_val_rubrica := ((
                                           (((valor_prev_tot * i_perc / 100) -
                                           ((DESC_PREV + VALOR_INCAPACIDADE ) * i_perc /100 )))
                                            * perc_prev * VI_FATOR_MES * VI_PERCENTUAL_RATEIO * FATORP13 )/2)/VAR_POR_DIA_MES ;
                         valor_prev_calc := valor_prev_calc + vi_val_rubrica;

                       END IF;
                           -- Agregado por JTS 22-10-2010 PARA AJUSTAR O VALOR
                           -- da existem dias propocionais

                   ELSE
                       IF v_val_prev_externo > 0 THEN
                         if v_val_prev_externo > DESC_PREV THEN
                            v_val_prev_externo := DESC_PREV;
                         END IF;
                         vi_val_rubrica := ((
                                           ((((valor_prev_tot  * i_perc / 100)+ (v_val_prev_externo ))-
                                           ((DESC_PREV + VALOR_INCAPACIDADE ) )))
                                            * perc_prev * VI_FATOR_MES * VI_PERCENTUAL_RATEIO * FATORP13 )/2)/VAR_POR_DIA_MES ;
                         valor_prev_calc := valor_prev_calc + vi_val_rubrica;

                       ELSE
                         vi_val_rubrica := ((
                                           (((valor_prev_tot * i_perc / 100) -
                                           ((DESC_PREV + VALOR_INCAPACIDADE ) )))
                                            * perc_prev * VI_FATOR_MES * VI_PERCENTUAL_RATEIO * FATORP13 )/2)/VAR_POR_DIA_MES ;
                         valor_prev_calc := valor_prev_calc + vi_val_rubrica;
                       END IF;

                  END IF;

                    -- Condic?o agregada em 25-08-2014
                    IF  vi_val_rubrica > 0 THEN
                        vi_val_rubrica_prev   :=  vi_val_rubrica;
                        COM_VAL_RUBRICA_CHEIO :=  vi_val_rubrica*2;
                        ----- Inclusão para Marcar Evento especial em AD PREV 08-05-2018
                        COM_TIPO_EVENTO_ESPECIAL:='4';
                        SP_INCLUI_DETALHE_PAG(cod_benef,
                                              vi_rubrica,
                                              vi_val_rubrica,
                                              vi_seq_vig,
                                              'D');
                    END IF;
                ELSE
                  v_base_prev(cod_benef)(1) := 0;
                END IF;

                IF vi_val_rubrica > 0 THEN

                  ----------------------------------------------------------------------------
                  --7060600 Verifica se possui ordem judicial para fazer reposic?o do calculo
                  ----------------------------------------------------------------------------

                  vi_val_rubrica_prev := vi_val_rubrica;
                  SP_OBTEM_RUBRICA_EVENTO_ESPEC('S',
                                                ANT_ENTIDADE,
                                                '',
                                                vi_rubrica_s,
                                                vi_seq_vig_s);

                  OPEN c_evento_S for
                    SELECT distinct CI.COD_IDE_CLI
                      FROM TB_COMPOSICAO_INDIV CI
                     WHERE CI.COD_INS = PAR_COD_INS
                       AND CI.COD_IDE_CLI = ANT_IDE_CLI
                       AND CI.COD_FCRUBRICA = vi_rubrica_s
                       AND (to_char(PAR_PER_PRO, 'YYYYMM') >=
                           to_char(CI.DAT_INI_VIG, 'YYYYMM') and
                           to_char(PAR_PER_PRO, 'YYYYMM') <=
                           to_char(nvl(CI.DAT_FIM_VIG,
                                        to_date('01/01/2045', 'dd/mm/yyyy')),
                                    'YYYYMM'))
                                    AND  1=0 ;
                  FETCH c_evento_S
                    INTO VI_IDE_CLI;
                  IF C_evento_S%FOUND THEN
                    -- Possui a rubrica de credito especifica evento S
                    --calculo da 7060600
                    vi_val_rubrica := valor_prev_tot * VI_PERCENTUAL_RATEIO;

                    IF vi_val_rubrica > DESC_PREV THEN
                      vi_val_rubrica        := vi_val_rubrica_prev -
                                               (vi_val_rubrica - DESC_PREV) *
                                               perc_prev;



                       COM_VAL_RUBRICA_CHEIO := vi_val_rubrica_prev -
                                               (vi_val_rubrica - DESC_PREV) *
                                               perc_prev;

                       IF  vi_val_rubrica <0 THEN
                           vi_val_rubrica       :=0;
                           COM_VAL_RUBRICA_CHEIO:=0;

                       END IF;




                   ELSE
                      vi_val_rubrica        := vi_val_rubrica_prev;
                      COM_VAL_RUBRICA_CHEIO := vi_val_rubrica_prev;
                   END IF;
                    tdcn.extend;
                    idx_caln        := nvl(idx_caln, 0) + 1;
                    idx_seq_detalhe := nvl(idx_seq_detalhe, 0) + 1;
                    SP_INCLUI_DETALHE_PAG(cod_benef,
                                          vi_rubrica_s,
                                          vi_val_rubrica,
                                          vi_seq_vig_s,
                                          'C');
                  END IF;

                END IF;
              END IF;
           -- end if;

          END LOOP;
        end if;
      ELSE
        FOR i IN 1 .. v_cod_beneficio.count LOOP

          cod_benef := v_cod_beneficio(i);

          begin
            select 'S'
              into vs_militar
              from vis_orgao_inativos
             where cod_ide_cli = ANT_IDE_CLI
               and cod_beneficio = cod_benef
               and nome_orgao = 'Inativo Militar';
          exception
            when others then
              vs_militar := 'N';
          end;
        END LOOP;
      END IF;
    END;
  END SP_CALCULA_PREV_DETALHE_AD;


FUNCTION SP_OBTEM_PERC_CARGO  RETURN NUMBER IS
    O_VALOR              NUMBER(18, 4);
    v_val_porcentual     number(18, 4) := 0;
   BEGIN

    BEGIN

        SELECT
             VAL_PORCENTUAL
        INTO v_val_porcentual
           from tb_conceito_rub_det_dominio  cf
        WHERE cf.cod_ins      = PAR_COD_INS       AND
              cf.cod_entidade = COM_ENTIDADE      AND
              cf.cod_conceito = COM_COD_CONCEITO  AND
              cf.cod_func     = COM_CARGO        AND
              (to_char(PAR_PER_PRO, 'YYYYMM') >=
                     to_char(cf.dat_ini_vig, 'YYYYMM') AND
                     to_char(PAR_PER_PRO, 'YYYYMM') <=
                     to_char(nvl(cf.DAT_FIM_VIG,
                                  to_date('01/01/2045', 'dd/mm/yyyy')),
                              'YYYYMM'))          AND
                              ROWNUM <2;
      O_VALOR := v_val_porcentual;

    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        O_VALOR              := 0;
        v_val_porcentual     := 0;

      WHEN OTHERS THEN
        p_sub_proc_erro := 'SP_OBTEM_PERC_CARGO';
        p_coderro       := SQLCODE;
        P_MSGERRO       := 'Erro ao obter o  PERC_CARGO';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              BEN_IDE_CLI,
                              COM_COD_FCRUBRICA);

        --          RAISE ERRO;
        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
    END;
    RETURN(O_VALOR);
  END SP_OBTEM_PERC_CARGO;
-----------------------------------------------------------------------------
----TASK48653: Automatização cálculo da rubrica de gratificação executiva: 4074
-------------------------------------------------------------------------------
FUNCTION SP_OBTEM_PERC_CARGO_JOR  RETURN NUMBER IS
    O_VALOR              NUMBER(18, 4);
    v_val_porcentual     number(18, 4) := 0;
   BEGIN

    BEGIN

        SELECT
             VAL_PORCENTUAL
        INTO v_val_porcentual
           from tb_conceito_rub_det_dominio  cf
        WHERE cf.cod_ins      = PAR_COD_INS       AND
              cf.cod_entidade = COM_ENTIDADE      AND
              cf.cod_conceito = COM_COD_CONCEITO  AND
              cf.cod_func     = COM_CARGO         AND
              cf.cod_jornada  = COM_COD_JORNADA   AND
              (to_char(PAR_PER_PRO, 'YYYYMM') >=
                     to_char(cf.dat_ini_vig, 'YYYYMM') AND
                     to_char(PAR_PER_PRO, 'YYYYMM') <=
                     to_char(nvl(cf.DAT_FIM_VIG,
                                  to_date('01/01/2045', 'dd/mm/yyyy')),
                              'YYYYMM'))          AND
                              ROWNUM <2;
      O_VALOR := v_val_porcentual;

    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        O_VALOR              := 0;
        v_val_porcentual     := 0;

      WHEN OTHERS THEN
        p_sub_proc_erro := 'SP_OBTEM_PERC_CARGO';
        p_coderro       := SQLCODE;
        P_MSGERRO       := 'Erro ao obter o  PERC_CARGO';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              BEN_IDE_CLI,
                              COM_COD_FCRUBRICA);

        --          RAISE ERRO;
        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
    END;
    RETURN(O_VALOR);
  END SP_OBTEM_PERC_CARGO_JOR;
  
FUNCTION SP_OBTEM_PERC_CARGO_REF (COD_REFERENCIA_CARGO IN  CHAR ) RETURN NUMBER IS
    O_VALOR              NUMBER(18, 4);
    v_val_porcentual     number(18, 4) := 0;
   BEGIN

    BEGIN
        
        
        SELECT
             VAL_PORCENTUAL
        INTO v_val_porcentual
           from tb_conceito_rub_det_dominio  cf
        WHERE cf.cod_ins      = PAR_COD_INS       AND
              cf.cod_entidade = COM_ENTIDADE      AND
              cf.cod_conceito = COM_COD_CONCEITO  AND
              cf.cod_func     = COM_CARGO               AND
              cf.cod_referencia =COD_REFERENCIA_CARGO   AND
              (to_char(PAR_PER_PRO, 'YYYYMM') >=
                     to_char(cf.dat_ini_vig, 'YYYYMM') AND
                     to_char(PAR_PER_PRO, 'YYYYMM') <=
                     to_char(nvl(cf.DAT_FIM_VIG,
                                  to_date('01/01/2045', 'dd/mm/yyyy')),
                              'YYYYMM'))          AND
                              ROWNUM <2;
      O_VALOR := v_val_porcentual;

    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        O_VALOR              := 0;
        v_val_porcentual     := 0;

      WHEN OTHERS THEN
        p_sub_proc_erro := 'SP_OBTEM_PERC_CARGO';
        p_coderro       := SQLCODE;
        P_MSGERRO       := 'Erro ao obter o  PERC_CARGO';
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Calcula Folha',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              BEN_IDE_CLI,
                              COM_COD_FCRUBRICA);

        --          RAISE ERRO;
        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
    END;
    RETURN(O_VALOR);
  END SP_OBTEM_PERC_CARGO_REF;
--------------------------------FIM-------------------------------------------
----TASK48653: Automatização cálculo da rubrica de gratificação executiva: 4074
------------------------------------------------------------------------------- 
 
 FUNCTION  SP_CALC_PORCENTUAL13(

                       I_COD_BENEFICIO VARCHAR2
                       ) Return number IS
  por_13   number(18,6) :=0;
  I_DAT_INI_REF   DATE;
  BEGIN
      I_DAT_INI_REF :=BEN_DAT_INICIO;

      por_13:=1;

        IF COM_TIP_BENEFICIO!='PENSIONISTA' THEN
            return(por_13);
        END IF;


      IF TO_CHAR(I_DAT_INI_REF,'YYYY') != TO_CHAR(PAR_PER_PRO,'YYYY') THEN
            return(1);
      ELSE
         IF TO_CHAR(I_DAT_INI_REF,'MM') !='12' THEN
            IF to_char(I_DAT_INI_REF  ,'dd') > 15   THEN
                por_13:=  (12 - to_char(I_DAT_INI_REF,'mm') ) /12  ;

             ELSE
                     por_13:=  (12 - (to_char(I_DAT_INI_REF ,'mm')-1) ) /12 ;
            END IF;
         ELSE
            IF to_char(I_DAT_INI_REF  ,'dd') <= 15   THEN
                por_13:=  (1/12);
            ELSE
               por_13:=0;
            END IF;
            return(por_13);
         END IF;
       END IF;

  RETURN (por_13);

  END SP_CALC_PORCENTUAL13;

 FUNCTION SP_OBTEM_DIAS_CONTRIB(P_COD_BENEFICIO IN VARCHAR2 ) RETURN NUMBER IS
   v_dias_contrib NUMBER(8);
 BEGIN

    BEGIN

      SELECT min(trp.trp_tot_dia_con)
        INTO  v_dias_contrib
        FROM simtrp  trp
       WHERE trp.trp_cod_ins     = PAR_COD_INS
         AND trp.trp_cod_adm_tra = P_COD_BENEFICIO;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
         v_dias_contrib := 0;
        WHEN OTHERS THEN
             v_dias_contrib := 0;
    END;

    RETURN v_dias_contrib;

 END SP_OBTEM_DIAS_CONTRIB;

  -- Funcao 533  Task 2093 - Antecipacao 13
 FUNCTION SP_OBTEM_ANTECIP_DECIMO(P_COD_BENEFICIO IN NUMBER) RETURN NUMBER IS
   V_ANTECIPACAO NUMBER;
 BEGIN
   V_ANTECIPACAO := 0;

    BEGIN

     IF    to_char(BEN_DTA_NASC, 'MM') = to_char(add_months(PAR_PER_PRO, 1), 'MM') THEN


           SELECT DECODE(COUNT(*),0,0,1)
             INTO V_ANTECIPACAO
             FROM TB_HDET_CALCULADO
            WHERE COD_INS = PAR_COD_INS
              AND COD_IDE_CLI = BEN_IDE_CLI
              AND COD_BENEFICIO = P_COD_BENEFICIO
              AND TIP_PROCESSO = PAR_TIP_PRO
              AND SEQ_PAGAMENTO = PAR_SEQ_PAGAMENTO
              AND PER_PROCESSO BETWEEN ADD_MONTHS(TRUNC(PAR_PER_PRO,'YYYY'),-1) AND ADD_MONTHS(PAR_PER_PRO,-1)
              AND TRUNC(COD_FCRUBRICA/100) IN (SELECT COD_CONCEITO
                                                 FROM TB_RUBRICAS
                                                WHERE COD_INS = 1
                                                  AND TIP_EVENTO_ESPECIAL = COM_TIPO_EVENTO_ESPECIAL
                                                  AND COD_ENTIDADE = COM_ENTIDADE
                                                  AND FLG_NATUREZA = 'C'
                                                    );
      ELSE
           V_ANTECIPACAO := 0;
      END IF;

   EXCEPTION
     WHEN OTHERS THEN
       V_ANTECIPACAO := 0;
   END;

   RETURN V_ANTECIPACAO;

 END;
  --------------- Desenvolvimento Task 3689  --------------


  PROCEDURE SP_PROCESSA_RUBRICA_TETO(CALC_RUB OUT BOOLEAN) AS

   V_COD_FCRUBRICA  TB_COMPOSICAO_BEN.COD_FCRUBRICA%TYPE;
  BEGIN

    CALC_RUB := TRUE;

      BEGIN
        SELECT BEN.COD_FCRUBRICA
          INTO V_COD_FCRUBRICA
          FROM TB_COMPOSICAO_BEN BEN
        WHERE BEN.COD_INS       =PAR_COD_INS       AND
              BEN.COD_ENTIDADE  =COM_ENTIDADE      AND
              BEN.COD_BENEFICIO =COM_COD_BENEFICIO AND
              TRUNC(BEN.COD_FCRUBRICA/100) =TRUNC(COM_COD_FCRUBRICA/100) AND
              BEN.FLG_STATUS='V'                   AND
              TO_DATE('01/'||TO_CHAR(BEN.DAT_INI_VIG,'MM/YYYY'),'DD/MM/YYYY') <=PAR_PER_PRO AND
              NVL(BEN.DAT_FIM_VIG,TO_DATE('01/01/2199','DD/MM/YYYY')  ) >PAR_PER_PRO;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          CALC_RUB := FALSE;
        WHEN OTHERS THEN
          CALC_RUB := FALSE;
      END;
  END SP_PROCESSA_RUBRICA_TETO;

   FUNCTION SP_OBTEM_HIST_PERC_BENEFICIO (P_COD_BENEFICIO IN NUMBER )
   RETURN NUMBER  IS  SQL_PERC_PENSAO NUMBER(18,6);
    BEGIN

      SQL_PERC_PENSAO:=100;
      BEGIN
        SELECT porcentagem
            INTO SQL_PERC_PENSAO
            FROM tb_hist_percentual_beneficio
           WHERE cod_ins = PAR_COD_INS
             AND cod_beneficio = P_COD_BENEFICIO
             AND  NVL(STATUS,'V') = 'V'
             AND (to_char(par_per_pro, 'YYYYMM') >=
                 to_char(DAT_INI_VIG, 'YYYYMM') AND
                 (par_per_pro <= DAT_FIM_VIG OR DAT_FIM_VIG is null))
             AND COM_APLICA_PROP_PENSAO = 'S';

        SQL_PERC_PENSAO  :=  SQL_PERC_PENSAO / 100;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            SQL_PERC_PENSAO:=1;
          WHEN OTHERS THEN
            p_sub_proc_erro := 'SP_OBTEM_HIST_PERCENTUAL_BENEFICIO';
            p_coderro       := SQLCODE;
            P_MSGERRO       := 'Erro ao obter o valor do percentual do beneficio';
            INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                  p_coderro,
                                  'Calcula Folha',
                                  sysdate,
                                  p_msgerro,
                                  p_sub_proc_erro,
                                  ANT_IDE_CLI ,
                                  COM_COD_FCRUBRICA);

            --            RAISE ERRO;
            SQL_PERC_PENSAO:=1;
            VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
        END;

        --TASK 3689 DALVES 19/07/2016
         RETURN( SQL_PERC_PENSAO );

    END SP_OBTEM_HIST_PERC_BENEFICIO;


PROCEDURE SP_OBTEM_BASE_IR_EXT(idx        in number,
                             tipo_irr   in varchar,
                             vi_base_ir out number,
                             base_ir_13 out number
                              ) as

    i           number := 0;
    j           number := 0;
    iver        number := 0;
    cod_ben_ant number := 0;
    cod_ben_atu number := 0;
    v_inicio    char(1) := 'S';
    DAT_INICIO_IRRF DATE:=NULL;
    DAT_TERMINO_IRRF DATE:=NULL;


  BEGIN
    BEGIN
      FOR i IN 1 .. cod_con2.count LOOP
        iver :=cod_con2.count;
        IF PAR_TIP_PRO <> 'E' THEN
          IF (par_tip_pro = 'T' OR   tipo_irr='D') AND flag_base2_ext(i) = 'S' THEN
            FOR j IN 1 .. idx LOOP

                 irdcn := case
                               when tipo_irr ='A' then  tdcn_irrf(j)
                               when tipo_irr ='R' then  tdcn_irrf_RETRO(j)
                               when tipo_irr ='D' then  tdcn_irrf_RETRO13(j)

                              else tdcn(j) end;
              IF irdcn.per_processo = PAR_PER_PRO THEN
                IF cod_rub2(i) = irdcn.cod_fcrubrica  THEN
                  IF ( tip_evento2(i) = 'T' or tipo_irr='D') AND irdcn.flg_natureza = 'C' THEN
                    base_ir_13 := nvl(base_ir_13, 0) + irdcn.val_rubrica;
                    IF V_CALCULO_IR = 'S' THEN
                      VI_BASE_IR_ARR_13(irdcn.cod_beneficio)(1) := VI_BASE_IR_ARR_13(irdcn.cod_beneficio)
                                                                   (1) +
                                                                   irdcn.val_rubrica;

                    END IF;
                  ELSIF ( tip_evento2(i) = 'T' or tipo_irr='D') AND irdcn.flg_natureza = 'D' THEN
                    IF irdcn.cod_fcrubrica<>1860702 THEN
                      base_ir_13 := nvl(base_ir_13, 0) - irdcn.val_rubrica;
                      IF V_CALCULO_IR = 'S' THEN
                        VI_BASE_IR_ARR_13(irdcn.cod_beneficio)(1) := VI_BASE_IR_ARR_13(irdcn.cod_beneficio)
                                                                     (1) -
                                                                     irdcn.val_rubrica;


                      END IF;
                    END IF;
                  END IF;
                END IF;
              END IF;
            END LOOP;
          ELSIF flag_base2_EXT(i) = 'S' THEN
            FOR j IN 1 .. idx LOOP
              irdcn := case
                               when tipo_irr ='A' then  tdcn_irrf(j)
                               when tipo_irr ='R' then  tdcn_irrf_RETRO(j)
                               when tipo_irr ='D' then  tdcn_irrf_RETRO13(j)

                               else tdcn(j) end;
              IF irdcn.per_processo = PAR_PER_PRO THEN
                IF cod_rub2(i) = irdcn.cod_fcrubrica /* AND
                   cod_entidade(i) = irdcn.cod_entidade */ THEN --ANT_ENTIDADE THEN
                  IF irdcn.flg_natureza = 'C'
                     -- Modificado por IR ACUMULADO
                     AND tip_evento_especial2(i) <> 'T' AND par_tip_pro <> 'T'
                    THEN
                    vi_base_ir := nvl(vi_base_ir, 0) + irdcn.val_rubrica;
                    IF V_CALCULO_IR = 'S' THEN
                      begin
                        VI_BASE_IR_ARR(irdcn.cod_beneficio)(1) := VI_BASE_IR_ARR(irdcn.cod_beneficio)
                                                                  (1) +
                                                                  irdcn.val_rubrica;



                         IF DAT_INICIO_IRRF IS NULL OR irdcn.dat_ini_ref <DAT_INICIO_IRRF THEN
                             DAT_INICIO_IRRF :=irdcn.dat_ini_ref ;
                          END IF;
                          IF DAT_TERMINO_IRRF   IS NULL OR irdcn.dat_fim_ref >DAT_TERMINO_IRRF   THEN
                           DAT_TERMINO_IRRF  :=irdcn.dat_FIM_ref ;
                          END IF;
                          IF  tipo_irr ='R' THEN
                            tdcn_irrf_RETRO(j).FLG_IR_ACUMULADO :='S';
                            tdcn(j).FLG_IR_ACUMULADO            :='S';
                          END IF;
                       exception
                        when others then
                          p_sub_proc_erro := 'SP_OBTEM_BASE_IR';
                          p_coderro       := SQLCODE;
                          P_MSGERRO       := 'Erro na inclusao do array da base de IR';
                          INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                                p_coderro,
                                                'Calcula Folha',
                                                sysdate,
                                                p_msgerro,
                                                p_sub_proc_erro,
                                                irdcn.cod_ide_cli,
                                                irdcn.cod_fcrubrica);

                          VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;

                      end;
                    END IF;
                  ELSIF tip_evento_especial2(i) <> 'T' AND
                        irdcn.flg_natureza = 'D' AND par_tip_pro <> 'T' THEN
                    vi_base_ir := nvl(vi_base_ir, 0) - irdcn.val_rubrica;
                    IF V_CALCULO_IR = 'S' THEN
                      begin
                        VI_BASE_IR_ARR(irdcn.cod_beneficio)(1) := VI_BASE_IR_ARR(irdcn.cod_beneficio)
                                                                  (1) -
                                                                  irdcn.val_rubrica;
                         IF DAT_INICIO_IRRF IS NULL OR irdcn.dat_ini_ref <DAT_INICIO_IRRF THEN
                             DAT_INICIO_IRRF :=irdcn.dat_ini_ref ;
                          END IF;
                          IF DAT_TERMINO_IRRF   IS NULL OR irdcn.dat_fim_ref >DAT_TERMINO_IRRF   THEN
                           DAT_TERMINO_IRRF  :=irdcn.dat_FIM_ref ;
                          END IF;
                          IF  tipo_irr ='R' THEN
                            tdcn_irrf_RETRO(j).FLG_IR_ACUMULADO :='S';
                            tdcn(j).FLG_IR_ACUMULADO            :='S';
                           END IF;
                     exception
                        when others then
                          p_sub_proc_erro := 'SP_OBTEM_BASE_IR';
                          p_coderro       := SQLCODE;
                          P_MSGERRO       := 'Erro na inclusao do array da base de IR';
                          INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                                p_coderro,
                                                'Calcula Folha',
                                                sysdate,
                                                p_msgerro,
                                                p_sub_proc_erro,
                                                irdcn.cod_ide_cli,
                                                irdcn.cod_fcrubrica);

                          VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
                      end;
                    END IF;
                  ELSE
                    base_ir_13 := nvl(base_ir_13, 0) + irdcn.val_rubrica;
                  END IF;
                END IF;
              END IF;
            END LOOP;
          ELSIF flag_base2_EXT(i) = 'N' AND tip_evento_especial2(i) = 'T' AND
                par_tip_pro <> 'T' THEN
            FOR j IN 1 .. idx LOOP
              irdcn := case
                               when tipo_irr ='A' then  tdcn_irrf(j)
                               when tipo_irr ='R' then  tdcn_irrf_RETRO(j)
                               when tipo_irr ='D' then  tdcn_irrf_RETRO13(j)

                                else tdcn(j) end;
              IF irdcn.per_processo = PAR_PER_PRO THEN
                IF cod_rub2(i) = irdcn.cod_fcrubrica  /* AND
                   cod_entidade(i) = irdcn.cod_entidade */ THEN --ANT_ENTIDADE THEN
                  base_ir_13 := nvl(base_ir_13, 0) + irdcn.val_rubrica;
                  VI_BASE_IR_ARR_13(irdcn.cod_beneficio)(1) := VI_BASE_IR_ARR_13(irdcn.cod_beneficio)
                                                               (1) +
                                                               irdcn.val_rubrica;
                END IF;
              END IF;
            END LOOP;
          END IF;
        ELSE
          IF flag_base2_EXT(i) = 'S' THEN
            FOR j IN 1 .. idx LOOP
               irdcn := case
                               when tipo_irr ='A' then  tdcn_irrf(j)
                               when tipo_irr ='R' then  tdcn_irrf_RETRO(j)
                               when tipo_irr ='D' then  tdcn_irrf_RETRO13(j)
                             else tdcn(j) end;
              IF irdcn.per_processo = PAR_PER_PRO THEN
                IF cod_rub2(i) = irdcn.cod_fcrubrica /* AND
                   cod_entidade(i) = irdcn.cod_entidade*/  THEN --ANT_ENTIDADE THEN
                  IF irdcn.flg_natureza = 'C' AND
                     tip_evento_especial2(i) <> 'T' THEN
                    vi_base_ir := nvl(vi_base_ir, 0) + irdcn.val_rubrica;
                    IF V_CALCULO_IR = 'S' THEN
                      IF v_inicio = 'S' THEN
                        VI_BASE_IR_ARR(irdcn.cod_beneficio)(1) := irdcn.val_rubrica;
                        v_inicio := 'N';
                      ELSE
                        VI_BASE_IR_ARR(irdcn.cod_beneficio)(1) := VI_BASE_IR_ARR(irdcn.cod_beneficio)
                                                                  (1) +
                                                                  irdcn.val_rubrica;
                      END IF;
                      IF DAT_INICIO_IRRF IS NULL OR irdcn.dat_ini_ref <DAT_INICIO_IRRF THEN
                         DAT_INICIO_IRRF :=irdcn.dat_ini_ref ;
                      END IF;
                      IF DAT_TERMINO_IRRF   IS NULL OR irdcn.dat_fim_ref >DAT_TERMINO_IRRF   THEN
                       DAT_TERMINO_IRRF  :=irdcn.dat_FIM_ref ;
                      END IF;

                    END IF;
                  ELSE
                    base_ir_13 := nvl(base_ir_13, 0) + irdcn.val_rubrica;
                  END IF;
                END IF;
              END IF;
            END LOOP;
          END IF;
        END IF;
      END LOOP;



      IF tipo_irr ='R' THEN
         DAT_INI_IRRF_RETRO  :=DAT_INICIO_IRRF;
         DAT_FIM_IRRF_RETRO  :=DAT_TERMINO_IRRF ;
      END IF;

       exception
        when others then
          p_sub_proc_erro := 'SP_OBTEM_BASE_IR_EXT';
          p_coderro       := SQLCODE;
          P_MSGERRO       := 'Erro no  IR Novo';
          INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                                p_coderro,
                                'Calcula Folha',
                                sysdate,
                                p_msgerro,
                                p_sub_proc_erro,
                                irdcn.cod_ide_cli,
                                irdcn.cod_fcrubrica);

       end;
   END sp_obtem_base_ir_ext;

--Funnção para identificar IR Externo

   ------------------ Calculo de Ir Externo -------------------

------- Task 37101 Contribuição previdencia ....

FUNCTION  SP_VERIFICA_PAG_PERIODOS
                     (
                       WS_PER_PRO         IN DATE    ,
                       WS_TIP_PRO         IN CHAR    ,
                       WS_SEQ_PAGAMENTO   IN NUMBER  ,
                       WS_COD_BENEFICIO   IN NUMBER  ,
                       WS_COD_IDE_CLI     IN NUMBER
                      ) RETURN NUMBER IS

 WS_QTD_PAGAMENTO  NUMBER;
 BEGIN

     BEGIN
        SELECT COUNT(*) INTO WS_QTD_PAGAMENTO FROM TB_HFOLHA FOL
        WHERE
                FOL.COD_INS       =  PAR_COD_INS       AND
                FOL.TIP_PROCESSO  =  WS_TIP_PRO        AND
                FOL.COD_BENEFICIO =  WS_COD_BENEFICIO  AND
                FOL.COD_IDE_CLI   =  WS_COD_IDE_CLI    AND
                FOL.PER_PROCESSO  =  WS_PER_PRO        AND
                FOL.TIP_PROCESSO  =  WS_TIP_PRO        AND
                FOL.SEQ_PAGAMENTO =  WS_SEQ_PAGAMENTO   ;
     END;
     IF  WS_QTD_PAGAMENTO > 0 THEN
         RETURN  (-1);
     ELSE
           BEGIN
                SELECT COUNT(*) INTO WS_QTD_PAGAMENTO FROM  TB_CRONOGRAMA_PAG PAG, 
                                TB_BENEFICIARIO  BEN   
                WHERE 
                PAG.COD_INS          =  PAR_COD_INS AND
                PAG.PER_PROCESSO     =  WS_PER_PRO  AND
                PAG.COD_TIP_PROCESSO =  WS_TIP_PRO  AND
                BEN.COD_INS          =  PAR_COD_INS AND
                BEN.COD_BENEFICIO    =  WS_COD_BENEFICIO AND
                BEN.COD_PROC_GRP_PAG =  PAG.NUM_GRP      AND
                PAG.FLG_STATUS       = 'A';
           END;
               IF  WS_QTD_PAGAMENTO > 0 THEN
                   RETURN  (0) ; 
               ELSE
                 RETURN  (-1);
               END IF;
     END IF;

END;

 ------- Task 37101 Contribuição previdencia ..... 
 PROCEDURE  SP_ATUALIZA_TOTAIS_FOLHA_ACUM ( 
                     I_COD_INS       IN NUMBER,
                     I_TIP_PROCESSO  IN VARCHAR,
                     I_PER_PROCESSO  IN DATE,
                     I_SEQ_PAGAMENTO IN NUMBER,
                     I_COD_IDE_CLI   IN VARCHAR, 
                     I_COD_BENEFICIO IN NUMBER     
  
  ) AS
  BEGIN
      BEGIN
        
      ----- Atualiza Creditos e Debitos -------
       SP_OBTEM_TIPO_BENEFICIO( I_COD_BENEFICIO);
   
       IF COM_TIP_BENEFICIO = 'APOSENTADO' THEN        
           UPDATE   TB_FOLHA F
                     SET 
                     F.FLG_IND_ANALISE = 'R',
                     F.TOT_DEB=(
                             SELECT  
                                    ABS(SUM(DECODE(D.FLG_NATUREZA,
                                                   'C',
                                                   D.VAL_RUBRICA,
                                                   D.VAL_RUBRICA * -1))) VALOR
                               FROM TB_DET_CALCULADO D,   TB_CONCESSAO_BENEFICIO CC
                               WHERE  D.COD_INS         = F.COD_INS
                                AND D.TIP_PROCESSO    = F.TIP_PROCESSO
                                AND D.PER_PROCESSO    = F.PER_PROCESSO
                                AND D.COD_IDE_CLI     = F.COD_IDE_CLI
                                AND D.COD_BENEFICIO   = F.COD_BENEFICIO
                                --------------------------------------------
                                AND CC.COD_INS        = F.COD_INS
                                AND CC.COD_BENEFICIO  = F.COD_BENEFICIO
                                AND EXISTS (SELECT 1
                                       FROM TB_COMPOE_DET P
                                      WHERE P.COD_VARIAVEL            = DECODE(CC.COD_TIPO_BENEFICIO,'M','TOT_DEBIT','TOT_DEBIT_A')
                                        AND P.COD_ENTIDADE_COMPOSTA  = CC.COD_ENTIDADE
                                        AND P.COD_FCRUBRICA_COMPOSTA = 99600
                                        AND P.COD_FCRUBRICA_COMPOE   = D.COD_FCRUBRICA
                                         )
                                   ),
                                   
                   F.TOT_CRED=(
                             SELECT  
                                    ABS(SUM(DECODE(D.FLG_NATUREZA,
                                                   'C',
                                                   D.VAL_RUBRICA,
                                                   D.VAL_RUBRICA * -1))) VALOR
                               FROM TB_DET_CALCULADO D,   TB_CONCESSAO_BENEFICIO CC
                               WHERE  D.COD_INS         = F.COD_INS
                                AND D.TIP_PROCESSO    = F.TIP_PROCESSO
                                AND D.PER_PROCESSO    = F.PER_PROCESSO
                                AND D.COD_IDE_CLI     = F.COD_IDE_CLI
                                AND D.COD_BENEFICIO   = F.COD_BENEFICIO
                                --------------------------------------------
                                AND CC.COD_INS        = F.COD_INS
                                AND CC.COD_BENEFICIO  = F.COD_BENEFICIO
                                AND EXISTS (SELECT 1
                                       FROM TB_COMPOE_DET P
                                      WHERE P.COD_VARIAVEL           = DECODE(CC.COD_TIPO_BENEFICIO,'M','TOT_CRED','TOT_CRED_A')
                                        AND P.COD_ENTIDADE_COMPOSTA  = CC.COD_ENTIDADE
                                        AND P.COD_FCRUBRICA_COMPOSTA = 99500
                                        AND P.COD_FCRUBRICA_COMPOE   = D.COD_FCRUBRICA
                                         )
                                   ) 
                                    
                         WHERE      F.COD_INS         = I_COD_INS
                                AND F.TIP_PROCESSO    = I_TIP_PROCESSO
                                AND F.PER_PROCESSO    = I_PER_PROCESSO
                                AND F.COD_IDE_CLI     = I_COD_IDE_CLI 
                                AND F.COD_BENEFICIO   = I_COD_BENEFICIO;

               UPDATE   TB_FOLHA F
                     SET  F.VAL_LIQUIDO=F.TOT_CRED-F.TOT_DEB
                          WHERE     F.COD_INS         = I_COD_INS
                                AND F.TIP_PROCESSO    = I_TIP_PROCESSO
                                AND F.PER_PROCESSO    = I_PER_PROCESSO
                                AND F.COD_IDE_CLI     = I_COD_IDE_CLI 
                                AND F.COD_BENEFICIO   = I_COD_BENEFICIO;
 
    
       ELSE
           UPDATE   TB_FOLHA F
                     SET 
                     F.FLG_IND_ANALISE = 'R',
                     F.TOT_DEB=(
                             SELECT  
                                    ABS(SUM(DECODE(D.FLG_NATUREZA,
                                                   'C',
                                                   D.VAL_RUBRICA,
                                                   D.VAL_RUBRICA * -1))) VALOR
                               FROM TB_DET_CALCULADO D,   TB_CONCESSAO_BENEFICIO CC
                               WHERE  D.COD_INS         = F.COD_INS
                                AND D.TIP_PROCESSO    = F.TIP_PROCESSO
                                AND D.PER_PROCESSO    = F.PER_PROCESSO
                                AND D.COD_IDE_CLI     = F.COD_IDE_CLI
                                AND D.COD_BENEFICIO   = F.COD_BENEFICIO
                                --------------------------------------------
                                AND CC.COD_INS        = F.COD_INS
                                AND CC.COD_BENEFICIO  = F.COD_BENEFICIO
                                AND EXISTS (SELECT 1
                                       FROM TB_COMPOE_DET P
                                      WHERE P.COD_VARIAVEL            = DECODE(CC.COD_TIPO_BENEFICIO,'M','TOT_DEBIT','TOT_DEBIT_A')
                                        AND P.COD_ENTIDADE_COMPOSTA  = CC.COD_ENTIDADE
                                        AND P.COD_FCRUBRICA_COMPOSTA = 99800
                                        AND P.COD_FCRUBRICA_COMPOE   = D.COD_FCRUBRICA
                                         )
                                   ),
                                   
                   F.TOT_CRED=(
                             SELECT  
                                    ABS(SUM(DECODE(D.FLG_NATUREZA,
                                                   'C',
                                                   D.VAL_RUBRICA,
                                                   D.VAL_RUBRICA * -1))) VALOR
                               FROM TB_DET_CALCULADO D,   TB_CONCESSAO_BENEFICIO CC
                               WHERE  D.COD_INS         = F.COD_INS
                                AND D.TIP_PROCESSO    = F.TIP_PROCESSO
                                AND D.PER_PROCESSO    = F.PER_PROCESSO
                                AND D.COD_IDE_CLI     = F.COD_IDE_CLI
                                AND D.COD_BENEFICIO   = F.COD_BENEFICIO
                                --------------------------------------------
                                AND CC.COD_INS        = F.COD_INS
                                AND CC.COD_BENEFICIO  = F.COD_BENEFICIO
                                AND EXISTS (SELECT 1
                                       FROM TB_COMPOE_DET P
                                      WHERE P.COD_VARIAVEL           = DECODE(CC.COD_TIPO_BENEFICIO,'M','TOT_CRED','TOT_CRED_A')
                                        AND P.COD_ENTIDADE_COMPOSTA  = CC.COD_ENTIDADE
                                        AND P.COD_FCRUBRICA_COMPOSTA = 99700
                                        AND P.COD_FCRUBRICA_COMPOE   = D.COD_FCRUBRICA
                                         )
                                   ) 
                                    
                         WHERE      F.COD_INS         = I_COD_INS
                                AND F.TIP_PROCESSO    = I_TIP_PROCESSO
                                AND F.PER_PROCESSO    = I_PER_PROCESSO
                                AND F.COD_IDE_CLI     = I_COD_IDE_CLI 
                                AND F.COD_BENEFICIO   = I_COD_BENEFICIO;

               UPDATE   TB_FOLHA F
                     SET  F.VAL_LIQUIDO=F.TOT_CRED-F.TOT_DEB
                          WHERE     F.COD_INS         = I_COD_INS
                                AND F.TIP_PROCESSO    = I_TIP_PROCESSO
                                AND F.PER_PROCESSO    = I_PER_PROCESSO
                                AND F.COD_IDE_CLI     = I_COD_IDE_CLI 
                                AND F.COD_BENEFICIO   = I_COD_BENEFICIO;
 
       END IF;
       
      EXCEPTION
      WHEN OTHERS THEN
        p_sub_proc_erro := 'SP_ATUALIZA_TB_FOLHA';
        p_coderro       := SQLCODE;
        P_MSGERRO       := 'Erro :'||sqlerrm;
        INCLUI_LOG_ERRO_FOLHA(par_cod_ins,
                              p_coderro,
                              'Atualiza Totais  Mes',
                              sysdate,
                              p_msgerro,
                              p_sub_proc_erro,
                              I_COD_IDE_CLI ,
                              NULL);
        VI_QTD_ERROS := nvl(VI_QTD_ERROS, 0) + 1;
    END;
  END  SP_ATUALIZA_TOTAIS_FOLHA_ACUM ;

 END  PAC_FOLHA_CALCULADA_NOVO_HCAL;
/
